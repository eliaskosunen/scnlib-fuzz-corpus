_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  4.86M|{
 4068|  4.86M|    if constexpr (sizeof(U) == 1) {
 4069|  4.86M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  4.86M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  4.86M|{
 4032|  4.86M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  4.86M|    SCN_GCC_COMPAT_PUSH
 4035|  4.86M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  4.86M|    constexpr char lengths[] =
 4037|  4.86M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  4.86M|        "\1\1\1\1\1\1\1\1"
 4039|  4.86M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  4.86M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  4.86M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  4.86M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  4.86M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  4.86M|    SCN_GCC_COMPAT_POP
 4046|  4.86M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  4.78M|{
 4274|  4.78M|    if constexpr (sizeof(CharT) == 1) {
 4275|  4.78M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  4.78M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  4.78M|{
 4087|  4.78M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  4.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  4.78M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  4.78M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  4.78M|    };
 4092|       |
 4093|  4.78M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 4.74M, False: 39.3k]
  ------------------
 4094|  4.74M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 2.08k, False: 4.73M]
  ------------------
 4095|  2.08k|            SCN_UNLIKELY_ATTR
 4096|  2.08k|            return invalid_code_point;
 4097|  2.08k|        }
 4098|  4.73M|        return static_cast<char32_t>(input[0]);
 4099|  4.74M|    }
 4100|       |
 4101|  39.3k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 20.7k, False: 18.5k]
  ------------------
 4102|  20.7k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 85, False: 20.7k]
  ------------------
 4103|     85|            SCN_UNLIKELY_ATTR
 4104|     85|            return invalid_code_point;
 4105|     85|        }
 4106|  20.7k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 5.57k, False: 15.1k]
  ------------------
 4107|  5.57k|            SCN_UNLIKELY_ATTR
 4108|  5.57k|            return invalid_code_point;
 4109|  5.57k|        }
 4110|       |
 4111|  15.1k|        char32_t cp{};
 4112|  15.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  15.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  15.1k|        return cp;
 4115|  20.7k|    }
 4116|       |
 4117|  18.5k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 13.6k, False: 4.92k]
  ------------------
 4118|  13.6k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 53, False: 13.5k]
  ------------------
 4119|     53|            SCN_UNLIKELY_ATTR
 4120|     53|            return invalid_code_point;
 4121|     53|        }
 4122|  13.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 1.69k, False: 11.8k]
  ------------------
 4123|  13.5k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 363, False: 11.4k]
  ------------------
 4124|  2.06k|            SCN_UNLIKELY_ATTR
 4125|  2.06k|            return invalid_code_point;
 4126|  2.06k|        }
 4127|       |
 4128|  11.4k|        char32_t cp{};
 4129|  11.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  11.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  11.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  11.4k|        return cp;
 4133|  13.5k|    }
 4134|       |
 4135|  4.92k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 4.92k, False: 0]
  ------------------
 4136|  4.92k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 4.92k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  4.92k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 1.12k, False: 3.79k]
  ------------------
 4141|  1.12k|            SCN_UNLIKELY_ATTR
 4142|  1.12k|            return invalid_code_point;
 4143|  1.12k|        }
 4144|  3.79k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 1.71k, False: 2.08k]
  ------------------
 4145|  3.79k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 13, False: 2.07k]
  ------------------
 4146|  3.79k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 11, False: 2.05k]
  ------------------
 4147|  1.73k|            SCN_UNLIKELY_ATTR
 4148|  1.73k|            return invalid_code_point;
 4149|  1.73k|        }
 4150|       |
 4151|  2.05k|        char32_t cp{};
 4152|  2.05k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  2.05k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  2.05k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  2.05k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  2.05k|        return cp;
 4157|  3.79k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  54.0k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  54.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  54.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  3.10M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  3.10M|    else {
 3966|  3.10M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  3.10M|                                       to_address(first), to_address(last)))};
 3968|  3.10M|    }
 3969|  3.10M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  9.35M|{
  316|  9.35M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  9.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  9.35M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  24.1M|{
  294|  24.1M|    return p;
  295|  24.1M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  7.28M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  7.28M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  7.28M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  7.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  7.28M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  7.28M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   264k|    {
 2869|   264k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   264k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   264k|    {
 2850|   264k|        return decay_copy(t.begin());
 2851|   264k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  22.5M|{
 2094|  22.5M|    return SCN_FWD(t);
  ------------------
  |  |  936|  22.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  22.5M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.56M|    {
 2926|  4.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.56M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.56M|    {
 2908|  4.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.56M|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   157k|{
 9375|   157k|    auto result = make_scan_result<Source, Args...>();
 9376|   157k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   157k|                                   make_scan_args(result->values())));
 9378|   157k|    return result;
 9379|   157k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9330|   341k|{
 9331|   341k|    return scan_result_type<Source, Args...>();
 9332|   341k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|   341k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|   341k|        : m_value(T{}), m_has_value(true)
  427|   341k|    {
  428|   341k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6264|   341k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6107|  2.27M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  2.27M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6038|   860k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   341k|{
 9316|   341k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 297k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   297k|    else {
 9320|   297k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   297k|    static_cast<    \
  |  |  935|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   297k|    }
 9322|   341k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  2.27M|    {
 1740|  2.27M|        return has_value();
 1741|  2.27M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.55M|    {
  490|  4.55M|        return m_has_value;
  491|  4.55M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|   262k|    {
 1746|   262k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   262k|        return this->get_unexpected().error();
 1748|   262k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   262k|    {
  473|   262k|        return m_unexpected;
  474|   262k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  17.8M|    {
  365|  17.8M|        return m_unexpected;
  366|  17.8M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  7.94M|        : m_unexpected(std::forward<Err>(e))
  350|  7.94M|    {
  351|  7.94M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  7.94M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  7.94M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.2M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.2M|    {
  360|  10.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.2M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.36M|    {
  490|  1.36M|        return m_has_value;
  491|  1.36M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   937k|    {
  456|   937k|        return m_value;
  457|   937k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|  1.57M|{
  396|  1.57M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  1.57M|        T(std::forward<Args>(args)...);
  398|  1.57M|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6138|  2.01M|    {
 6139|  2.01M|        m_range = std::forward<Other>(r);
 6140|  2.01M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  2.01M|    {
 1795|  2.01M|        return value();
 1796|  2.01M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.01M|    {
 1769|  2.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.01M|        return this->get_value();
 1771|  2.01M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.01M|    {
  456|  2.01M|        return m_value;
  457|  2.01M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9154|  1.05M|{
 9155|  1.05M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|  1.05M|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|  1.05M|{
 9092|  1.05M|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  1.05M|    auto result = vscan_impl(buffer, format, args);
 9095|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 125k, False: 932k]
  |  |  ------------------
  ------------------
 9096|   125k|        return unexpected(result.error());
 9097|   125k|    }
 9098|   932k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   932k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  1.05M|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5074|  2.27M|{
 5075|  2.27M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  2.27M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  2.27M|                  "\n"
 5079|  2.27M|                  "Unsupported range type given as input to a scanning "
 5080|  2.27M|                  "function.\n"
 5081|  2.27M|                  "A range needs to have a character type (value type) "
 5082|  2.27M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  2.27M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  2.27M|                  "to be included.\n"
 5085|  2.27M|                  "See the scnlib documentation for more details.");
 5086|  2.27M|    static_assert(
 5087|  2.27M|        !std::is_same_v<T, custom_char_traits>,
 5088|  2.27M|        "\n"
 5089|  2.27M|        "Unsupported range type given as input to a scanning "
 5090|  2.27M|        "function.\n"
 5091|  2.27M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  2.27M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  2.27M|        "not supported.");
 5094|  2.27M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  2.27M|                  "\n"
 5096|  2.27M|                  "Unsupported range type given as input to a scanning "
 5097|  2.27M|                  "function.\n"
 5098|  2.27M|                  "file_marker_found cannot be used as an "
 5099|  2.27M|                  "source range type to scn::scan.\n"
 5100|  2.27M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  2.27M|                  "and do not provide an explicit source range, "
 5102|  2.27M|                  "or use scn::scan with a FILE* directly.");
 5103|  2.27M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  2.27M|                  "\n"
 5105|  2.27M|                  "Unsupported range type given as input to a scanning "
 5106|  2.27M|                  "function.\n"
 5107|  2.27M|                  "In order to be scannable, a range needs to satisfy "
 5108|  2.27M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  2.27M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  2.27M|                  "\n"
 5111|  2.27M|                  "Unsupported range type given as input to a scanning "
 5112|  2.27M|                  "function.\n"
 5113|  2.27M|                  "A range needs to model forward_range and have a valid "
 5114|  2.27M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  2.27M|                  "Examples of scannable ranges are std::string, "
 5116|  2.27M|                  "std::string_view, "
 5117|  2.27M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  2.27M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  2.27M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  2.27M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|  2.27M|{
 5014|  2.27M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|  2.27M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|  2.27M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.27M|    {
 3000|  2.27M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.27M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.27M|    {
 2981|  2.27M|        return t.data();
 2982|  2.27M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  2.27M|    {
 3383|  2.27M|        return detail::to_address(ranges::begin(derived()));
 3384|  2.27M|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  14.8M|{
  316|  14.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  14.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  14.8M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.29M|    {
 2869|  4.29M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.29M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.29M|    {
 2850|  4.29M|        return decay_copy(t.begin());
 2851|  4.29M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  42.1M|    {
 3480|  42.1M|        return m_iterator;
 3481|  42.1M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  2.27M|    {
 3339|  2.27M|        return static_cast<const D&>(*this);
 3340|  2.27M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  2.27M|    {
 3075|  2.27M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.27M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.27M|    {
 3041|  2.27M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.27M|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.66M|{
 2094|  5.66M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.66M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  9.88M|    {
 3496|  9.88M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  9.88M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  8.43M|    {
 1740|  8.43M|        return has_value();
 1741|  8.43M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  16.0M|    {
  490|  16.0M|        return m_has_value;
  491|  16.0M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.57M|    {
 1746|  1.57M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.57M|        return this->get_unexpected().error();
 1748|  1.57M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.57M|    {
  473|  1.57M|        return m_unexpected;
  474|  1.57M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   262k|        : base(unexpect, std::move(e.error())),
 1616|   262k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   262k|    {
 1618|   262k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   262k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   262k|          m_has_value(false)
  451|   262k|    {
  452|   262k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.27M|    {
 1316|  2.27M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|  2.01M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  2.01M|                      ranges::iterator_t<SourceRange>>) {
 6371|  2.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  2.01M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  11.3M|    {
 2869|  11.3M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  11.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  11.3M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  11.3M|    {
 2850|  11.3M|        return decay_copy(t.begin());
 2851|  11.3M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6355|  2.01M|{
 6356|  2.01M|    return ranges::end(source);
 6357|  2.01M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.01M|    {
 2926|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.01M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.01M|    {
 2908|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.01M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  29.4M|    {
 3484|  29.4M|        return m_sentinel;
 3485|  29.4M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  6.07M|    {
 1795|  6.07M|        return value();
 1796|  6.07M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  6.07M|    {
 1769|  6.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.07M|        return this->get_value();
 1771|  6.07M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  6.07M|    {
  456|  6.07M|        return m_value;
  457|  6.07M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.01M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.01M|    {
 1572|  2.01M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  2.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.01M|    {
  442|  2.01M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   315k|    {
 8462|   315k|        return m_str;
 8463|   315k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   631k|{
 5804|   631k|    detail::check_scan_arg_types<Args...>();
 5805|   631k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   631k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5518|   860k|{
 5519|   860k|    constexpr bool default_constructible_constraint =
 5520|   860k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   860k|    static_assert(default_constructible_constraint,
 5522|   860k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   860k|    constexpr bool destructible_constraint =
 5525|   860k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   860k|    static_assert(destructible_constraint,
 5527|   860k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   860k|    constexpr bool non_reference_constraint =
 5530|   860k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   860k|    static_assert(non_reference_constraint,
 5532|   860k|                  "Scan argument types must not be references");
 5533|       |
 5534|   860k|    constexpr bool movable_constraint =
 5535|   860k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   860k|    static_assert(movable_constraint,
 5537|   860k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   860k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   860k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   860k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 5779|   631k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   631k|    {
 5781|   631k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   631k|    {
 5789|   631k|        return {detail::make_arg<
 5790|   631k|            kind, Context,
 5791|   631k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   631k|                                 typename Context::char_type>::value>(args)...};
 5793|   631k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5568|   631k|{
 5569|   631k|    return make_value<Context>(value).ref_value;
 5570|   631k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5503|   684k|{
 5504|   684k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   684k|                                  needs_context_tag>) {
 5508|   684k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   684k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5342|   684k|    {                                                                        \
 5343|   684k|        return val;                                                          \
 5344|   684k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5472|   860k|{
 5473|   860k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   860k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   860k|    constexpr bool scannable_char =
 5477|   860k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   860k|    static_assert(scannable_char,
 5479|   860k|                  "Cannot scan an argument of an unsupported character "
 5480|   860k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   860k|    constexpr bool scannable_const =
 5483|   860k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   860k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   860k|    constexpr bool scannable_disabled =
 5487|   860k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   860k|    static_assert(scannable_disabled,
 5489|   860k|                  "Cannot scan an argument that has been disabled by "
 5490|   860k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   860k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   860k|    static_assert(
 5494|   860k|        scannable,
 5495|   860k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   860k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   860k|    return arg_value{arg};
 5499|   860k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5256|   860k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   860k|    {
 5258|   860k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6047|   799k|    {
 6048|   799k|        return m_values;
 6049|   799k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   631k|        : basic_scan_args(store.desc, store.args.data())
 5830|   631k|    {
 5831|   631k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 5881|  4.23M|        : m_desc(desc), m_builtin_values(data)
 5882|  4.23M|    {
 5883|  4.23M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  21.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  21.8M|    static_cast<    \
  |  |  935|  21.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  21.8M|    static_cast<    \
  |  |  935|  21.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  21.8M|    {
 3466|  21.8M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8134|  4.23M|{
 8135|  4.23M|    return s;
 8136|  4.23M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8111|  4.23M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   315k|        : m_str(r.str)
 8457|   315k|    {
 8458|   315k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|   341k|    {
 1740|   341k|        return has_value();
 1741|   341k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|   937k|    {
 1815|   937k|        return &value();
 1816|   937k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   937k|    {
 1769|   937k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   937k|        return this->get_value();
 1771|   937k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6127|  2.01M|    {
 6128|  2.01M|        return ranges::begin(m_range);
 6129|  2.01M|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   157k|{
 9444|   157k|    auto result = make_scan_result<Source, Args...>();
 9445|   157k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   157k|                                   make_scan_args(result->values())));
 9447|   157k|    return result;
 9448|   157k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9172|  1.05M|{
 9173|  1.05M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|  1.05M|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|  1.05M|{
 9108|  1.05M|#if !SCN_DISABLE_LOCALE
 9109|  1.05M|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  1.05M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  1.05M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  1.05M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  1.05M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 125k, False: 932k]
  |  |  ------------------
  ------------------
 9116|   125k|        return unexpected(result.error());
 9117|   125k|    }
 9118|   932k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   932k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  1.05M|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  26.4k|{
 9485|  26.4k|    auto result = make_scan_result<Source, T>();
 9486|  26.4k|    fill_scan_result(
 9487|  26.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.4k|    return result;
 9490|  26.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9185|   164k|{
 9186|   164k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|   164k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   164k|{
 9132|   164k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   164k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   164k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 152k]
  |  |  ------------------
  ------------------
 9136|  12.5k|        return unexpected(result.error());
 9137|  12.5k|    }
 9138|   152k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   164k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5553|  52.8k|{
 5554|  52.8k|    check_scan_arg_types<T>();
 5555|       |
 5556|  52.8k|    basic_scan_arg<Context> arg;
 5557|  52.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  52.8k|    arg.m_value = make_value<Context>(value);
 5559|  52.8k|    return arg;
 5560|  52.8k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5648|  4.56M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5253|  5.62M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  61.3k|    {
 6070|  61.3k|        return std::get<0>(m_values);
 6071|  61.3k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   152k|{
 9375|   152k|    auto result = make_scan_result<Source, Args...>();
 9376|   152k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   152k|                                   make_scan_args(result->values())));
 9378|   152k|    return result;
 9379|   152k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9330|   327k|{
 9331|   327k|    return scan_result_type<Source, Args...>();
 9332|   327k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|   327k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|   327k|        : m_value(T{}), m_has_value(true)
  427|   327k|    {
  428|   327k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6264|   327k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6038|   833k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   327k|{
 9316|   327k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 284k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   284k|    else {
 9320|   284k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   284k|    static_cast<    \
  |  |  935|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   284k|    }
 9322|   327k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.31M|    {
  490|  1.31M|        return m_has_value;
  491|  1.31M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   896k|    {
  456|   896k|        return m_value;
  457|   896k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   304k|    {
 8462|   304k|        return m_str;
 8463|   304k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   609k|{
 5804|   609k|    detail::check_scan_arg_types<Args...>();
 5805|   609k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   609k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5518|   833k|{
 5519|   833k|    constexpr bool default_constructible_constraint =
 5520|   833k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   833k|    static_assert(default_constructible_constraint,
 5522|   833k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   833k|    constexpr bool destructible_constraint =
 5525|   833k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   833k|    static_assert(destructible_constraint,
 5527|   833k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   833k|    constexpr bool non_reference_constraint =
 5530|   833k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   833k|    static_assert(non_reference_constraint,
 5532|   833k|                  "Scan argument types must not be references");
 5533|       |
 5534|   833k|    constexpr bool movable_constraint =
 5535|   833k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   833k|    static_assert(movable_constraint,
 5537|   833k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   833k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   833k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   833k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 5779|   609k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   609k|    {
 5781|   609k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   609k|    {
 5789|   609k|        return {detail::make_arg<
 5790|   609k|            kind, Context,
 5791|   609k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   609k|                                 typename Context::char_type>::value>(args)...};
 5793|   609k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5568|   609k|{
 5569|   609k|    return make_value<Context>(value).ref_value;
 5570|   609k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5503|   656k|{
 5504|   656k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   656k|                                  needs_context_tag>) {
 5508|   656k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   656k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   656k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5342|   656k|    {                                                                        \
 5343|   656k|        return val;                                                          \
 5344|   656k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5472|   833k|{
 5473|   833k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   833k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   833k|    constexpr bool scannable_char =
 5477|   833k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   833k|    static_assert(scannable_char,
 5479|   833k|                  "Cannot scan an argument of an unsupported character "
 5480|   833k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   833k|    constexpr bool scannable_const =
 5483|   833k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   833k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   833k|    constexpr bool scannable_disabled =
 5487|   833k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   833k|    static_assert(scannable_disabled,
 5489|   833k|                  "Cannot scan an argument that has been disabled by "
 5490|   833k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   833k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   833k|    static_assert(
 5494|   833k|        scannable,
 5495|   833k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   833k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   833k|    return arg_value{arg};
 5499|   833k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5256|   833k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   833k|    {
 5258|   833k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6047|   777k|    {
 6048|   777k|        return m_values;
 6049|   777k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   609k|        : basic_scan_args(store.desc, store.args.data())
 5830|   609k|    {
 5831|   609k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   304k|        : m_str(r.str)
 8457|   304k|    {
 8458|   304k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|   327k|    {
 1740|   327k|        return has_value();
 1741|   327k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|   896k|    {
 1815|   896k|        return &value();
 1816|   896k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   896k|    {
 1769|   896k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   896k|        return this->get_value();
 1771|   896k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   152k|{
 9444|   152k|    auto result = make_scan_result<Source, Args...>();
 9445|   152k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   152k|                                   make_scan_args(result->values())));
 9447|   152k|    return result;
 9448|   152k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  23.5k|{
 9485|  23.5k|    auto result = make_scan_result<Source, T>();
 9486|  23.5k|    fill_scan_result(
 9487|  23.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  23.5k|                            detail::make_arg<scan_context>(result->value())));
 9489|  23.5k|    return result;
 9490|  23.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5553|  46.9k|{
 5554|  46.9k|    check_scan_arg_types<T>();
 5555|       |
 5556|  46.9k|    basic_scan_arg<Context> arg;
 5557|  46.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  46.9k|    arg.m_value = make_value<Context>(value);
 5559|  46.9k|    return arg;
 5560|  46.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  55.4k|    {
 6070|  55.4k|        return std::get<0>(m_values);
 6071|  55.4k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   198k|{
 9375|   198k|    auto result = make_scan_result<Source, Args...>();
 9376|   198k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   198k|                                   make_scan_args(result->values())));
 9378|   198k|    return result;
 9379|   198k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9330|   428k|{
 9331|   428k|    return scan_result_type<Source, Args...>();
 9332|   428k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|   428k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|   428k|        : m_value(T{}), m_has_value(true)
  427|   428k|    {
  428|   428k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6264|   428k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6038|  1.03M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   428k|{
 9316|   428k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 384k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   384k|    else {
 9320|   384k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   384k|    static_cast<    \
  |  |  935|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   384k|    }
 9322|   428k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.71M|    {
  490|  1.71M|        return m_has_value;
  491|  1.71M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.19M|    {
  456|  1.19M|        return m_value;
  457|  1.19M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   397k|    {
 8462|   397k|        return m_str;
 8463|   397k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   796k|{
 5804|   796k|    detail::check_scan_arg_types<Args...>();
 5805|   796k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   796k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5518|  1.03M|{
 5519|  1.03M|    constexpr bool default_constructible_constraint =
 5520|  1.03M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  1.03M|    static_assert(default_constructible_constraint,
 5522|  1.03M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  1.03M|    constexpr bool destructible_constraint =
 5525|  1.03M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  1.03M|    static_assert(destructible_constraint,
 5527|  1.03M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  1.03M|    constexpr bool non_reference_constraint =
 5530|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  1.03M|    static_assert(non_reference_constraint,
 5532|  1.03M|                  "Scan argument types must not be references");
 5533|       |
 5534|  1.03M|    constexpr bool movable_constraint =
 5535|  1.03M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  1.03M|    static_assert(movable_constraint,
 5537|  1.03M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  1.03M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  1.03M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  1.03M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 5779|   796k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   796k|    {
 5781|   796k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   796k|    {
 5789|   796k|        return {detail::make_arg<
 5790|   796k|            kind, Context,
 5791|   796k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   796k|                                 typename Context::char_type>::value>(args)...};
 5793|   796k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5568|   796k|{
 5569|   796k|    return make_value<Context>(value).ref_value;
 5570|   796k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5503|   857k|{
 5504|   857k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   857k|                                  needs_context_tag>) {
 5508|   857k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   857k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   857k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5342|   857k|    {                                                                        \
 5343|   857k|        return val;                                                          \
 5344|   857k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5472|  1.03M|{
 5473|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  1.03M|    constexpr bool scannable_char =
 5477|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  1.03M|    static_assert(scannable_char,
 5479|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5480|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  1.03M|    constexpr bool scannable_const =
 5483|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  1.03M|    constexpr bool scannable_disabled =
 5487|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  1.03M|    static_assert(scannable_disabled,
 5489|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5490|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  1.03M|    static_assert(
 5494|  1.03M|        scannable,
 5495|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  1.03M|    return arg_value{arg};
 5499|  1.03M|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5256|  1.03M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  1.03M|    {
 5258|  1.03M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6047|   964k|    {
 6048|   964k|        return m_values;
 6049|   964k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   796k|        : basic_scan_args(store.desc, store.args.data())
 5830|   796k|    {
 5831|   796k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   397k|        : m_str(r.str)
 8457|   397k|    {
 8458|   397k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|   428k|    {
 1740|   428k|        return has_value();
 1741|   428k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  1.19M|    {
 1815|  1.19M|        return &value();
 1816|  1.19M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.19M|    {
 1769|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.19M|        return this->get_value();
 1771|  1.19M|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   198k|{
 9444|   198k|    auto result = make_scan_result<Source, Args...>();
 9445|   198k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   198k|                                   make_scan_args(result->values())));
 9447|   198k|    return result;
 9448|   198k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  30.6k|{
 9485|  30.6k|    auto result = make_scan_result<Source, T>();
 9486|  30.6k|    fill_scan_result(
 9487|  30.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  30.6k|                            detail::make_arg<scan_context>(result->value())));
 9489|  30.6k|    return result;
 9490|  30.6k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5553|  60.7k|{
 5554|  60.7k|    check_scan_arg_types<T>();
 5555|       |
 5556|  60.7k|    basic_scan_arg<Context> arg;
 5557|  60.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  60.7k|    arg.m_value = make_value<Context>(value);
 5559|  60.7k|    return arg;
 5560|  60.7k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  69.1k|    {
 6070|  69.1k|        return std::get<0>(m_values);
 6071|  69.1k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   171k|{
 9375|   171k|    auto result = make_scan_result<Source, Args...>();
 9376|   171k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   171k|                                   make_scan_args(result->values())));
 9378|   171k|    return result;
 9379|   171k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9330|   369k|{
 9331|   369k|    return scan_result_type<Source, Args...>();
 9332|   369k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|   369k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|   369k|        : m_value(T{}), m_has_value(true)
  427|   369k|    {
  428|   369k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6264|   369k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6038|   917k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   369k|{
 9316|   369k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 326k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   326k|    else {
 9320|   326k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   326k|    static_cast<    \
  |  |  935|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   326k|    }
 9322|   369k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.02M|    {
  456|  1.02M|        return m_value;
  457|  1.02M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   343k|    {
 8462|   343k|        return m_str;
 8463|   343k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   689k|{
 5804|   689k|    detail::check_scan_arg_types<Args...>();
 5805|   689k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   689k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5518|   917k|{
 5519|   917k|    constexpr bool default_constructible_constraint =
 5520|   917k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   917k|    static_assert(default_constructible_constraint,
 5522|   917k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   917k|    constexpr bool destructible_constraint =
 5525|   917k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   917k|    static_assert(destructible_constraint,
 5527|   917k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   917k|    constexpr bool non_reference_constraint =
 5530|   917k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   917k|    static_assert(non_reference_constraint,
 5532|   917k|                  "Scan argument types must not be references");
 5533|       |
 5534|   917k|    constexpr bool movable_constraint =
 5535|   917k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   917k|    static_assert(movable_constraint,
 5537|   917k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   917k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   917k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   917k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 5779|   689k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   689k|    {
 5781|   689k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   689k|    {
 5789|   689k|        return {detail::make_arg<
 5790|   689k|            kind, Context,
 5791|   689k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   689k|                                 typename Context::char_type>::value>(args)...};
 5793|   689k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5568|   689k|{
 5569|   689k|    return make_value<Context>(value).ref_value;
 5570|   689k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5503|   741k|{
 5504|   741k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   741k|                                  needs_context_tag>) {
 5508|   741k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   741k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   741k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5342|   741k|    {                                                                        \
 5343|   741k|        return val;                                                          \
 5344|   741k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5472|   917k|{
 5473|   917k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   917k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   917k|    constexpr bool scannable_char =
 5477|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   917k|    static_assert(scannable_char,
 5479|   917k|                  "Cannot scan an argument of an unsupported character "
 5480|   917k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   917k|    constexpr bool scannable_const =
 5483|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   917k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   917k|    constexpr bool scannable_disabled =
 5487|   917k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   917k|    static_assert(scannable_disabled,
 5489|   917k|                  "Cannot scan an argument that has been disabled by "
 5490|   917k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   917k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   917k|    static_assert(
 5494|   917k|        scannable,
 5495|   917k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   917k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   917k|    return arg_value{arg};
 5499|   917k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5256|   917k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   917k|    {
 5258|   917k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6047|   857k|    {
 6048|   857k|        return m_values;
 6049|   857k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   689k|        : basic_scan_args(store.desc, store.args.data())
 5830|   689k|    {
 5831|   689k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   343k|        : m_str(r.str)
 8457|   343k|    {
 8458|   343k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|   369k|    {
 1740|   369k|        return has_value();
 1741|   369k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  1.02M|    {
 1815|  1.02M|        return &value();
 1816|  1.02M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.02M|    {
 1769|  1.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.02M|        return this->get_value();
 1771|  1.02M|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   171k|{
 9444|   171k|    auto result = make_scan_result<Source, Args...>();
 9445|   171k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   171k|                                   make_scan_args(result->values())));
 9447|   171k|    return result;
 9448|   171k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  26.2k|{
 9485|  26.2k|    auto result = make_scan_result<Source, T>();
 9486|  26.2k|    fill_scan_result(
 9487|  26.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.2k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.2k|    return result;
 9490|  26.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5553|  52.3k|{
 5554|  52.3k|    check_scan_arg_types<T>();
 5555|       |
 5556|  52.3k|    basic_scan_arg<Context> arg;
 5557|  52.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  52.3k|    arg.m_value = make_value<Context>(value);
 5559|  52.3k|    return arg;
 5560|  52.3k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  60.8k|    {
 6070|  60.8k|        return std::get<0>(m_values);
 6071|  60.8k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   202k|{
 9375|   202k|    auto result = make_scan_result<Source, Args...>();
 9376|   202k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   202k|                                   make_scan_args(result->values())));
 9378|   202k|    return result;
 9379|   202k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9330|   436k|{
 9331|   436k|    return scan_result_type<Source, Args...>();
 9332|   436k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|   436k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|   436k|        : m_value(T{}), m_has_value(true)
  427|   436k|    {
  428|   436k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6264|   436k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6038|  1.05M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   436k|{
 9316|   436k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 392k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   392k|    else {
 9320|   392k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   392k|    static_cast<    \
  |  |  935|   392k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   392k|    }
 9322|   436k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.74M|    {
  490|  1.74M|        return m_has_value;
  491|  1.74M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   405k|    {
 8462|   405k|        return m_str;
 8463|   405k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   811k|{
 5804|   811k|    detail::check_scan_arg_types<Args...>();
 5805|   811k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   811k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5518|  1.05M|{
 5519|  1.05M|    constexpr bool default_constructible_constraint =
 5520|  1.05M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|  1.05M|    static_assert(default_constructible_constraint,
 5522|  1.05M|                  "Scan argument types must be default constructible");
 5523|       |
 5524|  1.05M|    constexpr bool destructible_constraint =
 5525|  1.05M|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|  1.05M|    static_assert(destructible_constraint,
 5527|  1.05M|                  "Scan argument types must be Destructible");
 5528|       |
 5529|  1.05M|    constexpr bool non_reference_constraint =
 5530|  1.05M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|  1.05M|    static_assert(non_reference_constraint,
 5532|  1.05M|                  "Scan argument types must not be references");
 5533|       |
 5534|  1.05M|    constexpr bool movable_constraint =
 5535|  1.05M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|  1.05M|    static_assert(movable_constraint,
 5537|  1.05M|                  "Scan argument types must be move constructible");
 5538|       |
 5539|  1.05M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|  1.05M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|  1.05M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 5779|   811k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   811k|    {
 5781|   811k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   811k|    {
 5789|   811k|        return {detail::make_arg<
 5790|   811k|            kind, Context,
 5791|   811k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   811k|                                 typename Context::char_type>::value>(args)...};
 5793|   811k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5568|   811k|{
 5569|   811k|    return make_value<Context>(value).ref_value;
 5570|   811k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5503|   873k|{
 5504|   873k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   873k|                                  needs_context_tag>) {
 5508|   873k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   873k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5342|   873k|    {                                                                        \
 5343|   873k|        return val;                                                          \
 5344|   873k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5472|  1.05M|{
 5473|  1.05M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|  1.05M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|  1.05M|    constexpr bool scannable_char =
 5477|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|  1.05M|    static_assert(scannable_char,
 5479|  1.05M|                  "Cannot scan an argument of an unsupported character "
 5480|  1.05M|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|  1.05M|    constexpr bool scannable_const =
 5483|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|  1.05M|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|  1.05M|    constexpr bool scannable_disabled =
 5487|  1.05M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|  1.05M|    static_assert(scannable_disabled,
 5489|  1.05M|                  "Cannot scan an argument that has been disabled by "
 5490|  1.05M|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|  1.05M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|  1.05M|    static_assert(
 5494|  1.05M|        scannable,
 5495|  1.05M|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|  1.05M|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|  1.05M|    return arg_value{arg};
 5499|  1.05M|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5256|  1.05M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|  1.05M|    {
 5258|  1.05M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6047|   980k|    {
 6048|   980k|        return m_values;
 6049|   980k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   811k|        : basic_scan_args(store.desc, store.args.data())
 5830|   811k|    {
 5831|   811k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   405k|        : m_str(r.str)
 8457|   405k|    {
 8458|   405k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|   436k|    {
 1740|   436k|        return has_value();
 1741|   436k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  1.22M|    {
 1815|  1.22M|        return &value();
 1816|  1.22M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   202k|{
 9444|   202k|    auto result = make_scan_result<Source, Args...>();
 9445|   202k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   202k|                                   make_scan_args(result->values())));
 9447|   202k|    return result;
 9448|   202k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  31.2k|{
 9485|  31.2k|    auto result = make_scan_result<Source, T>();
 9486|  31.2k|    fill_scan_result(
 9487|  31.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  31.2k|                            detail::make_arg<scan_context>(result->value())));
 9489|  31.2k|    return result;
 9490|  31.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5553|  61.8k|{
 5554|  61.8k|    check_scan_arg_types<T>();
 5555|       |
 5556|  61.8k|    basic_scan_arg<Context> arg;
 5557|  61.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  61.8k|    arg.m_value = make_value<Context>(value);
 5559|  61.8k|    return arg;
 5560|  61.8k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  70.3k|    {
 6070|  70.3k|        return std::get<0>(m_values);
 6071|  70.3k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9374|   173k|{
 9375|   173k|    auto result = make_scan_result<Source, Args...>();
 9376|   173k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   173k|                                   make_scan_args(result->values())));
 9378|   173k|    return result;
 9379|   173k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9330|   374k|{
 9331|   374k|    return scan_result_type<Source, Args...>();
 9332|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|   374k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|   374k|        : m_value(T{}), m_has_value(true)
  427|   374k|    {
  428|   374k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6264|   374k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6038|   926k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|   374k|{
 9316|   374k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 330k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   330k|    else {
 9320|   330k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   330k|    static_cast<    \
  |  |  935|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   330k|    }
 9322|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.49M|    {
  490|  1.49M|        return m_has_value;
  491|  1.49M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8461|   347k|    {
 8462|   347k|        return m_str;
 8463|   347k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   696k|{
 5804|   696k|    detail::check_scan_arg_types<Args...>();
 5805|   696k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   696k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5518|   926k|{
 5519|   926k|    constexpr bool default_constructible_constraint =
 5520|   926k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5521|   926k|    static_assert(default_constructible_constraint,
 5522|   926k|                  "Scan argument types must be default constructible");
 5523|       |
 5524|   926k|    constexpr bool destructible_constraint =
 5525|   926k|        std::conjunction_v<std::is_destructible<Args>...>;
 5526|   926k|    static_assert(destructible_constraint,
 5527|   926k|                  "Scan argument types must be Destructible");
 5528|       |
 5529|   926k|    constexpr bool non_reference_constraint =
 5530|   926k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5531|   926k|    static_assert(non_reference_constraint,
 5532|   926k|                  "Scan argument types must not be references");
 5533|       |
 5534|   926k|    constexpr bool movable_constraint =
 5535|   926k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5536|   926k|    static_assert(movable_constraint,
 5537|   926k|                  "Scan argument types must be move constructible");
 5538|       |
 5539|   926k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5539:12): [Folded - Ignored]
  |  Branch (5539:48): [Folded - Ignored]
  ------------------
 5540|   926k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5540:12): [Folded - Ignored]
  |  Branch (5540:40): [Folded - Ignored]
  ------------------
 5541|   926k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 5779|   696k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   696k|    {
 5781|   696k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   696k|    {
 5789|   696k|        return {detail::make_arg<
 5790|   696k|            kind, Context,
 5791|   696k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   696k|                                 typename Context::char_type>::value>(args)...};
 5793|   696k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5568|   696k|{
 5569|   696k|    return make_value<Context>(value).ref_value;
 5570|   696k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5503|   749k|{
 5504|   749k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   749k|                                  needs_context_tag>) {
 5508|   749k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   749k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5342|   749k|    {                                                                        \
 5343|   749k|        return val;                                                          \
 5344|   749k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5472|   926k|{
 5473|   926k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5474|   926k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5475|       |
 5476|   926k|    constexpr bool scannable_char =
 5477|   926k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5478|   926k|    static_assert(scannable_char,
 5479|   926k|                  "Cannot scan an argument of an unsupported character "
 5480|   926k|                  "type (i.e. char from a wchar_t source)");
 5481|       |
 5482|   926k|    constexpr bool scannable_const =
 5483|   926k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5484|   926k|    static_assert(scannable_const, "Cannot scan a const argument");
 5485|       |
 5486|   926k|    constexpr bool scannable_disabled =
 5487|   926k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5488|   926k|    static_assert(scannable_disabled,
 5489|   926k|                  "Cannot scan an argument that has been disabled by "
 5490|   926k|                  "flag (SCN_DISABLE_TYPE_*)");
 5491|       |
 5492|   926k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5493|   926k|    static_assert(
 5494|   926k|        scannable,
 5495|   926k|        "Cannot scan an argument. To make a type T scannable, provide "
 5496|   926k|        "a scn::scanner<T, CharT> specialization.");
 5497|       |
 5498|   926k|    return arg_value{arg};
 5499|   926k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5256|   926k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5257|   926k|    {
 5258|   926k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6047|   864k|    {
 6048|   864k|        return m_values;
 6049|   864k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   696k|        : basic_scan_args(store.desc, store.args.data())
 5830|   696k|    {
 5831|   696k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   347k|        : m_str(r.str)
 8457|   347k|    {
 8458|   347k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|   374k|    {
 1740|   374k|        return has_value();
 1741|   374k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  1.03M|    {
 1815|  1.03M|        return &value();
 1816|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9443|   173k|{
 9444|   173k|    auto result = make_scan_result<Source, Args...>();
 9445|   173k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   173k|                                   make_scan_args(result->values())));
 9447|   173k|    return result;
 9448|   173k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9484|  26.5k|{
 9485|  26.5k|    auto result = make_scan_result<Source, T>();
 9486|  26.5k|    fill_scan_result(
 9487|  26.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.5k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.5k|    return result;
 9490|  26.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5553|  53.0k|{
 5554|  53.0k|    check_scan_arg_types<T>();
 5555|       |
 5556|  53.0k|    basic_scan_arg<Context> arg;
 5557|  53.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  53.0k|    arg.m_value = make_value<Context>(value);
 5559|  53.0k|    return arg;
 5560|  53.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6069|  61.5k|    {
 6070|  61.5k|        return std::get<0>(m_values);
 6071|  61.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   262k|    {
 2869|   262k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   262k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   262k|    {
 2850|   262k|        return decay_copy(t.begin());
 2851|   262k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  49.2M|{
 2094|  49.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  49.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  49.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.56M|    {
 2926|  4.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.56M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.56M|    {
 2908|  4.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.56M|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   158k|{
 9375|   158k|    auto result = make_scan_result<Source, Args...>();
 9376|   158k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   158k|                                   make_scan_args(result->values())));
 9378|   158k|    return result;
 9379|   158k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9330|   342k|{
 9331|   342k|    return scan_result_type<Source, Args...>();
 9332|   342k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|   342k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|   342k|        : m_value(T{}), m_has_value(true)
  427|   342k|    {
  428|   342k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6264|   342k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6107|  2.28M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  2.28M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   342k|{
 9316|   342k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 298k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   298k|    else {
 9320|   298k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   298k|    static_cast<    \
  |  |  935|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   298k|    }
 9322|   342k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  2.28M|    {
 1740|  2.28M|        return has_value();
 1741|  2.28M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.56M|    {
  490|  4.56M|        return m_has_value;
  491|  4.56M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   262k|    {
 1746|   262k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   262k|        return this->get_unexpected().error();
 1748|   262k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   262k|    {
  473|   262k|        return m_unexpected;
  474|   262k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.36M|    {
  490|  1.36M|        return m_has_value;
  491|  1.36M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   939k|    {
  456|   939k|        return m_value;
  457|   939k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6138|  2.02M|    {
 6139|  2.02M|        m_range = std::forward<Other>(r);
 6140|  2.02M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  2.02M|    {
 1795|  2.02M|        return value();
 1796|  2.02M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  2.02M|    {
 1769|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.02M|        return this->get_value();
 1771|  2.02M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.02M|    {
  456|  2.02M|        return m_value;
  457|  2.02M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9154|  1.06M|{
 9155|  1.06M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9156|  1.06M|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|  1.06M|{
 9092|  1.06M|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|  1.06M|    auto result = vscan_impl(buffer, format, args);
 9095|  1.06M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 125k, False: 935k]
  |  |  ------------------
  ------------------
 9096|   125k|        return unexpected(result.error());
 9097|   125k|    }
 9098|   935k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   935k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|  1.06M|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5074|  2.28M|{
 5075|  2.28M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|  2.28M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|  2.28M|                  "\n"
 5079|  2.28M|                  "Unsupported range type given as input to a scanning "
 5080|  2.28M|                  "function.\n"
 5081|  2.28M|                  "A range needs to have a character type (value type) "
 5082|  2.28M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|  2.28M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|  2.28M|                  "to be included.\n"
 5085|  2.28M|                  "See the scnlib documentation for more details.");
 5086|  2.28M|    static_assert(
 5087|  2.28M|        !std::is_same_v<T, custom_char_traits>,
 5088|  2.28M|        "\n"
 5089|  2.28M|        "Unsupported range type given as input to a scanning "
 5090|  2.28M|        "function.\n"
 5091|  2.28M|        "String types (std::basic_string, and std::basic_string_view) "
 5092|  2.28M|        "need to use std::char_traits. Strings with custom Traits are "
 5093|  2.28M|        "not supported.");
 5094|  2.28M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|  2.28M|                  "\n"
 5096|  2.28M|                  "Unsupported range type given as input to a scanning "
 5097|  2.28M|                  "function.\n"
 5098|  2.28M|                  "file_marker_found cannot be used as an "
 5099|  2.28M|                  "source range type to scn::scan.\n"
 5100|  2.28M|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|  2.28M|                  "and do not provide an explicit source range, "
 5102|  2.28M|                  "or use scn::scan with a FILE* directly.");
 5103|  2.28M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|  2.28M|                  "\n"
 5105|  2.28M|                  "Unsupported range type given as input to a scanning "
 5106|  2.28M|                  "function.\n"
 5107|  2.28M|                  "In order to be scannable, a range needs to satisfy "
 5108|  2.28M|                  "`forward_range`. `input_range` is not sufficient.");
 5109|  2.28M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|  2.28M|                  "\n"
 5111|  2.28M|                  "Unsupported range type given as input to a scanning "
 5112|  2.28M|                  "function.\n"
 5113|  2.28M|                  "A range needs to model forward_range and have a valid "
 5114|  2.28M|                  "character type (char or wchar_t) to be scannable.\n"
 5115|  2.28M|                  "Examples of scannable ranges are std::string, "
 5116|  2.28M|                  "std::string_view, "
 5117|  2.28M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|  2.28M|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|  2.28M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|  2.28M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|  2.28M|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|  2.28M|    else {
 5060|  2.28M|        return make_forward_scan_buffer(r);
 5061|  2.28M|    }
 5062|  2.28M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4878|  2.28M|{
 4879|  2.28M|    return basic_scan_forward_buffer_impl(range);
 4880|  2.28M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|  2.28M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|  2.28M|          m_cursor(ranges::begin(*m_range))
 4765|  2.28M|    {
 4766|  2.28M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|  2.28M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|  2.28M|    {
 4737|  2.28M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|  2.28M|        : m_current_view(sv), m_is_contiguous(false)
 4427|  2.28M|    {
 4428|  2.28M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  2.28M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.30M|    {
 2869|  4.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.30M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.30M|    {
 2850|  4.30M|        return decay_copy(t.begin());
 2851|  4.30M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  6.32M|    {
 3480|  6.32M|        return m_iterator;
 3481|  6.32M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  12.2M|    {
 4770|  12.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 300k, False: 11.9M]
  ------------------
 4771|   300k|            return false;
 4772|   300k|        }
 4773|  11.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  11.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  11.9M|        }
 4776|  11.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 9.72M, False: 2.19M]
  ------------------
 4777|  9.72M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  9.72M|                                          this->m_current_view.begin(),
 4779|  9.72M|                                          this->m_current_view.end());
 4780|  9.72M|        }
 4781|  11.9M|        m_latest = *m_cursor;
 4782|  11.9M|        ++m_cursor;
 4783|  11.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  11.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  11.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  11.9M|        }
 4787|  11.9M|        return true;
 4788|  12.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  36.0M|    {
 2926|  36.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  36.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  36.0M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  36.0M|    {
 2908|  36.0M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  36.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  36.0M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  38.0M|    {
 3484|  38.0M|        return m_sentinel;
 3485|  38.0M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  2.28M|    {
 4346|  2.28M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  2.28M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  2.28M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   262k|        : base(unexpect, std::move(e.error())),
 1616|   262k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   262k|    {
 1618|   262k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   262k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   262k|          m_has_value(false)
  451|   262k|    {
  452|   262k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.28M|    {
 1316|  2.28M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|  2.02M|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  2.02M|                      ranges::iterator_t<SourceRange>>) {
 6371|  2.02M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  2.02M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.02M|    {
 2869|  2.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.02M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.02M|    {
 2850|  2.02M|        return decay_copy(t.begin());
 2851|  2.02M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6355|  2.02M|{
 6356|  2.02M|    return ranges::end(source);
 6357|  2.02M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.02M|    {
 2926|  2.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.02M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.02M|    {
 2908|  2.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.02M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.02M|    {
 1572|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.02M|    {
  442|  2.02M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   316k|    {
 8462|   316k|        return m_str;
 8463|   316k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  4.30M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.30M|    static_cast<    \
  |  |  935|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.30M|    static_cast<    \
  |  |  935|  4.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.30M|    {
 3466|  4.30M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   316k|        : m_str(r.str)
 8457|   316k|    {
 8458|   316k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|   342k|    {
 1740|   342k|        return has_value();
 1741|   342k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|   939k|    {
 1815|   939k|        return &value();
 1816|   939k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   939k|    {
 1769|   939k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   939k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   939k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   939k|        return this->get_value();
 1771|   939k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6127|  2.02M|    {
 6128|  2.02M|        return ranges::begin(m_range);
 6129|  2.02M|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   158k|{
 9444|   158k|    auto result = make_scan_result<Source, Args...>();
 9445|   158k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   158k|                                   make_scan_args(result->values())));
 9447|   158k|    return result;
 9448|   158k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9172|  1.06M|{
 9173|  1.06M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9174|  1.06M|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|  1.06M|{
 9108|  1.06M|#if !SCN_DISABLE_LOCALE
 9109|  1.06M|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|  1.06M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|  1.06M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|  1.06M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|  1.06M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 125k, False: 935k]
  |  |  ------------------
  ------------------
 9116|   125k|        return unexpected(result.error());
 9117|   125k|    }
 9118|   935k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   935k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|  1.06M|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  26.4k|{
 9485|  26.4k|    auto result = make_scan_result<Source, T>();
 9486|  26.4k|    fill_scan_result(
 9487|  26.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.4k|    return result;
 9490|  26.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9185|   163k|{
 9186|   163k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9187|   163k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|   163k|{
 9132|   163k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|   163k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|   163k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 150k]
  |  |  ------------------
  ------------------
 9136|  12.5k|        return unexpected(result.error());
 9137|  12.5k|    }
 9138|   150k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|   163k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   152k|{
 9375|   152k|    auto result = make_scan_result<Source, Args...>();
 9376|   152k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   152k|                                   make_scan_args(result->values())));
 9378|   152k|    return result;
 9379|   152k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9330|   328k|{
 9331|   328k|    return scan_result_type<Source, Args...>();
 9332|   328k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|   328k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|   328k|        : m_value(T{}), m_has_value(true)
  427|   328k|    {
  428|   328k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6264|   328k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   328k|{
 9316|   328k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 285k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   285k|    else {
 9320|   285k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   285k|    static_cast<    \
  |  |  935|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   285k|    }
 9322|   328k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.31M|    {
  490|  1.31M|        return m_has_value;
  491|  1.31M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   899k|    {
  456|   899k|        return m_value;
  457|   899k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   305k|    {
 8462|   305k|        return m_str;
 8463|   305k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   305k|        : m_str(r.str)
 8457|   305k|    {
 8458|   305k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|   328k|    {
 1740|   328k|        return has_value();
 1741|   328k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|   899k|    {
 1815|   899k|        return &value();
 1816|   899k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   899k|    {
 1769|   899k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   899k|        return this->get_value();
 1771|   899k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   152k|{
 9444|   152k|    auto result = make_scan_result<Source, Args...>();
 9445|   152k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   152k|                                   make_scan_args(result->values())));
 9447|   152k|    return result;
 9448|   152k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  23.4k|{
 9485|  23.4k|    auto result = make_scan_result<Source, T>();
 9486|  23.4k|    fill_scan_result(
 9487|  23.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  23.4k|                            detail::make_arg<scan_context>(result->value())));
 9489|  23.4k|    return result;
 9490|  23.4k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   199k|{
 9375|   199k|    auto result = make_scan_result<Source, Args...>();
 9376|   199k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   199k|                                   make_scan_args(result->values())));
 9378|   199k|    return result;
 9379|   199k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9330|   428k|{
 9331|   428k|    return scan_result_type<Source, Args...>();
 9332|   428k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|   428k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|   428k|        : m_value(T{}), m_has_value(true)
  427|   428k|    {
  428|   428k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6264|   428k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   428k|{
 9316|   428k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 385k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   385k|    else {
 9320|   385k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   385k|    static_cast<    \
  |  |  935|   385k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   385k|    }
 9322|   428k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.71M|    {
  490|  1.71M|        return m_has_value;
  491|  1.71M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.19M|    {
  456|  1.19M|        return m_value;
  457|  1.19M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   398k|    {
 8462|   398k|        return m_str;
 8463|   398k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   398k|        : m_str(r.str)
 8457|   398k|    {
 8458|   398k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|   428k|    {
 1740|   428k|        return has_value();
 1741|   428k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  1.19M|    {
 1815|  1.19M|        return &value();
 1816|  1.19M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.19M|    {
 1769|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.19M|        return this->get_value();
 1771|  1.19M|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   199k|{
 9444|   199k|    auto result = make_scan_result<Source, Args...>();
 9445|   199k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   199k|                                   make_scan_args(result->values())));
 9447|   199k|    return result;
 9448|   199k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  30.0k|{
 9485|  30.0k|    auto result = make_scan_result<Source, T>();
 9486|  30.0k|    fill_scan_result(
 9487|  30.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  30.0k|                            detail::make_arg<scan_context>(result->value())));
 9489|  30.0k|    return result;
 9490|  30.0k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   172k|{
 9375|   172k|    auto result = make_scan_result<Source, Args...>();
 9376|   172k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   172k|                                   make_scan_args(result->values())));
 9378|   172k|    return result;
 9379|   172k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9330|   371k|{
 9331|   371k|    return scan_result_type<Source, Args...>();
 9332|   371k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|   371k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|   371k|        : m_value(T{}), m_has_value(true)
  427|   371k|    {
  428|   371k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6264|   371k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   371k|{
 9316|   371k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 327k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   327k|    else {
 9320|   327k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   327k|    static_cast<    \
  |  |  935|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   327k|    }
 9322|   371k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.02M|    {
  456|  1.02M|        return m_value;
  457|  1.02M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   345k|    {
 8462|   345k|        return m_str;
 8463|   345k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   345k|        : m_str(r.str)
 8457|   345k|    {
 8458|   345k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|   371k|    {
 1740|   371k|        return has_value();
 1741|   371k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  1.02M|    {
 1815|  1.02M|        return &value();
 1816|  1.02M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.02M|    {
 1769|  1.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.02M|        return this->get_value();
 1771|  1.02M|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   172k|{
 9444|   172k|    auto result = make_scan_result<Source, Args...>();
 9445|   172k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   172k|                                   make_scan_args(result->values())));
 9447|   172k|    return result;
 9448|   172k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  26.1k|{
 9485|  26.1k|    auto result = make_scan_result<Source, T>();
 9486|  26.1k|    fill_scan_result(
 9487|  26.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.1k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.1k|    return result;
 9490|  26.1k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   203k|{
 9375|   203k|    auto result = make_scan_result<Source, Args...>();
 9376|   203k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   203k|                                   make_scan_args(result->values())));
 9378|   203k|    return result;
 9379|   203k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9330|   436k|{
 9331|   436k|    return scan_result_type<Source, Args...>();
 9332|   436k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|   436k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|   436k|        : m_value(T{}), m_has_value(true)
  427|   436k|    {
  428|   436k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6264|   436k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   436k|{
 9316|   436k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 393k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   393k|    else {
 9320|   393k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   393k|    static_cast<    \
  |  |  935|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   393k|    }
 9322|   436k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.74M|    {
  490|  1.74M|        return m_has_value;
  491|  1.74M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   406k|    {
 8462|   406k|        return m_str;
 8463|   406k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   406k|        : m_str(r.str)
 8457|   406k|    {
 8458|   406k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|   436k|    {
 1740|   436k|        return has_value();
 1741|   436k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  1.22M|    {
 1815|  1.22M|        return &value();
 1816|  1.22M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   203k|{
 9444|   203k|    auto result = make_scan_result<Source, Args...>();
 9445|   203k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   203k|                                   make_scan_args(result->values())));
 9447|   203k|    return result;
 9448|   203k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  30.6k|{
 9485|  30.6k|    auto result = make_scan_result<Source, T>();
 9486|  30.6k|    fill_scan_result(
 9487|  30.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  30.6k|                            detail::make_arg<scan_context>(result->value())));
 9489|  30.6k|    return result;
 9490|  30.6k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9374|   174k|{
 9375|   174k|    auto result = make_scan_result<Source, Args...>();
 9376|   174k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9377|   174k|                                   make_scan_args(result->values())));
 9378|   174k|    return result;
 9379|   174k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9330|   375k|{
 9331|   375k|    return scan_result_type<Source, Args...>();
 9332|   375k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|   375k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|   375k|        : m_value(T{}), m_has_value(true)
  427|   375k|    {
  428|   375k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6264|   375k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|   375k|{
 9316|   375k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.7k, False: 331k]
  |  |  ------------------
  ------------------
 9317|  43.7k|        out = unexpected(in.error());
 9318|  43.7k|    }
 9319|   331k|    else {
 9320|   331k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   331k|    static_cast<    \
  |  |  935|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|   331k|    }
 9322|   375k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  43.7k|        : base(unexpect, std::move(e.error())),
 1616|  43.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.7k|    {
 1618|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  43.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.7k|          m_has_value(false)
  451|  43.7k|    {
  452|  43.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  43.7k|    {
 1316|  43.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  43.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  43.7k|    {
  903|  43.7k|        assign_common(std::move(other));
  904|  43.7k|        return *this;
  905|  43.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  43.7k|    {
  950|  43.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 43.7k, False: 0]
  ------------------
  951|  43.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 43.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  43.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  43.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.50M|    {
  490|  1.50M|        return m_has_value;
  491|  1.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  43.7k|    {
 1046|  43.7k|        this->destroy_value();
 1047|  43.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  43.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  43.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  43.7k|    {
  504|  43.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  43.7k|                                  std::forward<Args>(args)...);
  506|  43.7k|        m_has_value = false;
  507|  43.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  43.7k|    {
  473|  43.7k|        return m_unexpected;
  474|  43.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  43.7k|    {
  481|  43.7k|        return std::move(m_unexpected);
  482|  43.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8461|   349k|    {
 8462|   349k|        return m_str;
 8463|   349k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8456|   349k|        : m_str(r.str)
 8457|   349k|    {
 8458|   349k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|   375k|    {
 1740|   375k|        return has_value();
 1741|   375k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  1.03M|    {
 1815|  1.03M|        return &value();
 1816|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9443|   174k|{
 9444|   174k|    auto result = make_scan_result<Source, Args...>();
 9445|   174k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9446|   174k|                                   make_scan_args(result->values())));
 9447|   174k|    return result;
 9448|   174k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9484|  26.5k|{
 9485|  26.5k|    auto result = make_scan_result<Source, T>();
 9486|  26.5k|    fill_scan_result(
 9487|  26.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9488|  26.5k|                            detail::make_arg<scan_context>(result->value())));
 9489|  26.5k|    return result;
 9490|  26.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   529k|    {
 2869|   529k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   529k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   529k|    {
 2850|   529k|        return decay_copy(t.begin());
 2851|   529k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  3.36M|{
 2094|  3.36M|    return SCN_FWD(t);
  ------------------
  |  |  936|  3.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  3.36M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.06M|    {
 2926|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.06M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.06M|    {
 2908|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.06M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9330|  88.2k|{
 9331|  88.2k|    return scan_result_type<Source, Args...>();
 9332|  88.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  88.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.2k|        : m_value(T{}), m_has_value(true)
  427|  88.2k|    {
  428|  88.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6264|  88.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6107|   529k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   529k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.2k|{
 9316|  88.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 660]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    660|    else {
 9320|    660|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    660|    static_cast<    \
  |  |  935|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    660|    }
 9322|  88.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   529k|    {
 1740|   529k|        return has_value();
 1741|   529k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.05M|    {
  490|  1.05M|        return m_has_value;
  491|  1.05M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   525k|    {
 1746|   525k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   525k|        return this->get_unexpected().error();
 1748|   525k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   525k|    {
  473|   525k|        return m_unexpected;
  474|   525k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.5k|    {
  456|  89.5k|        return m_value;
  457|  89.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6138|  4.31k|    {
 6139|  4.31k|        m_range = std::forward<Other>(r);
 6140|  4.31k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  4.31k|    {
 1795|  4.31k|        return value();
 1796|  4.31k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  4.31k|    {
 1769|  4.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.31k|        return this->get_value();
 1771|  4.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.31k|    {
  456|  4.31k|        return m_value;
  457|  4.31k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9091|   252k|{
 9092|   252k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   252k|    auto result = vscan_impl(buffer, format, args);
 9095|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250k, False: 1.99k]
  |  |  ------------------
  ------------------
 9096|   250k|        return unexpected(result.error());
 9097|   250k|    }
 9098|  1.99k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   252k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5074|   529k|{
 5075|   529k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   529k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   529k|                  "\n"
 5079|   529k|                  "Unsupported range type given as input to a scanning "
 5080|   529k|                  "function.\n"
 5081|   529k|                  "A range needs to have a character type (value type) "
 5082|   529k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   529k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   529k|                  "to be included.\n"
 5085|   529k|                  "See the scnlib documentation for more details.");
 5086|   529k|    static_assert(
 5087|   529k|        !std::is_same_v<T, custom_char_traits>,
 5088|   529k|        "\n"
 5089|   529k|        "Unsupported range type given as input to a scanning "
 5090|   529k|        "function.\n"
 5091|   529k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   529k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   529k|        "not supported.");
 5094|   529k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   529k|                  "\n"
 5096|   529k|                  "Unsupported range type given as input to a scanning "
 5097|   529k|                  "function.\n"
 5098|   529k|                  "file_marker_found cannot be used as an "
 5099|   529k|                  "source range type to scn::scan.\n"
 5100|   529k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   529k|                  "and do not provide an explicit source range, "
 5102|   529k|                  "or use scn::scan with a FILE* directly.");
 5103|   529k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   529k|                  "\n"
 5105|   529k|                  "Unsupported range type given as input to a scanning "
 5106|   529k|                  "function.\n"
 5107|   529k|                  "In order to be scannable, a range needs to satisfy "
 5108|   529k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   529k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   529k|                  "\n"
 5111|   529k|                  "Unsupported range type given as input to a scanning "
 5112|   529k|                  "function.\n"
 5113|   529k|                  "A range needs to model forward_range and have a valid "
 5114|   529k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   529k|                  "Examples of scannable ranges are std::string, "
 5116|   529k|                  "std::string_view, "
 5117|   529k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   529k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   529k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   529k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5013|   529k|{
 5014|   529k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5015|   529k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5016|       |    }
 5017|       |    else {
 5018|       |        return invalid_char_type{};
 5019|       |    }
 5020|   529k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   529k|    {
 3000|   529k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   529k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   529k|    {
 2981|   529k|        return t.data();
 2982|   529k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   529k|    {
 3383|   529k|        return detail::to_address(ranges::begin(derived()));
 3384|   529k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.77M|{
  316|  1.77M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.77M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  1.77M|{
  294|  1.77M|    return p;
  295|  1.77M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   534k|    {
 2869|   534k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   534k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   534k|    {
 2850|   534k|        return decay_copy(t.begin());
 2851|   534k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   110M|    {
 3480|   110M|        return m_iterator;
 3481|   110M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   529k|    {
 3339|   529k|        return static_cast<const D&>(*this);
 3340|   529k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   529k|    {
 3075|   529k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   529k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   529k|    {
 3041|   529k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   529k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.61M|    {
 3496|  1.61M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.61M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   525k|        : base(unexpect, std::move(e.error())),
 1616|   525k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   525k|    {
 1618|   525k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   525k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   525k|          m_has_value(false)
  451|   525k|    {
  452|   525k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   529k|    {
 1316|   529k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6368|  4.31k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  4.31k|                      ranges::iterator_t<SourceRange>>) {
 6371|  4.31k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  4.31k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.23M|    {
 2869|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.23M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.23M|    {
 2850|  1.23M|        return decay_copy(t.begin());
 2851|  1.23M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6355|  4.31k|{
 6356|  4.31k|    return ranges::end(source);
 6357|  4.31k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.31k|    {
 2926|  4.31k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.31k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.31k|    {
 2908|  4.31k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.31k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   107M|    {
 3484|   107M|        return m_sentinel;
 3485|   107M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  4.31k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.31k|    {
 1572|  4.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  4.31k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.31k|    {
  442|  4.31k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  84.0k|    {
 8462|  84.0k|        return m_str;
 8463|  84.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   168k|{
 5804|   168k|    detail::check_scan_arg_types<Args...>();
 5805|   168k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   168k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 5779|   168k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   168k|    {
 5781|   168k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   168k|    {
 5789|   168k|        return {detail::make_arg<
 5790|   168k|            kind, Context,
 5791|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   168k|                                 typename Context::char_type>::value>(args)...};
 5793|   168k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5568|   168k|{
 5569|   168k|    return make_value<Context>(value).ref_value;
 5570|   168k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   168k|        : basic_scan_args(store.desc, store.args.data())
 5830|   168k|    {
 5831|   168k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 5881|  1.00M|        : m_desc(desc), m_builtin_values(data)
 5882|  1.00M|    {
 5883|  1.00M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.03M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.03M|    static_cast<    \
  |  |  935|  4.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.03M|    static_cast<    \
  |  |  935|  4.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.03M|    {
 3466|  4.03M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8139|  1.00M|{
 8140|  1.00M|    return s;
 8141|  1.00M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8111|  1.00M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.0k|        : m_str(r.str)
 8457|  84.0k|    {
 8458|  84.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  88.2k|    {
 1740|  88.2k|        return has_value();
 1741|  88.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|  89.5k|    {
 1815|  89.5k|        return &value();
 1816|  89.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  89.5k|    {
 1769|  89.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.5k|        return this->get_value();
 1771|  89.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6127|  4.31k|    {
 6128|  4.31k|        return ranges::begin(m_range);
 6129|  4.31k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9107|   252k|{
 9108|   252k|#if !SCN_DISABLE_LOCALE
 9109|   252k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250k, False: 1.99k]
  |  |  ------------------
  ------------------
 9116|   250k|        return unexpected(result.error());
 9117|   250k|    }
 9118|  1.99k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   252k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  25.3k|{
 9132|  25.3k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  25.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  25.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.0k, False: 320]
  |  |  ------------------
  ------------------
 9136|  25.0k|        return unexpected(result.error());
 9137|  25.0k|    }
 9138|    320|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  25.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.43k|{
 5554|  8.43k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.43k|    basic_scan_arg<Context> arg;
 5557|  8.43k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.43k|    arg.m_value = make_value<Context>(value);
 5559|  8.43k|    return arg;
 5560|  8.43k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5648|  1.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9330|  88.1k|{
 9331|  88.1k|    return scan_result_type<Source, Args...>();
 9332|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  88.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.1k|        : m_value(T{}), m_has_value(true)
  427|  88.1k|    {
  428|  88.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6264|  88.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.1k|{
 9316|  88.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 563]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    563|    else {
 9320|    563|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    563|    static_cast<    \
  |  |  935|    563|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    563|    }
 9322|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.2k|    {
  456|  89.2k|        return m_value;
  457|  89.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  83.9k|    {
 8462|  83.9k|        return m_str;
 8463|  83.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   167k|{
 5804|   167k|    detail::check_scan_arg_types<Args...>();
 5805|   167k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   167k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 5779|   167k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   167k|    {
 5781|   167k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   167k|    {
 5789|   167k|        return {detail::make_arg<
 5790|   167k|            kind, Context,
 5791|   167k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   167k|                                 typename Context::char_type>::value>(args)...};
 5793|   167k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5568|   167k|{
 5569|   167k|    return make_value<Context>(value).ref_value;
 5570|   167k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   167k|        : basic_scan_args(store.desc, store.args.data())
 5830|   167k|    {
 5831|   167k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  83.9k|        : m_str(r.str)
 8457|  83.9k|    {
 8458|  83.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  88.1k|    {
 1740|  88.1k|        return has_value();
 1741|  88.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|  89.2k|    {
 1815|  89.2k|        return &value();
 1816|  89.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  89.2k|    {
 1769|  89.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.2k|        return this->get_value();
 1771|  89.2k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.41k|{
 5554|  8.41k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.41k|    basic_scan_arg<Context> arg;
 5557|  8.41k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.41k|    arg.m_value = make_value<Context>(value);
 5559|  8.41k|    return arg;
 5560|  8.41k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9330|  88.3k|{
 9331|  88.3k|    return scan_result_type<Source, Args...>();
 9332|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  88.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.3k|        : m_value(T{}), m_has_value(true)
  427|  88.3k|    {
  428|  88.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6264|  88.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.3k|{
 9316|  88.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 776]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    776|    else {
 9320|    776|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    776|    static_cast<    \
  |  |  935|    776|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    776|    }
 9322|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.8k|    {
  456|  89.8k|        return m_value;
  457|  89.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  84.1k|    {
 8462|  84.1k|        return m_str;
 8463|  84.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   168k|{
 5804|   168k|    detail::check_scan_arg_types<Args...>();
 5805|   168k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   168k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 5779|   168k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   168k|    {
 5781|   168k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   168k|    {
 5789|   168k|        return {detail::make_arg<
 5790|   168k|            kind, Context,
 5791|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   168k|                                 typename Context::char_type>::value>(args)...};
 5793|   168k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5568|   168k|{
 5569|   168k|    return make_value<Context>(value).ref_value;
 5570|   168k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   168k|        : basic_scan_args(store.desc, store.args.data())
 5830|   168k|    {
 5831|   168k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.1k|        : m_str(r.str)
 8457|  84.1k|    {
 8458|  84.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  88.3k|    {
 1740|  88.3k|        return has_value();
 1741|  88.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  89.8k|    {
 1815|  89.8k|        return &value();
 1816|  89.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  89.8k|    {
 1769|  89.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.8k|        return this->get_value();
 1771|  89.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.45k|{
 5554|  8.45k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.45k|    basic_scan_arg<Context> arg;
 5557|  8.45k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.45k|    arg.m_value = make_value<Context>(value);
 5559|  8.45k|    return arg;
 5560|  8.45k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9330|  88.1k|{
 9331|  88.1k|    return scan_result_type<Source, Args...>();
 9332|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  88.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.1k|        : m_value(T{}), m_has_value(true)
  427|  88.1k|    {
  428|  88.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6264|  88.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.1k|{
 9316|  88.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 627]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    627|    else {
 9320|    627|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    627|    static_cast<    \
  |  |  935|    627|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    627|    }
 9322|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.4k|    {
  456|  89.4k|        return m_value;
  457|  89.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  83.9k|    {
 8462|  83.9k|        return m_str;
 8463|  83.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   167k|{
 5804|   167k|    detail::check_scan_arg_types<Args...>();
 5805|   167k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   167k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 5779|   167k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   167k|    {
 5781|   167k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   167k|    {
 5789|   167k|        return {detail::make_arg<
 5790|   167k|            kind, Context,
 5791|   167k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   167k|                                 typename Context::char_type>::value>(args)...};
 5793|   167k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5568|   167k|{
 5569|   167k|    return make_value<Context>(value).ref_value;
 5570|   167k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   167k|        : basic_scan_args(store.desc, store.args.data())
 5830|   167k|    {
 5831|   167k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  83.9k|        : m_str(r.str)
 8457|  83.9k|    {
 8458|  83.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  88.1k|    {
 1740|  88.1k|        return has_value();
 1741|  88.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  89.4k|    {
 1815|  89.4k|        return &value();
 1816|  89.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  89.4k|    {
 1769|  89.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.4k|        return this->get_value();
 1771|  89.4k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.43k|{
 5554|  8.43k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.43k|    basic_scan_arg<Context> arg;
 5557|  8.43k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.43k|    arg.m_value = make_value<Context>(value);
 5559|  8.43k|    return arg;
 5560|  8.43k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9330|  88.4k|{
 9331|  88.4k|    return scan_result_type<Source, Args...>();
 9332|  88.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  88.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.4k|        : m_value(T{}), m_has_value(true)
  427|  88.4k|    {
  428|  88.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6264|  88.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.4k|{
 9316|  88.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 929]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    929|    else {
 9320|    929|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    929|    static_cast<    \
  |  |  935|    929|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    929|    }
 9322|  88.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  90.3k|    {
  456|  90.3k|        return m_value;
  457|  90.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  84.2k|    {
 8462|  84.2k|        return m_str;
 8463|  84.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   168k|{
 5804|   168k|    detail::check_scan_arg_types<Args...>();
 5805|   168k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   168k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 5779|   168k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   168k|    {
 5781|   168k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   168k|    {
 5789|   168k|        return {detail::make_arg<
 5790|   168k|            kind, Context,
 5791|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   168k|                                 typename Context::char_type>::value>(args)...};
 5793|   168k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5568|   168k|{
 5569|   168k|    return make_value<Context>(value).ref_value;
 5570|   168k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   168k|        : basic_scan_args(store.desc, store.args.data())
 5830|   168k|    {
 5831|   168k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.2k|        : m_str(r.str)
 8457|  84.2k|    {
 8458|  84.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  88.4k|    {
 1740|  88.4k|        return has_value();
 1741|  88.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  90.3k|    {
 1815|  90.3k|        return &value();
 1816|  90.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  90.3k|    {
 1769|  90.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  90.3k|        return this->get_value();
 1771|  90.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.48k|{
 5554|  8.48k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.48k|    basic_scan_arg<Context> arg;
 5557|  8.48k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.48k|    arg.m_value = make_value<Context>(value);
 5559|  8.48k|    return arg;
 5560|  8.48k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9330|  88.3k|{
 9331|  88.3k|    return scan_result_type<Source, Args...>();
 9332|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  88.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.3k|        : m_value(T{}), m_has_value(true)
  427|  88.3k|    {
  428|  88.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6264|  88.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9315|  88.3k|{
 9316|  88.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 757]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    757|    else {
 9320|    757|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    757|    static_cast<    \
  |  |  935|    757|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    757|    }
 9322|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.8k|    {
  456|  89.8k|        return m_value;
  457|  89.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8461|  84.1k|    {
 8462|  84.1k|        return m_str;
 8463|  84.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 5803|   168k|{
 5804|   168k|    detail::check_scan_arg_types<Args...>();
 5805|   168k|    return detail::scan_arg_store<Context, Args...>(values);
 5806|   168k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 5779|   168k|        : args(std::apply(make_argptrs<Args...>, args))
 5780|   168k|    {
 5781|   168k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5788|   168k|    {
 5789|   168k|        return {detail::make_arg<
 5790|   168k|            kind, Context,
 5791|   168k|            mapped_type_constant<remove_cvref_t<A>,
 5792|   168k|                                 typename Context::char_type>::value>(args)...};
 5793|   168k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5568|   168k|{
 5569|   168k|    return make_value<Context>(value).ref_value;
 5570|   168k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5503|   176k|{
 5504|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5505|       |
 5506|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5507|   176k|                                  needs_context_tag>) {
 5508|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5509|       |    }
 5510|       |    else {
 5511|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5512|       |            value, context_tag<Context>{}));
 5513|       |    }
 5514|   176k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5342|   176k|    {                                                                        \
 5343|   176k|        return val;                                                          \
 5344|   176k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 5829|   168k|        : basic_scan_args(store.desc, store.args.data())
 5830|   168k|    {
 5831|   168k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.1k|        : m_str(r.str)
 8457|  84.1k|    {
 8458|  84.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  88.3k|    {
 1740|  88.3k|        return has_value();
 1741|  88.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  89.8k|    {
 1815|  89.8k|        return &value();
 1816|  89.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  89.8k|    {
 1769|  89.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.8k|        return this->get_value();
 1771|  89.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5553|  8.45k|{
 5554|  8.45k|    check_scan_arg_types<T>();
 5555|       |
 5556|  8.45k|    basic_scan_arg<Context> arg;
 5557|  8.45k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5558|  8.45k|    arg.m_value = make_value<Context>(value);
 5559|  8.45k|    return arg;
 5560|  8.45k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   525k|    {
 2869|   525k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   525k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   525k|    {
 2850|   525k|        return decay_copy(t.begin());
 2851|   525k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   312M|{
 2094|   312M|    return SCN_FWD(t);
  ------------------
  |  |  936|   312M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   312M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.05M|    {
 2926|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.05M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.05M|    {
 2908|  1.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.05M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9330|  88.2k|{
 9331|  88.2k|    return scan_result_type<Source, Args...>();
 9332|  88.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  88.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.2k|        : m_value(T{}), m_has_value(true)
  427|  88.2k|    {
  428|  88.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6264|  88.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6107|   529k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   529k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.2k|{
 9316|  88.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 660]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    660|    else {
 9320|    660|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    660|    static_cast<    \
  |  |  935|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    660|    }
 9322|  88.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   529k|    {
 1740|   529k|        return has_value();
 1741|   529k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.05M|    {
  490|  1.05M|        return m_has_value;
  491|  1.05M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   525k|    {
 1746|   525k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   525k|        return this->get_unexpected().error();
 1748|   525k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   525k|    {
  473|   525k|        return m_unexpected;
  474|   525k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.5k|    {
  456|  89.5k|        return m_value;
  457|  89.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6138|  4.31k|    {
 6139|  4.31k|        m_range = std::forward<Other>(r);
 6140|  4.31k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  4.31k|    {
 1795|  4.31k|        return value();
 1796|  4.31k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  4.31k|    {
 1769|  4.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.31k|        return this->get_value();
 1771|  4.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.31k|    {
  456|  4.31k|        return m_value;
  457|  4.31k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9091|   252k|{
 9092|   252k|    auto buffer = make_scan_buffer(range);
 9093|       |
 9094|   252k|    auto result = vscan_impl(buffer, format, args);
 9095|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250k, False: 1.99k]
  |  |  ------------------
  ------------------
 9096|   250k|        return unexpected(result.error());
 9097|   250k|    }
 9098|  1.99k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9099|   252k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5074|   529k|{
 5075|   529k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5076|       |
 5077|   529k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5078|   529k|                  "\n"
 5079|   529k|                  "Unsupported range type given as input to a scanning "
 5080|   529k|                  "function.\n"
 5081|   529k|                  "A range needs to have a character type (value type) "
 5082|   529k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5083|   529k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5084|   529k|                  "to be included.\n"
 5085|   529k|                  "See the scnlib documentation for more details.");
 5086|   529k|    static_assert(
 5087|   529k|        !std::is_same_v<T, custom_char_traits>,
 5088|   529k|        "\n"
 5089|   529k|        "Unsupported range type given as input to a scanning "
 5090|   529k|        "function.\n"
 5091|   529k|        "String types (std::basic_string, and std::basic_string_view) "
 5092|   529k|        "need to use std::char_traits. Strings with custom Traits are "
 5093|   529k|        "not supported.");
 5094|   529k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5095|   529k|                  "\n"
 5096|   529k|                  "Unsupported range type given as input to a scanning "
 5097|   529k|                  "function.\n"
 5098|   529k|                  "file_marker_found cannot be used as an "
 5099|   529k|                  "source range type to scn::scan.\n"
 5100|   529k|                  "To read from stdin, use scn::input or scn::prompt, "
 5101|   529k|                  "and do not provide an explicit source range, "
 5102|   529k|                  "or use scn::scan with a FILE* directly.");
 5103|   529k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5104|   529k|                  "\n"
 5105|   529k|                  "Unsupported range type given as input to a scanning "
 5106|   529k|                  "function.\n"
 5107|   529k|                  "In order to be scannable, a range needs to satisfy "
 5108|   529k|                  "`forward_range`. `input_range` is not sufficient.");
 5109|   529k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5110|   529k|                  "\n"
 5111|   529k|                  "Unsupported range type given as input to a scanning "
 5112|   529k|                  "function.\n"
 5113|   529k|                  "A range needs to model forward_range and have a valid "
 5114|   529k|                  "character type (char or wchar_t) to be scannable.\n"
 5115|   529k|                  "Examples of scannable ranges are std::string, "
 5116|   529k|                  "std::string_view, "
 5117|   529k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5118|   529k|                  "See the scnlib documentation for more details.");
 5119|       |
 5120|   529k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5121|   529k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5044|   529k|{
 5045|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5046|       |        return file_marker_found{};
 5047|       |    }
 5048|       |    else if constexpr (!ranges::forward_range<Range>) {
 5049|       |        if constexpr (ranges::range<Range>) {
 5050|       |            return insufficient_range{};
 5051|       |        }
 5052|       |        else {
 5053|       |            return invalid_input_range{};
 5054|       |        }
 5055|       |    }
 5056|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5057|       |        return invalid_char_type{};
 5058|       |    }
 5059|   529k|    else {
 5060|   529k|        return make_forward_scan_buffer(r);
 5061|   529k|    }
 5062|   529k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4878|   529k|{
 4879|   529k|    return basic_scan_forward_buffer_impl(range);
 4880|   529k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   529k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   529k|          m_cursor(ranges::begin(*m_range))
 4765|   529k|    {
 4766|   529k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   529k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   529k|    {
 4737|   529k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   529k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   529k|    {
 4428|   529k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   529k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   534k|    {
 2869|   534k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   534k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   534k|    {
 2850|   534k|        return decay_copy(t.begin());
 2851|   534k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   538k|    {
 3480|   538k|        return m_iterator;
 3481|   538k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|   103M|    {
 4770|   103M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 175k, False: 103M]
  ------------------
 4771|   175k|            return false;
 4772|   175k|        }
 4773|   103M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|   103M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|   103M|        }
 4776|   103M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 103M, False: 378k]
  ------------------
 4777|   103M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|   103M|                                          this->m_current_view.begin(),
 4779|   103M|                                          this->m_current_view.end());
 4780|   103M|        }
 4781|   103M|        m_latest = *m_cursor;
 4782|   103M|        ++m_cursor;
 4783|   103M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|   103M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|   103M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|   103M|        }
 4787|   103M|        return true;
 4788|   103M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   310M|    {
 2926|   310M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   310M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   310M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   310M|    {
 2908|   310M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   310M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   310M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   310M|    {
 3484|   310M|        return m_sentinel;
 3485|   310M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   529k|    {
 4346|   529k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   529k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   529k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   525k|        : base(unexpect, std::move(e.error())),
 1616|   525k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   525k|    {
 1618|   525k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   525k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   525k|          m_has_value(false)
  451|   525k|    {
  452|   525k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   529k|    {
 1316|   529k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6368|  4.31k|{
 6369|       |    if constexpr (ranges::random_access_iterator<
 6370|  4.31k|                      ranges::iterator_t<SourceRange>>) {
 6371|  4.31k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6372|       |    }
 6373|       |    else {
 6374|       |        auto it = ranges::begin(source);
 6375|       |        while (n > 0) {
 6376|       |            --n;
 6377|       |            ++it;
 6378|       |        }
 6379|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6380|       |    }
 6381|  4.31k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  4.31k|    {
 2869|  4.31k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  4.31k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  4.31k|    {
 2850|  4.31k|        return decay_copy(t.begin());
 2851|  4.31k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6355|  4.31k|{
 6356|  4.31k|    return ranges::end(source);
 6357|  4.31k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  4.31k|    {
 2926|  4.31k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  4.31k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  4.31k|    {
 2908|  4.31k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  4.31k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  4.31k|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.31k|    {
 1572|  4.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  4.31k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.31k|    {
  442|  4.31k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  84.0k|    {
 8462|  84.0k|        return m_str;
 8463|  84.0k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   534k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   534k|    static_cast<    \
  |  |  935|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   534k|    static_cast<    \
  |  |  935|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   534k|    {
 3466|   534k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.0k|        : m_str(r.str)
 8457|  84.0k|    {
 8458|  84.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  88.2k|    {
 1740|  88.2k|        return has_value();
 1741|  88.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|  89.5k|    {
 1815|  89.5k|        return &value();
 1816|  89.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  89.5k|    {
 1769|  89.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.5k|        return this->get_value();
 1771|  89.5k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6127|  4.31k|    {
 6128|  4.31k|        return ranges::begin(m_range);
 6129|  4.31k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9107|   252k|{
 9108|   252k|#if !SCN_DISABLE_LOCALE
 9109|   252k|    auto buffer = detail::make_scan_buffer(range);
 9110|       |
 9111|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9112|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9113|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9114|       |
 9115|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250k, False: 1.99k]
  |  |  ------------------
  ------------------
 9116|   250k|        return unexpected(result.error());
 9117|   250k|    }
 9118|  1.99k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9119|       |#else
 9120|       |    static_assert(dependent_false<Locale>::value,
 9121|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9122|       |
 9123|       |    return {};
 9124|       |#endif
 9125|   252k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9131|  25.3k|{
 9132|  25.3k|    auto buffer = detail::make_scan_buffer(range);
 9133|       |
 9134|  25.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9135|  25.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.0k, False: 320]
  |  |  ------------------
  ------------------
 9136|  25.0k|        return unexpected(result.error());
 9137|  25.0k|    }
 9138|    320|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9139|  25.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9330|  88.1k|{
 9331|  88.1k|    return scan_result_type<Source, Args...>();
 9332|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  88.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.1k|        : m_value(T{}), m_has_value(true)
  427|  88.1k|    {
  428|  88.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6264|  88.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.1k|{
 9316|  88.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 563]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    563|    else {
 9320|    563|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    563|    static_cast<    \
  |  |  935|    563|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    563|    }
 9322|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.2k|    {
  456|  89.2k|        return m_value;
  457|  89.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  83.9k|    {
 8462|  83.9k|        return m_str;
 8463|  83.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  83.9k|        : m_str(r.str)
 8457|  83.9k|    {
 8458|  83.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  88.1k|    {
 1740|  88.1k|        return has_value();
 1741|  88.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|  89.2k|    {
 1815|  89.2k|        return &value();
 1816|  89.2k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  89.2k|    {
 1769|  89.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.2k|        return this->get_value();
 1771|  89.2k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9330|  88.3k|{
 9331|  88.3k|    return scan_result_type<Source, Args...>();
 9332|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  88.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.3k|        : m_value(T{}), m_has_value(true)
  427|  88.3k|    {
  428|  88.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6264|  88.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.3k|{
 9316|  88.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 776]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    776|    else {
 9320|    776|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    776|    static_cast<    \
  |  |  935|    776|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    776|    }
 9322|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.8k|    {
  456|  89.8k|        return m_value;
  457|  89.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  84.1k|    {
 8462|  84.1k|        return m_str;
 8463|  84.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.1k|        : m_str(r.str)
 8457|  84.1k|    {
 8458|  84.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  88.3k|    {
 1740|  88.3k|        return has_value();
 1741|  88.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  89.8k|    {
 1815|  89.8k|        return &value();
 1816|  89.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  89.8k|    {
 1769|  89.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.8k|        return this->get_value();
 1771|  89.8k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9330|  88.1k|{
 9331|  88.1k|    return scan_result_type<Source, Args...>();
 9332|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  88.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.1k|        : m_value(T{}), m_has_value(true)
  427|  88.1k|    {
  428|  88.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6264|  88.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.1k|{
 9316|  88.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 627]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    627|    else {
 9320|    627|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    627|    static_cast<    \
  |  |  935|    627|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    627|    }
 9322|  88.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.4k|    {
  456|  89.4k|        return m_value;
  457|  89.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  83.9k|    {
 8462|  83.9k|        return m_str;
 8463|  83.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  83.9k|        : m_str(r.str)
 8457|  83.9k|    {
 8458|  83.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  88.1k|    {
 1740|  88.1k|        return has_value();
 1741|  88.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  89.4k|    {
 1815|  89.4k|        return &value();
 1816|  89.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  89.4k|    {
 1769|  89.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.4k|        return this->get_value();
 1771|  89.4k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9330|  88.4k|{
 9331|  88.4k|    return scan_result_type<Source, Args...>();
 9332|  88.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  88.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.4k|        : m_value(T{}), m_has_value(true)
  427|  88.4k|    {
  428|  88.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6264|  88.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.4k|{
 9316|  88.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 929]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    929|    else {
 9320|    929|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    929|    static_cast<    \
  |  |  935|    929|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    929|    }
 9322|  88.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  90.3k|    {
  456|  90.3k|        return m_value;
  457|  90.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  84.2k|    {
 8462|  84.2k|        return m_str;
 8463|  84.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.2k|        : m_str(r.str)
 8457|  84.2k|    {
 8458|  84.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  88.4k|    {
 1740|  88.4k|        return has_value();
 1741|  88.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  90.3k|    {
 1815|  90.3k|        return &value();
 1816|  90.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  90.3k|    {
 1769|  90.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  90.3k|        return this->get_value();
 1771|  90.3k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9330|  88.3k|{
 9331|  88.3k|    return scan_result_type<Source, Args...>();
 9332|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  88.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.3k|        : m_value(T{}), m_has_value(true)
  427|  88.3k|    {
  428|  88.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6264|  88.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9315|  88.3k|{
 9316|  88.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 87.5k, False: 757]
  |  |  ------------------
  ------------------
 9317|  87.5k|        out = unexpected(in.error());
 9318|  87.5k|    }
 9319|    757|    else {
 9320|    757|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    757|    static_cast<    \
  |  |  935|    757|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9321|    757|    }
 9322|  88.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  87.5k|        : base(unexpect, std::move(e.error())),
 1616|  87.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  87.5k|    {
 1618|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  87.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  87.5k|          m_has_value(false)
  451|  87.5k|    {
  452|  87.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  87.5k|    {
 1316|  87.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  87.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  87.5k|    {
  903|  87.5k|        assign_common(std::move(other));
  904|  87.5k|        return *this;
  905|  87.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  87.5k|    {
  950|  87.5k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 87.5k, False: 0]
  ------------------
  951|  87.5k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 87.5k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  87.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  87.5k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   353k|    {
  490|   353k|        return m_has_value;
  491|   353k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  89.8k|    {
  456|  89.8k|        return m_value;
  457|  89.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  87.5k|    {
 1046|  87.5k|        this->destroy_value();
 1047|  87.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  87.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  87.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  87.5k|    {
  504|  87.5k|        scn::detail::construct_at(&get_unexpected(),
  505|  87.5k|                                  std::forward<Args>(args)...);
  506|  87.5k|        m_has_value = false;
  507|  87.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  87.5k|    {
  473|  87.5k|        return m_unexpected;
  474|  87.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  87.5k|    {
  481|  87.5k|        return std::move(m_unexpected);
  482|  87.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8461|  84.1k|    {
 8462|  84.1k|        return m_str;
 8463|  84.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8456|  84.1k|        : m_str(r.str)
 8457|  84.1k|    {
 8458|  84.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  88.3k|    {
 1740|  88.3k|        return has_value();
 1741|  88.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  89.8k|    {
 1815|  89.8k|        return &value();
 1816|  89.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  89.8k|    {
 1769|  89.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  89.8k|        return this->get_value();
 1771|  89.8k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  2.17M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  2.17M|    {
 3742|  2.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  2.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  2.17M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  57.7M|    {
 3480|  57.7M|        return m_iterator;
 3481|  57.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|   110M|    {
 3480|   110M|        return m_iterator;
 3481|   110M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  26.1M|    {
  572|  26.1M|        return m_has_value;
  573|  26.1M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  1.75M|    {
  555|  1.75M|        return m_unexpected;
  556|  1.75M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  1.35M|    {
 1746|  1.35M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.35M|        return this->get_unexpected().error();
 1748|  1.35M|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6667|  3.99M|    {
 6668|  3.99M|        SCN_GCC_COMPAT_PUSH
 6669|  3.99M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6670|  3.99M|        switch (type) {
 6671|   757k|            case presentation_type::none:
  ------------------
  |  Branch (6671:13): [True: 757k, False: 3.23M]
  ------------------
 6672|   757k|                return 10;
 6673|  1.04M|            case presentation_type::int_generic:
  ------------------
  |  Branch (6673:13): [True: 1.04M, False: 2.95M]
  ------------------
 6674|  1.04M|                return 0;
 6675|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6675:13): [True: 0, False: 3.99M]
  ------------------
 6676|      0|                return arbitrary_base;
 6677|       |
 6678|   233k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6678:13): [True: 233k, False: 3.75M]
  ------------------
 6679|   233k|                return 2;
 6680|   360k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6680:13): [True: 360k, False: 3.63M]
  ------------------
 6681|   360k|                return 8;
 6682|   752k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6682:13): [True: 752k, False: 3.23M]
  ------------------
 6683|   752k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6683:13): [True: 0, False: 3.99M]
  ------------------
 6684|   752k|                return 10;
 6685|   846k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6685:13): [True: 846k, False: 3.14M]
  ------------------
 6686|   846k|                return 16;
 6687|       |
 6688|      0|            default:
  ------------------
  |  Branch (6688:13): [True: 0, False: 3.99M]
  ------------------
 6689|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6690|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6691|  3.99M|        }
 6692|  3.99M|        SCN_GCC_COMPAT_POP
 6693|  3.99M|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 6705|  4.48M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 6749|  3.41M|    {
 6750|  3.41M|        m_specs.type = type;
 6751|  3.41M|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 6811|   300k|    {
 6812|   300k|        SCN_UNLIKELY_ATTR
 6813|   300k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 6814|   300k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 6822|  4.18M|    {
 6823|  4.18M|        return m_error;
 6824|  4.18M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  1.81M|{
 3918|  1.81M|    return unexpected(scan_error{c, m});
 3919|  1.81M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  5.25M|{
 4308|       |    // Pattern_White_Space property
 4309|  5.25M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.86M, False: 389k]
  |  Branch (4309:27): [True: 2.25M, False: 2.61M]
  ------------------
 4310|  5.25M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 50.8k, False: 2.95M]
  ------------------
 4311|  5.25M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 10.3k, False: 2.94M]
  ------------------
 4312|  5.25M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 3.04k, False: 2.94M]
  ------------------
 4313|  5.25M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 4.61k, False: 2.93M]
  ------------------
 4314|  5.25M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 3.23k, False: 2.93M]
  ------------------
 4315|  5.25M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 2.93M]
  ------------------
 4316|  5.25M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7505|   767k|{
 7506|   767k|    switch (type) {
 7507|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7507:9): [True: 0, False: 767k]
  ------------------
 7508|      0|            return arg_type_category::none;
 7509|       |
 7510|   123k|        case arg_type::schar_type:
  ------------------
  |  Branch (7510:9): [True: 123k, False: 643k]
  ------------------
 7511|   123k|        case arg_type::short_type:
  ------------------
  |  Branch (7511:9): [True: 0, False: 767k]
  ------------------
 7512|   264k|        case arg_type::int_type:
  ------------------
  |  Branch (7512:9): [True: 140k, False: 626k]
  ------------------
 7513|   264k|        case arg_type::long_type:
  ------------------
  |  Branch (7513:9): [True: 0, False: 767k]
  ------------------
 7514|   408k|        case arg_type::llong_type:
  ------------------
  |  Branch (7514:9): [True: 143k, False: 624k]
  ------------------
 7515|   408k|            return arg_type_category::integer;
 7516|       |
 7517|   111k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7517:9): [True: 111k, False: 655k]
  ------------------
 7518|   111k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7518:9): [True: 0, False: 767k]
  ------------------
 7519|   234k|        case arg_type::uint_type:
  ------------------
  |  Branch (7519:9): [True: 122k, False: 644k]
  ------------------
 7520|   234k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7520:9): [True: 0, False: 767k]
  ------------------
 7521|   359k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7521:9): [True: 124k, False: 643k]
  ------------------
 7522|   359k|            return arg_type_category::unsigned_integer;
 7523|       |
 7524|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7524:9): [True: 0, False: 767k]
  ------------------
 7525|      0|            return arg_type_category::pointer;
 7526|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7526:9): [True: 0, False: 767k]
  ------------------
 7527|      0|            return arg_type_category::boolean;
 7528|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7528:9): [True: 0, False: 767k]
  ------------------
 7529|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7529:9): [True: 0, False: 767k]
  ------------------
 7530|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7530:9): [True: 0, False: 767k]
  ------------------
 7531|      0|            return arg_type_category::character;
 7532|       |
 7533|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7533:9): [True: 0, False: 767k]
  ------------------
 7534|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7534:9): [True: 0, False: 767k]
  ------------------
 7535|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7535:9): [True: 0, False: 767k]
  ------------------
 7536|      0|            return arg_type_category::floating;
 7537|       |
 7538|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7538:9): [True: 0, False: 767k]
  ------------------
 7539|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7539:9): [True: 0, False: 767k]
  ------------------
 7540|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7540:9): [True: 0, False: 767k]
  ------------------
 7541|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7541:9): [True: 0, False: 767k]
  ------------------
 7542|      0|            return arg_type_category::string;
 7543|       |
 7544|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7544:9): [True: 0, False: 767k]
  ------------------
 7545|      0|            return arg_type_category::custom;
 7546|       |
 7547|      0|            SCN_CLANG_PUSH
 7548|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7549|      0|        default:
  ------------------
  |  Branch (7549:9): [True: 0, False: 767k]
  ------------------
 7550|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7551|   767k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7552|   767k|            SCN_CLANG_POP
 7553|   767k|    }
 7554|       |
 7555|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7556|   767k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|   408k|    {
 1756|   408k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   408k|        return std::move(this->get_unexpected().error());
 1758|   408k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7591|  4.03M|{
 7592|  4.03M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|  4.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.03M]
  |  |  ------------------
  ------------------
 7593|      0|        return handler.on_error("Invalid type specifier for integer type");
 7594|      0|    }
 7595|  4.03M|    if (specs.localized) {
  ------------------
  |  Branch (7595:9): [True: 767k, False: 3.26M]
  ------------------
 7596|   767k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 767k]
  |  |  ------------------
  ------------------
 7597|       |            // clang-format off
 7598|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7599|       |            // clang-format on
 7600|      0|            return;
 7601|      0|        }
 7602|   767k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|   767k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 767k]
  |  |  ------------------
  ------------------
 7603|       |            // clang-format off
 7604|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7605|       |            // clang-format on
 7606|      0|        }
 7607|   767k|    }
 7608|  4.03M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  24.3M|    {
 1740|  24.3M|        return has_value();
 1741|  24.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|   326M|    {
 4472|   326M|        assert(m_begin);
 4473|   326M|        return m_end == nullptr;
 4474|   326M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  3.27M|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  3.27M|    else {
 3981|  3.27M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  3.27M|    }
 3983|  3.27M|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|  7.57M|    {
 4489|  7.57M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 7.57M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  7.57M|        return parent()->get_segment_starting_at(position());
 4495|  7.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|   179M|    {
 4483|   179M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   179M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   179M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   179M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  7.57M|    {
 4376|  7.57M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  7.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.02M, False: 5.54M]
  |  |  ------------------
  ------------------
 4377|  7.57M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  2.02M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  2.02M|        }
 4380|  5.54M|        const auto start = pos - m_putback_buffer.size();
 4381|  5.54M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  5.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  5.54M|        return m_current_view.substr(start);
 4383|  5.54M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4477|  1.97M|    {
 4478|  1.97M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|  1.97M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|  1.97M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|  12.2M|    {
 4467|  12.2M|        return m_position;
 4468|  12.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|  6.85M|    {
 4398|  6.85M|        return m_is_contiguous;
 4399|  6.85M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|   421G|    {
 4472|   421G|        assert(m_begin);
 4473|   421G|        return m_end == nullptr;
 4474|   421G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  8.21k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  8.21k|    else {
 3981|  8.21k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  8.21k|    }
 3983|  8.21k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|   387k|    {
 4489|   387k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 387k]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|   387k|        return parent()->get_segment_starting_at(position());
 4495|   387k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|   210G|    {
 4483|   210G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   210G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   210G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   210G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   210G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|   387k|    {
 4376|   387k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.55k, False: 383k]
  |  |  ------------------
  ------------------
 4377|   387k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  3.55k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  3.55k|        }
 4380|   383k|        const auto start = pos - m_putback_buffer.size();
 4381|   383k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   383k|        return m_current_view.substr(start);
 4383|   383k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4477|   301k|    {
 4478|   301k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|   301k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|   301k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|   694k|    {
 4467|   694k|        return m_position;
 4468|   694k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|  1.58M|    {
 4398|  1.58M|        return m_is_contiguous;
 4399|  1.58M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  9.37M|    {
 3334|  9.37M|        return static_cast<D&>(*this);
 3335|  9.37M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  9.37M|    {
 3375|  9.37M|        return detail::to_address(ranges::begin(derived()));
 3376|  9.37M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.23M|    {
 3334|  1.23M|        return static_cast<D&>(*this);
 3335|  1.23M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.23M|    {
 3375|  1.23M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.23M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8658|  1.71M|    {
 8659|  1.71M|        return ranges::subrange{begin(), end()};
 8660|  1.71M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8650|  1.71M|    {
 8651|  1.71M|        return ranges::default_sentinel;
 8652|  1.71M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  18.5M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  18.5M|    static_cast<    \
  |  |  935|  18.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  18.5M|    static_cast<    \
  |  |  935|  18.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  18.5M|    {
 3466|  18.5M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8477|  3.75M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.20M|    {
 1979|  2.20M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.20M|                                            std::forward<F>(f));
 1981|  2.20M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.20M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.20M|    else {
 1472|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.18M, False: 27.1k]
  |  |  ------------------
  ------------------
 1474|  2.20M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.20M|                   : result(unexpect,
 1476|  27.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  27.1k|                                           std::forward<Exp>(exp).error()));
 1478|  2.20M|    }
 1479|  2.20M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.5M|    {
  490|  11.5M|        return m_has_value;
  491|  11.5M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  4.13M|    {
 1805|  4.13M|        return std::move(value());
 1806|  4.13M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.59M|    {
 1769|  4.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.59M|        return this->get_value();
 1771|  4.59M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.59M|    {
  456|  4.59M|        return m_value;
  457|  4.59M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  7.35M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.35M|    {
 1572|  7.35M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  7.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.35M|    {
  442|  7.35M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.78M|    {
 1316|  7.78M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  57.4k|{
 1350|  57.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  57.4k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  48.5k|    {
 1756|  48.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  48.5k|        return std::move(this->get_unexpected().error());
 1758|  48.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  49.1k|    {
  473|  49.1k|        return m_unexpected;
  474|  49.1k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   284k|    {
  365|   284k|        return m_unexpected;
  366|   284k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   114k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   114k|    {
 1628|   114k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   429k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   429k|          m_has_value(false)
  451|   429k|    {
  452|   429k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8658|   303k|    {
 8659|   303k|        return ranges::subrange{begin(), end()};
 8660|   303k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8650|   303k|    {
 8651|   303k|        return ranges::default_sentinel;
 8652|   303k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  2.72M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.72M|    static_cast<    \
  |  |  935|  2.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.72M|    static_cast<    \
  |  |  935|  2.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.72M|    {
 3466|  2.72M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   379k|    {
 1979|   379k|        return detail::transform_error_impl(std::move(*this),
 1980|   379k|                                            std::forward<F>(f));
 1981|   379k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   379k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   379k|    else {
 1472|   379k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   379k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 377k, False: 2.48k]
  |  |  ------------------
  ------------------
 1474|   379k|                   ? result(*std::forward<Exp>(exp))
 1475|   379k|                   : result(unexpect,
 1476|  2.48k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.48k|                                           std::forward<Exp>(exp).error()));
 1478|   379k|    }
 1479|   379k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.84M|    {
  490|  1.84M|        return m_has_value;
  491|  1.84M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   647k|    {
 1805|   647k|        return std::move(value());
 1806|   647k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   650k|    {
 1769|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   650k|        return this->get_value();
 1771|   650k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   650k|    {
  456|   650k|        return m_value;
  457|   650k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   388k|        : base(std::in_place, std::forward<U>(val)),
 1570|   388k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   388k|    {
 1572|   388k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   388k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   388k|    {
  442|   388k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.38M|    {
 1316|  1.38M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  33.6k|    {
 1756|  33.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  33.6k|        return std::move(this->get_unexpected().error());
 1758|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  33.7k|    {
  473|  33.7k|        return m_unexpected;
  474|  33.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   324k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   324k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   324k|    {
 1628|   324k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   997k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   997k|          m_has_value(false)
  451|   997k|    {
  452|   997k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  1.81M|        : m_unexpected(std::forward<Err>(e))
  350|  1.81M|    {
  351|  1.81M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  1.81M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  1.81M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  1.57M|        : base(unexpect, std::move(e.error())),
 1616|  1.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.57M|    {
 1618|  1.57M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|  1.57M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.57M|          m_has_value(false)
  451|  1.57M|    {
  452|  1.57M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.62M|    {
 1316|  5.62M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   527k|        : base(unexpect, std::move(e.error())),
 1616|   527k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   527k|    {
 1618|   527k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   552k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   552k|          m_has_value(false)
  451|   552k|    {
  452|   552k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.4M|    {
 1316|  14.4M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  13.8M|        : base(std::in_place, std::forward<U>(val)),
 1570|  13.8M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  13.8M|    {
 1572|  13.8M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  13.8M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  13.8M|    {
  442|  13.8M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  14.4M|    {
 1740|  14.4M|        return has_value();
 1741|  14.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  28.8M|    {
  490|  28.8M|        return m_has_value;
  491|  28.8M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   552k|    {
 1746|   552k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   552k|        return this->get_unexpected().error();
 1748|   552k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   552k|    {
  473|   552k|        return m_unexpected;
  474|   552k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  12.3M|    {
 1805|  12.3M|        return std::move(value());
 1806|  12.3M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  13.8M|    {
 1769|  13.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  13.8M|        return this->get_value();
 1771|  13.8M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  13.8M|    {
  456|  13.8M|        return m_value;
  457|  13.8M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   997k|        : base(unexpect, std::move(e.error())),
 1616|   997k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   997k|    {
 1618|   997k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.00M|          m_has_value(false)
  451|  1.00M|    {
  452|  1.00M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.72M|    {
 1316|  1.72M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   723k|        : base(std::in_place, std::forward<U>(val)),
 1570|   723k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   723k|    {
 1572|   723k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   723k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   723k|    {
  442|   723k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  1.72M|    {
 1740|  1.72M|        return has_value();
 1741|  1.72M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.44M|    {
  490|  3.44M|        return m_has_value;
  491|  3.44M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  1.00M|    {
 1746|  1.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.00M|        return this->get_unexpected().error();
 1748|  1.00M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.00M|    {
  473|  1.00M|        return m_unexpected;
  474|  1.00M|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   720k|    {
 1805|   720k|        return std::move(value());
 1806|   720k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   723k|    {
 1769|   723k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   723k|        return this->get_value();
 1771|   723k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   723k|    {
  456|   723k|        return m_value;
  457|   723k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  2.20M|    {
 1979|  2.20M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.20M|                                            std::forward<F>(f));
 1981|  2.20M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  2.20M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.20M|    else {
 1472|  2.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.17M, False: 25.2k]
  |  |  ------------------
  ------------------
 1474|  2.20M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.20M|                   : result(unexpect,
 1476|  25.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  25.2k|                                           std::forward<Exp>(exp).error()));
 1478|  2.20M|    }
 1479|  2.20M|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  7.62M|    {
  490|  7.62M|        return m_has_value;
  491|  7.62M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.17M|    {
 1805|  2.17M|        return std::move(value());
 1806|  2.17M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.63M|    {
 1769|  2.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.63M|        return this->get_value();
 1771|  2.63M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.63M|    {
  456|  2.63M|        return m_value;
  457|  2.63M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  25.2k|    {
 1756|  25.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  25.2k|        return std::move(this->get_unexpected().error());
 1758|  25.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  25.8k|    {
  473|  25.8k|        return m_unexpected;
  474|  25.8k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  25.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  25.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  25.2k|    {
 1628|  25.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8642|  5.08M|    {
 8643|  5.08M|        return m_current;
 8644|  5.08M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8535|  3.42M|    {
 8536|  3.42M|        return m_locale;
 8537|  3.42M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8541|  3.57M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  3.57M|    static_cast<    \
  |  |  935|  3.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  3.57M|    static_cast<    \
  |  |  935|  3.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|  3.57M|    {
 8543|  3.57M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   315k|        : base(unexpect, std::move(e.error())),
 1616|   315k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   315k|    {
 1618|   315k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8642|   760k|    {
 8643|   760k|        return m_current;
 8644|   760k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8535|   607k|    {
 8536|   607k|        return m_locale;
 8537|   607k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8541|   907k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   907k|    static_cast<    \
  |  |  935|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   907k|    static_cast<    \
  |  |  935|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8542|   907k|    {
 8543|   907k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   673k|        : base(unexpect, std::move(e.error())),
 1616|   673k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   673k|    {
 1618|   673k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  20.6M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  20.6M|        : m_deferred_init(), m_has_value(true)
  529|  20.6M|    {
  530|  20.6M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  2.36M|        : base(unexpect, std::move(e.error())),
 1616|  2.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.36M|    {
 1618|  2.36M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  2.36M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  2.36M|          m_has_value(false)
  550|  2.36M|    {
  551|  2.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.36M|    {
 1316|  2.36M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  12.2M|    {
 4558|  12.2M|        return x.is_at_end();
 4559|  12.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  26.4M|    {
 4602|  26.4M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 26.4M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  26.4M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 26.4M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  26.4M|        return !read_at_position();
 4609|  26.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|   101M|    {
 4582|   101M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   101M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   101M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   101M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 101M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   101M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   101M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 89.1M, False: 12.2M]
  |  |  ------------------
  ------------------
 4589|  89.1M|            return true;
 4590|  89.1M|        }
 4591|       |
 4592|  24.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 12.2M, False: 11.9M]
  ------------------
 4593|  12.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 300k, False: 11.9M]
  ------------------
 4594|   300k|                return false;
 4595|   300k|            }
 4596|  12.2M|        }
 4597|  11.9M|        return true;
 4598|  12.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|   127M|    {
 4356|   127M|        return m_putback_buffer.size() + m_current_view.size();
 4357|   127M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  34.2M|    {
 4517|  34.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  34.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 34.2M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  34.2M|        auto res = read_at_position();
 4526|  34.2M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  34.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  34.2M|        return parent()->get_character_at(m_position);
 4528|  34.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  34.2M|    {
 4387|  34.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  34.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3M, False: 11.9M]
  |  |  ------------------
  ------------------
 4388|  34.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  22.3M|            return m_putback_buffer[pos];
 4390|  22.3M|        }
 4391|  11.9M|        const auto start = pos - m_putback_buffer.size();
 4392|  11.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  11.9M|        return m_current_view[start];
 4394|  11.9M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  6.90M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.90M|    {
 1572|  6.90M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.90M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.90M|    {
  442|  6.90M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.95M|    {
 1316|  6.95M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  83.6k|        : m_unexpected(std::forward<Err>(e))
  350|  83.6k|    {
  351|  83.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  83.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  83.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  49.1k|        : base(unexpect, std::move(e.error())),
 1616|  49.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  49.1k|    {
 1618|  49.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  49.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  49.1k|          m_has_value(false)
  451|  49.1k|    {
  452|  49.1k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   142k|        : m_unexpected(std::forward<Args>(args)...)
  359|   142k|    {
  360|   142k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   142k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   142k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  2.76M|    {
 1740|  2.76M|        return has_value();
 1741|  2.76M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   458k|    {
 1795|   458k|        return value();
 1796|   458k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  23.0M|    {
 4552|  23.0M|        return !(lhs == rhs);
 4553|  23.0M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  24.6M|    {
 4547|  24.6M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 24.6M, False: 0]
  |  Branch (4547:46): [True: 2.89M, False: 21.7M]
  ------------------
 4548|  24.6M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  40.6M|    {
 4503|  40.6M|        ++m_position;
 4504|  40.6M|        (void)read_at_position();
 4505|  40.6M|        return *this;
 4506|  40.6M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  58.8k|        : m_unexpected(std::forward<Err>(e))
  350|  58.8k|    {
  351|  58.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  58.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  58.8k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  21.9k|        : base(unexpect, std::move(e.error())),
 1616|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.9k|    {
 1618|  21.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  21.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.9k|          m_has_value(false)
  451|  21.9k|    {
  452|  21.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.27M|    {
 1316|  3.27M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  3.25M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.25M|    {
 1572|  3.25M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  3.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.25M|    {
  442|  3.25M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  3.27M|    {
 1740|  3.27M|        return has_value();
 1741|  3.27M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.54M|    {
  490|  6.54M|        return m_has_value;
  491|  6.54M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  21.9k|    {
 1746|  21.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  21.9k|        return this->get_unexpected().error();
 1748|  21.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  21.9k|    {
  473|  21.9k|        return m_unexpected;
  474|  21.9k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  3.25M|    {
 1805|  3.25M|        return std::move(value());
 1806|  3.25M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  3.25M|    {
 1769|  3.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.25M|        return this->get_value();
 1771|  3.25M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.25M|    {
  456|  3.25M|        return m_value;
  457|  3.25M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  40.9M|    {
 3484|  40.9M|        return m_sentinel;
 3485|  40.9M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  22.3k|        : m_unexpected(std::forward<Err>(e))
  350|  22.3k|    {
  351|  22.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  22.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  22.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  5.33M|    {
  365|  5.33M|        return m_unexpected;
  366|  5.33M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   189k|        : m_unexpected(std::forward<Args>(args)...)
  359|   189k|    {
  360|   189k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   189k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   189k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  11.2M|        : m_unexpected(std::forward<Err>(e))
  350|  11.2M|    {
  351|  11.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  11.2M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  11.2M|    {
  365|  11.2M|        return m_unexpected;
  366|  11.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  11.2M|        : m_unexpected(std::forward<Args>(args)...)
  359|  11.2M|    {
  360|  11.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  11.2M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  83.6k|{
 1350|  83.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  83.6k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  83.6k|        : m_unexpected(std::forward<Err>(e))
  350|  83.6k|    {
  351|  83.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  83.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  83.6k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|   408k|{
 1350|   408k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   408k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|   119k|{
  396|   119k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   119k|        T(std::forward<Args>(args)...);
  398|   119k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|   617k|    {
 3107|   617k|        return fn::impl(std::forward<T>(t));
 3108|   617k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|   617k|    {
 3098|   617k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|   617k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|   617k|    {
 3075|   617k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   617k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|   617k|    {
 3041|   617k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   617k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   119k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   119k|    else {
  408|   119k|        p->~T();
  409|   119k|    }
  410|   119k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    588|    {
 1746|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    588|        return this->get_unexpected().error();
 1748|    588|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  21.9k|        : base(unexpect, std::move(e.error())),
 1616|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.9k|    {
 1618|  21.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  43.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  43.2k|          m_has_value(false)
  451|  43.2k|    {
  452|  43.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.97M|    {
 1316|  8.97M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   737k|        : base(std::in_place, std::forward<U>(val)),
 1570|   737k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   737k|    {
 1572|   737k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   737k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   737k|    {
  442|   737k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  4.64M|        : base(unexpect, std::move(e.error())),
 1616|  4.64M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.64M|    {
 1618|  4.64M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  4.64M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.64M|          m_has_value(false)
  451|  4.64M|    {
  452|  4.64M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  7.30M|    {
 1740|  7.30M|        return has_value();
 1741|  7.30M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  15.3M|    {
  490|  15.3M|        return m_has_value;
  491|  15.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  2.01M|    {
 1746|  2.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.01M|        return this->get_unexpected().error();
 1748|  2.01M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.10M|    {
  473|  2.10M|        return m_unexpected;
  474|  2.10M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.18M|    {
 1572|  2.18M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.18M|    {
  442|  2.18M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.18M|    {
 1316|  2.18M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   756k|    {
 1795|   756k|        return value();
 1796|   756k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.28M|    {
 1769|  4.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.28M|        return this->get_value();
 1771|  4.28M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  4.28M|    {
  456|  4.28M|        return m_value;
  457|  4.28M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  2.18M|    {
 1740|  2.18M|        return has_value();
 1741|  2.18M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  4.36M|    {
  490|  4.36M|        return m_has_value;
  491|  4.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.18M|    {
 1316|  2.18M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  2.18M|    {
 1769|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.18M|        return this->get_value();
 1771|  2.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  2.18M|    {
  456|  2.18M|        return m_value;
  457|  2.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.97M|    {
 1979|  1.97M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.97M|                                            std::forward<F>(f));
 1981|  1.97M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.97M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.97M|    else {
 1472|  1.97M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.97M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.95M, False: 21.3k]
  |  |  ------------------
  ------------------
 1474|  1.97M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.97M|                   : result(unexpect,
 1476|  21.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  21.3k|                                           std::forward<Exp>(exp).error()));
 1478|  1.97M|    }
 1479|  1.97M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  3.54M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.54M|    {
 1572|  3.54M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.54M|    {
  442|  3.54M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  21.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  21.3k|    {
 1628|  21.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.52M|    {
 1805|  3.52M|        return std::move(value());
 1806|  3.52M|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.18M|    {
 1572|  2.18M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.18M|    {
  442|  2.18M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  2.18M|    {
 1979|  2.18M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.18M|                                            std::forward<F>(f));
 1981|  2.18M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|  2.18M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.18M|    else {
 1472|  2.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.18M, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.18M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.18M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.18M|    }
 1479|  2.18M|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.36M|    {
  490|  4.36M|        return m_has_value;
  491|  4.36M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.18M|    {
 1769|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.18M|        return this->get_value();
 1771|  2.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.18M|    {
  456|  2.18M|        return m_value;
  457|  2.18M|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  2.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.18M|    {
 1572|  2.18M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|  2.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.18M|    {
  442|  2.18M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.18M|    {
 1316|  2.18M|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|  2.18M|    {
 1740|  2.18M|        return has_value();
 1741|  2.18M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.36M|    {
  490|  4.36M|        return m_has_value;
  491|  4.36M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  2.18M|    {
 1769|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.18M|        return this->get_value();
 1771|  2.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.18M|    {
  456|  2.18M|        return m_value;
  457|  2.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  1.66M|    {
 1979|  1.66M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.66M|                                            std::forward<F>(f));
 1981|  1.66M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|  1.66M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.66M|    else {
 1472|  1.66M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.66M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.57M, False: 86.8k]
  |  |  ------------------
  ------------------
 1474|  1.66M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.66M|                   : result(unexpect,
 1476|  86.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  86.8k|                                           std::forward<Exp>(exp).error()));
 1478|  1.66M|    }
 1479|  1.66M|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|  86.8k|    {
 1756|  86.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  86.8k|        return std::move(this->get_unexpected().error());
 1758|  86.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  10.1k|        : base(unexpect, std::move(e.error())),
 1616|  10.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.1k|    {
 1618|  10.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  10.1k|        : m_has_value(false)
  637|  10.1k|    {
  638|  10.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  10.1k|    {
  701|  10.1k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.1k|                                  std::forward<Args>(args)...);
  703|  10.1k|        m_has_value = false;
  704|  10.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  30.5k|    {
  730|  30.5k|        return reinterpret_cast<unexpected<E>*>(
  731|  30.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  30.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  30.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   324k|    {
 1316|   324k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   313k|        : base(std::in_place, std::forward<U>(val)),
 1570|   313k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   313k|    {
 1572|   313k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|   313k|        : m_has_value(true)
  627|   313k|    {
  628|   313k|        construct(std::forward<Args>(args)...);
  629|   313k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|   313k|    {
  694|   313k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   313k|        m_has_value = true;
  696|   313k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|   313k|{
  396|   313k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   313k|        T(std::forward<Args>(args)...);
  398|   313k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   941k|    {
  718|   941k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   941k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   941k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1739|   324k|    {
 1740|   324k|        return has_value();
 1741|   324k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   972k|    {
  687|   972k|        return m_has_value;
  688|   972k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1745|  10.1k|    {
 1746|  10.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  10.1k|        return this->get_unexpected().error();
 1748|  10.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  10.1k|    {
  670|  10.1k|        return *unexpected_ptr();
  671|  10.1k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1804|   313k|    {
 1805|   313k|        return std::move(value());
 1806|   313k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   313k|    {
 1769|   313k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   313k|        return this->get_value();
 1771|   313k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|   313k|    {
  653|   313k|        return *value_ptr();
  654|   313k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|   324k|    {
  643|   324k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 313k, False: 10.1k]
  ------------------
  644|   313k|            destroy_value();
  645|   313k|        }
  646|  10.1k|        else {
  647|  10.1k|            destroy_unexpected();
  648|  10.1k|        }
  649|   324k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   313k|    {
  708|   313k|        scn::detail::destroy_at(value_ptr());
  709|   313k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|   313k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   313k|    else {
  408|   313k|        p->~T();
  409|   313k|    }
  410|   313k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  10.1k|    {
  712|  10.1k|        scn::detail::destroy_at(unexpected_ptr());
  713|  10.1k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.78M|    {
 1740|  7.78M|        return has_value();
 1741|  7.78M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  15.5M|    {
  490|  15.5M|        return m_has_value;
  491|  15.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   429k|    {
 1746|   429k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   429k|        return this->get_unexpected().error();
 1748|   429k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   429k|    {
  473|   429k|        return m_unexpected;
  474|   429k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  5.78M|    {
 1805|  5.78M|        return std::move(value());
 1806|  5.78M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  7.35M|    {
 1769|  7.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  7.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  7.35M|        return this->get_value();
 1771|  7.35M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.35M|    {
  456|  7.35M|        return m_value;
  457|  7.35M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  3.80M|    {
 3480|  3.80M|        return m_iterator;
 3481|  3.80M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  3.80M|    {
 3484|  3.80M|        return m_sentinel;
 3485|  3.80M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  1.57M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.57M|    static_cast<    \
  |  |  935|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.57M|    static_cast<    \
  |  |  935|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.57M|    {
 3466|  1.57M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  14.2M|    {
 4569|  14.2M|        return !x.is_at_end();
 4570|  14.2M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  25.8k|        : base(unexpect, std::move(e.error())),
 1616|  25.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  25.8k|    {
 1618|  25.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  25.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  25.8k|          m_has_value(false)
  451|  25.8k|    {
  452|  25.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.96M|    {
 1316|  4.96M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  4.94M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.94M|    {
 1572|  4.94M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.94M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.94M|    {
  442|  4.94M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  2.76M|    {
 1740|  2.76M|        return has_value();
 1741|  2.76M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   456k|    {
 1795|   456k|        return value();
 1796|   456k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  19.8k|        : base(unexpect, std::move(e.error())),
 1616|  19.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.8k|    {
 1618|  19.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  19.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  19.8k|          m_has_value(false)
  451|  19.8k|    {
  452|  19.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.25M|    {
 1316|  3.25M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  3.23M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.23M|    {
 1572|  3.23M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  3.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.23M|    {
  442|  3.23M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  3.25M|    {
 1740|  3.25M|        return has_value();
 1741|  3.25M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.51M|    {
  490|  6.51M|        return m_has_value;
  491|  6.51M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  19.8k|    {
 1746|  19.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.8k|        return this->get_unexpected().error();
 1748|  19.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  19.8k|    {
  473|  19.8k|        return m_unexpected;
  474|  19.8k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.23M|    {
 1805|  3.23M|        return std::move(value());
 1806|  3.23M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.23M|    {
 1769|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.23M|        return this->get_value();
 1771|  3.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.23M|    {
  456|  3.23M|        return m_value;
  457|  3.23M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|    588|    {
 1746|    588|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    588|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    588|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    588|        return this->get_unexpected().error();
 1748|    588|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  21.4k|        : base(unexpect, std::move(e.error())),
 1616|  21.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.4k|    {
 1618|  21.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  21.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.4k|          m_has_value(false)
  451|  21.4k|    {
  452|  21.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.31M|    {
 1316|  5.31M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   733k|        : base(std::in_place, std::forward<U>(val)),
 1570|   733k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   733k|    {
 1572|   733k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   733k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   733k|    {
  442|   733k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  4.54M|        : base(unexpect, std::move(e.error())),
 1616|  4.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.54M|    {
 1618|  4.54M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  4.54M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.54M|          m_has_value(false)
  451|  4.54M|    {
  452|  4.54M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  5.31M|    {
 1740|  5.31M|        return has_value();
 1741|  5.31M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  8.06M|    {
  490|  8.06M|        return m_has_value;
  491|  8.06M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  1.99M|    {
 1746|  1.99M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.99M|        return this->get_unexpected().error();
 1748|  1.99M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.99M|    {
  473|  1.99M|        return m_unexpected;
  474|  1.99M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.17M|    {
 1572|  2.17M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.17M|    {
  442|  2.17M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.17M|    {
 1316|  2.17M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   751k|    {
 1795|   751k|        return value();
 1796|   751k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   751k|    {
 1769|   751k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   751k|        return this->get_value();
 1771|   751k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   751k|    {
  456|   751k|        return m_value;
  457|   751k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  2.17M|    {
 1740|  2.17M|        return has_value();
 1741|  2.17M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  4.35M|    {
  490|  4.35M|        return m_has_value;
  491|  4.35M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.17M|    {
 1316|  2.17M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  2.17M|    {
 1805|  2.17M|        return std::move(value());
 1806|  2.17M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  2.17M|    {
 1769|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.17M|        return this->get_value();
 1771|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  2.17M|    {
  456|  2.17M|        return m_value;
  457|  2.17M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  18.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  18.8k|    {
 1572|  18.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  18.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  18.8k|    {
  442|  18.8k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.17M|    {
 1572|  2.17M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.17M|    {
  442|  2.17M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.17M|    {
 1979|  2.17M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.17M|                                            std::forward<F>(f));
 1981|  2.17M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  2.17M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.17M|    else {
 1472|  2.17M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.17M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.17M, False: 0]
  |  |  ------------------
  ------------------
 1474|  2.17M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.17M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  2.17M|    }
 1479|  2.17M|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  4.35M|    {
  490|  4.35M|        return m_has_value;
  491|  4.35M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.17M|    {
 1805|  2.17M|        return std::move(value());
 1806|  2.17M|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.17M|    {
 1769|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.17M|        return this->get_value();
 1771|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  2.17M|    {
  456|  2.17M|        return m_value;
  457|  2.17M|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.17M|    {
 1572|  2.17M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.17M|    {
  442|  2.17M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.17M|    {
 1316|  2.17M|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  2.17M|    {
 1740|  2.17M|        return has_value();
 1741|  2.17M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  4.35M|    {
  490|  4.35M|        return m_has_value;
  491|  4.35M|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.17M|    {
 1805|  2.17M|        return std::move(value());
 1806|  2.17M|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.17M|    {
 1769|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.17M|        return this->get_value();
 1771|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  2.17M|    {
  456|  2.17M|        return m_value;
  457|  2.17M|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  10.7k|        : base(unexpect, std::move(e.error())),
 1616|  10.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.7k|    {
 1618|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  10.7k|        : m_has_value(false)
  637|  10.7k|    {
  638|  10.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  10.7k|    {
  701|  10.7k|        scn::detail::construct_at(unexpected_ptr(),
  702|  10.7k|                                  std::forward<Args>(args)...);
  703|  10.7k|        m_has_value = false;
  704|  10.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  32.1k|    {
  730|  32.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  32.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  32.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  32.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   323k|    {
 1316|   323k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1569|   312k|        : base(std::in_place, std::forward<U>(val)),
 1570|   312k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   312k|    {
 1572|   312k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|   312k|        : m_has_value(true)
  627|   312k|    {
  628|   312k|        construct(std::forward<Args>(args)...);
  629|   312k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|   312k|    {
  694|   312k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   312k|        m_has_value = true;
  696|   312k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|   312k|{
  396|   312k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   312k|        T(std::forward<Args>(args)...);
  398|   312k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   937k|    {
  718|   937k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   937k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   937k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|   323k|    {
 1740|   323k|        return has_value();
 1741|   323k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   969k|    {
  687|   969k|        return m_has_value;
  688|   969k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|  10.7k|    {
 1746|  10.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  10.7k|        return this->get_unexpected().error();
 1748|  10.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  10.7k|    {
  670|  10.7k|        return *unexpected_ptr();
  671|  10.7k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1804|   312k|    {
 1805|   312k|        return std::move(value());
 1806|   312k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|   312k|    {
 1769|   312k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   312k|        return this->get_value();
 1771|   312k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|   312k|    {
  653|   312k|        return *value_ptr();
  654|   312k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|   323k|    {
  643|   323k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 312k, False: 10.7k]
  ------------------
  644|   312k|            destroy_value();
  645|   312k|        }
  646|  10.7k|        else {
  647|  10.7k|            destroy_unexpected();
  648|  10.7k|        }
  649|   323k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   312k|    {
  708|   312k|        scn::detail::destroy_at(value_ptr());
  709|   312k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|   312k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   312k|    else {
  408|   312k|        p->~T();
  409|   312k|    }
  410|   312k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  10.7k|    {
  712|  10.7k|        scn::detail::destroy_at(unexpected_ptr());
  713|  10.7k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  7.43M|    {
 3000|  7.43M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  7.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  7.43M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  7.43M|    {
 2981|  7.43M|        return t.data();
 2982|  7.43M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  4.04M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.04M|    {
 1572|  4.04M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  4.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.04M|    {
  442|  4.04M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  1.56M|    {
 1795|  1.56M|        return value();
 1796|  1.56M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  1.56M|    {
 1795|  1.56M|        return value();
 1796|  1.56M|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.66M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.66M|    static_cast<    \
  |  |  935|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.66M|    {
 3912|  1.66M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  1.75M|    {
 4558|  1.75M|        return x.is_at_end();
 4559|  1.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|   105M|    {
 4602|   105M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 105M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|   105M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 105M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|   105M|        return !read_at_position();
 4609|   105M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|   210G|    {
 4582|   210G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   210G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   210G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   210G|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 210G]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   210G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   210G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 210G, False: 103M]
  |  |  ------------------
  ------------------
 4589|   210G|            return true;
 4590|   210G|        }
 4591|       |
 4592|   206M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 103M, False: 103M]
  ------------------
 4593|   103M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 175k, False: 103M]
  ------------------
 4594|   175k|                return false;
 4595|   175k|            }
 4596|   103M|        }
 4597|   103M|        return true;
 4598|   103M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|   210G|    {
 4356|   210G|        return m_putback_buffer.size() + m_current_view.size();
 4357|   210G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|   105M|    {
 4517|   105M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   105M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|   105M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 105M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|   105M|        auto res = read_at_position();
 4526|   105M|        SCN_EXPECT(res);
  ------------------
  |  |  930|   105M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|   105M|        return parent()->get_character_at(m_position);
 4528|   105M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|   105M|    {
 4387|   105M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   105M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.08M, False: 103M]
  |  |  ------------------
  ------------------
 4388|   105M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  2.08M|            return m_putback_buffer[pos];
 4390|  2.08M|        }
 4391|   103M|        const auto start = pos - m_putback_buffer.size();
 4392|   103M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   103M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|   103M|        return m_current_view[start];
 4394|   103M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   759k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   759k|    else {
 4075|       |        // utf-32
 4076|   759k|        static_assert(sizeof(U) == 4);
 4077|   759k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   759k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   759k|        return 1;
 4079|   759k|    }
 4080|   759k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  1.12M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.12M|    {
 1572|  1.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.12M|    {
  442|  1.12M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.15M|    {
 1316|  1.15M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  33.7k|        : base(unexpect, std::move(e.error())),
 1616|  33.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.7k|    {
 1618|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  33.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  33.7k|          m_has_value(false)
  451|  33.7k|    {
  452|  33.7k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   477k|    {
 1740|   477k|        return has_value();
 1741|   477k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  2.67k|    {
 1795|  2.67k|        return value();
 1796|  2.67k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|   210G|    {
 4552|   210G|        return !(lhs == rhs);
 4553|   210G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|   210G|    {
 4547|   210G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 210G, False: 0]
  |  Branch (4547:46): [True: 102M, False: 209G]
  ------------------
 4548|   210G|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|   210G|    {
 4503|   210G|        ++m_position;
 4504|   210G|        (void)read_at_position();
 4505|   210G|        return *this;
 4506|   210G|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   759k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   759k|    else {
 4281|   759k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   759k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   759k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   759k|        auto cp = static_cast<char32_t>(input.front());
 4283|   759k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   759k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 349k, False: 409k]
  |  |  ------------------
  ------------------
 4284|   349k|            return invalid_code_point;
 4285|   349k|        }
 4286|   409k|        return cp;
 4287|   759k|    }
 4288|   759k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.99k|        : base(unexpect, std::move(e.error())),
 1616|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.99k|    {
 1618|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.99k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.99k|          m_has_value(false)
  451|  1.99k|    {
  452|  1.99k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   305k|    {
 1316|   305k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   303k|        : base(std::in_place, std::forward<U>(val)),
 1570|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   303k|    {
 1572|   303k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   303k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   303k|    {
  442|   303k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   305k|    {
 1740|   305k|        return has_value();
 1741|   305k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   611k|    {
  490|   611k|        return m_has_value;
  491|   611k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.99k|    {
 1746|  1.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.99k|        return this->get_unexpected().error();
 1748|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.99k|    {
  473|  1.99k|        return m_unexpected;
  474|  1.99k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   303k|    {
 1805|   303k|        return std::move(value());
 1806|   303k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   303k|    {
 1769|   303k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   303k|        return this->get_value();
 1771|   303k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   303k|    {
  456|   303k|        return m_value;
  457|   303k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|   106M|    {
 3484|   106M|        return m_sentinel;
 3485|   106M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    120|    {
 1746|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    120|        return this->get_unexpected().error();
 1748|    120|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  31.2k|        : base(unexpect, std::move(e.error())),
 1616|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.2k|    {
 1618|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  62.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  62.4k|          m_has_value(false)
  451|  62.4k|    {
  452|  62.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.50M|    {
 1316|  1.50M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  3.07k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.07k|    {
 1572|  3.07k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.07k|    {
  442|  3.07k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.16M|        : base(unexpect, std::move(e.error())),
 1616|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.16M|    {
 1618|  1.16M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  1.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.16M|          m_has_value(false)
  451|  1.16M|    {
  452|  1.16M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  1.18M|    {
 1740|  1.18M|        return has_value();
 1741|  1.18M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.51M|    {
  490|  2.51M|        return m_has_value;
  491|  2.51M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   406k|    {
 1746|   406k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   406k|        return this->get_unexpected().error();
 1748|   406k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   727k|    {
  473|   727k|        return m_unexpected;
  474|   727k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.07k|    {
 1795|  3.07k|        return value();
 1796|  3.07k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   277k|    {
 1769|   277k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   277k|        return this->get_value();
 1771|   277k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   277k|    {
  456|   277k|        return m_value;
  457|   277k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   377k|    {
 1740|   377k|        return has_value();
 1741|   377k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   301k|    {
 1979|   301k|        return detail::transform_error_impl(std::move(*this),
 1980|   301k|                                            std::forward<F>(f));
 1981|   301k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   301k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   301k|    else {
 1472|   301k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   301k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   301k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 270k, False: 31.1k]
  |  |  ------------------
  ------------------
 1474|   301k|                   ? result(*std::forward<Exp>(exp))
 1475|   301k|                   : result(unexpect,
 1476|  31.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  31.1k|                                           std::forward<Exp>(exp).error()));
 1478|   301k|    }
 1479|   301k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|   274k|        : base(std::in_place, std::forward<U>(val)),
 1570|   274k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   274k|    {
 1572|   274k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   274k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   274k|    {
  442|   274k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  31.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  31.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  31.1k|    {
 1628|  31.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   274k|    {
 1805|   274k|        return std::move(value());
 1806|   274k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   377k|    {
 1979|   377k|        return detail::transform_error_impl(std::move(*this),
 1980|   377k|                                            std::forward<F>(f));
 1981|   377k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   377k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   377k|    else {
 1472|   377k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   377k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   377k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 377k, False: 0]
  |  |  ------------------
  ------------------
 1474|   377k|                   ? result(*std::forward<Exp>(exp))
 1475|   377k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   377k|    }
 1479|   377k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   377k|    {
 1740|   377k|        return has_value();
 1741|   377k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   325k|    {
 1979|   325k|        return detail::transform_error_impl(std::move(*this),
 1980|   325k|                                            std::forward<F>(f));
 1981|   325k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   325k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   325k|    else {
 1472|   325k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   325k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   325k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.79k, False: 321k]
  |  |  ------------------
  ------------------
 1474|   325k|                   ? result(*std::forward<Exp>(exp))
 1475|   325k|                   : result(unexpect,
 1476|   321k|                            trivial_invoke(std::forward<F>(f),
 1477|   321k|                                           std::forward<Exp>(exp).error()));
 1478|   325k|    }
 1479|   325k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|   321k|    {
 1756|   321k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   321k|        return std::move(this->get_unexpected().error());
 1758|   321k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  49.3k|        : base(unexpect, std::move(e.error())),
 1616|  49.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  49.3k|    {
 1618|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  49.3k|        : m_has_value(false)
  637|  49.3k|    {
  638|  49.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  49.3k|    {
  701|  49.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  49.3k|                                  std::forward<Args>(args)...);
  703|  49.3k|        m_has_value = false;
  704|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   148k|    {
  730|   148k|        return reinterpret_cast<unexpected<E>*>(
  731|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   148k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  50.1k|    {
 1316|  50.1k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    760|        : base(std::in_place, std::forward<U>(val)),
 1570|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    760|    {
 1572|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|    760|        : m_has_value(true)
  627|    760|    {
  628|    760|        construct(std::forward<Args>(args)...);
  629|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|    760|    {
  694|    760|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    760|        m_has_value = true;
  696|    760|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|    760|{
  396|    760|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    760|        T(std::forward<Args>(args)...);
  398|    760|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  2.28k|    {
  718|  2.28k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  2.28k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  2.28k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  50.1k|    {
 1740|  50.1k|        return has_value();
 1741|  50.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   150k|    {
  687|   150k|        return m_has_value;
  688|   150k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  49.3k|    {
 1746|  49.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  49.3k|        return this->get_unexpected().error();
 1748|  49.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  49.3k|    {
  670|  49.3k|        return *unexpected_ptr();
  671|  49.3k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1804|    760|    {
 1805|    760|        return std::move(value());
 1806|    760|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|    760|    {
 1769|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    760|        return this->get_value();
 1771|    760|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    760|    {
  653|    760|        return *value_ptr();
  654|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 760, False: 49.3k]
  ------------------
  644|    760|            destroy_value();
  645|    760|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  50.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    760|    {
  708|    760|        scn::detail::destroy_at(value_ptr());
  709|    760|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|    760|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    760|    else {
  408|    760|        p->~T();
  409|    760|    }
  410|    760|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.38M|    {
 1740|  1.38M|        return has_value();
 1741|  1.38M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.77M|    {
  490|  2.77M|        return m_has_value;
  491|  2.77M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   997k|    {
 1746|   997k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   997k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   997k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   997k|        return this->get_unexpected().error();
 1748|   997k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   997k|    {
  473|   997k|        return m_unexpected;
  474|   997k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   385k|    {
 1805|   385k|        return std::move(value());
 1806|   385k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   388k|    {
 1769|   388k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   388k|        return this->get_value();
 1771|   388k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   388k|    {
  456|   388k|        return m_value;
  457|   388k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  8.58k|    {
 3480|  8.58k|        return m_iterator;
 3481|  8.58k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  8.58k|    {
 3484|  8.58k|        return m_sentinel;
 3485|  8.58k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  3.79k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.79k|    static_cast<    \
  |  |  935|  3.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.79k|    static_cast<    \
  |  |  935|  3.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.79k|    {
 3466|  3.79k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|   103M|    {
 4569|   103M|        return !x.is_at_end();
 4570|   103M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  33.7k|        : base(unexpect, std::move(e.error())),
 1616|  33.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  33.7k|    {
 1618|  33.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  33.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  33.7k|          m_has_value(false)
  451|  33.7k|    {
  452|  33.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.15M|    {
 1316|  1.15M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.12M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.12M|    {
 1572|  1.12M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.12M|    {
  442|  1.12M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   477k|    {
 1740|   477k|        return has_value();
 1741|   477k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.84M|    {
  490|  1.84M|        return m_has_value;
  491|  1.84M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.67k|    {
 1795|  2.67k|        return value();
 1796|  2.67k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   650k|    {
 1769|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   650k|        return this->get_value();
 1771|   650k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   650k|    {
  456|   650k|        return m_value;
  457|   650k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.99k|        : base(unexpect, std::move(e.error())),
 1616|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.99k|    {
 1618|  1.99k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.99k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.99k|          m_has_value(false)
  451|  1.99k|    {
  452|  1.99k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   305k|    {
 1316|   305k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   303k|        : base(std::in_place, std::forward<U>(val)),
 1570|   303k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   303k|    {
 1572|   303k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   303k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   303k|    {
  442|   303k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   379k|    {
 1979|   379k|        return detail::transform_error_impl(std::move(*this),
 1980|   379k|                                            std::forward<F>(f));
 1981|   379k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   379k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   379k|    else {
 1472|   379k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   379k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 377k, False: 2.48k]
  |  |  ------------------
  ------------------
 1474|   379k|                   ? result(*std::forward<Exp>(exp))
 1475|   379k|                   : result(unexpect,
 1476|  2.48k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.48k|                                           std::forward<Exp>(exp).error()));
 1478|   379k|    }
 1479|   379k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   647k|    {
 1805|   647k|        return std::move(value());
 1806|   647k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  33.6k|    {
 1756|  33.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  33.6k|        return std::move(this->get_unexpected().error());
 1758|  33.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  33.7k|    {
  473|  33.7k|        return m_unexpected;
  474|  33.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.48k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.48k|    {
 1628|  2.48k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   305k|    {
 1740|   305k|        return has_value();
 1741|   305k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   611k|    {
  490|   611k|        return m_has_value;
  491|   611k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.99k|    {
 1746|  1.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.99k|        return this->get_unexpected().error();
 1748|  1.99k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.99k|    {
  473|  1.99k|        return m_unexpected;
  474|  1.99k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   303k|    {
 1805|   303k|        return std::move(value());
 1806|   303k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   303k|    {
 1769|   303k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   303k|        return this->get_value();
 1771|   303k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   303k|    {
  456|   303k|        return m_value;
  457|   303k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    120|    {
 1746|    120|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    120|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    120|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    120|        return this->get_unexpected().error();
 1748|    120|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  31.2k|        : base(unexpect, std::move(e.error())),
 1616|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  31.2k|    {
 1618|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  62.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  62.4k|          m_has_value(false)
  451|  62.4k|    {
  452|  62.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.18M|    {
 1316|  1.18M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  3.07k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.07k|    {
 1572|  3.07k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.07k|    {
  442|  3.07k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   845k|        : base(unexpect, std::move(e.error())),
 1616|   845k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   845k|    {
 1618|   845k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   845k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   845k|          m_has_value(false)
  451|   845k|    {
  452|   845k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  1.18M|    {
 1740|  1.18M|        return has_value();
 1741|  1.18M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.86M|    {
  490|  1.86M|        return m_has_value;
  491|  1.86M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|   406k|    {
 1746|   406k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   406k|        return this->get_unexpected().error();
 1748|   406k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   406k|    {
  473|   406k|        return m_unexpected;
  474|   406k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  3.07k|    {
 1795|  3.07k|        return value();
 1796|  3.07k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   273k|    {
 1769|   273k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   273k|        return this->get_value();
 1771|   273k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   273k|    {
  456|   273k|        return m_value;
  457|   273k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   377k|    {
 1740|   377k|        return has_value();
 1741|   377k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   301k|    {
 1979|   301k|        return detail::transform_error_impl(std::move(*this),
 1980|   301k|                                            std::forward<F>(f));
 1981|   301k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   301k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   301k|    else {
 1472|   301k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   301k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   301k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 270k, False: 31.1k]
  |  |  ------------------
  ------------------
 1474|   301k|                   ? result(*std::forward<Exp>(exp))
 1475|   301k|                   : result(unexpect,
 1476|  31.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  31.1k|                                           std::forward<Exp>(exp).error()));
 1478|   301k|    }
 1479|   301k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   270k|        : base(std::in_place, std::forward<U>(val)),
 1570|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   270k|    {
 1572|   270k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   270k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   270k|    {
  442|   270k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  31.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  31.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  31.1k|    {
 1628|  31.1k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   270k|    {
 1805|   270k|        return std::move(value());
 1806|   270k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   377k|    {
 1979|   377k|        return detail::transform_error_impl(std::move(*this),
 1980|   377k|                                            std::forward<F>(f));
 1981|   377k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   377k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   377k|    else {
 1472|   377k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   377k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   377k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 377k, False: 0]
  |  |  ------------------
  ------------------
 1474|   377k|                   ? result(*std::forward<Exp>(exp))
 1475|   377k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   377k|    }
 1479|   377k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   377k|        : base(std::in_place, std::forward<U>(val)),
 1570|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   377k|    {
 1572|   377k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   377k|    {
  442|   377k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   377k|    {
 1316|   377k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|   377k|    {
 1740|   377k|        return has_value();
 1741|   377k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   754k|    {
  490|   754k|        return m_has_value;
  491|   754k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   377k|    {
 1805|   377k|        return std::move(value());
 1806|   377k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   377k|    {
 1769|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   377k|        return this->get_value();
 1771|   377k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   377k|    {
  456|   377k|        return m_value;
  457|   377k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  49.3k|        : base(unexpect, std::move(e.error())),
 1616|  49.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  49.3k|    {
 1618|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  49.3k|        : m_has_value(false)
  637|  49.3k|    {
  638|  49.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  49.3k|    {
  701|  49.3k|        scn::detail::construct_at(unexpected_ptr(),
  702|  49.3k|                                  std::forward<Args>(args)...);
  703|  49.3k|        m_has_value = false;
  704|  49.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|   148k|    {
  730|   148k|        return reinterpret_cast<unexpected<E>*>(
  731|   148k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|   148k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|   148k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  50.1k|    {
 1316|  50.1k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|    760|        : base(std::in_place, std::forward<U>(val)),
 1570|    760|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    760|    {
 1572|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|    760|        : m_has_value(true)
  627|    760|    {
  628|    760|        construct(std::forward<Args>(args)...);
  629|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|    760|    {
  694|    760|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    760|        m_has_value = true;
  696|    760|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|    760|{
  396|    760|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    760|        T(std::forward<Args>(args)...);
  398|    760|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  2.28k|    {
  718|  2.28k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  2.28k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  2.28k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  50.1k|    {
 1740|  50.1k|        return has_value();
 1741|  50.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   150k|    {
  687|   150k|        return m_has_value;
  688|   150k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  49.3k|    {
 1746|  49.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  49.3k|        return this->get_unexpected().error();
 1748|  49.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  49.3k|    {
  670|  49.3k|        return *unexpected_ptr();
  671|  49.3k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|    760|    {
 1805|    760|        return std::move(value());
 1806|    760|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|    760|    {
 1769|    760|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    760|        return this->get_value();
 1771|    760|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    760|    {
  653|    760|        return *value_ptr();
  654|    760|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  50.1k|    {
  643|  50.1k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 760, False: 49.3k]
  ------------------
  644|    760|            destroy_value();
  645|    760|        }
  646|  49.3k|        else {
  647|  49.3k|            destroy_unexpected();
  648|  49.3k|        }
  649|  50.1k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    760|    {
  708|    760|        scn::detail::destroy_at(value_ptr());
  709|    760|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|    760|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    760|    else {
  408|    760|        p->~T();
  409|    760|    }
  410|    760|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  49.3k|    {
  712|  49.3k|        scn::detail::destroy_at(unexpected_ptr());
  713|  49.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.23M|    {
 3000|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.23M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.23M|    {
 2981|  1.23M|        return t.data();
 2982|  1.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  3.35k|    {
 1795|  3.35k|        return value();
 1796|  3.35k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  3.35k|    {
 1795|  3.35k|        return value();
 1796|  3.35k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   325k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   325k|    static_cast<    \
  |  |  935|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   325k|    {
 3912|   325k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 5870|  4.23M|    {
 5871|  4.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  4.23M|        return static_cast<std::size_t>(m_desc &
 5876|  4.23M|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  4.23M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 5896|  8.47M|    {
 5897|  8.47M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  8.47M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 5838|  4.23M|    {
 5839|  4.23M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  4.23M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  4.23M|        const auto t = type(id);
 5851|  4.23M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|  4.23M|        basic_scan_arg<Context> arg;
 5856|  4.23M|        arg.m_type = t;
 5857|  4.23M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 4.23M, False: 0]
  ------------------
 5858|  4.23M|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  4.23M|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  4.23M|        return arg;
 5864|  4.23M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 5905|  4.23M|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  4.23M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  4.23M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  4.23M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  4.23M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 5900|  4.23M|    {
 5901|  4.23M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  4.23M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5654|  7.99M|    {
 5655|  7.99M|        return m_type != detail::arg_type::none_type;
 5656|  7.99M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|   493k|{
 8994|   493k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   493k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   493k|{
 8895|   493k|#define SCN_VISIT(Type)                                                \
 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   493k|    }                                                                  \
 8899|   493k|    else {                                                             \
 8900|   493k|        return vis(monostate_val);                                     \
 8901|   493k|    }
 8902|       |
 8903|   493k|    monostate monostate_val{};
 8904|       |
 8905|   493k|    switch (get_arg_type(arg)) {
 8906|  79.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 79.3k, False: 414k]
  ------------------
 8907|  79.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  79.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  79.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  79.3k|    }                                                                  \
  |  | 8899|  79.3k|    else {                                                             \
  |  | 8900|  79.3k|        return vis(monostate_val);                                     \
  |  | 8901|  79.3k|    }
  ------------------
 8908|  79.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 493k]
  ------------------
 8909|  79.3k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  79.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  79.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  79.3k|    }                                                                  \
  |  | 8899|  79.3k|    else {                                                             \
  |  | 8900|  79.3k|        return vis(monostate_val);                                     \
  |  | 8901|  79.3k|    }
  ------------------
 8910|   171k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 91.8k, False: 401k]
  ------------------
 8911|   171k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   171k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   171k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   171k|    }                                                                  \
  |  | 8899|   171k|    else {                                                             \
  |  | 8900|   171k|        return vis(monostate_val);                                     \
  |  | 8901|   171k|    }
  ------------------
 8912|   171k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 493k]
  ------------------
 8913|   171k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   171k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   171k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   171k|    }                                                                  \
  |  | 8899|   171k|    else {                                                             \
  |  | 8900|   171k|        return vis(monostate_val);                                     \
  |  | 8901|   171k|    }
  ------------------
 8914|   264k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 93.6k, False: 400k]
  ------------------
 8915|   264k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   264k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   264k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   264k|    }                                                                  \
  |  | 8899|   264k|    else {                                                             \
  |  | 8900|   264k|        return vis(monostate_val);                                     \
  |  | 8901|   264k|    }
  ------------------
 8916|   335k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 70.5k, False: 423k]
  ------------------
 8917|   335k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   335k|    }                                                                  \
  |  | 8899|   335k|    else {                                                             \
  |  | 8900|   335k|        return vis(monostate_val);                                     \
  |  | 8901|   335k|    }
  ------------------
 8918|   335k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 493k]
  ------------------
 8919|   335k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   335k|    }                                                                  \
  |  | 8899|   335k|    else {                                                             \
  |  | 8900|   335k|        return vis(monostate_val);                                     \
  |  | 8901|   335k|    }
  ------------------
 8920|   414k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 78.6k, False: 415k]
  ------------------
 8921|   414k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|   414k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   414k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   414k|    }                                                                  \
  |  | 8899|   414k|    else {                                                             \
  |  | 8900|   414k|        return vis(monostate_val);                                     \
  |  | 8901|   414k|    }
  ------------------
 8922|   414k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 493k]
  ------------------
 8923|   414k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|   414k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   414k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   414k|    }                                                                  \
  |  | 8899|   414k|    else {                                                             \
  |  | 8900|   414k|        return vis(monostate_val);                                     \
  |  | 8901|   414k|    }
  ------------------
 8924|   493k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 79.7k, False: 414k]
  ------------------
 8925|   493k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8926|   493k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 493k]
  ------------------
 8927|   493k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8928|   493k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 493k]
  ------------------
 8929|   493k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8930|   493k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 493k]
  ------------------
 8931|   493k|            SCN_VISIT(char);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8932|   493k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 493k]
  ------------------
 8933|   493k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8934|   493k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 493k]
  ------------------
 8935|   493k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8936|   493k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 493k]
  ------------------
 8937|   493k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8938|   493k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 493k]
  ------------------
 8939|   493k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8940|   493k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 493k]
  ------------------
 8941|   493k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8942|   493k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 493k]
  ------------------
 8943|   493k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8944|   493k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 493k]
  ------------------
 8945|   493k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8946|   493k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 493k]
  ------------------
 8947|   493k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8948|   493k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 493k]
  ------------------
 8949|   493k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8950|   493k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 493k]
  ------------------
 8951|   493k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8952|   493k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 493k]
  ------------------
 8953|   493k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   493k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   493k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   493k|    }                                                                  \
  |  | 8899|   493k|    else {                                                             \
  |  | 8900|   493k|        return vis(monostate_val);                                     \
  |  | 8901|   493k|    }
  ------------------
 8954|       |
 8955|   493k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 493k]
  ------------------
 8956|   493k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   493k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   493k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 493k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 493k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   493k|            SCN_CLANG_POP
 8973|   493k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  11.5M|{
 5700|  11.5M|    return arg.m_type;
 5701|  11.5M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|  4.41M|{
 5712|  4.41M|    return arg.m_value;
 5713|  4.41M|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5950|  3.57M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|  3.57M|    {
 5952|  3.57M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|  1.79M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|  1.79M|    {
 8628|  1.79M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|  2.28M|{
 4690|  2.28M|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 2.28M]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|  2.28M|    return ranges::subrange{forward_iterator{this, 0},
 4695|  2.28M|                            ranges::default_sentinel};
 4696|  2.28M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|  2.28M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|  2.28M|    {
 4454|  2.28M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|  2.28M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  2.28M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|   489k|{
 8994|   489k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   489k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   489k|{
 8895|   489k|#define SCN_VISIT(Type)                                                \
 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   489k|    }                                                                  \
 8899|   489k|    else {                                                             \
 8900|   489k|        return vis(monostate_val);                                     \
 8901|   489k|    }
 8902|       |
 8903|   489k|    monostate monostate_val{};
 8904|       |
 8905|   489k|    switch (get_arg_type(arg)) {
 8906|  79.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 79.2k, False: 410k]
  ------------------
 8907|  79.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  79.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  79.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  79.2k|    }                                                                  \
  |  | 8899|  79.2k|    else {                                                             \
  |  | 8900|  79.2k|        return vis(monostate_val);                                     \
  |  | 8901|  79.2k|    }
  ------------------
 8908|  79.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 489k]
  ------------------
 8909|  79.2k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  79.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  79.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  79.2k|    }                                                                  \
  |  | 8899|  79.2k|    else {                                                             \
  |  | 8900|  79.2k|        return vis(monostate_val);                                     \
  |  | 8901|  79.2k|    }
  ------------------
 8910|   169k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 90.2k, False: 399k]
  ------------------
 8911|   169k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   169k|    }                                                                  \
  |  | 8899|   169k|    else {                                                             \
  |  | 8900|   169k|        return vis(monostate_val);                                     \
  |  | 8901|   169k|    }
  ------------------
 8912|   169k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 489k]
  ------------------
 8913|   169k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   169k|    }                                                                  \
  |  | 8899|   169k|    else {                                                             \
  |  | 8900|   169k|        return vis(monostate_val);                                     \
  |  | 8901|   169k|    }
  ------------------
 8914|   261k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 91.8k, False: 397k]
  ------------------
 8915|   261k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   261k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   261k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   261k|    }                                                                  \
  |  | 8899|   261k|    else {                                                             \
  |  | 8900|   261k|        return vis(monostate_val);                                     \
  |  | 8901|   261k|    }
  ------------------
 8916|   331k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 70.4k, False: 419k]
  ------------------
 8917|   331k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|   331k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   331k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   331k|    }                                                                  \
  |  | 8899|   331k|    else {                                                             \
  |  | 8900|   331k|        return vis(monostate_val);                                     \
  |  | 8901|   331k|    }
  ------------------
 8918|   331k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 489k]
  ------------------
 8919|   331k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|   331k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   331k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   331k|    }                                                                  \
  |  | 8899|   331k|    else {                                                             \
  |  | 8900|   331k|        return vis(monostate_val);                                     \
  |  | 8901|   331k|    }
  ------------------
 8920|   410k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 78.5k, False: 411k]
  ------------------
 8921|   410k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|   410k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   410k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   410k|    }                                                                  \
  |  | 8899|   410k|    else {                                                             \
  |  | 8900|   410k|        return vis(monostate_val);                                     \
  |  | 8901|   410k|    }
  ------------------
 8922|   410k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 489k]
  ------------------
 8923|   410k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|   410k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   410k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   410k|    }                                                                  \
  |  | 8899|   410k|    else {                                                             \
  |  | 8900|   410k|        return vis(monostate_val);                                     \
  |  | 8901|   410k|    }
  ------------------
 8924|   489k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 79.5k, False: 410k]
  ------------------
 8925|   489k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8926|   489k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 489k]
  ------------------
 8927|   489k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8928|   489k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 489k]
  ------------------
 8929|   489k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8930|   489k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 489k]
  ------------------
 8931|   489k|            SCN_VISIT(char);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8932|   489k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 489k]
  ------------------
 8933|   489k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8934|   489k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 489k]
  ------------------
 8935|   489k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8936|   489k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 489k]
  ------------------
 8937|   489k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8938|   489k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 489k]
  ------------------
 8939|   489k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8940|   489k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 489k]
  ------------------
 8941|   489k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8942|   489k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 489k]
  ------------------
 8943|   489k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8944|   489k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 489k]
  ------------------
 8945|   489k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8946|   489k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 489k]
  ------------------
 8947|   489k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8948|   489k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 489k]
  ------------------
 8949|   489k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8950|   489k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 489k]
  ------------------
 8951|   489k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8952|   489k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 489k]
  ------------------
 8953|   489k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   489k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   489k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   489k|    }                                                                  \
  |  | 8899|   489k|    else {                                                             \
  |  | 8900|   489k|        return vis(monostate_val);                                     \
  |  | 8901|   489k|    }
  ------------------
 8954|       |
 8955|   489k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 489k]
  ------------------
 8956|   489k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   489k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   489k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 489k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 489k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   489k|            SCN_CLANG_POP
 8973|   489k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  1.78M|    {
 3075|  1.78M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.78M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  1.78M|    {
 3041|  1.78M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.78M|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  1.78M|{
 7487|  1.78M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  1.78M|    handler.check_args_exhausted();
 7489|  1.78M|    return handler.get_error();
 7490|  1.78M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  1.78M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  1.78M|    auto begin = format.data();
 7455|  1.78M|    auto it = begin;
 7456|  1.78M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  3.34M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 1.78M, False: 1.56M]
  ------------------
 7459|  1.78M|        const auto ch = *it++;
 7460|  1.78M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 1.78M, False: 0]
  ------------------
 7461|  1.78M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  1.78M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  1.78M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 225k, False: 1.56M]
  ------------------
 7465|   225k|                return;
 7466|   225k|            }
 7467|  1.78M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  1.78M|    }
 7478|       |
 7479|  1.56M|    handler.on_literal_text(begin, end);
 7480|  1.56M|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7383|  1.78M|{
 7384|  1.78M|    struct id_adapter {
 7385|  1.78M|        constexpr void operator()()
 7386|  1.78M|        {
 7387|  1.78M|            arg_id = handler.on_arg_id();
 7388|  1.78M|        }
 7389|  1.78M|        constexpr void operator()(std::size_t id)
 7390|  1.78M|        {
 7391|  1.78M|            arg_id = handler.on_arg_id(id);
 7392|  1.78M|        }
 7393|       |
 7394|  1.78M|        constexpr void on_error(const char* msg)
 7395|  1.78M|        {
 7396|  1.78M|            SCN_UNLIKELY_ATTR
 7397|  1.78M|            handler.on_error(msg);
 7398|  1.78M|        }
 7399|       |
 7400|  1.78M|        Handler& handler;
 7401|  1.78M|        std::size_t arg_id;
 7402|  1.78M|    };
 7403|       |
 7404|  1.78M|    ++begin;
 7405|  1.78M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  1.78M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 1.78M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  1.78M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 1.78M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  1.78M|    else {
 7417|  1.78M|        auto adapter = id_adapter{handler, 0};
 7418|  1.78M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  1.78M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  1.78M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 1.78M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  1.78M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 1.78M, False: 0]
  ------------------
 7429|  1.78M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  1.78M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  1.78M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.0k, False: 1.71M]
  |  |  |  Branch (865:45): [True: 0, False: 1.78M]
  |  |  |  Branch (865:45): [True: 75.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 7435|  75.0k|                handler.on_error("Unknown format specifier");
 7436|  75.0k|                return begin;
 7437|  75.0k|            }
 7438|  1.78M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  1.78M|    }
 7445|  1.71M|    return begin + 1;
 7446|  1.78M|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8525|  3.57M|    {
 8526|  3.57M|        return m_args.get(id);
 8527|  3.57M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 5979|  3.57M|    {
 5980|  3.57M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|  3.57M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|  3.57M|        do_check_arg_id(id);
 5988|  3.57M|        return id;
 5989|  3.57M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6499|  3.57M|{
 6500|  3.57M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|  3.57M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|  3.57M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  1.78M|{
 6885|  1.78M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  1.78M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 1.78M, False: 0]
  |  Branch (6886:26): [True: 0, False: 1.78M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  1.78M|    handler();
 6891|  1.78M|    return begin;
 6892|  1.78M|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  1.78M|        {
 7387|  1.78M|            arg_id = handler.on_arg_id();
 7388|  1.78M|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 5974|  3.42M|    {
 5975|  3.42M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|  3.42M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 5963|  7.00M|    {
 5964|  7.00M|        return m_format.data();
 5965|  7.00M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|  1.78M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  1.78M|    {
 7565|  1.78M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  1.78M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7299|  1.78M|{
 7300|  1.78M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.78M|        if (*begin == CharT{'['}) {
 7302|  1.78M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  1.78M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  1.78M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  1.78M|                return begin;
 7308|  1.78M|            }
 7309|  1.78M|            handler.on_character_set_string(set);
 7310|  1.78M|            return begin;
 7311|  1.78M|        }
 7312|  1.78M|        if (*begin == CharT{'/'}) {
 7313|  1.78M|            return parse_presentation_regex(begin, end, handler);
 7314|  1.78M|        }
 7315|  1.78M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.78M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  1.78M|            handler.on_error("Invalid type specifier in format string");
 7318|  1.78M|            return begin;
 7319|  1.78M|        }
 7320|  1.78M|        handler.on_type(type);
 7321|  1.78M|        return begin;
 7322|  1.78M|    };
 7323|       |
 7324|  1.78M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 1.78M, False: 0]
  |  Branch (7324:28): [True: 1.73M, False: 50.0k]
  ------------------
 7325|  1.78M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 1.71M, False: 25.0k]
  |  Branch (7325:36): [True: 1.37M, False: 332k]
  ------------------
 7326|  1.37M|        return do_presentation();
 7327|  1.37M|    }
 7328|       |
 7329|   407k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   407k|    begin = parse_align(begin, end, handler);
 7335|   407k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   407k|    begin = parse_width(begin, end, handler);
 7341|   407k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   407k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 407k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   407k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 332k, False: 75.0k]
  ------------------
 7360|   332k|        handler.on_localized();
 7361|   332k|        ++begin;
 7362|   332k|    }
 7363|   407k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   407k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 407k, False: 0]
  |  Branch (7368:25): [True: 75.0k, False: 332k]
  ------------------
 7369|  75.0k|        do_presentation();
 7370|  75.0k|    }
 7371|   407k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   407k|    return begin;
 7377|   407k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 6948|  3.47M|{
 6949|  3.47M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 2.76M, False: 716k]
  |  Branch (6949:33): [True: 2.76M, False: 0]
  ------------------
 6950|  3.47M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 666k, False: 50.0k]
  |  Branch (6950:33): [True: 666k, False: 0]
  ------------------
 6951|  3.47M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|  1.45M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.45M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 1.45M]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|  1.45M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 1.45M]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|  1.45M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.45M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.0k, False: 1.40M]
  |  |  ------------------
  ------------------
 7317|  50.0k|            handler.on_error("Invalid type specifier in format string");
 7318|  50.0k|            return begin;
 7319|  50.0k|        }
 7320|  1.40M|        handler.on_type(type);
 7321|  1.40M|        return begin;
 7322|  1.45M|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6896|  2.91M|{
 6897|  2.91M|    switch (type) {
 6898|   135k|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 135k, False: 2.77M]
  ------------------
 6899|   185k|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 50.0k, False: 2.86M]
  ------------------
 6900|   185k|            return presentation_type::int_binary;
 6901|   659k|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 659k, False: 2.25M]
  ------------------
 6902|   659k|            return presentation_type::int_decimal;
 6903|   948k|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 948k, False: 1.96M]
  ------------------
 6904|   948k|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 2.91M]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|   263k|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 263k, False: 2.64M]
  ------------------
 6908|   263k|            return presentation_type::int_octal;
 6909|   755k|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 755k, False: 2.15M]
  ------------------
 6910|   755k|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 2.91M]
  ------------------
 6911|   755k|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 2.91M]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 2.91M]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 2.91M]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 2.91M]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 2.91M]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 2.91M]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 2.91M]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 2.91M]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 2.91M]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 2.91M]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|      0|        case 's':
  ------------------
  |  Branch (6927:9): [True: 0, False: 2.91M]
  ------------------
 6928|      0|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 2.91M]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 2.91M]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 2.91M]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 2.91M]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 2.91M]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|   100k|        default:
  ------------------
  |  Branch (6941:9): [True: 100k, False: 2.81M]
  ------------------
 6942|   100k|            return presentation_type::none;
 6943|  2.91M|    }
 6944|  2.91M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 6973|   407k|{
 6974|   407k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   407k|    auto check_align = [](wchar_t ch) {
 6977|   407k|        switch (ch) {
 6978|   407k|            case L'<':
 6979|   407k|                return align_type::left;
 6980|   407k|            case L'>':
 6981|   407k|                return align_type::right;
 6982|   407k|            case L'^':
 6983|   407k|                return align_type::center;
 6984|   407k|            default:
 6985|   407k|                return align_type::none;
 6986|   407k|        }
 6987|   407k|    };
 6988|       |
 6989|   407k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   407k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   815k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  |  Branch (865:45): [True: 0, False: 407k]
  |  |  |  Branch (865:45): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 6991|   407k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   407k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   407k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   407k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   407k|    const auto begin_before_fill = begin;
 7001|   407k|    begin += potential_fill_len;
 7002|       |
 7003|   407k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 407k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   407k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   407k|    const auto begin_after_fill = begin;
 7009|   407k|    ++begin;
 7010|       |
 7011|   407k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 407k, False: 0]
  ------------------
 7012|   407k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   407k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 407k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   407k|    }
 7020|       |
 7021|   407k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 407k, False: 0]
  ------------------
 7022|   407k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 407k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   407k|        return begin_before_fill;
 7027|   407k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   407k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 6955|   816k|{
 6956|   816k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   816k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   816k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|       |    if constexpr (sizeof(CharT) != 1) {
 6958|       |        return 1;
 6959|       |    }
 6960|   816k|    else {
 6961|   816k|        const auto lengths =
 6962|   816k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|   816k|            "\3\4";
 6964|   816k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|   816k|        return len;
 6966|   816k|    }
 6967|   816k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|   815k|    auto check_align = [](wchar_t ch) {
 6977|   815k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 815k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 815k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 815k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   815k|            default:
  ------------------
  |  Branch (6984:13): [True: 815k, False: 0]
  ------------------
 6985|   815k|                return align_type::none;
 6986|   815k|        }
 6987|   815k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7038|   407k|{
 7039|   407k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   407k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 357k, False: 50.0k]
  |  Branch (7041:33): [True: 0, False: 357k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   407k|    return begin;
 7052|   407k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7569|   332k|    {
 7570|   332k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   332k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 154k, False: 178k]
  ------------------
 7572|   332k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 0, False: 154k]
  ------------------
 7573|   332k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 0]
  ------------------
 7574|   332k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   332k|        Handler::on_localized();
 7582|   332k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 6718|   767k|    {
 6719|   767k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6720|   767k|            m_specs.localized = true;
 6721|       |        }
 6722|       |        else {
 6723|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6724|       |        }
 6725|   767k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 8993|  1.71M|{
 8994|  1.71M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.71M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.71M|{
 8895|  1.71M|#define SCN_VISIT(Type)                                                \
 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.71M|    }                                                                  \
 8899|  1.71M|    else {                                                             \
 8900|  1.71M|        return vis(monostate_val);                                     \
 8901|  1.71M|    }
 8902|       |
 8903|  1.71M|    monostate monostate_val{};
 8904|       |
 8905|  1.71M|    switch (get_arg_type(arg)) {
 8906|   249k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 249k, False: 1.46M]
  ------------------
 8907|   249k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|   249k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   249k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   249k|    }                                                                  \
  |  | 8899|   249k|    else {                                                             \
  |  | 8900|   249k|        return vis(monostate_val);                                     \
  |  | 8901|   249k|    }
  ------------------
 8908|   249k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.71M]
  ------------------
 8909|   249k|            SCN_VISIT(short);
  ------------------
  |  | 8896|   249k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   249k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   249k|    }                                                                  \
  |  | 8899|   249k|    else {                                                             \
  |  | 8900|   249k|        return vis(monostate_val);                                     \
  |  | 8901|   249k|    }
  ------------------
 8910|   573k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 324k, False: 1.38M]
  ------------------
 8911|   573k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   573k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   573k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   573k|    }                                                                  \
  |  | 8899|   573k|    else {                                                             \
  |  | 8900|   573k|        return vis(monostate_val);                                     \
  |  | 8901|   573k|    }
  ------------------
 8912|   573k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.71M]
  ------------------
 8913|   573k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   573k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   573k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   573k|    }                                                                  \
  |  | 8899|   573k|    else {                                                             \
  |  | 8900|   573k|        return vis(monostate_val);                                     \
  |  | 8901|   573k|    }
  ------------------
 8914|   904k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 330k, False: 1.37M]
  ------------------
 8915|   904k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   904k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   904k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   904k|    }                                                                  \
  |  | 8899|   904k|    else {                                                             \
  |  | 8900|   904k|        return vis(monostate_val);                                     \
  |  | 8901|   904k|    }
  ------------------
 8916|  1.14M|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 244k, False: 1.46M]
  ------------------
 8917|  1.14M|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8918|  1.14M|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.71M]
  ------------------
 8919|  1.14M|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  1.14M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.14M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.14M|    }                                                                  \
  |  | 8899|  1.14M|    else {                                                             \
  |  | 8900|  1.14M|        return vis(monostate_val);                                     \
  |  | 8901|  1.14M|    }
  ------------------
 8920|  1.42M|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 278k, False: 1.43M]
  ------------------
 8921|  1.42M|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.42M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.42M|    }                                                                  \
  |  | 8899|  1.42M|    else {                                                             \
  |  | 8900|  1.42M|        return vis(monostate_val);                                     \
  |  | 8901|  1.42M|    }
  ------------------
 8922|  1.42M|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.71M]
  ------------------
 8923|  1.42M|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.42M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.42M|    }                                                                  \
  |  | 8899|  1.42M|    else {                                                             \
  |  | 8900|  1.42M|        return vis(monostate_val);                                     \
  |  | 8901|  1.42M|    }
  ------------------
 8924|  1.71M|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 281k, False: 1.42M]
  ------------------
 8925|  1.71M|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8926|  1.71M|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.71M]
  ------------------
 8927|  1.71M|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8928|  1.71M|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.71M]
  ------------------
 8929|  1.71M|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8930|  1.71M|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.71M]
  ------------------
 8931|  1.71M|            SCN_VISIT(char);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8932|  1.71M|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.71M]
  ------------------
 8933|  1.71M|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8934|  1.71M|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.71M]
  ------------------
 8935|  1.71M|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8936|  1.71M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 1.71M]
  ------------------
 8937|  1.71M|            SCN_VISIT(float);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8938|  1.71M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 1.71M]
  ------------------
 8939|  1.71M|            SCN_VISIT(double);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8940|  1.71M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 1.71M]
  ------------------
 8941|  1.71M|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8942|  1.71M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.71M]
  ------------------
 8943|  1.71M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8944|  1.71M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.71M]
  ------------------
 8945|  1.71M|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8946|  1.71M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.71M]
  ------------------
 8947|  1.71M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8948|  1.71M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 1.71M]
  ------------------
 8949|  1.71M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8950|  1.71M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.71M]
  ------------------
 8951|  1.71M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8952|  1.71M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.71M]
  ------------------
 8953|  1.71M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8954|       |
 8955|  1.71M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.71M]
  ------------------
 8956|  1.71M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.71M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.71M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.71M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.71M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.71M|            SCN_CLANG_POP
 8973|  1.71M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|  1.79M|{
 7487|  1.79M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|  1.79M|    handler.check_args_exhausted();
 7489|  1.79M|    return handler.get_error();
 7490|  1.79M|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|  1.79M|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|  1.79M|    auto begin = format.data();
 7455|  1.79M|    auto it = begin;
 7456|  1.79M|    const auto end = format.data() + format.size();
 7457|       |
 7458|  3.36M|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 1.79M, False: 1.56M]
  ------------------
 7459|  1.79M|        const auto ch = *it++;
 7460|  1.79M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 1.79M, False: 0]
  ------------------
 7461|  1.79M|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|  1.79M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|  1.79M|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 225k, False: 1.56M]
  ------------------
 7465|   225k|                return;
 7466|   225k|            }
 7467|  1.79M|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|  1.79M|    }
 7478|       |
 7479|  1.56M|    handler.on_literal_text(begin, end);
 7480|  1.56M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8664|  1.56M|    {
 8665|  1.56M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  1.56M|    static_cast<    \
  |  |  935|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|  1.56M|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7383|  1.79M|{
 7384|  1.79M|    struct id_adapter {
 7385|  1.79M|        constexpr void operator()()
 7386|  1.79M|        {
 7387|  1.79M|            arg_id = handler.on_arg_id();
 7388|  1.79M|        }
 7389|  1.79M|        constexpr void operator()(std::size_t id)
 7390|  1.79M|        {
 7391|  1.79M|            arg_id = handler.on_arg_id(id);
 7392|  1.79M|        }
 7393|       |
 7394|  1.79M|        constexpr void on_error(const char* msg)
 7395|  1.79M|        {
 7396|  1.79M|            SCN_UNLIKELY_ATTR
 7397|  1.79M|            handler.on_error(msg);
 7398|  1.79M|        }
 7399|       |
 7400|  1.79M|        Handler& handler;
 7401|  1.79M|        std::size_t arg_id;
 7402|  1.79M|    };
 7403|       |
 7404|  1.79M|    ++begin;
 7405|  1.79M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|  1.79M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 1.79M]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|  1.79M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 1.79M]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|  1.79M|    else {
 7417|  1.79M|        auto adapter = id_adapter{handler, 0};
 7418|  1.79M|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|  1.79M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|  1.79M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 1.79M]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|  1.79M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 1.79M, False: 0]
  ------------------
 7429|  1.79M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|  1.79M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|  1.79M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  3.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 75.0k, False: 1.71M]
  |  |  |  Branch (865:45): [True: 0, False: 1.79M]
  |  |  |  Branch (865:45): [True: 75.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 7435|  75.0k|                handler.on_error("Unknown format specifier");
 7436|  75.0k|                return begin;
 7437|  75.0k|            }
 7438|  1.79M|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|  1.79M|    }
 7445|  1.71M|    return begin + 1;
 7446|  1.79M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|  1.79M|{
 6885|  1.79M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|  1.79M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 1.79M, False: 0]
  |  Branch (6886:26): [True: 0, False: 1.79M]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|  1.79M|    handler();
 6891|  1.79M|    return begin;
 6892|  1.79M|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|  1.79M|        {
 7387|  1.79M|            arg_id = handler.on_arg_id();
 7388|  1.79M|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|  1.79M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|  1.79M|    {
 7565|  1.79M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|  1.79M|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7299|  1.79M|{
 7300|  1.79M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.79M|        if (*begin == CharT{'['}) {
 7302|  1.79M|            auto set = parse_presentation_set(begin, end, handler);
 7303|  1.79M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|  1.79M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|  1.79M|                return begin;
 7308|  1.79M|            }
 7309|  1.79M|            handler.on_character_set_string(set);
 7310|  1.79M|            return begin;
 7311|  1.79M|        }
 7312|  1.79M|        if (*begin == CharT{'/'}) {
 7313|  1.79M|            return parse_presentation_regex(begin, end, handler);
 7314|  1.79M|        }
 7315|  1.79M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.79M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|  1.79M|            handler.on_error("Invalid type specifier in format string");
 7318|  1.79M|            return begin;
 7319|  1.79M|        }
 7320|  1.79M|        handler.on_type(type);
 7321|  1.79M|        return begin;
 7322|  1.79M|    };
 7323|       |
 7324|  1.79M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 1.79M, False: 0]
  |  Branch (7324:28): [True: 1.74M, False: 50.0k]
  ------------------
 7325|  1.79M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 1.71M, False: 25.0k]
  |  Branch (7325:36): [True: 1.38M, False: 333k]
  ------------------
 7326|  1.38M|        return do_presentation();
 7327|  1.38M|    }
 7328|       |
 7329|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   409k|    begin = parse_align(begin, end, handler);
 7335|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   409k|    begin = parse_width(begin, end, handler);
 7341|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   409k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 409k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   409k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 333k, False: 75.0k]
  ------------------
 7360|   333k|        handler.on_localized();
 7361|   333k|        ++begin;
 7362|   333k|    }
 7363|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   409k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 409k, False: 0]
  |  Branch (7368:25): [True: 75.0k, False: 333k]
  ------------------
 7369|  75.0k|        do_presentation();
 7370|  75.0k|    }
 7371|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   409k|    return begin;
 7377|   409k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|  1.46M|    auto do_presentation = [&]() -> const CharT* {
 7301|  1.46M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 1.46M]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|  1.46M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 1.46M]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|  1.46M|        presentation_type type = parse_presentation_type(*begin++);
 7316|  1.46M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.0k, False: 1.41M]
  |  |  ------------------
  ------------------
 7317|  50.0k|            handler.on_error("Invalid type specifier in format string");
 7318|  50.0k|            return begin;
 7319|  50.0k|        }
 7320|  1.41M|        handler.on_type(type);
 7321|  1.41M|        return begin;
 7322|  1.46M|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 6973|   409k|{
 6974|   409k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   409k|    auto check_align = [](wchar_t ch) {
 6977|   409k|        switch (ch) {
 6978|   409k|            case L'<':
 6979|   409k|                return align_type::left;
 6980|   409k|            case L'>':
 6981|   409k|                return align_type::right;
 6982|   409k|            case L'^':
 6983|   409k|                return align_type::center;
 6984|   409k|            default:
 6985|   409k|                return align_type::none;
 6986|   409k|        }
 6987|   409k|    };
 6988|       |
 6989|   409k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   409k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  |  Branch (865:45): [True: 0, False: 409k]
  |  |  |  Branch (865:45): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6991|   409k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   409k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   409k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   409k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   409k|    const auto begin_before_fill = begin;
 7001|   409k|    begin += potential_fill_len;
 7002|       |
 7003|   409k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 409k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   409k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   409k|    const auto begin_after_fill = begin;
 7009|   409k|    ++begin;
 7010|       |
 7011|   409k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 409k, False: 0]
  ------------------
 7012|   409k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   409k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 409k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   409k|    }
 7020|       |
 7021|   409k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 409k, False: 0]
  ------------------
 7022|   409k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 409k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   409k|        return begin_before_fill;
 7027|   409k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   409k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|   818k|    auto check_align = [](wchar_t ch) {
 6977|   818k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 818k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 818k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 818k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   818k|            default:
  ------------------
  |  Branch (6984:13): [True: 818k, False: 0]
  ------------------
 6985|   818k|                return align_type::none;
 6986|   818k|        }
 6987|   818k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7038|   409k|{
 7039|   409k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   409k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 358k, False: 50.0k]
  |  Branch (7041:33): [True: 0, False: 358k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   409k|    return begin;
 7052|   409k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7569|   333k|    {
 7570|   333k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|   333k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 154k, False: 179k]
  ------------------
 7572|   333k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 0, False: 154k]
  ------------------
 7573|   333k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 0]
  ------------------
 7574|   333k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|   333k|        Handler::on_localized();
 7582|   333k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|  1.71M|{
 8994|  1.71M|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  1.71M|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  1.71M|{
 8895|  1.71M|#define SCN_VISIT(Type)                                                \
 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  1.71M|    }                                                                  \
 8899|  1.71M|    else {                                                             \
 8900|  1.71M|        return vis(monostate_val);                                     \
 8901|  1.71M|    }
 8902|       |
 8903|  1.71M|    monostate monostate_val{};
 8904|       |
 8905|  1.71M|    switch (get_arg_type(arg)) {
 8906|   250k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 250k, False: 1.46M]
  ------------------
 8907|   250k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   250k|    }                                                                  \
  |  | 8899|   250k|    else {                                                             \
  |  | 8900|   250k|        return vis(monostate_val);                                     \
  |  | 8901|   250k|    }
  ------------------
 8908|   250k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 1.71M]
  ------------------
 8909|   250k|            SCN_VISIT(short);
  ------------------
  |  | 8896|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   250k|    }                                                                  \
  |  | 8899|   250k|    else {                                                             \
  |  | 8900|   250k|        return vis(monostate_val);                                     \
  |  | 8901|   250k|    }
  ------------------
 8910|   576k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 326k, False: 1.39M]
  ------------------
 8911|   576k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   576k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   576k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   576k|    }                                                                  \
  |  | 8899|   576k|    else {                                                             \
  |  | 8900|   576k|        return vis(monostate_val);                                     \
  |  | 8901|   576k|    }
  ------------------
 8912|   576k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 1.71M]
  ------------------
 8913|   576k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   576k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   576k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   576k|    }                                                                  \
  |  | 8899|   576k|    else {                                                             \
  |  | 8900|   576k|        return vis(monostate_val);                                     \
  |  | 8901|   576k|    }
  ------------------
 8914|   909k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 332k, False: 1.38M]
  ------------------
 8915|   909k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   909k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   909k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   909k|    }                                                                  \
  |  | 8899|   909k|    else {                                                             \
  |  | 8900|   909k|        return vis(monostate_val);                                     \
  |  | 8901|   909k|    }
  ------------------
 8916|  1.15M|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 245k, False: 1.47M]
  ------------------
 8917|  1.15M|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  1.15M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.15M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.15M|    }                                                                  \
  |  | 8899|  1.15M|    else {                                                             \
  |  | 8900|  1.15M|        return vis(monostate_val);                                     \
  |  | 8901|  1.15M|    }
  ------------------
 8918|  1.15M|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 1.71M]
  ------------------
 8919|  1.15M|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  1.15M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.15M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.15M|    }                                                                  \
  |  | 8899|  1.15M|    else {                                                             \
  |  | 8900|  1.15M|        return vis(monostate_val);                                     \
  |  | 8901|  1.15M|    }
  ------------------
 8920|  1.43M|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 280k, False: 1.43M]
  ------------------
 8921|  1.43M|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  1.43M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.43M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.43M|    }                                                                  \
  |  | 8899|  1.43M|    else {                                                             \
  |  | 8900|  1.43M|        return vis(monostate_val);                                     \
  |  | 8901|  1.43M|    }
  ------------------
 8922|  1.43M|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 1.71M]
  ------------------
 8923|  1.43M|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  1.43M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.43M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.43M|    }                                                                  \
  |  | 8899|  1.43M|    else {                                                             \
  |  | 8900|  1.43M|        return vis(monostate_val);                                     \
  |  | 8901|  1.43M|    }
  ------------------
 8924|  1.71M|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 283k, False: 1.43M]
  ------------------
 8925|  1.71M|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8926|  1.71M|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 1.71M]
  ------------------
 8927|  1.71M|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8928|  1.71M|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 1.71M]
  ------------------
 8929|  1.71M|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8930|  1.71M|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 1.71M]
  ------------------
 8931|  1.71M|            SCN_VISIT(char);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8932|  1.71M|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 1.71M]
  ------------------
 8933|  1.71M|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8934|  1.71M|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 1.71M]
  ------------------
 8935|  1.71M|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8936|  1.71M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 1.71M]
  ------------------
 8937|  1.71M|            SCN_VISIT(float);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8938|  1.71M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 1.71M]
  ------------------
 8939|  1.71M|            SCN_VISIT(double);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8940|  1.71M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 1.71M]
  ------------------
 8941|  1.71M|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8942|  1.71M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 1.71M]
  ------------------
 8943|  1.71M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8944|  1.71M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 1.71M]
  ------------------
 8945|  1.71M|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8946|  1.71M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 1.71M]
  ------------------
 8947|  1.71M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8948|  1.71M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 1.71M]
  ------------------
 8949|  1.71M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8950|  1.71M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 1.71M]
  ------------------
 8951|  1.71M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8952|  1.71M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 1.71M]
  ------------------
 8953|  1.71M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  1.71M|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  1.71M|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  1.71M|    }                                                                  \
  |  | 8899|  1.71M|    else {                                                             \
  |  | 8900|  1.71M|        return vis(monostate_val);                                     \
  |  | 8901|  1.71M|    }
  ------------------
 8954|       |
 8955|  1.71M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 1.71M]
  ------------------
 8956|  1.71M|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  1.71M|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  1.71M|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 1.71M]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 1.71M]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  1.71M|            SCN_CLANG_POP
 8973|  1.71M|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|   262k|    {
 4351|   262k|        sync(0);
 4352|   262k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 5870|  1.00M|    {
 5871|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5872|      0|            return max_size();
 5873|      0|        }
 5874|       |
 5875|  1.00M|        return static_cast<std::size_t>(m_desc &
 5876|  1.00M|                                        ((1 << detail::packed_arg_bits) - 1));
 5877|  1.00M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 5896|  2.01M|    {
 5897|  2.01M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5898|  2.01M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 5838|  1.00M|    {
 5839|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5840|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5841|      0|                return m_args[id];
 5842|      0|            }
 5843|      0|            return {};
 5844|      0|        }
 5845|       |
 5846|  1.00M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5847|      0|            return {};
 5848|      0|        }
 5849|       |
 5850|  1.00M|        const auto t = type(id);
 5851|  1.00M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5852|      0|            return {};
 5853|      0|        }
 5854|       |
 5855|  1.00M|        basic_scan_arg<Context> arg;
 5856|  1.00M|        arg.m_type = t;
 5857|  1.00M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5857:13): [True: 1.00M, False: 0]
  ------------------
 5858|  1.00M|            arg.m_value.ref_value = m_builtin_values[id];
 5859|  1.00M|        }
 5860|      0|        else {
 5861|      0|            arg.m_value = m_values[id];
 5862|      0|        }
 5863|  1.00M|        return arg;
 5864|  1.00M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 5905|  1.00M|    {
 5906|       |        // First (0th) index is size, types start after that
 5907|  1.00M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5908|  1.00M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5909|  1.00M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5910|  1.00M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 5900|  1.00M|    {
 5901|  1.00M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5902|  1.00M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5654|  1.66M|    {
 5655|  1.66M|        return m_type != detail::arg_type::none_type;
 5656|  1.66M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|  76.0k|{
 8994|  76.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  76.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  76.0k|{
 8895|  76.0k|#define SCN_VISIT(Type)                                                \
 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  76.0k|    }                                                                  \
 8899|  76.0k|    else {                                                             \
 8900|  76.0k|        return vis(monostate_val);                                     \
 8901|  76.0k|    }
 8902|       |
 8903|  76.0k|    monostate monostate_val{};
 8904|       |
 8905|  76.0k|    switch (get_arg_type(arg)) {
 8906|  12.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 12.6k, False: 63.3k]
  ------------------
 8907|  12.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  12.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  12.6k|    }                                                                  \
  |  | 8899|  12.6k|    else {                                                             \
  |  | 8900|  12.6k|        return vis(monostate_val);                                     \
  |  | 8901|  12.6k|    }
  ------------------
 8908|  12.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 76.0k]
  ------------------
 8909|  12.6k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  12.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  12.6k|    }                                                                  \
  |  | 8899|  12.6k|    else {                                                             \
  |  | 8900|  12.6k|        return vis(monostate_val);                                     \
  |  | 8901|  12.6k|    }
  ------------------
 8910|  25.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 12.6k, False: 63.3k]
  ------------------
 8911|  25.3k|            SCN_VISIT(int);
  ------------------
  |  | 8896|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  25.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  25.3k|    }                                                                  \
  |  | 8899|  25.3k|    else {                                                             \
  |  | 8900|  25.3k|        return vis(monostate_val);                                     \
  |  | 8901|  25.3k|    }
  ------------------
 8912|  25.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 76.0k]
  ------------------
 8913|  25.3k|            SCN_VISIT(long);
  ------------------
  |  | 8896|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  25.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  25.3k|    }                                                                  \
  |  | 8899|  25.3k|    else {                                                             \
  |  | 8900|  25.3k|        return vis(monostate_val);                                     \
  |  | 8901|  25.3k|    }
  ------------------
 8914|  38.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 12.7k, False: 63.2k]
  ------------------
 8915|  38.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|  38.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  38.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  38.0k|    }                                                                  \
  |  | 8899|  38.0k|    else {                                                             \
  |  | 8900|  38.0k|        return vis(monostate_val);                                     \
  |  | 8901|  38.0k|    }
  ------------------
 8916|  50.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 12.6k, False: 63.3k]
  ------------------
 8917|  50.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.6k|    }                                                                  \
  |  | 8899|  50.6k|    else {                                                             \
  |  | 8900|  50.6k|        return vis(monostate_val);                                     \
  |  | 8901|  50.6k|    }
  ------------------
 8918|  50.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 76.0k]
  ------------------
 8919|  50.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.6k|    }                                                                  \
  |  | 8899|  50.6k|    else {                                                             \
  |  | 8900|  50.6k|        return vis(monostate_val);                                     \
  |  | 8901|  50.6k|    }
  ------------------
 8920|  63.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 12.6k, False: 63.3k]
  ------------------
 8921|  63.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  63.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  63.3k|    }                                                                  \
  |  | 8899|  63.3k|    else {                                                             \
  |  | 8900|  63.3k|        return vis(monostate_val);                                     \
  |  | 8901|  63.3k|    }
  ------------------
 8922|  63.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 76.0k]
  ------------------
 8923|  63.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  63.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  63.3k|    }                                                                  \
  |  | 8899|  63.3k|    else {                                                             \
  |  | 8900|  63.3k|        return vis(monostate_val);                                     \
  |  | 8901|  63.3k|    }
  ------------------
 8924|  76.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 12.6k, False: 63.3k]
  ------------------
 8925|  76.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8926|  76.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 76.0k]
  ------------------
 8927|  76.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8928|  76.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 76.0k]
  ------------------
 8929|  76.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8930|  76.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 76.0k]
  ------------------
 8931|  76.0k|            SCN_VISIT(char);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8932|  76.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 76.0k]
  ------------------
 8933|  76.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8934|  76.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 76.0k]
  ------------------
 8935|  76.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8936|  76.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 76.0k]
  ------------------
 8937|  76.0k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8938|  76.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 76.0k]
  ------------------
 8939|  76.0k|            SCN_VISIT(double);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8940|  76.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 76.0k]
  ------------------
 8941|  76.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8942|  76.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 76.0k]
  ------------------
 8943|  76.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8944|  76.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 76.0k]
  ------------------
 8945|  76.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8946|  76.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 76.0k]
  ------------------
 8947|  76.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8948|  76.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 76.0k]
  ------------------
 8949|  76.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8950|  76.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 76.0k]
  ------------------
 8951|  76.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8952|  76.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 76.0k]
  ------------------
 8953|  76.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8954|       |
 8955|  76.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 76.0k]
  ------------------
 8956|  76.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  76.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  76.0k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 76.0k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 76.0k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  76.0k|            SCN_CLANG_POP
 8973|  76.0k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 5699|  2.57M|{
 5700|  2.57M|    return arg.m_type;
 5701|  2.57M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 5711|   759k|{
 5712|   759k|    return arg.m_value;
 5713|   759k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5950|   907k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5951|   907k|    {
 5952|   907k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8626|   453k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8627|   453k|    {
 8628|   453k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   453k|    {
 3075|   453k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   453k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   453k|    {
 3041|   453k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   453k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   453k|{
 7487|   453k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   453k|    handler.check_args_exhausted();
 7489|   453k|    return handler.get_error();
 7490|   453k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   453k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   453k|    auto begin = format.data();
 7455|   453k|    auto it = begin;
 7456|   453k|    const auto end = format.data() + format.size();
 7457|       |
 7458|   457k|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 453k, False: 3.35k]
  ------------------
 7459|   453k|        const auto ch = *it++;
 7460|   453k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 453k, False: 0]
  ------------------
 7461|   453k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   453k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   453k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 450k, False: 3.35k]
  ------------------
 7465|   450k|                return;
 7466|   450k|            }
 7467|   453k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   453k|    }
 7478|       |
 7479|  3.35k|    handler.on_literal_text(begin, end);
 7480|  3.35k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7383|   453k|{
 7384|   453k|    struct id_adapter {
 7385|   453k|        constexpr void operator()()
 7386|   453k|        {
 7387|   453k|            arg_id = handler.on_arg_id();
 7388|   453k|        }
 7389|   453k|        constexpr void operator()(std::size_t id)
 7390|   453k|        {
 7391|   453k|            arg_id = handler.on_arg_id(id);
 7392|   453k|        }
 7393|       |
 7394|   453k|        constexpr void on_error(const char* msg)
 7395|   453k|        {
 7396|   453k|            SCN_UNLIKELY_ATTR
 7397|   453k|            handler.on_error(msg);
 7398|   453k|        }
 7399|       |
 7400|   453k|        Handler& handler;
 7401|   453k|        std::size_t arg_id;
 7402|   453k|    };
 7403|       |
 7404|   453k|    ++begin;
 7405|   453k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   453k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 453k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   453k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 453k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   453k|    else {
 7417|   453k|        auto adapter = id_adapter{handler, 0};
 7418|   453k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   453k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   453k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 453k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   453k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 453k, False: 0]
  ------------------
 7429|   453k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   453k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   453k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 303k]
  |  |  |  Branch (865:45): [True: 0, False: 453k]
  |  |  |  Branch (865:45): [True: 150k, False: 303k]
  |  |  ------------------
  ------------------
 7435|   150k|                handler.on_error("Unknown format specifier");
 7436|   150k|                return begin;
 7437|   150k|            }
 7438|   453k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   453k|    }
 7445|   303k|    return begin + 1;
 7446|   453k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8525|   907k|    {
 8526|   907k|        return m_args.get(id);
 8527|   907k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 5979|   907k|    {
 5980|   907k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 907k]
  |  |  ------------------
  ------------------
 5981|      0|            on_error(
 5982|      0|                "Cannot switch from manual to automatic argument indexing");
 5983|      0|            return 0;
 5984|      0|        }
 5985|       |
 5986|   907k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5987|   907k|        do_check_arg_id(id);
 5988|   907k|        return id;
 5989|   907k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6499|   907k|{
 6500|   907k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6500:9): [Folded - Ignored]
  ------------------
 6501|   907k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6501:10): [Folded - Ignored]
  |  Branch (6501:22): [Folded - Ignored]
  ------------------
 6502|       |        // The cast below will cause an error on gcc pre-12
 6503|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6504|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6504:13): [True: 0, False: 0]
  ------------------
 6505|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6506|      0|            SCN_UNLIKELY_ATTR
 6507|      0|            on_error("Argument not found");
 6508|      0|        }
 6509|      0|    }
 6510|   907k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   453k|{
 6885|   453k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   453k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 453k, False: 0]
  |  Branch (6886:26): [True: 0, False: 453k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   453k|    handler();
 6891|   453k|    return begin;
 6892|   453k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   453k|        {
 7387|   453k|            arg_id = handler.on_arg_id();
 7388|   453k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 5974|   607k|    {
 5975|   607k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5976|   607k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   529k|{
 4690|   529k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 529k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   529k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   529k|                            ranges::default_sentinel};
 4696|   529k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   529k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   529k|    {
 4454|   529k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   529k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   529k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 5963|  1.51M|    {
 5964|  1.51M|        return m_format.data();
 5965|  1.51M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7563|   453k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   453k|    {
 7565|   453k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   453k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7299|   453k|{
 7300|   453k|    auto do_presentation = [&]() -> const CharT* {
 7301|   453k|        if (*begin == CharT{'['}) {
 7302|   453k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   453k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   453k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   453k|                return begin;
 7308|   453k|            }
 7309|   453k|            handler.on_character_set_string(set);
 7310|   453k|            return begin;
 7311|   453k|        }
 7312|   453k|        if (*begin == CharT{'/'}) {
 7313|   453k|            return parse_presentation_regex(begin, end, handler);
 7314|   453k|        }
 7315|   453k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   453k|            handler.on_error("Invalid type specifier in format string");
 7318|   453k|            return begin;
 7319|   453k|        }
 7320|   453k|        handler.on_type(type);
 7321|   453k|        return begin;
 7322|   453k|    };
 7323|       |
 7324|   453k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 453k, False: 0]
  |  Branch (7324:28): [True: 353k, False: 100k]
  ------------------
 7325|   453k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 303k, False: 50.0k]
  |  Branch (7325:36): [True: 252k, False: 50.7k]
  ------------------
 7326|   252k|        return do_presentation();
 7327|   252k|    }
 7328|       |
 7329|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   200k|    begin = parse_align(begin, end, handler);
 7335|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   200k|    begin = parse_width(begin, end, handler);
 7341|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   200k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 200k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   200k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 50.7k, False: 150k]
  ------------------
 7360|  50.7k|        handler.on_localized();
 7361|  50.7k|        ++begin;
 7362|  50.7k|    }
 7363|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   200k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 200k, False: 0]
  |  Branch (7368:25): [True: 150k, False: 50.7k]
  ------------------
 7369|   150k|        do_presentation();
 7370|   150k|    }
 7371|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   200k|    return begin;
 7377|   200k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 6948|   707k|{
 6949|   707k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6949:13): [True: 505k, False: 201k]
  |  Branch (6949:33): [True: 505k, False: 0]
  ------------------
 6950|   707k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6950:13): [True: 101k, False: 100k]
  |  Branch (6950:33): [True: 101k, False: 0]
  ------------------
 6951|   707k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7300|   403k|    auto do_presentation = [&]() -> const CharT* {
 7301|   403k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 403k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   403k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 403k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   403k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   403k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 302k]
  |  |  ------------------
  ------------------
 7317|   100k|            handler.on_error("Invalid type specifier in format string");
 7318|   100k|            return begin;
 7319|   100k|        }
 7320|   302k|        handler.on_type(type);
 7321|   302k|        return begin;
 7322|   403k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6896|   806k|{
 6897|   806k|    switch (type) {
 6898|   100k|        case 'b':
  ------------------
  |  Branch (6898:9): [True: 100k, False: 705k]
  ------------------
 6899|   200k|        case 'B':
  ------------------
  |  Branch (6899:9): [True: 100k, False: 705k]
  ------------------
 6900|   200k|            return presentation_type::int_binary;
 6901|   101k|        case 'd':
  ------------------
  |  Branch (6901:9): [True: 101k, False: 704k]
  ------------------
 6902|   101k|            return presentation_type::int_decimal;
 6903|   101k|        case 'i':
  ------------------
  |  Branch (6903:9): [True: 101k, False: 704k]
  ------------------
 6904|   101k|            return presentation_type::int_generic;
 6905|      0|        case 'u':
  ------------------
  |  Branch (6905:9): [True: 0, False: 806k]
  ------------------
 6906|      0|            return presentation_type::int_unsigned_decimal;
 6907|   100k|        case 'o':
  ------------------
  |  Branch (6907:9): [True: 100k, False: 705k]
  ------------------
 6908|   100k|            return presentation_type::int_octal;
 6909|   101k|        case 'x':
  ------------------
  |  Branch (6909:9): [True: 101k, False: 704k]
  ------------------
 6910|   101k|        case 'X':
  ------------------
  |  Branch (6910:9): [True: 0, False: 806k]
  ------------------
 6911|   101k|            return presentation_type::int_hex;
 6912|      0|        case 'r':
  ------------------
  |  Branch (6912:9): [True: 0, False: 806k]
  ------------------
 6913|      0|        case 'R':
  ------------------
  |  Branch (6913:9): [True: 0, False: 806k]
  ------------------
 6914|      0|            return presentation_type::int_arbitrary_base;
 6915|      0|        case 'a':
  ------------------
  |  Branch (6915:9): [True: 0, False: 806k]
  ------------------
 6916|      0|        case 'A':
  ------------------
  |  Branch (6916:9): [True: 0, False: 806k]
  ------------------
 6917|      0|            return presentation_type::float_hex;
 6918|      0|        case 'e':
  ------------------
  |  Branch (6918:9): [True: 0, False: 806k]
  ------------------
 6919|      0|        case 'E':
  ------------------
  |  Branch (6919:9): [True: 0, False: 806k]
  ------------------
 6920|      0|            return presentation_type::float_scientific;
 6921|      0|        case 'f':
  ------------------
  |  Branch (6921:9): [True: 0, False: 806k]
  ------------------
 6922|      0|        case 'F':
  ------------------
  |  Branch (6922:9): [True: 0, False: 806k]
  ------------------
 6923|      0|            return presentation_type::float_fixed;
 6924|      0|        case 'g':
  ------------------
  |  Branch (6924:9): [True: 0, False: 806k]
  ------------------
 6925|      0|        case 'G':
  ------------------
  |  Branch (6925:9): [True: 0, False: 806k]
  ------------------
 6926|      0|            return presentation_type::float_general;
 6927|      0|        case 's':
  ------------------
  |  Branch (6927:9): [True: 0, False: 806k]
  ------------------
 6928|      0|            return presentation_type::string;
 6929|      0|        case 'c':
  ------------------
  |  Branch (6929:9): [True: 0, False: 806k]
  ------------------
 6930|      0|            return presentation_type::character;
 6931|      0|        case '?':
  ------------------
  |  Branch (6931:9): [True: 0, False: 806k]
  ------------------
 6932|      0|            return presentation_type::escaped_character;
 6933|      0|        case 'p':
  ------------------
  |  Branch (6933:9): [True: 0, False: 806k]
  ------------------
 6934|      0|            return presentation_type::pointer;
 6935|      0|        case '[':
  ------------------
  |  Branch (6935:9): [True: 0, False: 806k]
  ------------------
 6936|      0|        case '/':
  ------------------
  |  Branch (6936:9): [True: 0, False: 806k]
  ------------------
 6937|       |            // Should be handled by parse_presentation_set and
 6938|       |            // parse_presentation_regex
 6939|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6940|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6941|   200k|        default:
  ------------------
  |  Branch (6941:9): [True: 200k, False: 605k]
  ------------------
 6942|   200k|            return presentation_type::none;
 6943|   806k|    }
 6944|   806k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 6973|   200k|{
 6974|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   200k|    auto check_align = [](wchar_t ch) {
 6977|   200k|        switch (ch) {
 6978|   200k|            case L'<':
 6979|   200k|                return align_type::left;
 6980|   200k|            case L'>':
 6981|   200k|                return align_type::right;
 6982|   200k|            case L'^':
 6983|   200k|                return align_type::center;
 6984|   200k|            default:
 6985|   200k|                return align_type::none;
 6986|   200k|        }
 6987|   200k|    };
 6988|       |
 6989|   200k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   200k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6991|   200k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   200k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   200k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   200k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   200k|    const auto begin_before_fill = begin;
 7001|   200k|    begin += potential_fill_len;
 7002|       |
 7003|   200k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 200k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   200k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   200k|    const auto begin_after_fill = begin;
 7009|   200k|    ++begin;
 7010|       |
 7011|   200k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 200k, False: 0]
  ------------------
 7012|   200k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   200k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 200k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   200k|    }
 7020|       |
 7021|   200k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 200k, False: 0]
  ------------------
 7022|   200k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 200k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   200k|        return begin_before_fill;
 7027|   200k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   200k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 6955|   401k|{
 6956|   401k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6957|   401k|    if constexpr (sizeof(CharT) != 1) {
 6958|   401k|        return 1;
 6959|       |    }
 6960|       |    else {
 6961|       |        const auto lengths =
 6962|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6963|       |            "\3\4";
 6964|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6965|       |        return len;
 6966|       |    }
 6967|   401k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 6976|   401k|    auto check_align = [](wchar_t ch) {
 6977|   401k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 401k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 401k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 401k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   401k|            default:
  ------------------
  |  Branch (6984:13): [True: 401k, False: 0]
  ------------------
 6985|   401k|                return align_type::none;
 6986|   401k|        }
 6987|   401k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7038|   200k|{
 7039|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   200k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 100k, False: 100k]
  |  Branch (7041:33): [True: 0, False: 100k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   200k|    return begin;
 7052|   200k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7569|  50.7k|    {
 7570|  50.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  50.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 25.3k, False: 25.3k]
  ------------------
 7572|  50.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 0, False: 25.3k]
  ------------------
 7573|  50.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 0]
  ------------------
 7574|  50.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|  50.7k|        Handler::on_localized();
 7582|  50.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 8993|   303k|{
 8994|   303k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   303k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   303k|{
 8895|   303k|#define SCN_VISIT(Type)                                                \
 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   303k|    }                                                                  \
 8899|   303k|    else {                                                             \
 8900|   303k|        return vis(monostate_val);                                     \
 8901|   303k|    }
 8902|       |
 8903|   303k|    monostate monostate_val{};
 8904|       |
 8905|   303k|    switch (get_arg_type(arg)) {
 8906|  50.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 50.5k, False: 253k]
  ------------------
 8907|  50.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.5k|    }                                                                  \
  |  | 8899|  50.5k|    else {                                                             \
  |  | 8900|  50.5k|        return vis(monostate_val);                                     \
  |  | 8901|  50.5k|    }
  ------------------
 8908|  50.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 303k]
  ------------------
 8909|  50.5k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.5k|    }                                                                  \
  |  | 8899|  50.5k|    else {                                                             \
  |  | 8900|  50.5k|        return vis(monostate_val);                                     \
  |  | 8901|  50.5k|    }
  ------------------
 8910|   101k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 50.6k, False: 252k]
  ------------------
 8911|   101k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   101k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   101k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   101k|    }                                                                  \
  |  | 8899|   101k|    else {                                                             \
  |  | 8900|   101k|        return vis(monostate_val);                                     \
  |  | 8901|   101k|    }
  ------------------
 8912|   101k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 303k]
  ------------------
 8913|   101k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   101k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   101k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   101k|    }                                                                  \
  |  | 8899|   101k|    else {                                                             \
  |  | 8900|   101k|        return vis(monostate_val);                                     \
  |  | 8901|   101k|    }
  ------------------
 8914|   151k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 50.7k, False: 252k]
  ------------------
 8915|   151k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   151k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   151k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   151k|    }                                                                  \
  |  | 8899|   151k|    else {                                                             \
  |  | 8900|   151k|        return vis(monostate_val);                                     \
  |  | 8901|   151k|    }
  ------------------
 8916|   202k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 50.4k, False: 253k]
  ------------------
 8917|   202k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|   202k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   202k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   202k|    }                                                                  \
  |  | 8899|   202k|    else {                                                             \
  |  | 8900|   202k|        return vis(monostate_val);                                     \
  |  | 8901|   202k|    }
  ------------------
 8918|   202k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 303k]
  ------------------
 8919|   202k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|   202k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   202k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   202k|    }                                                                  \
  |  | 8899|   202k|    else {                                                             \
  |  | 8900|   202k|        return vis(monostate_val);                                     \
  |  | 8901|   202k|    }
  ------------------
 8920|   252k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 50.5k, False: 253k]
  ------------------
 8921|   252k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|   252k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   252k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   252k|    }                                                                  \
  |  | 8899|   252k|    else {                                                             \
  |  | 8900|   252k|        return vis(monostate_val);                                     \
  |  | 8901|   252k|    }
  ------------------
 8922|   252k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 303k]
  ------------------
 8923|   252k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|   252k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   252k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   252k|    }                                                                  \
  |  | 8899|   252k|    else {                                                             \
  |  | 8900|   252k|        return vis(monostate_val);                                     \
  |  | 8901|   252k|    }
  ------------------
 8924|   303k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 50.6k, False: 252k]
  ------------------
 8925|   303k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8926|   303k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 303k]
  ------------------
 8927|   303k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8928|   303k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 303k]
  ------------------
 8929|   303k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8930|   303k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 303k]
  ------------------
 8931|   303k|            SCN_VISIT(char);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8932|   303k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 303k]
  ------------------
 8933|   303k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8934|   303k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 303k]
  ------------------
 8935|   303k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8936|   303k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 303k]
  ------------------
 8937|   303k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8938|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 303k]
  ------------------
 8939|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8940|   303k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 303k]
  ------------------
 8941|   303k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8942|   303k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 303k]
  ------------------
 8943|   303k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8944|   303k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 303k]
  ------------------
 8945|   303k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8946|   303k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 303k]
  ------------------
 8947|   303k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8948|   303k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 303k]
  ------------------
 8949|   303k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8950|   303k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 303k]
  ------------------
 8951|   303k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8952|   303k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 303k]
  ------------------
 8953|   303k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8954|       |
 8955|   303k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 303k]
  ------------------
 8956|   303k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   303k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   303k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 303k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 303k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   303k|            SCN_CLANG_POP
 8973|   303k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 8993|  76.0k|{
 8994|  76.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|  76.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|  76.0k|{
 8895|  76.0k|#define SCN_VISIT(Type)                                                \
 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|  76.0k|    }                                                                  \
 8899|  76.0k|    else {                                                             \
 8900|  76.0k|        return vis(monostate_val);                                     \
 8901|  76.0k|    }
 8902|       |
 8903|  76.0k|    monostate monostate_val{};
 8904|       |
 8905|  76.0k|    switch (get_arg_type(arg)) {
 8906|  12.6k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 12.6k, False: 63.3k]
  ------------------
 8907|  12.6k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  12.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  12.6k|    }                                                                  \
  |  | 8899|  12.6k|    else {                                                             \
  |  | 8900|  12.6k|        return vis(monostate_val);                                     \
  |  | 8901|  12.6k|    }
  ------------------
 8908|  12.6k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 76.0k]
  ------------------
 8909|  12.6k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  12.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  12.6k|    }                                                                  \
  |  | 8899|  12.6k|    else {                                                             \
  |  | 8900|  12.6k|        return vis(monostate_val);                                     \
  |  | 8901|  12.6k|    }
  ------------------
 8910|  25.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 12.6k, False: 63.3k]
  ------------------
 8911|  25.3k|            SCN_VISIT(int);
  ------------------
  |  | 8896|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  25.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  25.3k|    }                                                                  \
  |  | 8899|  25.3k|    else {                                                             \
  |  | 8900|  25.3k|        return vis(monostate_val);                                     \
  |  | 8901|  25.3k|    }
  ------------------
 8912|  25.3k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 76.0k]
  ------------------
 8913|  25.3k|            SCN_VISIT(long);
  ------------------
  |  | 8896|  25.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  25.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  25.3k|    }                                                                  \
  |  | 8899|  25.3k|    else {                                                             \
  |  | 8900|  25.3k|        return vis(monostate_val);                                     \
  |  | 8901|  25.3k|    }
  ------------------
 8914|  38.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 12.7k, False: 63.2k]
  ------------------
 8915|  38.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|  38.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  38.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  38.0k|    }                                                                  \
  |  | 8899|  38.0k|    else {                                                             \
  |  | 8900|  38.0k|        return vis(monostate_val);                                     \
  |  | 8901|  38.0k|    }
  ------------------
 8916|  50.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 12.6k, False: 63.3k]
  ------------------
 8917|  50.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.6k|    }                                                                  \
  |  | 8899|  50.6k|    else {                                                             \
  |  | 8900|  50.6k|        return vis(monostate_val);                                     \
  |  | 8901|  50.6k|    }
  ------------------
 8918|  50.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 76.0k]
  ------------------
 8919|  50.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|  50.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.6k|    }                                                                  \
  |  | 8899|  50.6k|    else {                                                             \
  |  | 8900|  50.6k|        return vis(monostate_val);                                     \
  |  | 8901|  50.6k|    }
  ------------------
 8920|  63.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 12.6k, False: 63.3k]
  ------------------
 8921|  63.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  63.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  63.3k|    }                                                                  \
  |  | 8899|  63.3k|    else {                                                             \
  |  | 8900|  63.3k|        return vis(monostate_val);                                     \
  |  | 8901|  63.3k|    }
  ------------------
 8922|  63.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 76.0k]
  ------------------
 8923|  63.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|  63.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  63.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  63.3k|    }                                                                  \
  |  | 8899|  63.3k|    else {                                                             \
  |  | 8900|  63.3k|        return vis(monostate_val);                                     \
  |  | 8901|  63.3k|    }
  ------------------
 8924|  76.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 12.6k, False: 63.3k]
  ------------------
 8925|  76.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8926|  76.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 76.0k]
  ------------------
 8927|  76.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8928|  76.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 76.0k]
  ------------------
 8929|  76.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8930|  76.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 76.0k]
  ------------------
 8931|  76.0k|            SCN_VISIT(char);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8932|  76.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 76.0k]
  ------------------
 8933|  76.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8934|  76.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 76.0k]
  ------------------
 8935|  76.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8936|  76.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 76.0k]
  ------------------
 8937|  76.0k|            SCN_VISIT(float);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8938|  76.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 76.0k]
  ------------------
 8939|  76.0k|            SCN_VISIT(double);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8940|  76.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 76.0k]
  ------------------
 8941|  76.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8942|  76.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 76.0k]
  ------------------
 8943|  76.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8944|  76.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 76.0k]
  ------------------
 8945|  76.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8946|  76.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 76.0k]
  ------------------
 8947|  76.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8948|  76.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 76.0k]
  ------------------
 8949|  76.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8950|  76.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 76.0k]
  ------------------
 8951|  76.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8952|  76.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 76.0k]
  ------------------
 8953|  76.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|  76.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  76.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  76.0k|    }                                                                  \
  |  | 8899|  76.0k|    else {                                                             \
  |  | 8900|  76.0k|        return vis(monostate_val);                                     \
  |  | 8901|  76.0k|    }
  ------------------
 8954|       |
 8955|  76.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 76.0k]
  ------------------
 8956|  76.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|  76.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|  76.0k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 76.0k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 76.0k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|  76.0k|            SCN_CLANG_POP
 8973|  76.0k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7486|   453k|{
 7487|   453k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7488|   453k|    handler.check_args_exhausted();
 7489|   453k|    return handler.get_error();
 7490|   453k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7451|   453k|{
 7452|       |    // TODO: memchr fast path with a larger (> 32) format string
 7453|       |
 7454|   453k|    auto begin = format.data();
 7455|   453k|    auto it = begin;
 7456|   453k|    const auto end = format.data() + format.size();
 7457|       |
 7458|   457k|    while (it != end) {
  ------------------
  |  Branch (7458:12): [True: 453k, False: 3.35k]
  ------------------
 7459|   453k|        const auto ch = *it++;
 7460|   453k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7460:13): [True: 453k, False: 0]
  ------------------
 7461|   453k|            handler.on_literal_text(begin, it - 1);
 7462|       |
 7463|   453k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7464|   453k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7464:17): [True: 450k, False: 3.35k]
  ------------------
 7465|   450k|                return;
 7466|   450k|            }
 7467|   453k|        }
 7468|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7468:18): [True: 0, False: 0]
  ------------------
 7469|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7470|      0|                handler.on_error("Unmatched '}' in format string");
 7471|      0|                return;
 7472|      0|            }
 7473|       |
 7474|      0|            handler.on_literal_text(begin, it);
 7475|      0|            begin = ++it;
 7476|      0|        }
 7477|   453k|    }
 7478|       |
 7479|  3.35k|    handler.on_literal_text(begin, end);
 7480|  3.35k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8664|  3.35k|    {
 8665|  3.35k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  3.35k|    static_cast<    \
  |  |  935|  3.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8666|  3.35k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7383|   453k|{
 7384|   453k|    struct id_adapter {
 7385|   453k|        constexpr void operator()()
 7386|   453k|        {
 7387|   453k|            arg_id = handler.on_arg_id();
 7388|   453k|        }
 7389|   453k|        constexpr void operator()(std::size_t id)
 7390|   453k|        {
 7391|   453k|            arg_id = handler.on_arg_id(id);
 7392|   453k|        }
 7393|       |
 7394|   453k|        constexpr void on_error(const char* msg)
 7395|   453k|        {
 7396|   453k|            SCN_UNLIKELY_ATTR
 7397|   453k|            handler.on_error(msg);
 7398|   453k|        }
 7399|       |
 7400|   453k|        Handler& handler;
 7401|   453k|        std::size_t arg_id;
 7402|   453k|    };
 7403|       |
 7404|   453k|    ++begin;
 7405|   453k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7406|      0|        handler.on_error("Unexpected end of replacement field");
 7407|      0|        return begin;
 7408|      0|    }
 7409|       |
 7410|   453k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7410:9): [True: 0, False: 453k]
  ------------------
 7411|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7412|      0|    }
 7413|   453k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7413:14): [True: 0, False: 453k]
  ------------------
 7414|      0|        handler.on_literal_text(begin, begin + 1);
 7415|      0|    }
 7416|   453k|    else {
 7417|   453k|        auto adapter = id_adapter{handler, 0};
 7418|   453k|        begin = parse_arg_id(begin, end, adapter);
 7419|       |
 7420|   453k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7421|      0|            handler.on_error("Missing '}' in format string");
 7422|      0|            return begin;
 7423|      0|        }
 7424|       |
 7425|   453k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7425:13): [True: 0, False: 453k]
  ------------------
 7426|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7427|      0|        }
 7428|   453k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7428:18): [True: 453k, False: 0]
  ------------------
 7429|   453k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 7430|      0|                handler.on_error("Unexpected end of replacement field");
 7431|      0|                return begin;
 7432|      0|            }
 7433|   453k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7434|   453k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 303k]
  |  |  |  Branch (865:45): [True: 0, False: 453k]
  |  |  |  Branch (865:45): [True: 150k, False: 303k]
  |  |  ------------------
  ------------------
 7435|   150k|                handler.on_error("Unknown format specifier");
 7436|   150k|                return begin;
 7437|   150k|            }
 7438|   453k|        }
 7439|      0|        else {
 7440|      0|            SCN_UNLIKELY_ATTR
 7441|      0|            handler.on_error("Missing '}' in format string");
 7442|      0|            return begin;
 7443|      0|        }
 7444|   453k|    }
 7445|   303k|    return begin + 1;
 7446|   453k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6884|   453k|{
 6885|   453k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6886|   453k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6886:9): [True: 453k, False: 0]
  |  Branch (6886:26): [True: 0, False: 453k]
  ------------------
 6887|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6888|      0|    }
 6889|       |
 6890|   453k|    handler();
 6891|   453k|    return begin;
 6892|   453k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7386|   453k|        {
 7387|   453k|            arg_id = handler.on_arg_id();
 7388|   453k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7563|   453k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7564|   453k|    {
 7565|   453k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7566|   453k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7299|   453k|{
 7300|   453k|    auto do_presentation = [&]() -> const CharT* {
 7301|   453k|        if (*begin == CharT{'['}) {
 7302|   453k|            auto set = parse_presentation_set(begin, end, handler);
 7303|   453k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7304|       |                // clang-format off
 7305|   453k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|   453k|                return begin;
 7308|   453k|            }
 7309|   453k|            handler.on_character_set_string(set);
 7310|   453k|            return begin;
 7311|   453k|        }
 7312|   453k|        if (*begin == CharT{'/'}) {
 7313|   453k|            return parse_presentation_regex(begin, end, handler);
 7314|   453k|        }
 7315|   453k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   453k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7317|   453k|            handler.on_error("Invalid type specifier in format string");
 7318|   453k|            return begin;
 7319|   453k|        }
 7320|   453k|        handler.on_type(type);
 7321|   453k|        return begin;
 7322|   453k|    };
 7323|       |
 7324|   453k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7324:9): [True: 453k, False: 0]
  |  Branch (7324:28): [True: 353k, False: 100k]
  ------------------
 7325|   453k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7325:9): [True: 303k, False: 50.0k]
  |  Branch (7325:36): [True: 252k, False: 50.7k]
  ------------------
 7326|   252k|        return do_presentation();
 7327|   252k|    }
 7328|       |
 7329|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7330|      0|        handler.on_error("Unexpected end of format string");
 7331|      0|        return begin;
 7332|      0|    }
 7333|       |
 7334|   200k|    begin = parse_align(begin, end, handler);
 7335|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7336|      0|        handler.on_error("Unexpected end of format string");
 7337|      0|        return begin;
 7338|      0|    }
 7339|       |
 7340|   200k|    begin = parse_width(begin, end, handler);
 7341|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7342|      0|        handler.on_error("Unexpected end of format string");
 7343|      0|        return begin;
 7344|      0|    }
 7345|       |
 7346|   200k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7346:9): [True: 0, False: 200k]
  ------------------
 7347|      0|        ++begin;
 7348|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7349|      0|            handler.on_error("Unexpected end of format string");
 7350|      0|            return begin;
 7351|      0|        }
 7352|      0|        begin = parse_precision(begin, end, handler);
 7353|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7354|      0|            handler.on_error("Unexpected end of format string");
 7355|      0|            return begin;
 7356|      0|        }
 7357|      0|    }
 7358|       |
 7359|   200k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7359:9): [True: 50.7k, False: 150k]
  ------------------
 7360|  50.7k|        handler.on_localized();
 7361|  50.7k|        ++begin;
 7362|  50.7k|    }
 7363|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7364|      0|        handler.on_error("Unexpected end of format string");
 7365|      0|        return begin;
 7366|      0|    }
 7367|       |
 7368|   200k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7368:9): [True: 200k, False: 0]
  |  Branch (7368:25): [True: 150k, False: 50.7k]
  ------------------
 7369|   150k|        do_presentation();
 7370|   150k|    }
 7371|   200k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7372|      0|        handler.on_error("Unexpected end of format string");
 7373|      0|        return begin;
 7374|      0|    }
 7375|       |
 7376|   200k|    return begin;
 7377|   200k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7300|   403k|    auto do_presentation = [&]() -> const CharT* {
 7301|   403k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7301:13): [True: 0, False: 403k]
  ------------------
 7302|      0|            auto set = parse_presentation_set(begin, end, handler);
 7303|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7304|       |                // clang-format off
 7305|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7306|       |                // clang-format on
 7307|      0|                return begin;
 7308|      0|            }
 7309|      0|            handler.on_character_set_string(set);
 7310|      0|            return begin;
 7311|      0|        }
 7312|   403k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7312:13): [True: 0, False: 403k]
  ------------------
 7313|      0|            return parse_presentation_regex(begin, end, handler);
 7314|      0|        }
 7315|   403k|        presentation_type type = parse_presentation_type(*begin++);
 7316|   403k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 302k]
  |  |  ------------------
  ------------------
 7317|   100k|            handler.on_error("Invalid type specifier in format string");
 7318|   100k|            return begin;
 7319|   100k|        }
 7320|   302k|        handler.on_type(type);
 7321|   302k|        return begin;
 7322|   403k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 6973|   200k|{
 6974|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6975|       |
 6976|   200k|    auto check_align = [](wchar_t ch) {
 6977|   200k|        switch (ch) {
 6978|   200k|            case L'<':
 6979|   200k|                return align_type::left;
 6980|   200k|            case L'>':
 6981|   200k|                return align_type::right;
 6982|   200k|            case L'^':
 6983|   200k|                return align_type::center;
 6984|   200k|            default:
 6985|   200k|                return align_type::none;
 6986|   200k|        }
 6987|   200k|    };
 6988|       |
 6989|   200k|    auto potential_fill_len = code_point_length(begin, end);
 6990|   200k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6991|   200k|                     std::distance(begin, end) < potential_fill_len)) {
 6992|      0|        handler.on_error("Invalid encoding in fill character");
 6993|      0|        return begin;
 6994|      0|    }
 6995|       |
 6996|   200k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6997|       |
 6998|   200k|    auto potential_fill = std::basic_string_view<CharT>{
 6999|   200k|        begin, static_cast<size_t>(potential_fill_len)};
 7000|   200k|    const auto begin_before_fill = begin;
 7001|   200k|    begin += potential_fill_len;
 7002|       |
 7003|   200k|    if (begin == end) {
  ------------------
  |  Branch (7003:9): [True: 0, False: 200k]
  ------------------
 7004|      0|        return begin_before_fill;
 7005|      0|    }
 7006|       |
 7007|   200k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7008|   200k|    const auto begin_after_fill = begin;
 7009|   200k|    ++begin;
 7010|       |
 7011|   200k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7011:9): [True: 200k, False: 0]
  ------------------
 7012|   200k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 7013|      0|            handler.on_error("Invalid fill character '{' in format string");
 7014|      0|            return begin;
 7015|      0|        }
 7016|   200k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7016:13): [True: 0, False: 200k]
  ------------------
 7017|      0|            return begin_before_fill;
 7018|      0|        }
 7019|   200k|    }
 7020|       |
 7021|   200k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7021:9): [True: 200k, False: 0]
  ------------------
 7022|   200k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7022:13): [True: 0, False: 200k]
  ------------------
 7023|      0|            handler.on_align(potential_align_on_fill);
 7024|      0|            return begin_after_fill;
 7025|      0|        }
 7026|   200k|        return begin_before_fill;
 7027|   200k|    }
 7028|       |
 7029|      0|    handler.on_fill(potential_fill);
 7030|      0|    handler.on_align(potential_align_after_fill);
 7031|      0|    return begin;
 7032|   200k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6976|   401k|    auto check_align = [](wchar_t ch) {
 6977|   401k|        switch (ch) {
 6978|      0|            case L'<':
  ------------------
  |  Branch (6978:13): [True: 0, False: 401k]
  ------------------
 6979|      0|                return align_type::left;
 6980|      0|            case L'>':
  ------------------
  |  Branch (6980:13): [True: 0, False: 401k]
  ------------------
 6981|      0|                return align_type::right;
 6982|      0|            case L'^':
  ------------------
  |  Branch (6982:13): [True: 0, False: 401k]
  ------------------
 6983|      0|                return align_type::center;
 6984|   401k|            default:
  ------------------
  |  Branch (6984:13): [True: 401k, False: 0]
  ------------------
 6985|   401k|                return align_type::none;
 6986|   401k|        }
 6987|   401k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7038|   200k|{
 7039|   200k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7040|       |
 7041|   200k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7041:9): [True: 100k, False: 100k]
  |  Branch (7041:33): [True: 0, False: 100k]
  ------------------
 7042|      0|        int width = parse_simple_int(begin, end);
 7043|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7044|      0|            handler.on_width(width);
 7045|      0|        }
 7046|      0|        else {
 7047|      0|            handler.on_error("Invalid field width");
 7048|      0|            return begin;
 7049|      0|        }
 7050|      0|    }
 7051|   200k|    return begin;
 7052|   200k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7569|  50.7k|    {
 7570|  50.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7571|  50.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7571:13): [True: 25.3k, False: 25.3k]
  ------------------
 7572|  50.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7572:13): [True: 0, False: 25.3k]
  ------------------
 7573|  50.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7573:13): [True: 0, False: 0]
  ------------------
 7574|  50.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7574:13): [True: 0, False: 0]
  ------------------
 7575|      0|            SCN_UNLIKELY_ATTR
 7576|       |            // clang-format off
 7577|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7578|       |            // clang-format on
 7579|      0|        }
 7580|       |
 7581|  50.7k|        Handler::on_localized();
 7582|  50.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 8993|   303k|{
 8994|   303k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8995|   303k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8894|   303k|{
 8895|   303k|#define SCN_VISIT(Type)                                                \
 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 8898|   303k|    }                                                                  \
 8899|   303k|    else {                                                             \
 8900|   303k|        return vis(monostate_val);                                     \
 8901|   303k|    }
 8902|       |
 8903|   303k|    monostate monostate_val{};
 8904|       |
 8905|   303k|    switch (get_arg_type(arg)) {
 8906|  50.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8906:9): [True: 50.5k, False: 253k]
  ------------------
 8907|  50.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8896|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.5k|    }                                                                  \
  |  | 8899|  50.5k|    else {                                                             \
  |  | 8900|  50.5k|        return vis(monostate_val);                                     \
  |  | 8901|  50.5k|    }
  ------------------
 8908|  50.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8908:9): [True: 0, False: 303k]
  ------------------
 8909|  50.5k|            SCN_VISIT(short);
  ------------------
  |  | 8896|  50.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|  50.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|  50.5k|    }                                                                  \
  |  | 8899|  50.5k|    else {                                                             \
  |  | 8900|  50.5k|        return vis(monostate_val);                                     \
  |  | 8901|  50.5k|    }
  ------------------
 8910|   101k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8910:9): [True: 50.6k, False: 252k]
  ------------------
 8911|   101k|            SCN_VISIT(int);
  ------------------
  |  | 8896|   101k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   101k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   101k|    }                                                                  \
  |  | 8899|   101k|    else {                                                             \
  |  | 8900|   101k|        return vis(monostate_val);                                     \
  |  | 8901|   101k|    }
  ------------------
 8912|   101k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8912:9): [True: 0, False: 303k]
  ------------------
 8913|   101k|            SCN_VISIT(long);
  ------------------
  |  | 8896|   101k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   101k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   101k|    }                                                                  \
  |  | 8899|   101k|    else {                                                             \
  |  | 8900|   101k|        return vis(monostate_val);                                     \
  |  | 8901|   101k|    }
  ------------------
 8914|   151k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8914:9): [True: 50.7k, False: 252k]
  ------------------
 8915|   151k|            SCN_VISIT(long long);
  ------------------
  |  | 8896|   151k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   151k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   151k|    }                                                                  \
  |  | 8899|   151k|    else {                                                             \
  |  | 8900|   151k|        return vis(monostate_val);                                     \
  |  | 8901|   151k|    }
  ------------------
 8916|   202k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8916:9): [True: 50.4k, False: 253k]
  ------------------
 8917|   202k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8896|   202k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   202k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   202k|    }                                                                  \
  |  | 8899|   202k|    else {                                                             \
  |  | 8900|   202k|        return vis(monostate_val);                                     \
  |  | 8901|   202k|    }
  ------------------
 8918|   202k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8918:9): [True: 0, False: 303k]
  ------------------
 8919|   202k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8896|   202k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   202k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   202k|    }                                                                  \
  |  | 8899|   202k|    else {                                                             \
  |  | 8900|   202k|        return vis(monostate_val);                                     \
  |  | 8901|   202k|    }
  ------------------
 8920|   252k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8920:9): [True: 50.5k, False: 253k]
  ------------------
 8921|   252k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8896|   252k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   252k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   252k|    }                                                                  \
  |  | 8899|   252k|    else {                                                             \
  |  | 8900|   252k|        return vis(monostate_val);                                     \
  |  | 8901|   252k|    }
  ------------------
 8922|   252k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8922:9): [True: 0, False: 303k]
  ------------------
 8923|   252k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8896|   252k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   252k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   252k|    }                                                                  \
  |  | 8899|   252k|    else {                                                             \
  |  | 8900|   252k|        return vis(monostate_val);                                     \
  |  | 8901|   252k|    }
  ------------------
 8924|   303k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8924:9): [True: 50.6k, False: 252k]
  ------------------
 8925|   303k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8926|   303k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8926:9): [True: 0, False: 303k]
  ------------------
 8927|   303k|            SCN_VISIT(void*);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8928|   303k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8928:9): [True: 0, False: 303k]
  ------------------
 8929|   303k|            SCN_VISIT(bool);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8930|   303k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8930:9): [True: 0, False: 303k]
  ------------------
 8931|   303k|            SCN_VISIT(char);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8932|   303k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8932:9): [True: 0, False: 303k]
  ------------------
 8933|   303k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8934|   303k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8934:9): [True: 0, False: 303k]
  ------------------
 8935|   303k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8936|   303k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8936:9): [True: 0, False: 303k]
  ------------------
 8937|   303k|            SCN_VISIT(float);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8938|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8938:9): [True: 0, False: 303k]
  ------------------
 8939|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8940|   303k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8940:9): [True: 0, False: 303k]
  ------------------
 8941|   303k|            SCN_VISIT(long double);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8942|   303k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8942:9): [True: 0, False: 303k]
  ------------------
 8943|   303k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8944|   303k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8944:9): [True: 0, False: 303k]
  ------------------
 8945|   303k|            SCN_VISIT(std::string);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8946|   303k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8946:9): [True: 0, False: 303k]
  ------------------
 8947|   303k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8948|   303k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8948:9): [True: 0, False: 303k]
  ------------------
 8949|   303k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8950|   303k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8950:9): [True: 0, False: 303k]
  ------------------
 8951|   303k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8952|   303k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8952:9): [True: 0, False: 303k]
  ------------------
 8953|   303k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8896|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 8897|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 8898|   303k|    }                                                                  \
  |  | 8899|   303k|    else {                                                             \
  |  | 8900|   303k|        return vis(monostate_val);                                     \
  |  | 8901|   303k|    }
  ------------------
 8954|       |
 8955|   303k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8955:9): [True: 0, False: 303k]
  ------------------
 8956|   303k|#if !SCN_DISABLE_TYPE_CUSTOM
 8957|   303k|            return vis(typename basic_scan_arg<Ctx>::handle(
 8958|   303k|                get_arg_value(arg).custom_value));
 8959|       |#else
 8960|       |            return vis(monostate_val);
 8961|       |#endif
 8962|       |
 8963|      0|            SCN_CLANG_PUSH
 8964|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8965|       |
 8966|      0|            SCN_UNLIKELY_ATTR
 8967|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8967:9): [True: 0, False: 303k]
  ------------------
 8968|      0|        default: {
  ------------------
  |  Branch (8968:9): [True: 0, False: 303k]
  ------------------
 8969|      0|            return vis(monostate_val);
 8970|      0|        }
 8971|       |
 8972|   303k|            SCN_CLANG_POP
 8973|   303k|    }
 8974|       |
 8975|      0|#undef SCN_VISIT
 8976|       |
 8977|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8978|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8979|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|   525k|    {
 4351|   525k|        sync(0);
 4352|   525k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5824|   327k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5824|  50.6k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   252k|{
   44|   252k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   252k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   252k|{
   60|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   252k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.21k|{
  171|  4.21k|    auto result = make_scan_result<Source, T>();
  172|  4.21k|    fill_scan_result(
  173|  4.21k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.21k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.21k|    return result;
  176|  4.21k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  25.3k|{
   72|  25.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto result = make_scan_result<Source, Args...>();
   90|  41.9k|    fill_scan_result(result,
   91|  41.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  41.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  41.9k|    return result;
   94|  41.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  41.9k|{
  131|  41.9k|    auto result = make_scan_result<Source, Args...>();
  132|  41.9k|    fill_scan_result(result,
  133|  41.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  41.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  41.9k|    return result;
  136|  41.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.20k|{
  171|  4.20k|    auto result = make_scan_result<Source, T>();
  172|  4.20k|    fill_scan_result(
  173|  4.20k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.20k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.20k|    return result;
  176|  4.20k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.22k|{
  171|  4.22k|    auto result = make_scan_result<Source, T>();
  172|  4.22k|    fill_scan_result(
  173|  4.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.22k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.22k|    return result;
  176|  4.22k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto result = make_scan_result<Source, Args...>();
   90|  41.9k|    fill_scan_result(result,
   91|  41.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  41.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  41.9k|    return result;
   94|  41.9k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  41.9k|{
  131|  41.9k|    auto result = make_scan_result<Source, Args...>();
  132|  41.9k|    fill_scan_result(result,
  133|  41.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  41.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  41.9k|    return result;
  136|  41.9k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.21k|{
  171|  4.21k|    auto result = make_scan_result<Source, T>();
  172|  4.21k|    fill_scan_result(
  173|  4.21k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.21k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.21k|    return result;
  176|  4.21k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.1k|{
   89|  42.1k|    auto result = make_scan_result<Source, Args...>();
   90|  42.1k|    fill_scan_result(result,
   91|  42.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.1k|    return result;
   94|  42.1k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  42.1k|{
  131|  42.1k|    auto result = make_scan_result<Source, Args...>();
  132|  42.1k|    fill_scan_result(result,
  133|  42.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.1k|    return result;
  136|  42.1k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.24k|{
  171|  4.24k|    auto result = make_scan_result<Source, T>();
  172|  4.24k|    fill_scan_result(
  173|  4.24k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.24k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.24k|    return result;
  176|  4.24k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  4.22k|{
  171|  4.22k|    auto result = make_scan_result<Source, T>();
  172|  4.22k|    fill_scan_result(
  173|  4.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.22k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.22k|    return result;
  176|  4.22k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   252k|{
   44|   252k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   252k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   252k|{
   60|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   252k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.21k|{
  171|  4.21k|    auto result = make_scan_result<Source, T>();
  172|  4.21k|    fill_scan_result(
  173|  4.21k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.21k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.21k|    return result;
  176|  4.21k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  25.3k|{
   72|  25.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  25.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto result = make_scan_result<Source, Args...>();
   90|  41.9k|    fill_scan_result(result,
   91|  41.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  41.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  41.9k|    return result;
   94|  41.9k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  41.9k|{
  131|  41.9k|    auto result = make_scan_result<Source, Args...>();
  132|  41.9k|    fill_scan_result(result,
  133|  41.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  41.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  41.9k|    return result;
  136|  41.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.20k|{
  171|  4.20k|    auto result = make_scan_result<Source, T>();
  172|  4.20k|    fill_scan_result(
  173|  4.20k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.20k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.20k|    return result;
  176|  4.20k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.22k|{
  171|  4.22k|    auto result = make_scan_result<Source, T>();
  172|  4.22k|    fill_scan_result(
  173|  4.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.22k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.22k|    return result;
  176|  4.22k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  41.9k|{
   89|  41.9k|    auto result = make_scan_result<Source, Args...>();
   90|  41.9k|    fill_scan_result(result,
   91|  41.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  41.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  41.9k|    return result;
   94|  41.9k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  41.9k|{
  131|  41.9k|    auto result = make_scan_result<Source, Args...>();
  132|  41.9k|    fill_scan_result(result,
  133|  41.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  41.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  41.9k|    return result;
  136|  41.9k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.21k|{
  171|  4.21k|    auto result = make_scan_result<Source, T>();
  172|  4.21k|    fill_scan_result(
  173|  4.21k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.21k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.21k|    return result;
  176|  4.21k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.1k|{
   89|  42.1k|    auto result = make_scan_result<Source, Args...>();
   90|  42.1k|    fill_scan_result(result,
   91|  42.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.1k|    return result;
   94|  42.1k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  42.1k|{
  131|  42.1k|    auto result = make_scan_result<Source, Args...>();
  132|  42.1k|    fill_scan_result(result,
  133|  42.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.1k|    return result;
  136|  42.1k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.24k|{
  171|  4.24k|    auto result = make_scan_result<Source, T>();
  172|  4.24k|    fill_scan_result(
  173|  4.24k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.24k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.24k|    return result;
  176|  4.24k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  42.0k|{
   89|  42.0k|    auto result = make_scan_result<Source, Args...>();
   90|  42.0k|    fill_scan_result(result,
   91|  42.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  42.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  42.0k|    return result;
   94|  42.0k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  42.0k|{
  131|  42.0k|    auto result = make_scan_result<Source, Args...>();
  132|  42.0k|    fill_scan_result(result,
  133|  42.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  42.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  42.0k|    return result;
  136|  42.0k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  4.22k|{
  171|  4.22k|    auto result = make_scan_result<Source, T>();
  172|  4.22k|    fill_scan_result(
  173|  4.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  4.22k|                            detail::make_arg<wscan_context>(result->value())));
  175|  4.22k|    return result;
  176|  4.22k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  663|  2.62M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  664|  2.62M|{
  665|  2.62M|    static_assert(std::is_same_v<Locale, std::locale>);
  666|  2.62M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  670|   747k|{
  671|   747k|    static_assert(std::is_same_v<Locale, std::locale>);
  672|   747k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (672:12): [True: 373k, False: 373k]
  ------------------
  673|   747k|                    : std::locale{};
  674|   747k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   583k|{
 1509|   583k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   583k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   583k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   583k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   583k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 14.2k, False: 568k]
  ------------------
 1515|  14.2k|        SCN_UNLIKELY_ATTR
 1516|  14.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  14.2k|                                             "Invalid integer value");
 1518|  14.2k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   568k|    auto start = source.data();
 1522|   568k|    const auto end = source.data() + source.size();
 1523|   568k|    {
 1524|  1.43M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.35M, False: 86.4k]
  ------------------
 1525|  1.35M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 482k, False: 868k]
  ------------------
 1526|   482k|                break;
 1527|   482k|            }
 1528|  1.35M|        }
 1529|   568k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 143k, False: 424k]
  |  |  |  Branch (865:45): [True: 86.4k, False: 482k]
  |  |  |  Branch (865:45): [True: 57.5k, False: 424k]
  |  |  ------------------
  ------------------
 1530|   143k|            value = 0;
 1531|   143k|            return ranges::next(source.begin(),
 1532|   143k|                                ranges::distance(source.data(), start));
 1533|   143k|        }
 1534|   568k|    }
 1535|       |
 1536|   424k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   424k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 335k, False: 89.6k]
  ------------------
 1538|   335k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 15.1k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  15.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  15.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  15.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  15.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  15.1k|    }                                                  \
  |  |  |  | 3939|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   320k|                             detail::make_string_view_from_pointers(start, end),
 1540|   320k|                             value, sign == sign_type::minus_sign));
 1541|   320k|            return ranges::next(source.begin(),
 1542|   320k|                                ranges::distance(source.data(), ptr));
 1543|   335k|        }
 1544|   424k|    }
 1545|       |
 1546|   416k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   424k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   424k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   424k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 7.89k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  7.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  7.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  7.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  7.89k|    }                                                  \
  |  |  |  | 3939|   424k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   416k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   416k|                     base, sign == sign_type::minus_sign));
 1549|   416k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   424k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  55.2k|{
 1509|  55.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  55.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  55.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  55.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  55.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  55.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.6k, False: 1.59k]
  ------------------
 1515|  53.6k|        SCN_UNLIKELY_ATTR
 1516|  53.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.6k|                                             "Invalid integer value");
 1518|  53.6k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.59k|    auto start = source.data();
 1522|  1.59k|    const auto end = source.data() + source.size();
 1523|  1.59k|    {
 1524|  2.06k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.80k, False: 256]
  ------------------
 1525|  1.80k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.34k, False: 464]
  ------------------
 1526|  1.34k|                break;
 1527|  1.34k|            }
 1528|  1.80k|        }
 1529|  1.59k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 376, False: 1.22k]
  |  |  |  Branch (865:45): [True: 256, False: 1.34k]
  |  |  |  Branch (865:45): [True: 120, False: 1.22k]
  |  |  ------------------
  ------------------
 1530|    376|            value = 0;
 1531|    376|            return ranges::next(source.begin(),
 1532|    376|                                ranges::distance(source.data(), start));
 1533|    376|        }
 1534|  1.59k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|  1.22k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  1.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 376, False: 844]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    376|    }                                                  \
  |  |  |  | 3939|  1.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    844|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|    844|                     detail::make_string_view_from_pointers(start, end), value,
 1548|    844|                     base, sign == sign_type::minus_sign));
 1549|    844|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|  1.22k|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   742k|{
 1509|   742k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   742k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   742k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   742k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   742k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 17.5k, False: 724k]
  ------------------
 1515|  17.5k|        SCN_UNLIKELY_ATTR
 1516|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  17.5k|                                             "Invalid integer value");
 1518|  17.5k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   724k|    auto start = source.data();
 1522|   724k|    const auto end = source.data() + source.size();
 1523|   724k|    {
 1524|  1.71M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.61M, False: 104k]
  ------------------
 1525|  1.61M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 620k, False: 991k]
  ------------------
 1526|   620k|                break;
 1527|   620k|            }
 1528|  1.61M|        }
 1529|   724k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 176k, False: 548k]
  |  |  |  Branch (865:45): [True: 104k, False: 620k]
  |  |  |  Branch (865:45): [True: 72.0k, False: 548k]
  |  |  ------------------
  ------------------
 1530|   176k|            value = 0;
 1531|   176k|            return ranges::next(source.begin(),
 1532|   176k|                                ranges::distance(source.data(), start));
 1533|   176k|        }
 1534|   724k|    }
 1535|       |
 1536|   548k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   548k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 388k, False: 159k]
  ------------------
 1538|   388k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   388k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   388k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   388k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 7.51k, False: 381k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  7.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  7.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  7.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  7.51k|    }                                                  \
  |  |  |  | 3939|   388k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   381k|                             detail::make_string_view_from_pointers(start, end),
 1540|   381k|                             value, sign == sign_type::minus_sign));
 1541|   381k|            return ranges::next(source.begin(),
 1542|   381k|                                ranges::distance(source.data(), ptr));
 1543|   388k|        }
 1544|   548k|    }
 1545|       |
 1546|   545k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   548k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   548k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   548k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   548k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.57k, False: 545k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.57k|    }                                                  \
  |  |  |  | 3939|   548k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   545k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   545k|                     base, sign == sign_type::minus_sign));
 1549|   545k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   548k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  55.3k|{
 1509|  55.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  55.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  55.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  55.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  55.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.6k, False: 1.64k]
  ------------------
 1515|  53.6k|        SCN_UNLIKELY_ATTR
 1516|  53.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.6k|                                             "Invalid integer value");
 1518|  53.6k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.64k|    auto start = source.data();
 1522|  1.64k|    const auto end = source.data() + source.size();
 1523|  1.64k|    {
 1524|  2.12k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.85k, False: 267]
  ------------------
 1525|  1.85k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.37k, False: 482]
  ------------------
 1526|  1.37k|                break;
 1527|  1.37k|            }
 1528|  1.85k|        }
 1529|  1.64k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 394, False: 1.24k]
  |  |  |  Branch (865:45): [True: 267, False: 1.37k]
  |  |  |  Branch (865:45): [True: 127, False: 1.24k]
  |  |  ------------------
  ------------------
 1530|    394|            value = 0;
 1531|    394|            return ranges::next(source.begin(),
 1532|    394|                                ranges::distance(source.data(), start));
 1533|    394|        }
 1534|  1.64k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|  1.24k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  1.24k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.24k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.24k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 192, False: 1.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    192|    }                                                  \
  |  |  |  | 3939|  1.24k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|  1.05k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|  1.05k|                     base, sign == sign_type::minus_sign));
 1549|  1.05k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|  1.24k|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   755k|{
 1509|   755k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   755k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   755k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   755k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   755k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 18.8k, False: 736k]
  ------------------
 1515|  18.8k|        SCN_UNLIKELY_ATTR
 1516|  18.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  18.8k|                                             "Invalid integer value");
 1518|  18.8k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   736k|    auto start = source.data();
 1522|   736k|    const auto end = source.data() + source.size();
 1523|   736k|    {
 1524|  1.73M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.63M, False: 104k]
  ------------------
 1525|  1.63M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 631k, False: 1.00M]
  ------------------
 1526|   631k|                break;
 1527|   631k|            }
 1528|  1.63M|        }
 1529|   736k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 177k, False: 558k]
  |  |  |  Branch (865:45): [True: 104k, False: 631k]
  |  |  |  Branch (865:45): [True: 72.5k, False: 558k]
  |  |  ------------------
  ------------------
 1530|   177k|            value = 0;
 1531|   177k|            return ranges::next(source.begin(),
 1532|   177k|                                ranges::distance(source.data(), start));
 1533|   177k|        }
 1534|   736k|    }
 1535|       |
 1536|   558k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   558k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 395k, False: 162k]
  ------------------
 1538|   395k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   395k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   395k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   395k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.76k, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.76k|    }                                                  \
  |  |  |  | 3939|   395k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   391k|                             detail::make_string_view_from_pointers(start, end),
 1540|   391k|                             value, sign == sign_type::minus_sign));
 1541|   391k|            return ranges::next(source.begin(),
 1542|   391k|                                ranges::distance(source.data(), ptr));
 1543|   395k|        }
 1544|   558k|    }
 1545|       |
 1546|   556k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   558k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   558k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   558k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.17k, False: 556k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.17k|    }                                                  \
  |  |  |  | 3939|   558k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   556k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   556k|                     base, sign == sign_type::minus_sign));
 1549|   556k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   558k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  55.5k|{
 1509|  55.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  55.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  55.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  55.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  55.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  55.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  55.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  55.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  55.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.7k, False: 1.77k]
  ------------------
 1515|  53.7k|        SCN_UNLIKELY_ATTR
 1516|  53.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.7k|                                             "Invalid integer value");
 1518|  53.7k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.77k|    auto start = source.data();
 1522|  1.77k|    const auto end = source.data() + source.size();
 1523|  1.77k|    {
 1524|  2.30k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 2.00k, False: 300]
  ------------------
 1525|  2.00k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.47k, False: 536]
  ------------------
 1526|  1.47k|                break;
 1527|  1.47k|            }
 1528|  2.00k|        }
 1529|  1.77k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 448, False: 1.32k]
  |  |  |  Branch (865:45): [True: 300, False: 1.47k]
  |  |  |  Branch (865:45): [True: 148, False: 1.32k]
  |  |  ------------------
  ------------------
 1530|    448|            value = 0;
 1531|    448|            return ranges::next(source.begin(),
 1532|    448|                                ranges::distance(source.data(), start));
 1533|    448|        }
 1534|  1.77k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|  1.32k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 1.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|  1.29k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|  1.29k|                     base, sign == sign_type::minus_sign));
 1549|  1.29k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|  1.32k|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   543k|{
 1509|   543k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   543k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   543k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   543k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   543k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   543k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   543k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 10.8k, False: 532k]
  ------------------
 1515|  10.8k|        SCN_UNLIKELY_ATTR
 1516|  10.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  10.8k|                                             "Invalid integer value");
 1518|  10.8k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   532k|    auto start = source.data();
 1522|   532k|    const auto end = source.data() + source.size();
 1523|   532k|    {
 1524|  1.39M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.31M, False: 87.7k]
  ------------------
 1525|  1.31M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 444k, False: 865k]
  ------------------
 1526|   444k|                break;
 1527|   444k|            }
 1528|  1.31M|        }
 1529|   532k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   976k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148k, False: 383k]
  |  |  |  Branch (865:45): [True: 87.7k, False: 444k]
  |  |  |  Branch (865:45): [True: 60.4k, False: 383k]
  |  |  ------------------
  ------------------
 1530|   148k|            value = 0;
 1531|   148k|            return ranges::next(source.begin(),
 1532|   148k|                                ranges::distance(source.data(), start));
 1533|   148k|        }
 1534|   532k|    }
 1535|       |
 1536|   383k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   383k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 283k, False: 100k]
  ------------------
 1538|   283k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 7.44k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  7.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  7.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  7.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  7.44k|    }                                                  \
  |  |  |  | 3939|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   276k|                             detail::make_string_view_from_pointers(start, end),
 1540|   276k|                             value, sign == sign_type::minus_sign));
 1541|   276k|            return ranges::next(source.begin(),
 1542|   276k|                                ranges::distance(source.data(), ptr));
 1543|   283k|        }
 1544|   383k|    }
 1545|       |
 1546|   380k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.90k, False: 380k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.90k|    }                                                  \
  |  |  |  | 3939|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   380k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   380k|                     base, sign == sign_type::minus_sign));
 1549|   380k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   383k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  54.8k|{
 1509|  54.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  54.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  54.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  54.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  54.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.4k, False: 1.32k]
  ------------------
 1515|  53.4k|        SCN_UNLIKELY_ATTR
 1516|  53.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.4k|                                             "Invalid integer value");
 1518|  53.4k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.32k|    auto start = source.data();
 1522|  1.32k|    const auto end = source.data() + source.size();
 1523|  1.32k|    {
 1524|  1.77k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.52k, False: 245]
  ------------------
 1525|  1.52k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.07k, False: 446]
  ------------------
 1526|  1.07k|                break;
 1527|  1.07k|            }
 1528|  1.52k|        }
 1529|  1.32k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358, False: 966]
  |  |  |  Branch (865:45): [True: 245, False: 1.07k]
  |  |  |  Branch (865:45): [True: 113, False: 966]
  |  |  ------------------
  ------------------
 1530|    358|            value = 0;
 1531|    358|            return ranges::next(source.begin(),
 1532|    358|                                ranges::distance(source.data(), start));
 1533|    358|        }
 1534|  1.32k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|    966|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 294, False: 672]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    294|    }                                                  \
  |  |  |  | 3939|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    672|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|    672|                     detail::make_string_view_from_pointers(start, end), value,
 1548|    672|                     base, sign == sign_type::minus_sign));
 1549|    672|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|    966|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   618k|{
 1509|   618k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   618k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   618k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   618k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   618k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 12.3k, False: 606k]
  ------------------
 1515|  12.3k|        SCN_UNLIKELY_ATTR
 1516|  12.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  12.3k|                                             "Invalid integer value");
 1518|  12.3k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   606k|    auto start = source.data();
 1522|   606k|    const auto end = source.data() + source.size();
 1523|   606k|    {
 1524|  1.52M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.42M, False: 95.6k]
  ------------------
 1525|  1.42M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 510k, False: 917k]
  ------------------
 1526|   510k|                break;
 1527|   510k|            }
 1528|  1.42M|        }
 1529|   606k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 161k, False: 444k]
  |  |  |  Branch (865:45): [True: 95.6k, False: 510k]
  |  |  |  Branch (865:45): [True: 66.0k, False: 444k]
  |  |  ------------------
  ------------------
 1530|   161k|            value = 0;
 1531|   161k|            return ranges::next(source.begin(),
 1532|   161k|                                ranges::distance(source.data(), start));
 1533|   161k|        }
 1534|   606k|    }
 1535|       |
 1536|   444k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   444k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 318k, False: 126k]
  ------------------
 1538|   318k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.29k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.29k|    }                                                  \
  |  |  |  | 3939|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   314k|                             detail::make_string_view_from_pointers(start, end),
 1540|   314k|                             value, sign == sign_type::minus_sign));
 1541|   314k|            return ranges::next(source.begin(),
 1542|   314k|                                ranges::distance(source.data(), ptr));
 1543|   318k|        }
 1544|   444k|    }
 1545|       |
 1546|   443k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   444k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   444k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   444k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 443k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.67k|    }                                                  \
  |  |  |  | 3939|   444k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   443k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   443k|                     base, sign == sign_type::minus_sign));
 1549|   443k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   444k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  54.8k|{
 1509|  54.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  54.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  54.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  54.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  54.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.5k, False: 1.34k]
  ------------------
 1515|  53.5k|        SCN_UNLIKELY_ATTR
 1516|  53.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.5k|                                             "Invalid integer value");
 1518|  53.5k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.34k|    auto start = source.data();
 1522|  1.34k|    const auto end = source.data() + source.size();
 1523|  1.34k|    {
 1524|  1.79k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.54k, False: 245]
  ------------------
 1525|  1.54k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.10k, False: 446]
  ------------------
 1526|  1.10k|                break;
 1527|  1.10k|            }
 1528|  1.54k|        }
 1529|  1.34k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358, False: 988]
  |  |  |  Branch (865:45): [True: 245, False: 1.10k]
  |  |  |  Branch (865:45): [True: 113, False: 988]
  |  |  ------------------
  ------------------
 1530|    358|            value = 0;
 1531|    358|            return ranges::next(source.begin(),
 1532|    358|                                ranges::distance(source.data(), start));
 1533|    358|        }
 1534|  1.34k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|    988|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    988|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    988|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    988|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 188, False: 800]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    188|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    188|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    188|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    188|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    188|    }                                                  \
  |  |  |  | 3939|    988|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    800|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|    800|                     detail::make_string_view_from_pointers(start, end), value,
 1548|    800|                     base, sign == sign_type::minus_sign));
 1549|    800|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|    988|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|   625k|{
 1509|   625k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|   625k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|   625k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|   625k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|   625k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 12.6k, False: 612k]
  ------------------
 1515|  12.6k|        SCN_UNLIKELY_ATTR
 1516|  12.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  12.6k|                                             "Invalid integer value");
 1518|  12.6k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|   612k|    auto start = source.data();
 1522|   612k|    const auto end = source.data() + source.size();
 1523|   612k|    {
 1524|  1.53M|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.43M, False: 95.7k]
  ------------------
 1525|  1.43M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 517k, False: 918k]
  ------------------
 1526|   517k|                break;
 1527|   517k|            }
 1528|  1.43M|        }
 1529|   612k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 161k, False: 450k]
  |  |  |  Branch (865:45): [True: 95.7k, False: 517k]
  |  |  |  Branch (865:45): [True: 66.1k, False: 450k]
  |  |  ------------------
  ------------------
 1530|   161k|            value = 0;
 1531|   161k|            return ranges::next(source.begin(),
 1532|   161k|                                ranges::distance(source.data(), start));
 1533|   161k|        }
 1534|   612k|    }
 1535|       |
 1536|   450k|    if constexpr (std::is_same_v<CharT, char>) {
 1537|   450k|        if (base == 10) {
  ------------------
  |  Branch (1537:13): [True: 322k, False: 128k]
  ------------------
 1538|   322k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.08k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.08k|    }                                                  \
  |  |  |  | 3939|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|   320k|                             detail::make_string_view_from_pointers(start, end),
 1540|   320k|                             value, sign == sign_type::minus_sign));
 1541|   320k|            return ranges::next(source.begin(),
 1542|   320k|                                ranges::distance(source.data(), ptr));
 1543|   322k|        }
 1544|   450k|    }
 1545|       |
 1546|   449k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.08k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.08k|    }                                                  \
  |  |  |  | 3939|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|   449k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|   449k|                     base, sign == sign_type::minus_sign));
 1549|   449k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|   450k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1508|  55.0k|{
 1509|  55.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1510|  55.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1511|  55.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1512|  55.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1513|       |
 1514|  55.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1514:9): [True: 53.5k, False: 1.43k]
  ------------------
 1515|  53.5k|        SCN_UNLIKELY_ATTR
 1516|  53.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1517|  53.5k|                                             "Invalid integer value");
 1518|  53.5k|    }
 1519|       |
 1520|       |    // Skip leading zeroes
 1521|  1.43k|    auto start = source.data();
 1522|  1.43k|    const auto end = source.data() + source.size();
 1523|  1.43k|    {
 1524|  1.87k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1524:16): [True: 1.63k, False: 245]
  ------------------
 1525|  1.63k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1525:17): [True: 1.18k, False: 446]
  ------------------
 1526|  1.18k|                break;
 1527|  1.18k|            }
 1528|  1.63k|        }
 1529|  1.43k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 358, False: 1.07k]
  |  |  |  Branch (865:45): [True: 245, False: 1.18k]
  |  |  |  Branch (865:45): [True: 113, False: 1.07k]
  |  |  ------------------
  ------------------
 1530|    358|            value = 0;
 1531|    358|            return ranges::next(source.begin(),
 1532|    358|                                ranges::distance(source.data(), start));
 1533|    358|        }
 1534|  1.43k|    }
 1535|       |
 1536|       |    if constexpr (std::is_same_v<CharT, char>) {
 1537|       |        if (base == 10) {
 1538|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1539|       |                             detail::make_string_view_from_pointers(start, end),
 1540|       |                             value, sign == sign_type::minus_sign));
 1541|       |            return ranges::next(source.begin(),
 1542|       |                                ranges::distance(source.data(), ptr));
 1543|       |        }
 1544|       |    }
 1545|       |
 1546|  1.07k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 1.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|  1.06k|                     detail::make_string_view_from_pointers(start, end), value,
 1548|  1.06k|                     base, sign == sign_type::minus_sign));
 1549|  1.06k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1550|  1.07k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2235|  1.05M|{
 2236|  1.05M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2237|  1.05M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2243|  1.06M|{
 2244|  1.06M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2245|  1.06M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 935k, False: 125k]
  |  |  ------------------
  ------------------
 2246|   935k|        source.sync(*n);
 2247|   935k|    }
 2248|   125k|    else {
 2249|   125k|        source.sync_all();
 2250|   125k|    }
 2251|  1.06M|    return n;
 2252|  1.06M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2259|   252k|{
 2260|   252k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2261|   252k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2267|   252k|{
 2268|   252k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2269|   252k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.99k, False: 250k]
  |  |  ------------------
  ------------------
 2270|  1.99k|        source.sync(*n);
 2271|  1.99k|    }
 2272|   250k|    else {
 2273|   250k|        source.sync_all();
 2274|   250k|    }
 2275|   252k|    return n;
 2276|   252k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  213|  4.40M|{
  214|  4.40M|    return find_classic_impl(
  215|  4.40M|        source, [](char ch) { return !is_ascii_space(ch); },
  216|  4.40M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  217|  4.40M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2192|  1.05M|{
 2193|  1.05M|    return vscan_internal(source, format, args);
 2194|  1.05M|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2198|  1.06M|{
 2199|  1.06M|    auto n = vscan_internal(source, format, args);
 2200|  1.06M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 935k, False: 125k]
  |  |  ------------------
  ------------------
 2201|   935k|        source.sync(*n);
 2202|   935k|    }
 2203|   125k|    else {
 2204|   125k|        source.sync_all();
 2205|   125k|    }
 2206|  1.06M|    return n;
 2207|  1.06M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2212|   252k|{
 2213|   252k|    return vscan_internal(source, format, args);
 2214|   252k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2218|   252k|{
 2219|   252k|    auto n = vscan_internal(source, format, args);
 2220|   252k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.99k, False: 250k]
  |  |  ------------------
  ------------------
 2221|  1.99k|        source.sync(*n);
 2222|  1.99k|    }
 2223|   250k|    else {
 2224|   250k|        source.sync_all();
 2225|   250k|    }
 2226|   252k|    return n;
 2227|   252k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2302|   164k|{
 2303|   164k|    return vscan_value_internal(source, arg);
 2304|   164k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2307|   163k|{
 2308|   163k|    auto n = vscan_value_internal(source, arg);
 2309|   163k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   163k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 150k, False: 12.5k]
  |  |  ------------------
  ------------------
 2310|   150k|        source.sync(*n);
 2311|   150k|    }
 2312|  12.5k|    else {
 2313|  12.5k|        source.sync_all();
 2314|  12.5k|    }
 2315|   163k|    return n;
 2316|   163k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2321|  25.3k|{
 2322|  25.3k|    return vscan_value_internal(source, arg);
 2323|  25.3k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2327|  25.3k|{
 2328|  25.3k|    auto n = vscan_value_internal(source, arg);
 2329|  25.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|  25.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 320, False: 25.0k]
  |  |  ------------------
  ------------------
 2330|    320|        source.sync(*n);
 2331|    320|    }
 2332|  25.0k|    else {
 2333|  25.0k|        source.sync_all();
 2334|  25.0k|    }
 2335|  25.3k|    return n;
 2336|  25.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1412|   426k|{
 1413|   426k|    auto max_digits = maxdigits_u64(base);
 1414|   426k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 5.10k, False: 420k]
  ------------------
 1415|  5.10k|        return true;
 1416|  5.10k|    }
 1417|   420k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 800, False: 420k]
  |  Branch (1417:39): [True: 342, False: 458]
  ------------------
 1418|    342|        return true;
 1419|    342|    }
 1420|   420k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   420k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 18.0k, False: 402k]
  ------------------
 1422|   420k|                      static_cast<uint64_t>(is_negative)) {
 1423|  18.0k|            SCN_UNLIKELY_ATTR
 1424|  18.0k|            return true;
 1425|  18.0k|        }
 1426|   420k|    }
 1427|       |
 1428|   402k|    return false;
 1429|   420k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1358|  2.81M|{
 1359|  2.81M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  2.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1360|  2.81M|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1361|  2.81M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1402|  4.63k|{
 1403|  4.63k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  4.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1404|  4.63k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1405|  4.63k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIaEET_mb:
 1433|   402k|{
 1434|   402k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 48.0k, False: 354k]
  ------------------
 1435|  48.0k|        SCN_MSVC_PUSH
 1436|  48.0k|        SCN_MSVC_IGNORE(4146)
 1437|  48.0k|        return static_cast<T>(
 1438|  48.0k|            -std::numeric_limits<T>::max() -
 1439|  48.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|  48.0k|        SCN_MSVC_POP
 1441|  48.0k|    }
 1442|       |
 1443|   354k|    return static_cast<T>(u64val);
 1444|   402k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1412|   549k|{
 1413|   549k|    auto max_digits = maxdigits_u64(base);
 1414|   549k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 5.34k, False: 544k]
  ------------------
 1415|  5.34k|        return true;
 1416|  5.34k|    }
 1417|   544k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 1.00k, False: 543k]
  |  Branch (1417:39): [True: 504, False: 498]
  ------------------
 1418|    504|        return true;
 1419|    504|    }
 1420|   544k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   544k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 5.43k, False: 538k]
  ------------------
 1422|   544k|                      static_cast<uint64_t>(is_negative)) {
 1423|  5.43k|            SCN_UNLIKELY_ATTR
 1424|  5.43k|            return true;
 1425|  5.43k|        }
 1426|   544k|    }
 1427|       |
 1428|   538k|    return false;
 1429|   544k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIiEET_mb:
 1433|   538k|{
 1434|   538k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 54.2k, False: 484k]
  ------------------
 1435|  54.2k|        SCN_MSVC_PUSH
 1436|  54.2k|        SCN_MSVC_IGNORE(4146)
 1437|  54.2k|        return static_cast<T>(
 1438|  54.2k|            -std::numeric_limits<T>::max() -
 1439|  54.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|  54.2k|        SCN_MSVC_POP
 1441|  54.2k|    }
 1442|       |
 1443|   484k|    return static_cast<T>(u64val);
 1444|   538k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1412|   560k|{
 1413|   560k|    auto max_digits = maxdigits_u64(base);
 1414|   560k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 6.00k, False: 554k]
  ------------------
 1415|  6.00k|        return true;
 1416|  6.00k|    }
 1417|   554k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 1.55k, False: 552k]
  |  Branch (1417:39): [True: 650, False: 902]
  ------------------
 1418|    650|        return true;
 1419|    650|    }
 1420|   553k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   553k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 322, False: 553k]
  ------------------
 1422|   553k|                      static_cast<uint64_t>(is_negative)) {
 1423|    322|            SCN_UNLIKELY_ATTR
 1424|    322|            return true;
 1425|    322|        }
 1426|   553k|    }
 1427|       |
 1428|   553k|    return false;
 1429|   554k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxEET_mb:
 1433|   553k|{
 1434|   553k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 58.0k, False: 495k]
  ------------------
 1435|  58.0k|        SCN_MSVC_PUSH
 1436|  58.0k|        SCN_MSVC_IGNORE(4146)
 1437|  58.0k|        return static_cast<T>(
 1438|  58.0k|            -std::numeric_limits<T>::max() -
 1439|  58.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|  58.0k|        SCN_MSVC_POP
 1441|  58.0k|    }
 1442|       |
 1443|   495k|    return static_cast<T>(u64val);
 1444|   553k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1412|   384k|{
 1413|   384k|    auto max_digits = maxdigits_u64(base);
 1414|   384k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 3.01k, False: 381k]
  ------------------
 1415|  3.01k|        return true;
 1416|  3.01k|    }
 1417|   381k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 372, False: 381k]
  |  Branch (1417:39): [True: 136, False: 236]
  ------------------
 1418|    136|        return true;
 1419|    136|    }
 1420|   381k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   381k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 8.49k, False: 373k]
  ------------------
 1422|   381k|                      static_cast<uint64_t>(is_negative)) {
 1423|  8.49k|            SCN_UNLIKELY_ATTR
 1424|  8.49k|            return true;
 1425|  8.49k|        }
 1426|   381k|    }
 1427|       |
 1428|   373k|    return false;
 1429|   381k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhEET_mb:
 1433|   373k|{
 1434|   373k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 0, False: 373k]
  ------------------
 1435|      0|        SCN_MSVC_PUSH
 1436|      0|        SCN_MSVC_IGNORE(4146)
 1437|      0|        return static_cast<T>(
 1438|      0|            -std::numeric_limits<T>::max() -
 1439|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|      0|        SCN_MSVC_POP
 1441|      0|    }
 1442|       |
 1443|   373k|    return static_cast<T>(u64val);
 1444|   373k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1412|   445k|{
 1413|   445k|    auto max_digits = maxdigits_u64(base);
 1414|   445k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 3.02k, False: 442k]
  ------------------
 1415|  3.02k|        return true;
 1416|  3.02k|    }
 1417|   442k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 388, False: 442k]
  |  Branch (1417:39): [True: 136, False: 252]
  ------------------
 1418|    136|        return true;
 1419|    136|    }
 1420|   442k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   442k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 1.99k, False: 440k]
  ------------------
 1422|   442k|                      static_cast<uint64_t>(is_negative)) {
 1423|  1.99k|            SCN_UNLIKELY_ATTR
 1424|  1.99k|            return true;
 1425|  1.99k|        }
 1426|   442k|    }
 1427|       |
 1428|   440k|    return false;
 1429|   442k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjEET_mb:
 1433|   440k|{
 1434|   440k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 0, False: 440k]
  ------------------
 1435|      0|        SCN_MSVC_PUSH
 1436|      0|        SCN_MSVC_IGNORE(4146)
 1437|      0|        return static_cast<T>(
 1438|      0|            -std::numeric_limits<T>::max() -
 1439|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|      0|        SCN_MSVC_POP
 1441|      0|    }
 1442|       |
 1443|   440k|    return static_cast<T>(u64val);
 1444|   440k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1412|   452k|{
 1413|   452k|    auto max_digits = maxdigits_u64(base);
 1414|   452k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1414:9): [True: 3.04k, False: 448k]
  ------------------
 1415|  3.04k|        return true;
 1416|  3.04k|    }
 1417|   448k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1417:9): [True: 524, False: 448k]
  |  Branch (1417:39): [True: 136, False: 388]
  ------------------
 1418|    136|        return true;
 1419|    136|    }
 1420|   448k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1421|   448k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1421:13): [True: 0, False: 448k]
  ------------------
 1422|   448k|                      static_cast<uint64_t>(is_negative)) {
 1423|      0|            SCN_UNLIKELY_ATTR
 1424|      0|            return true;
 1425|      0|        }
 1426|   448k|    }
 1427|       |
 1428|   448k|    return false;
 1429|   448k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIyEET_mb:
 1433|   448k|{
 1434|   448k|    if (is_negative) {
  ------------------
  |  Branch (1434:9): [True: 0, False: 448k]
  ------------------
 1435|      0|        SCN_MSVC_PUSH
 1436|      0|        SCN_MSVC_IGNORE(4146)
 1437|      0|        return static_cast<T>(
 1438|      0|            -std::numeric_limits<T>::max() -
 1439|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1440|      0|        SCN_MSVC_POP
 1441|      0|    }
 1442|       |
 1443|   448k|    return static_cast<T>(u64val);
 1444|   448k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1296|  1.25M|{
 1297|  1.25M|    uint64_t val{};
 1298|  1.25M|    std::memcpy(&val, input, sizeof(uint64_t));
 1299|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1300|       |        val = byteswap(val);
 1301|       |    }
 1302|  1.25M|    return val;
 1303|  1.25M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1306|   251k|{
 1307|   251k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1308|   251k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1309|   251k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1310|   251k|    word -= 0x3030303030303030;
 1311|   251k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1312|   251k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1313|   251k|    return static_cast<uint32_t>(word);
 1314|   251k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1317|  1.00M|{
 1318|  1.00M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1319|  1.00M|              0x8080808080808080));
 1320|  1.00M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  2.70M|{
  117|  2.70M|    static_assert(sizeof(*source.data()) == 1);
  118|  2.70M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  2.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  2.70M|    uint64_t word{};
  120|  2.70M|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  2.70M|    return has_byte_greater(word, 127) != 0;
  123|  2.70M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  4.40M|{
  130|  4.40M|    auto it = source.begin();
  131|       |
  132|  4.85M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 2.70M, False: 2.15M]
  ------------------
  133|  2.70M|        auto sv =
  134|  2.70M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  2.70M|                .substr(0, 8);
  136|       |
  137|  2.70M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 2.62M, False: 76.7k]
  ------------------
  138|  2.62M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  2.62M|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  2.62M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 2.18M, False: 448k]
  ------------------
  141|  2.18M|                break;
  142|  2.18M|            }
  143|   448k|            continue;
  144|  2.62M|        }
  145|       |
  146|   111k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:28): [True: 107k, False: 3.25k]
  ------------------
  147|   107k|            auto tmp =
  148|   107k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   107k|            auto res = get_next_code_point(tmp);
  150|   107k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 73.4k, False: 34.5k]
  ------------------
  151|  73.4k|                return it;
  152|  73.4k|            }
  153|  34.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  154|  34.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  155|  34.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  34.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  34.5k|        }
  157|  76.7k|    }
  158|       |
  159|  4.33M|    return detail::make_string_view_iterator(source, it);
  160|  4.40M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  215|  4.83M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  216|   107k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   335k|{
 1451|   335k|    uint64_t u64val{};
 1452|   335k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   335k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   335k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   335k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.1k, False: 320k]
  |  |  ------------------
  ------------------
 1457|   335k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  15.1k|        return detail::unexpected_scan_error(
 1459|  15.1k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 5.23k, False: 9.95k]
  ------------------
 1460|  15.1k|                        : scan_error::value_positive_overflow,
 1461|  15.1k|            "Integer overflow");
 1462|  15.1k|    }
 1463|       |
 1464|   320k|    val = store_result<T>(u64val, is_negative);
 1465|   320k|    return ptr;
 1466|   335k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1338|  2.04M|{
 1339|  2.04M|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1340|       |
 1341|  4.65M|    while (begin != end) {
  ------------------
  |  Branch (1341:12): [True: 3.39M, False: 1.25M]
  ------------------
 1342|  3.39M|        const auto digit = char_to_int(*begin);
 1343|  3.39M|        if (digit >= 10) {
  ------------------
  |  Branch (1343:13): [True: 787k, False: 2.60M]
  ------------------
 1344|   787k|            break;
 1345|   787k|        }
 1346|  2.60M|        val = 10ull * val + static_cast<uint64_t>(digit);
 1347|  2.60M|        ++begin;
 1348|  2.60M|    }
 1349|       |
 1350|  2.04M|    return begin;
 1351|  2.04M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1325|  2.04M|{
 1326|  2.04M|    while (
 1327|  2.29M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1327:9): [True: 1.00M, False: 1.29M]
  ------------------
 1328|  2.29M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1328:9): [True: 251k, False: 752k]
  ------------------
 1329|   251k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1330|   251k|                                      get_eight_digits_word(p));
 1331|   251k|        p += 8;
 1332|   251k|    }
 1333|  2.04M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|  89.6k|{
 1474|  89.6k|    uint64_t u64val{};
 1475|  89.6k|    const CharT* begin = input.data();
 1476|  89.6k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   430k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 384k, False: 45.6k]
  ------------------
 1479|   384k|        const auto digit = char_to_int(*begin);
 1480|   384k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 43.9k, False: 340k]
  ------------------
 1481|  43.9k|            break;
 1482|  43.9k|        }
 1483|   340k|        u64val =
 1484|   340k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   340k|        ++begin;
 1486|   340k|    }
 1487|       |
 1488|  89.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|  89.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  89.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.89k, False: 81.7k]
  |  |  ------------------
  ------------------
 1490|  89.6k|                                               is_negative))) {
 1491|  7.89k|        return detail::unexpected_scan_error(
 1492|  7.89k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 2.56k, False: 5.32k]
  ------------------
 1493|  7.89k|                        : scan_error::value_positive_overflow,
 1494|  7.89k|            "Integer overflow");
 1495|  7.89k|    }
 1496|       |
 1497|  81.7k|    val = store_result<T>(u64val, is_negative);
 1498|  81.7k|    return begin;
 1499|  89.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|  1.22k|{
 1474|  1.22k|    uint64_t u64val{};
 1475|  1.22k|    const CharT* begin = input.data();
 1476|  1.22k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  5.95k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 5.09k, False: 857]
  ------------------
 1479|  5.09k|        const auto digit = char_to_int(*begin);
 1480|  5.09k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 363, False: 4.73k]
  ------------------
 1481|    363|            break;
 1482|    363|        }
 1483|  4.73k|        u64val =
 1484|  4.73k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.73k|        ++begin;
 1486|  4.73k|    }
 1487|       |
 1488|  1.22k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|  1.22k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 376, False: 844]
  |  |  ------------------
  ------------------
 1490|  1.22k|                                               is_negative))) {
 1491|    376|        return detail::unexpected_scan_error(
 1492|    376|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 56, False: 320]
  ------------------
 1493|    376|                        : scan_error::value_positive_overflow,
 1494|    376|            "Integer overflow");
 1495|    376|    }
 1496|       |
 1497|    844|    val = store_result<T>(u64val, is_negative);
 1498|    844|    return begin;
 1499|  1.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   388k|{
 1451|   388k|    uint64_t u64val{};
 1452|   388k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   388k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   388k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   388k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.51k, False: 381k]
  |  |  ------------------
  ------------------
 1457|   388k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  7.51k|        return detail::unexpected_scan_error(
 1459|  7.51k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 3.31k, False: 4.20k]
  ------------------
 1460|  7.51k|                        : scan_error::value_positive_overflow,
 1461|  7.51k|            "Integer overflow");
 1462|  7.51k|    }
 1463|       |
 1464|   381k|    val = store_result<T>(u64val, is_negative);
 1465|   381k|    return ptr;
 1466|   388k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|   159k|{
 1474|   159k|    uint64_t u64val{};
 1475|   159k|    const CharT* begin = input.data();
 1476|   159k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   601k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 520k, False: 81.2k]
  ------------------
 1479|   520k|        const auto digit = char_to_int(*begin);
 1480|   520k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 78.5k, False: 441k]
  ------------------
 1481|  78.5k|            break;
 1482|  78.5k|        }
 1483|   441k|        u64val =
 1484|   441k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   441k|        ++begin;
 1486|   441k|    }
 1487|       |
 1488|   159k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|   159k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.57k, False: 156k]
  |  |  ------------------
  ------------------
 1490|   159k|                                               is_negative))) {
 1491|  3.57k|        return detail::unexpected_scan_error(
 1492|  3.57k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 1.56k, False: 2.01k]
  ------------------
 1493|  3.57k|                        : scan_error::value_positive_overflow,
 1494|  3.57k|            "Integer overflow");
 1495|  3.57k|    }
 1496|       |
 1497|   156k|    val = store_result<T>(u64val, is_negative);
 1498|   156k|    return begin;
 1499|   159k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|  1.24k|{
 1474|  1.24k|    uint64_t u64val{};
 1475|  1.24k|    const CharT* begin = input.data();
 1476|  1.24k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  6.00k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 5.13k, False: 872]
  ------------------
 1479|  5.13k|        const auto digit = char_to_int(*begin);
 1480|  5.13k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 374, False: 4.75k]
  ------------------
 1481|    374|            break;
 1482|    374|        }
 1483|  4.75k|        u64val =
 1484|  4.75k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.75k|        ++begin;
 1486|  4.75k|    }
 1487|       |
 1488|  1.24k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|  1.24k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 192, False: 1.05k]
  |  |  ------------------
  ------------------
 1490|  1.24k|                                               is_negative))) {
 1491|    192|        return detail::unexpected_scan_error(
 1492|    192|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 192]
  ------------------
 1493|    192|                        : scan_error::value_positive_overflow,
 1494|    192|            "Integer overflow");
 1495|    192|    }
 1496|       |
 1497|  1.05k|    val = store_result<T>(u64val, is_negative);
 1498|  1.05k|    return begin;
 1499|  1.24k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   395k|{
 1451|   395k|    uint64_t u64val{};
 1452|   395k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   395k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   395k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   395k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.76k, False: 391k]
  |  |  ------------------
  ------------------
 1457|   395k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  4.76k|        return detail::unexpected_scan_error(
 1459|  4.76k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 1.86k, False: 2.90k]
  ------------------
 1460|  4.76k|                        : scan_error::value_positive_overflow,
 1461|  4.76k|            "Integer overflow");
 1462|  4.76k|    }
 1463|       |
 1464|   391k|    val = store_result<T>(u64val, is_negative);
 1465|   391k|    return ptr;
 1466|   395k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|   162k|{
 1474|   162k|    uint64_t u64val{};
 1475|   162k|    const CharT* begin = input.data();
 1476|   162k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   631k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 548k, False: 82.8k]
  ------------------
 1479|   548k|        const auto digit = char_to_int(*begin);
 1480|   548k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 80.0k, False: 468k]
  ------------------
 1481|  80.0k|            break;
 1482|  80.0k|        }
 1483|   468k|        u64val =
 1484|   468k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   468k|        ++begin;
 1486|   468k|    }
 1487|       |
 1488|   162k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|   162k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.17k, False: 160k]
  |  |  ------------------
  ------------------
 1490|   162k|                                               is_negative))) {
 1491|  2.17k|        return detail::unexpected_scan_error(
 1492|  2.17k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 648, False: 1.53k]
  ------------------
 1493|  2.17k|                        : scan_error::value_positive_overflow,
 1494|  2.17k|            "Integer overflow");
 1495|  2.17k|    }
 1496|       |
 1497|   160k|    val = store_result<T>(u64val, is_negative);
 1498|   160k|    return begin;
 1499|   162k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|  1.32k|{
 1474|  1.32k|    uint64_t u64val{};
 1475|  1.32k|    const CharT* begin = input.data();
 1476|  1.32k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  6.15k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 5.23k, False: 918]
  ------------------
 1479|  5.23k|        const auto digit = char_to_int(*begin);
 1480|  5.23k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 404, False: 4.83k]
  ------------------
 1481|    404|            break;
 1482|    404|        }
 1483|  4.83k|        u64val =
 1484|  4.83k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.83k|        ++begin;
 1486|  4.83k|    }
 1487|       |
 1488|  1.32k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|  1.32k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 28, False: 1.29k]
  |  |  ------------------
  ------------------
 1490|  1.32k|                                               is_negative))) {
 1491|     28|        return detail::unexpected_scan_error(
 1492|     28|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 28]
  ------------------
 1493|     28|                        : scan_error::value_positive_overflow,
 1494|     28|            "Integer overflow");
 1495|     28|    }
 1496|       |
 1497|  1.29k|    val = store_result<T>(u64val, is_negative);
 1498|  1.29k|    return begin;
 1499|  1.32k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   283k|{
 1451|   283k|    uint64_t u64val{};
 1452|   283k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   283k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   283k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   283k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.44k, False: 276k]
  |  |  ------------------
  ------------------
 1457|   283k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  7.44k|        return detail::unexpected_scan_error(
 1459|  7.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 0, False: 7.44k]
  ------------------
 1460|  7.44k|                        : scan_error::value_positive_overflow,
 1461|  7.44k|            "Integer overflow");
 1462|  7.44k|    }
 1463|       |
 1464|   276k|    val = store_result<T>(u64val, is_negative);
 1465|   276k|    return ptr;
 1466|   283k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|   100k|{
 1474|   100k|    uint64_t u64val{};
 1475|   100k|    const CharT* begin = input.data();
 1476|   100k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   318k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 268k, False: 50.8k]
  ------------------
 1479|   268k|        const auto digit = char_to_int(*begin);
 1480|   268k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 49.5k, False: 218k]
  ------------------
 1481|  49.5k|            break;
 1482|  49.5k|        }
 1483|   218k|        u64val =
 1484|   218k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   218k|        ++begin;
 1486|   218k|    }
 1487|       |
 1488|   100k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|   100k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.90k, False: 96.5k]
  |  |  ------------------
  ------------------
 1490|   100k|                                               is_negative))) {
 1491|  3.90k|        return detail::unexpected_scan_error(
 1492|  3.90k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 3.90k]
  ------------------
 1493|  3.90k|                        : scan_error::value_positive_overflow,
 1494|  3.90k|            "Integer overflow");
 1495|  3.90k|    }
 1496|       |
 1497|  96.5k|    val = store_result<T>(u64val, is_negative);
 1498|  96.5k|    return begin;
 1499|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|    966|{
 1474|    966|    uint64_t u64val{};
 1475|    966|    const CharT* begin = input.data();
 1476|    966|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  5.28k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 4.63k, False: 648]
  ------------------
 1479|  4.63k|        const auto digit = char_to_int(*begin);
 1480|  4.63k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 318, False: 4.31k]
  ------------------
 1481|    318|            break;
 1482|    318|        }
 1483|  4.31k|        u64val =
 1484|  4.31k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.31k|        ++begin;
 1486|  4.31k|    }
 1487|       |
 1488|    966|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|    966|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 294, False: 672]
  |  |  ------------------
  ------------------
 1490|    966|                                               is_negative))) {
 1491|    294|        return detail::unexpected_scan_error(
 1492|    294|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 294]
  ------------------
 1493|    294|                        : scan_error::value_positive_overflow,
 1494|    294|            "Integer overflow");
 1495|    294|    }
 1496|       |
 1497|    672|    val = store_result<T>(u64val, is_negative);
 1498|    672|    return begin;
 1499|    966|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   318k|{
 1451|   318k|    uint64_t u64val{};
 1452|   318k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   318k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   318k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   318k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.29k, False: 314k]
  |  |  ------------------
  ------------------
 1457|   318k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  3.29k|        return detail::unexpected_scan_error(
 1459|  3.29k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 0, False: 3.29k]
  ------------------
 1460|  3.29k|                        : scan_error::value_positive_overflow,
 1461|  3.29k|            "Integer overflow");
 1462|  3.29k|    }
 1463|       |
 1464|   314k|    val = store_result<T>(u64val, is_negative);
 1465|   314k|    return ptr;
 1466|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|   126k|{
 1474|   126k|    uint64_t u64val{};
 1475|   126k|    const CharT* begin = input.data();
 1476|   126k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   388k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 324k, False: 64.3k]
  ------------------
 1479|   324k|        const auto digit = char_to_int(*begin);
 1480|   324k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 62.5k, False: 262k]
  ------------------
 1481|  62.5k|            break;
 1482|  62.5k|        }
 1483|   262k|        u64val =
 1484|   262k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   262k|        ++begin;
 1486|   262k|    }
 1487|       |
 1488|   126k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|   126k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.67k, False: 125k]
  |  |  ------------------
  ------------------
 1490|   126k|                                               is_negative))) {
 1491|  1.67k|        return detail::unexpected_scan_error(
 1492|  1.67k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 1.67k]
  ------------------
 1493|  1.67k|                        : scan_error::value_positive_overflow,
 1494|  1.67k|            "Integer overflow");
 1495|  1.67k|    }
 1496|       |
 1497|   125k|    val = store_result<T>(u64val, is_negative);
 1498|   125k|    return begin;
 1499|   126k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|    988|{
 1474|    988|    uint64_t u64val{};
 1475|    988|    const CharT* begin = input.data();
 1476|    988|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  5.32k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 4.66k, False: 661]
  ------------------
 1479|  4.66k|        const auto digit = char_to_int(*begin);
 1480|  4.66k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 327, False: 4.33k]
  ------------------
 1481|    327|            break;
 1482|    327|        }
 1483|  4.33k|        u64val =
 1484|  4.33k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.33k|        ++begin;
 1486|  4.33k|    }
 1487|       |
 1488|    988|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|    988|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    988|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 188, False: 800]
  |  |  ------------------
  ------------------
 1490|    988|                                               is_negative))) {
 1491|    188|        return detail::unexpected_scan_error(
 1492|    188|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 188]
  ------------------
 1493|    188|                        : scan_error::value_positive_overflow,
 1494|    188|            "Integer overflow");
 1495|    188|    }
 1496|       |
 1497|    800|    val = store_result<T>(u64val, is_negative);
 1498|    800|    return begin;
 1499|    988|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1450|   322k|{
 1451|   322k|    uint64_t u64val{};
 1452|   322k|    auto ptr = parse_decimal_integer_fast_impl(
 1453|   322k|        input.data(), input.data() + input.size(), u64val);
 1454|       |
 1455|   322k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1456|   322k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.08k, False: 320k]
  |  |  ------------------
  ------------------
 1457|   322k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1458|  2.08k|        return detail::unexpected_scan_error(
 1459|  2.08k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1459:13): [True: 0, False: 2.08k]
  ------------------
 1460|  2.08k|                        : scan_error::value_positive_overflow,
 1461|  2.08k|            "Integer overflow");
 1462|  2.08k|    }
 1463|       |
 1464|   320k|    val = store_result<T>(u64val, is_negative);
 1465|   320k|    return ptr;
 1466|   322k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|   128k|{
 1474|   128k|    uint64_t u64val{};
 1475|   128k|    const CharT* begin = input.data();
 1476|   128k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|   396k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 331k, False: 64.9k]
  ------------------
 1479|   331k|        const auto digit = char_to_int(*begin);
 1480|   331k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 63.0k, False: 268k]
  ------------------
 1481|  63.0k|            break;
 1482|  63.0k|        }
 1483|   268k|        u64val =
 1484|   268k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|   268k|        ++begin;
 1486|   268k|    }
 1487|       |
 1488|   128k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|   128k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.08k, False: 126k]
  |  |  ------------------
  ------------------
 1490|   128k|                                               is_negative))) {
 1491|  1.08k|        return detail::unexpected_scan_error(
 1492|  1.08k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 1.08k]
  ------------------
 1493|  1.08k|                        : scan_error::value_positive_overflow,
 1494|  1.08k|            "Integer overflow");
 1495|  1.08k|    }
 1496|       |
 1497|   126k|    val = store_result<T>(u64val, is_negative);
 1498|   126k|    return begin;
 1499|   128k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1473|  1.07k|{
 1474|  1.07k|    uint64_t u64val{};
 1475|  1.07k|    const CharT* begin = input.data();
 1476|  1.07k|    const CharT* const end = input.data() + input.size();
 1477|       |
 1478|  5.49k|    while (begin != end) {
  ------------------
  |  Branch (1478:12): [True: 4.78k, False: 711]
  ------------------
 1479|  4.78k|        const auto digit = char_to_int(*begin);
 1480|  4.78k|        if (digit >= base) {
  ------------------
  |  Branch (1480:13): [True: 361, False: 4.42k]
  ------------------
 1481|    361|            break;
 1482|    361|        }
 1483|  4.42k|        u64val =
 1484|  4.42k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1485|  4.42k|        ++begin;
 1486|  4.42k|    }
 1487|       |
 1488|  1.07k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1489|  1.07k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12, False: 1.06k]
  |  |  ------------------
  ------------------
 1490|  1.07k|                                               is_negative))) {
 1491|     12|        return detail::unexpected_scan_error(
 1492|     12|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1492:13): [True: 0, False: 12]
  ------------------
 1493|     12|                        : scan_error::value_positive_overflow,
 1494|     12|            "Integer overflow");
 1495|     12|    }
 1496|       |
 1497|  1.06k|    val = store_result<T>(u64val, is_negative);
 1498|  1.06k|    return begin;
 1499|  1.07k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|  2.12M|{
 2125|  2.12M|    const auto argcount = args.size();
 2126|  2.12M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 326k, False: 1.79M]
  |  Branch (2126:60): [True: 326k, False: 0]
  ------------------
 2127|   326k|        auto arg = args.get(0);
 2128|   326k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   326k|    static_cast<    \
  |  |  935|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|   326k|    }
 2130|       |
 2131|  1.79M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 1.79M]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|  1.79M|    SCN_UNLIKELY_ATTR
 2139|  1.79M|    {
 2140|  1.79M|        auto handler = format_handler<false, CharT>{
 2141|  1.79M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|  1.79M|        return vscan_parse_format_string(format, handler);
 2143|  1.79M|    }
 2144|  1.79M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  4.23M|{
 1673|  4.23M|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 3.57M, False: 655k]
  ------------------
 1674|  3.57M|        return false;
 1675|  3.57M|    }
 1676|   655k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 655k, False: 0]
  |  Branch (1676:39): [True: 655k, False: 0]
  ------------------
 1677|  4.23M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|   489k|{
 1706|   489k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|   489k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   489k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 489k]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|   489k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|   489k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   489k|    static_cast<    \
  |  |  935|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   489k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   489k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   489k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   489k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 37.5k, False: 452k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  37.5k|    }                                                  \
  |  |  |  | 3939|   489k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|   452k|    return it.position();
 1723|   489k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1948|  1.78M|        : format_handler_base{argcount},
 1949|  1.78M|          parse_ctx{format},
 1950|  1.78M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.78M|    static_cast<    \
  |  |  935|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.78M|    static_cast<    \
  |  |  935|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  1.78M|    {
 1952|  1.78M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1766|  4.48M|    format_handler_base(size_t argcount) : args_count(argcount)
 1767|  4.48M|    {
 1768|  4.48M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1769|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1770|      0|        }
 1771|  4.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1899|  1.78M|        : contiguous_ctx(source, args, loc)
 1900|  1.78M|    {
 1901|  1.78M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  1.78M|{
 2090|  1.78M|    const auto beg = handler.get_ctx().begin();
 2091|  1.78M|    detail::parse_format_string<false>(format, handler);
 2092|  1.78M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 225k, False: 1.56M]
  |  |  ------------------
  ------------------
 2093|   225k|        return unexpected(err.error());
 2094|   225k|    }
 2095|  1.56M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  1.78M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2073|  11.8M|    {
 2074|  11.8M|        return ctx.get();
 2075|  11.8M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1904|  11.8M|    {
 1905|  11.8M|        return contiguous_ctx;
 1906|  11.8M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1955|  3.34M|    {
 1956|  3.34M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 3.34M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  3.34M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1815|  1.20M|    {
 1816|  1.20M|        error = unexpected(err);
 1817|  1.20M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1727|  1.78M|{
 1728|  1.78M|    auto arg = ctx.arg(id);
 1729|  1.78M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  1.78M|    return arg;
 1733|  1.78M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1841|  4.48M|    {
 1842|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1843|      0|            on_error({scan_error::invalid_format_string,
 1844|      0|                      "Argument ID out-of-range"});
 1845|      0|            return;
 1846|      0|        }
 1847|       |
 1848|  4.48M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1849|      0|            on_error({scan_error::invalid_format_string,
 1850|      0|                      "Argument with this ID has already been scanned"});
 1851|      0|        }
 1852|       |
 1853|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1854|  4.48M|            visited_args_lower64 |= (1ull << id);
 1855|  4.48M|            return;
 1856|  4.48M|        }
 1857|       |
 1858|      0|        id -= 64;
 1859|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1860|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1825|  4.48M|    {
 1826|  4.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.48M]
  |  |  ------------------
  ------------------
 1827|      0|            on_error({scan_error::invalid_format_string,
 1828|      0|                      "Argument ID out-of-range"});
 1829|      0|            return false;
 1830|      0|        }
 1831|       |
 1832|  4.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  4.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.48M, False: 0]
  |  |  ------------------
  ------------------
 1833|  4.48M|            return (visited_args_lower64 >> id) & 1ull;
 1834|  4.48M|        }
 1835|       |
 1836|      0|        id -= 64;
 1837|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1838|  4.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1995|  1.78M|    {
 1996|  1.78M|        return parse_ctx.next_arg_id();
 1997|  1.78M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2035|  1.78M|    {
 2036|  1.78M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  1.78M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  1.78M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 1.78M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  1.78M|        auto specs = detail::format_specs{};
 2049|  1.78M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  1.78M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  1.78M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  1.78M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  1.78M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 1.78M]
  |  Branch (2054:29): [True: 50.0k, False: 1.73M]
  ------------------
 2055|  50.0k|            SCN_UNLIKELY_ATTR
 2056|  50.0k|            on_error({scan_error::invalid_format_string,
 2057|  50.0k|                      "Missing '}' in format string"});
 2058|  50.0k|            return parse_ctx.begin();
 2059|  50.0k|        }
 2060|  1.73M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 2061|  25.0k|            return parse_ctx.begin();
 2062|  25.0k|        }
 2063|  1.71M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  1.71M|        on_visit_scan_arg(
 2066|  1.71M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  1.71M|                                           get_ctx().locale()},
 2068|  1.71M|            arg);
 2069|  1.71M|        return parse_ctx.begin();
 2070|  1.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1745|  1.78M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  1.78M|    {
 1747|  1.78M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2006|  1.71M|    {
 2007|  1.71M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 1.71M]
  |  Branch (2007:13): [True: 0, False: 1.71M]
  |  Branch (2007:29): [True: 0, False: 1.71M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  1.71M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  1.71M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 1.56M]
  |  |  ------------------
  ------------------
 2014|   150k|            on_error(r.error());
 2015|   150k|        }
 2016|  1.56M|        else {
 2017|  1.56M|            get_ctx().advance_to(*r);
 2018|  1.56M|        }
 2019|  1.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1809|   450k|    {
 1810|   450k|        SCN_UNLIKELY_ATTR
 1811|   450k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1812|   450k|                                              msg);
 1813|   450k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1774|  4.48M|    {
 1775|  4.48M|        {
 1776|  4.48M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1776:45): [True: 0, False: 4.48M]
  ------------------
 1777|  4.48M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1777:35): [True: 0, False: 4.48M]
  ------------------
 1778|  4.48M|                                      ? std::numeric_limits<uint64_t>::max()
 1779|  4.48M|                                      : (1ull << args_count_lower64) - 1;
 1780|       |
 1781|  4.48M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1781:17): [True: 0, False: 4.48M]
  ------------------
 1782|      0|                return on_error({scan_error::invalid_format_string,
 1783|      0|                                 "Argument list not exhausted"});
 1784|      0|            }
 1785|  4.48M|        }
 1786|       |
 1787|  4.48M|        if (args_count < 64) {
  ------------------
  |  Branch (1787:13): [True: 4.48M, False: 0]
  ------------------
 1788|  4.48M|            return;
 1789|  4.48M|        }
 1790|       |
 1791|      0|        auto last_args_count = args_count - 64;
 1792|      0|        for (auto it = visited_args_upper.begin();
 1793|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1793:14): [True: 0, False: 0]
  ------------------
 1794|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1794:17): [True: 0, False: 0]
  ------------------
 1795|      0|                return on_error({scan_error::invalid_format_string,
 1796|      0|                                 "Argument list not exhausted"});
 1797|      0|            }
 1798|      0|            last_args_count -= 8;
 1799|      0|        }
 1800|       |
 1801|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1802|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1802:13): [True: 0, False: 0]
  ------------------
 1803|      0|            return on_error({scan_error::invalid_format_string,
 1804|      0|                             "Argument list not exhausted"});
 1805|      0|        }
 1806|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1820|  17.4M|    {
 1821|  17.4M|        return error;
 1822|  17.4M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1948|  1.79M|        : format_handler_base{argcount},
 1949|  1.79M|          parse_ctx{format},
 1950|  1.79M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|  1.79M|    {
 1952|  1.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1875|  1.79M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  1.79M|    static_cast<    \
  |  |  935|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|  1.79M|    {
 1877|  1.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|  1.79M|{
 2090|  1.79M|    const auto beg = handler.get_ctx().begin();
 2091|  1.79M|    detail::parse_format_string<false>(format, handler);
 2092|  1.79M|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 225k, False: 1.56M]
  |  |  ------------------
  ------------------
 2093|   225k|        return unexpected(err.error());
 2094|   225k|    }
 2095|  1.56M|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|  1.79M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2073|  11.9M|    {
 2074|  11.9M|        return ctx.get();
 2075|  11.9M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1880|  11.9M|    {
 1881|  11.9M|        return ctx;
 1882|  11.9M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1955|  3.36M|    {
 1956|  3.36M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 3.36M]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|  3.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1727|  1.79M|{
 1728|  1.79M|    auto arg = ctx.arg(id);
 1729|  1.79M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|  1.79M|    return arg;
 1733|  1.79M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1995|  1.79M|    {
 1996|  1.79M|        return parse_ctx.next_arg_id();
 1997|  1.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2035|  1.79M|    {
 2036|  1.79M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|  1.79M|        set_arg_as_visited(arg_id);
 2038|       |
 2039|  1.79M|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 1.79M]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|  1.79M|        auto specs = detail::format_specs{};
 2049|  1.79M|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|  1.79M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|  1.79M|            detail::get_arg_type(arg)};
 2052|       |
 2053|  1.79M|        begin = detail::parse_format_specs(begin, end, handler);
 2054|  1.79M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 1.79M]
  |  Branch (2054:29): [True: 50.0k, False: 1.74M]
  ------------------
 2055|  50.0k|            SCN_UNLIKELY_ATTR
 2056|  50.0k|            on_error({scan_error::invalid_format_string,
 2057|  50.0k|                      "Missing '}' in format string"});
 2058|  50.0k|            return parse_ctx.begin();
 2059|  50.0k|        }
 2060|  1.74M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.0k, False: 1.71M]
  |  |  ------------------
  ------------------
 2061|  25.0k|            return parse_ctx.begin();
 2062|  25.0k|        }
 2063|  1.71M|        parse_ctx.advance_to(begin);
 2064|       |
 2065|  1.71M|        on_visit_scan_arg(
 2066|  1.71M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|  1.71M|                                           get_ctx().locale()},
 2068|  1.71M|            arg);
 2069|  1.71M|        return parse_ctx.begin();
 2070|  1.74M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1745|  1.79M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|  1.79M|    {
 1747|  1.79M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|  1.71M|    {
 2007|  1.71M|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 1.71M]
  |  Branch (2007:13): [True: 0, False: 1.71M]
  |  Branch (2007:29): [True: 0, False: 1.71M]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|  1.71M|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|  1.71M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 150k, False: 1.56M]
  |  |  ------------------
  ------------------
 2014|   150k|            on_error(r.error());
 2015|   150k|        }
 2016|  1.56M|        else {
 2017|  1.56M|            get_ctx().advance_to(*r);
 2018|  1.56M|        }
 2019|  1.71M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|  2.11M|{
 2105|  2.11M|    const auto argcount = args.size();
 2106|  2.11M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 329k, False: 1.78M]
  |  Branch (2106:60): [True: 329k, False: 0]
  ------------------
 2107|   329k|        auto arg = args.get(0);
 2108|   329k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   329k|    static_cast<    \
  |  |  935|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|   329k|    }
 2110|       |
 2111|  1.78M|    auto handler = format_handler<true, CharT>{
 2112|  1.78M|        ranges::subrange<const CharT*>{source.data(),
 2113|  1.78M|                                       source.data() + source.size()},
 2114|  1.78M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.78M|    static_cast<    \
  |  |  935|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  1.78M|    static_cast<    \
  |  |  935|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|  1.78M|    return vscan_parse_format_string(format, handler);
 2116|  2.11M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|   493k|{
 1686|   493k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|   493k|    auto reader =
 1692|   493k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|   493k|            ranges::subrange<const CharT*>{source.data(),
 1694|   493k|                                           source.data() + source.size()},
 1695|   493k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   493k|    static_cast<    \
  |  |  935|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|   493k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 37.5k, False: 456k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  37.5k|    }                                                  \
  |  |  |  | 3939|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   456k|    return ranges::distance(source.data(), it);
 1698|   493k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2104|   504k|{
 2105|   504k|    const auto argcount = args.size();
 2106|   504k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2106:9): [True: 50.6k, False: 453k]
  |  Branch (2106:60): [True: 50.6k, False: 0]
  ------------------
 2107|  50.6k|        auto arg = args.get(0);
 2108|  50.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  50.6k|    static_cast<    \
  |  |  935|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2109|  50.6k|    }
 2110|       |
 2111|   453k|    auto handler = format_handler<true, CharT>{
 2112|   453k|        ranges::subrange<const CharT*>{source.data(),
 2113|   453k|                                       source.data() + source.size()},
 2114|   453k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2115|   453k|    return vscan_parse_format_string(format, handler);
 2116|   504k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1672|  1.00M|{
 1673|  1.00M|    if (format.size() != 2) {
  ------------------
  |  Branch (1673:9): [True: 907k, False: 101k]
  ------------------
 1674|   907k|        return false;
 1675|   907k|    }
 1676|   101k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1676:12): [True: 101k, False: 0]
  |  Branch (1676:39): [True: 101k, False: 0]
  ------------------
 1677|  1.00M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1685|  76.0k|{
 1686|  76.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1687|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1688|      0|                                             "Argument #0 not found");
 1689|      0|    }
 1690|       |
 1691|  76.0k|    auto reader =
 1692|  76.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1693|  76.0k|            ranges::subrange<const CharT*>{source.data(),
 1694|  76.0k|                                           source.data() + source.size()},
 1695|  76.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  76.0k|    static_cast<    \
  |  |  935|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1696|  76.0k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 75.0k, False: 960]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  75.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  75.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  75.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  75.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  75.0k|    }                                                  \
  |  |  |  | 3939|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|    960|    return ranges::distance(source.data(), it);
 1698|  76.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1948|   453k|        : format_handler_base{argcount},
 1949|   453k|          parse_ctx{format},
 1950|   453k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   453k|    {
 1952|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1899|   453k|        : contiguous_ctx(source, args, loc)
 1900|   453k|    {
 1901|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   453k|{
 2090|   453k|    const auto beg = handler.get_ctx().begin();
 2091|   453k|    detail::parse_format_string<false>(format, handler);
 2092|   453k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 450k, False: 3.35k]
  |  |  ------------------
  ------------------
 2093|   450k|        return unexpected(err.error());
 2094|   450k|    }
 2095|  3.35k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   453k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2073|  1.97M|    {
 2074|  1.97M|        return ctx.get();
 2075|  1.97M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1904|  1.97M|    {
 1905|  1.97M|        return contiguous_ctx;
 1906|  1.97M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1955|   457k|    {
 1956|   457k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 457k]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1727|   453k|{
 1728|   453k|    auto arg = ctx.arg(id);
 1729|   453k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   453k|    return arg;
 1733|   453k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1995|   453k|    {
 1996|   453k|        return parse_ctx.next_arg_id();
 1997|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2035|   453k|    {
 2036|   453k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   453k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   453k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 453k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   453k|        auto specs = detail::format_specs{};
 2049|   453k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   453k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   453k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   453k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   453k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 453k]
  |  Branch (2054:29): [True: 100k, False: 353k]
  ------------------
 2055|   100k|            SCN_UNLIKELY_ATTR
 2056|   100k|            on_error({scan_error::invalid_format_string,
 2057|   100k|                      "Missing '}' in format string"});
 2058|   100k|            return parse_ctx.begin();
 2059|   100k|        }
 2060|   353k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.0k, False: 303k]
  |  |  ------------------
  ------------------
 2061|  50.0k|            return parse_ctx.begin();
 2062|  50.0k|        }
 2063|   303k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   303k|        on_visit_scan_arg(
 2066|   303k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   303k|                                           get_ctx().locale()},
 2068|   303k|            arg);
 2069|   303k|        return parse_ctx.begin();
 2070|   353k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1745|   453k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   453k|    {
 1747|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2006|   303k|    {
 2007|   303k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 303k]
  |  Branch (2007:13): [True: 0, False: 303k]
  |  Branch (2007:29): [True: 0, False: 303k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   303k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   303k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 300k, False: 3.35k]
  |  |  ------------------
  ------------------
 2014|   300k|            on_error(r.error());
 2015|   300k|        }
 2016|  3.35k|        else {
 2017|  3.35k|            get_ctx().advance_to(*r);
 2018|  3.35k|        }
 2019|   303k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2124|   504k|{
 2125|   504k|    const auto argcount = args.size();
 2126|   504k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2126:9): [True: 50.6k, False: 453k]
  |  Branch (2126:60): [True: 50.6k, False: 0]
  ------------------
 2127|  50.6k|        auto arg = args.get(0);
 2128|  50.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  50.6k|    static_cast<    \
  |  |  935|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2129|  50.6k|    }
 2130|       |
 2131|   453k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2131:9): [True: 0, False: 453k]
  ------------------
 2132|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2133|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2134|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2135|      0|        return vscan_parse_format_string(format, handler);
 2136|      0|    }
 2137|       |
 2138|   453k|    SCN_UNLIKELY_ATTR
 2139|   453k|    {
 2140|   453k|        auto handler = format_handler<false, CharT>{
 2141|   453k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2142|   453k|        return vscan_parse_format_string(format, handler);
 2143|   453k|    }
 2144|   453k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1705|  76.0k|{
 1706|  76.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1707|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1708|      0|                                             "Argument #0 not found");
 1709|      0|    }
 1710|       |
 1711|  76.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  76.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1712|      0|        auto reader = impl::default_arg_reader<
 1713|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1714|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1715|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1717|      0|    }
 1718|       |
 1719|  76.0k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1720|  76.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  76.0k|    static_cast<    \
  |  |  935|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|  76.0k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 75.0k, False: 960]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  75.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  75.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  75.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  75.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  75.0k|    }                                                  \
  |  |  |  | 3939|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1722|    960|    return it.position();
 1723|  76.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1948|   453k|        : format_handler_base{argcount},
 1949|   453k|          parse_ctx{format},
 1950|   453k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1951|   453k|    {
 1952|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1875|   453k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1876|   453k|    {
 1877|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2089|   453k|{
 2090|   453k|    const auto beg = handler.get_ctx().begin();
 2091|   453k|    detail::parse_format_string<false>(format, handler);
 2092|   453k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 450k, False: 3.35k]
  |  |  ------------------
  ------------------
 2093|   450k|        return unexpected(err.error());
 2094|   450k|    }
 2095|  3.35k|    return ranges::distance(beg, handler.get_ctx().begin());
 2096|   453k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2073|  1.97M|    {
 2074|  1.97M|        return ctx.get();
 2075|  1.97M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1880|  1.97M|    {
 1881|  1.97M|        return ctx;
 1882|  1.97M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1955|   457k|    {
 1956|   457k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1956:16): [True: 0, False: 457k]
  ------------------
 1957|      0|            auto it = get_ctx().begin();
 1958|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1958:17): [True: 0, False: 0]
  ------------------
 1959|      0|                SCN_UNLIKELY_ATTR
 1960|      0|                return on_error(
 1961|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1962|      0|            }
 1963|       |
 1964|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1965|      0|                    detail::make_string_view_from_pointers(begin, end));
 1966|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1966:17): [True: 0, False: 0]
  ------------------
 1967|      0|                SCN_UNLIKELY_ATTR
 1968|      0|                return on_error({scan_error::invalid_format_string,
 1969|      0|                                 "Invalid encoding in format string"});
 1970|      0|            }
 1971|      0|            else if (is_space) {
  ------------------
  |  Branch (1971:22): [True: 0, False: 0]
  ------------------
 1972|       |                // Skip all whitespace in input
 1973|      0|                get_ctx().advance_to(
 1974|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1975|       |                // And, skip all whitespace in the format string
 1976|      0|                auto begin_it = impl::read_while_classic_space(
 1977|      0|                    detail::make_string_view_from_pointers(
 1978|      0|                        detail::to_address(after_space_it),
 1979|      0|                        detail::to_address(end)));
 1980|       |                // (-1 because of the for loop ++begin)
 1981|      0|                begin = detail::to_address(begin_it) - 1;
 1982|      0|                continue;
 1983|      0|            }
 1984|       |
 1985|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1985:17): [True: 0, False: 0]
  ------------------
 1986|      0|                SCN_UNLIKELY_ATTR
 1987|      0|                return on_error({scan_error::invalid_literal,
 1988|      0|                                 "Unexpected literal character in source"});
 1989|      0|            }
 1990|      0|            get_ctx().advance_to(ranges::next(it));
 1991|      0|        }
 1992|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1727|   453k|{
 1728|   453k|    auto arg = ctx.arg(id);
 1729|   453k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1730|      0|        handler.on_error("Failed to find argument with ID");
 1731|      0|    }
 1732|   453k|    return arg;
 1733|   453k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1995|   453k|    {
 1996|   453k|        return parse_ctx.next_arg_id();
 1997|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2035|   453k|    {
 2036|   453k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2037|   453k|        set_arg_as_visited(arg_id);
 2038|       |
 2039|   453k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2039:13): [True: 0, False: 453k]
  ------------------
 2040|      0|            parse_ctx.advance_to(begin);
 2041|      0|            on_visit_scan_arg(
 2042|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2043|      0|                    parse_ctx, get_custom_ctx()},
 2044|      0|                arg);
 2045|      0|            return parse_ctx.begin();
 2046|      0|        }
 2047|       |
 2048|   453k|        auto specs = detail::format_specs{};
 2049|   453k|        detail::specs_checker<specs_handler<context_type>> handler{
 2050|   453k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2051|   453k|            detail::get_arg_type(arg)};
 2052|       |
 2053|   453k|        begin = detail::parse_format_specs(begin, end, handler);
 2054|   453k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2054:13): [True: 0, False: 453k]
  |  Branch (2054:29): [True: 100k, False: 353k]
  ------------------
 2055|   100k|            SCN_UNLIKELY_ATTR
 2056|   100k|            on_error({scan_error::invalid_format_string,
 2057|   100k|                      "Missing '}' in format string"});
 2058|   100k|            return parse_ctx.begin();
 2059|   100k|        }
 2060|   353k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.0k, False: 303k]
  |  |  ------------------
  ------------------
 2061|  50.0k|            return parse_ctx.begin();
 2062|  50.0k|        }
 2063|   303k|        parse_ctx.advance_to(begin);
 2064|       |
 2065|   303k|        on_visit_scan_arg(
 2066|   303k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2067|   303k|                                           get_ctx().locale()},
 2068|   303k|            arg);
 2069|   303k|        return parse_ctx.begin();
 2070|   353k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1745|   453k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1746|   453k|    {
 1747|   453k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2006|   303k|    {
 2007|   303k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2007:13): [True: 0, False: 303k]
  |  Branch (2007:13): [True: 0, False: 303k]
  |  Branch (2007:29): [True: 0, False: 303k]
  ------------------
 2008|      0|            SCN_UNLIKELY_ATTR
 2009|      0|            return;
 2010|      0|        }
 2011|       |
 2012|   303k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2013|   303k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 300k, False: 3.35k]
  |  |  ------------------
  ------------------
 2014|   300k|            on_error(r.error());
 2015|   300k|        }
 2016|  3.35k|        else {
 2017|  3.35k|            get_ctx().advance_to(*r);
 2018|  3.35k|        }
 2019|   303k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|   164k|{
 2151|   164k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   164k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|   163k|{
 2151|   163k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|   163k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2150|  25.3k|{
 2151|  25.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  25.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2150|  25.3k|{
 2151|  25.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2152|  25.3k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1352|  2.08k|{
 1353|  2.08k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1354|       |
 1355|  2.08k|    if constexpr (sizeof(SourceCharT) == 1) {
 1356|       |        if constexpr (sizeof(DestCharT) == 2) {
 1357|       |            std::u32string tmp;
 1358|       |            transcode_to_string_impl_to32(src, tmp);
 1359|       |            return transcode_to_string_impl_32to16<false>(
 1360|       |                std::u32string_view{tmp}, dest);
 1361|       |        }
 1362|  2.08k|        else if constexpr (sizeof(DestCharT) == 4) {
 1363|  2.08k|            return transcode_to_string_impl_to32(src, dest);
 1364|  2.08k|        }
 1365|       |    }
 1366|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1367|       |        if constexpr (sizeof(DestCharT) == 1) {
 1368|       |            std::u32string tmp;
 1369|       |            transcode_to_string_impl_to32(src, tmp);
 1370|       |            return transcode_to_string_impl_32to8<false>(
 1371|       |                std::u32string_view{tmp}, dest);
 1372|       |        }
 1373|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1374|       |            return trasncode_to_string_impl_to32(src, dest);
 1375|       |        }
 1376|       |    }
 1377|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1378|       |        if constexpr (sizeof(DestCharT) == 1) {
 1379|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1380|       |        }
 1381|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1382|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1383|       |        }
 1384|       |    }
 1385|       |
 1386|  2.08k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1387|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1388|  2.08k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1245|  2.08k|{
 1246|  2.08k|    static_assert(sizeof(DestCharT) == 4);
 1247|       |
 1248|  2.08k|    auto it = src.begin();
 1249|   296k|    while (it != src.end()) {
  ------------------
  |  Branch (1249:12): [True: 293k, False: 2.08k]
  ------------------
 1250|   293k|        auto res = get_next_code_point(
 1251|   293k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1252|   293k|                                                                 src.end()));
 1253|   293k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.37k, False: 292k]
  |  |  ------------------
  ------------------
 1254|  1.37k|            dest.push_back(DestCharT{0xfffd});
 1255|  1.37k|        }
 1256|   292k|        else {
 1257|   292k|            dest.push_back(res.value);
 1258|   292k|        }
 1259|   293k|        it = detail::make_string_view_iterator(src, res.iterator);
 1260|   293k|    }
 1261|  2.08k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1169|   401k|{
 1170|   401k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1171|       |
 1172|   401k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1173|   401k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.25k, False: 395k]
  |  |  ------------------
  ------------------
 1174|  6.25k|        return {get_start_for_next_code_point(input),
 1175|  6.25k|                detail::invalid_code_point};
 1176|  6.25k|    }
 1177|   395k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.81k, False: 389k]
  |  |  ------------------
  ------------------
 1178|  5.81k|        return {input.end(), detail::invalid_code_point};
 1179|  5.81k|    }
 1180|       |
 1181|   389k|    return {input.begin() + len,
 1182|   389k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1183|   395k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1155|  6.25k|{
 1156|  6.25k|    auto it = input.begin();
 1157|  46.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 44.3k, False: 2.16k]
  ------------------
 1158|  44.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 4.08k, False: 40.2k]
  ------------------
 1159|  4.08k|            break;
 1160|  4.08k|        }
 1161|  44.3k|    }
 1162|  6.25k|    return it;
 1163|  6.25k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  17.2M|    constexpr parse_error(code c) : m_code(c)
  808|  17.2M|    {
  809|  17.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  17.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  17.2M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  5.96M|    {
  823|  5.96M|        return a.m_code == b.m_code;
  824|  5.96M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   408k|    {
  827|   408k|        return !(a == b);
  828|   408k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 2930|  4.03M|    {
 2931|  4.03M|        return m_msg == nullptr;
 2932|  4.03M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  4.83M|{
  458|  4.83M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  4.83M|        static_cast<unsigned char>(ch))];
  460|  4.83M|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  2.70M|{
  539|  2.70M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.70M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  14.7M|{
  784|  14.7M|    return e != eof_error::good;
  785|  14.7M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  57.4k|{
  798|  57.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  57.4k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  57.4k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   105k|{
  845|   105k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   105k|    return parse_error::eof;
  847|   105k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   408k|{
  854|   408k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 408k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   408k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 408k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   408k|    return detail::unexpected_scan_error(code, msg);
  863|   408k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  1.99M|{
  868|  1.99M|    return [code, msg](parse_error err) {
  869|  1.99M|        assert(err != parse_error::good);
  870|  1.99M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  1.99M|    };
  872|  1.99M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2210|  1.94M|{
 2211|  1.94M|    unsigned char running_diff{0};
 2212|  5.82M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2212:24): [True: 3.88M, False: 1.94M]
  ------------------
 2213|  3.88M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2214|  3.88M|    }
 2215|  1.94M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2215:12): [True: 17.6k, False: 1.92M]
  |  Branch (2215:33): [True: 1.19k, False: 1.92M]
  ------------------
 2216|  1.94M|}
_ZN3scn2v44impl11char_to_intEc:
 3119|  27.5M|{
 3120|  27.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3121|  27.5M|}
_ZN3scn2v44impl11char_to_intEw:
 3123|  1.56M|{
 3124|  1.56M|#if WCHAR_MIN < 0
 3125|  1.56M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3125:9): [True: 1.49M, False: 63.0k]
  |  Branch (3125:20): [True: 789k, False: 710k]
  ------------------
 3126|       |#else
 3127|       |    if (ch <= 255) {
 3128|       |#endif
 3129|   789k|        return char_to_int(static_cast<char>(ch));
 3130|   789k|    }
 3131|   773k|    return 255;
 3132|  1.56M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5925|  3.13M|{
 5926|  3.13M|    if (specs.width != 0) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 3.13M]
  ------------------
 5927|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5927:13): [True: 0, False: 0]
  ------------------
 5928|      0|            return detail::unexpected_scan_error(
 5929|      0|                scan_error::length_too_short,
 5930|      0|                "Scanned value too narrow, width did not exceed what "
 5931|      0|                "was specified in the format string");
 5932|      0|        }
 5933|      0|    }
 5934|  3.13M|    if (specs.precision != 0) {
  ------------------
  |  Branch (5934:9): [True: 0, False: 3.13M]
  ------------------
 5935|       |        // Ensured by take_width_view
 5936|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5937|      0|                   specs.precision);
 5938|      0|    }
 5939|  3.13M|    return {};
 5940|  3.13M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.79M|    {
  304|  7.79M|        ranges::advance(x, n);
  305|  7.79M|        return x;
  306|  7.79M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.79M|    {
  268|  7.79M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.79M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.79M|    {
  151|  7.79M|        i += n;
  152|  7.79M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  11.8M|    {
  108|  11.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  11.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  11.8M|    {
   87|  11.8M|        return s - i;
   88|  11.8M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   282k|    {
  304|   282k|        ranges::advance(x, n);
  305|   282k|        return x;
  306|   282k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   282k|    {
  268|   282k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   282k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   282k|    {
  151|   282k|        i += n;
  152|   282k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   102M|    {
  108|   102M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   102M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   102M|    {
   87|   102M|        return s - i;
   88|   102M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2872|  5.05M|    {
 2873|  5.05M|        return m_current;
 2874|  5.05M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2872|   760k|    {
 2873|   760k|        return m_current;
 2874|   760k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  2.20M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  2.20M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  2.20M|        auto beg = r.begin();
  991|  2.20M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 2.20M, False: 0]
  ------------------
  992|  2.20M|            return false;
  993|  2.20M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  2.20M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  13.0M|    {
  763|  13.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  13.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.0M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1846|  1.97M|{
 1847|  1.97M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|  1.97M|    else {
 1858|  1.97M|        auto it = range.begin();
 1859|  1.97M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 1.86M, False: 104k]
  ------------------
 1860|  1.86M|            return ranges::next(it, count);
 1861|  1.86M|        }
 1862|       |
 1863|   290k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 207k, False: 83.2k]
  ------------------
 1864|   207k|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 21.3k, False: 186k]
  ------------------
 1865|  21.3k|                return unexpected(eof_error::eof);
 1866|  21.3k|            }
 1867|   207k|        }
 1868|       |
 1869|  83.2k|        return it;
 1870|   104k|    }
 1871|  1.97M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.97M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.97M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.97M|        else {
 1107|  1.97M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.97M, False: 0]
  ------------------
 1108|  1.97M|                return static_cast<size_t>(
 1109|  1.97M|                    r.begin().parent()->chars_available() -
 1110|  1.97M|                    r.begin().position());
 1111|  1.97M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.97M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.97M|}
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.66M|        : m_fptr([](storage fn,
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|  1.66M|              if constexpr (std::is_void_v<R>) {
  746|  1.66M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66M|              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
  752|  1.66M|          m_storage(std::addressof(f))
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.54M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.54M|              else {
  749|  6.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.54M|              }
  751|  6.54M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.54M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.54M|        else if constexpr (std::is_object_v<T>) {
  688|  6.54M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.54M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.66M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66M|        {
  662|  1.66M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  10.3M|    {
  763|  10.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  10.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.3M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.88M|        : m_fptr([](storage fn,
  743|  2.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.88M|              cvref<T> obj = *get<T>(fn);
  745|  2.88M|              if constexpr (std::is_void_v<R>) {
  746|  2.88M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.88M|              }
  748|  2.88M|              else {
  749|  2.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.88M|              }
  751|  2.88M|          }),
  752|  2.88M|          m_storage(std::addressof(f))
  753|  2.88M|    {
  754|  2.88M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.15M|              else {
  749|  5.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.15M|              }
  751|  5.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.15M|        else if constexpr (std::is_object_v<T>) {
  688|  5.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.88M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.88M|        {
  662|  2.88M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|  1.71M|    {
 5954|  1.71M|        const bool need_skipped_width =
 5955|  1.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 1.71M]
  |  Branch (5955:33): [True: 0, False: 1.71M]
  ------------------
 5956|  1.71M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  1.71M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 1.71M]
  ------------------
 5960|  1.71M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 1.71M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  1.71M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 1.71M, False: 0]
  |  Branch (5964:56): [True: 1.71M, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  1.71M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 1.71M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  3.41M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.9k, False: 1.69M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.9k|    }                                                  \
  |  |  |  | 3939|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  3.41M|                            make_eof_scan_error));
 5975|       |
 5976|  3.41M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 1.69M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  1.69M|            return result_type{it, 0};
 5984|  3.41M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|  1.71M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|  1.66M|{
 1966|  1.66M|    return read_until_code_unit(range, std::not_fn(pred));
 1967|  1.66M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|  1.66M|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|  1.66M|    else {
 1951|  1.66M|        auto first = range.begin();
 1952|  6.56M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 6.54M, False: 18.9k]
  ------------------
 1953|  6.54M|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 1.64M, False: 4.90M]
  ------------------
 1954|  1.64M|                return first;
 1955|  1.64M|            }
 1956|  6.54M|        }
 1957|  18.9k|        return first;
 1958|  1.66M|    }
 1959|  1.66M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.64M|    {
  108|  1.64M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.64M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.64M|    {
   94|  1.64M|        iter_difference_t<I> counter{0};
   95|  14.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 12.7M, False: 1.64M]
  ------------------
   96|  12.7M|            ++i;
   97|  12.7M|            ++counter;
   98|  12.7M|        }
   99|  1.64M|        return counter;
  100|  1.64M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   408k|    return [code, msg](parse_error err) {
  869|   408k|        assert(err != parse_error::good);
  870|   408k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   408k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1769|   647k|    {
 1770|   647k|        auto stdloc = loc.get<std::locale>();
 1771|   647k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1772|   647k|        grouping = numpunct.grouping();
 1773|   647k|        thousands_sep =
 1774|   647k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1774:13): [True: 0, False: 647k]
  ------------------
 1775|   647k|        decimal_point = numpunct.decimal_point();
 1776|   647k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1706|   647k|{
 1707|   647k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1707:9): [True: 647k, False: 0]
  ------------------
 1708|   647k|        return std::use_facet<Facet>(stdloc);
 1709|   647k|    }
 1710|      0|    stdloc = std::locale(stdloc, new Facet{});
 1711|      0|    return std::use_facet<Facet>(stdloc);
 1712|   647k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1835|  2.76M|{
 1836|  2.76M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 588, False: 2.76M]
  |  |  ------------------
  ------------------
 1837|    588|        return unexpected(e);
 1838|    588|    }
 1839|       |
 1840|  2.76M|    return ranges::next(range.begin());
 1841|  2.76M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  5.46M|{
  951|  5.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  5.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.7k, False: 5.43M]
  |  |  ------------------
  ------------------
  952|  27.7k|        return eof_error::eof;
  953|  27.7k|    }
  954|  5.43M|    return eof_error::good;
  955|  5.46M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  9.85M|{
  945|  9.85M|    return is_range_eof(r.begin(), r.end());
  946|  9.85M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  9.85M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  9.85M|    {
  938|  9.85M|        return begin == end;
  939|  9.85M|    }
  940|  9.85M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.76M|    {
  296|  2.76M|        ++x;
  297|  2.76M|        return x;
  298|  2.76M|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   247k|    {
 3470|   247k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   247k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   247k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 24.3k, False: 223k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  24.3k|            else {
 3481|  24.3k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 24.3k]
  ------------------
 3482|  24.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  24.3k|            }
 3488|  24.3k|        }
 3489|       |
 3490|   247k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 25.5k, False: 222k]
  ------------------
 3491|  25.5k|            value = T{0};
 3492|  25.5k|            return std::next(prefix_result.iterator);
 3493|  25.5k|        }
 3494|       |
 3495|   222k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   222k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 169k, False: 52.9k]
  |  |  ------------------
  ------------------
 3496|   169k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.5k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.5k|    }                                                  \
  |  |  |  | 3939|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   157k|                    parse_integer_digits_without_thsep(
 3498|   157k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   157k|                        prefix_result.parsed_base));
 3500|       |
 3501|   157k|            auto buf = make_contiguous_buffer(
 3502|   157k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   157k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 7.09k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  7.09k|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   150k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   150k|            return ranges::next(
 3508|   150k|                prefix_result.iterator,
 3509|   150k|                ranges::distance(buf.view().begin(), result_it));
 3510|   157k|        }
 3511|       |
 3512|  52.9k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  52.9k|            localized_number_formatting_options<CharT>{loc};
 3517|  52.9k|#endif
 3518|       |
 3519|  52.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.61k, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.61k|    }                                                  \
  |  |  |  | 3939|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  51.3k|                parse_integer_digits_with_thsep(
 3521|  51.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  51.3k|                    prefix_result.parsed_base, locale_options));
 3523|  51.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  51.3k|            parse_digits_result;
 3525|       |
 3526|  51.3k|        auto nothsep_source_view =
 3527|  51.3k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  51.3k|        SCN_TRY(
  ------------------
  |  | 3940|  51.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.83k, False: 49.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.83k|    }                                                  \
  |  |  |  | 3939|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  49.4k|            nothsep_source_it,
 3530|  49.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  49.4k|                                prefix_result.parsed_base));
 3532|       |
 3533|  49.4k|        return ranges::next(
 3534|  49.4k|            prefix_result.iterator,
 3535|  49.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  49.4k|                ranges::ssize(thsep_indices));
 3537|  51.3k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3256|  2.18M|{
 3257|  2.18M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.18M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|  2.18M|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|  2.18M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|  2.18M|        parse_integer_base_prefix(
 3262|  2.18M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|  2.18M|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 272k, False: 1.90M]
  ------------------
 3265|   272k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 950, False: 271k]
  ------------------
 3266|   272k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 159k, False: 112k]
  ------------------
 3267|   160k|            digits_begin_it = base_prefix_begin_it;
 3268|   160k|        }
 3269|   112k|        else {
 3270|   112k|            parsed_zero = false;
 3271|   112k|        }
 3272|   272k|    }
 3273|  1.90M|    else {
 3274|  1.90M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 3.59k, False: 1.90M]
  ------------------
 3275|  1.90M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 102k, False: 1.80M]
  ------------------
 3276|   106k|            digits_begin_it = base_prefix_begin_it;
 3277|   106k|        }
 3278|  1.90M|    }
 3279|       |
 3280|  2.18M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 1.99M, False: 185k]
  ------------------
 3281|  1.99M|        sign = sign_type::plus_sign;
 3282|  1.99M|    }
 3283|  2.18M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|  2.18M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|  2.18M|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3137|  2.18M|{
 3138|  2.18M|    auto r = read_one_of_code_unit(range, "+-");
 3139|  2.18M|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 1.99M, False: 185k]
  ------------------
 3140|  1.99M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 1.99M, False: 0]
  ------------------
 3141|  1.99M|            return std::pair{range.begin(), sign_type::default_sign};
 3142|  1.99M|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|  1.99M|    }
 3145|       |
 3146|   185k|    auto& it = *r;
 3147|   185k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 132k, False: 52.6k]
  ------------------
 3148|   132k|        return std::pair{it, sign_type::minus_sign};
 3149|   132k|    }
 3150|  52.6k|    return std::pair{it, sign_type::plus_sign};
 3151|   185k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2262|  2.18M|{
 2263|  2.18M|    auto it = read_code_unit(range);
 2264|  2.18M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|  4.31M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 4.31M, False: 1.99M]
  ------------------
 2269|  4.31M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 185k, False: 4.12M]
  ------------------
 2270|   185k|            return *it;
 2271|   185k|        }
 2272|  4.31M|    }
 2273|       |
 2274|  1.99M|    return unexpected(parse_error::error);
 2275|  2.18M|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3223|  2.18M|{
 3224|  2.18M|    switch (base) {
 3225|  66.9k|        case 2:
  ------------------
  |  Branch (3225:9): [True: 66.9k, False: 2.11M]
  ------------------
 3226|       |            // allow 0b/0B
 3227|  66.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|  66.9k|                    false};
 3229|       |
 3230|   130k|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 130k, False: 2.05M]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|   130k|            bool zero_parsed = false;
 3233|   130k|            auto it = apply_opt(
 3234|   130k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|   130k|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|   373k|        case 16:
  ------------------
  |  Branch (3238:9): [True: 373k, False: 1.80M]
  ------------------
 3239|       |            // allow 0x/0X
 3240|   373k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|   373k|                    false};
 3242|       |
 3243|   471k|        case 0:
  ------------------
  |  Branch (3243:9): [True: 471k, False: 1.71M]
  ------------------
 3244|       |            // detect base
 3245|   471k|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|  1.14M|        default:
  ------------------
  |  Branch (3247:9): [True: 1.14M, False: 1.04M]
  ------------------
 3248|       |            // no base prefix allowed
 3249|  1.14M|            return {range.begin(), base, false};
 3250|  2.18M|    }
 3251|  2.18M|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2281|   570k|{
 2282|   570k|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 505k, False: 65.0k]
  ------------------
 2283|   505k|        return range.begin();
 2284|   505k|    }
 2285|  65.0k|    return *result;
 2286|   570k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3174|   533k|{
 3175|   533k|    return read_matching_string_classic_nocase(range, "0b");
 3176|   533k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2221|  1.97M|{
 2222|  1.97M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|  1.97M|    else {
 2235|  1.97M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  1.97M|            if (ch < 'A' || ch > 'Z') {
 2237|  1.97M|                return ch;
 2238|  1.97M|            }
 2239|  1.97M|            return static_cast<char_type>(ch +
 2240|  1.97M|                                          static_cast<char_type>('a' - 'A'));
 2241|  1.97M|        };
 2242|       |
 2243|  1.97M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 21.3k, False: 1.95M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.3k|    }                                                  \
  |  |  |  | 3939|  1.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|  1.95M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|  1.95M|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|  1.95M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93M, False: 19.1k]
  |  |  ------------------
  ------------------
 2248|  1.95M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|  1.95M|                    return ascii_tolower(a) ==
 2250|  1.95M|                           static_cast<detail::char_t<Range>>(b);
 2251|  1.95M|                }))) {
 2252|  1.93M|            return unexpected(parse_error::error);
 2253|  1.93M|        }
 2254|       |
 2255|  19.1k|        return it;
 2256|  1.95M|    }
 2257|  1.97M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2235|  2.92M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|  2.92M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 2.86M, False: 59.4k]
  |  Branch (2236:29): [True: 46.1k, False: 13.3k]
  ------------------
 2237|  2.90M|                return ch;
 2238|  2.90M|            }
 2239|  13.3k|            return static_cast<char_type>(ch +
 2240|  13.3k|                                          static_cast<char_type>('a' - 'A'));
 2241|  2.92M|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3188|   593k|{
 3189|   593k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3189:14): [True: 6.39k, False: 587k]
  ------------------
 3190|  6.39k|        return *r;
 3191|  6.39k|    }
 3192|       |
 3193|   587k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3193:14): [True: 272k, False: 314k]
  ------------------
 3194|   272k|        zero_parsed = true;
 3195|   272k|        return *r;
 3196|   272k|    }
 3197|       |
 3198|   314k|    return unexpected(parse_error::error);
 3199|   587k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2136|   587k|{
 2137|   587k|    auto it = read_code_unit(range);
 2138|   587k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 588, False: 586k]
  |  |  ------------------
  ------------------
 2139|    588|        return unexpected(make_eof_parse_error(it.error()));
 2140|    588|    }
 2141|       |
 2142|   586k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314k, False: 272k]
  |  |  ------------------
  ------------------
 2143|   586k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   314k|        return unexpected(parse_error::error);
 2145|   314k|    }
 2146|       |
 2147|   272k|    return *it;
 2148|   586k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3181|   844k|{
 3182|   844k|    return read_matching_string_classic_nocase(range, "0x");
 3183|   844k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3204|   471k|{
 3205|   471k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3205:14): [True: 5.08k, False: 466k]
  ------------------
 3206|  5.08k|        return {*r, 16, false};
 3207|  5.08k|    }
 3208|   466k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3208:14): [True: 2.37k, False: 463k]
  ------------------
 3209|  2.37k|        return {*r, 2, false};
 3210|  2.37k|    }
 3211|   463k|    {
 3212|   463k|        bool zero_parsed{false};
 3213|   463k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3213:18): [True: 219k, False: 244k]
  ------------------
 3214|   219k|            return {*r, 8, zero_parsed};
 3215|   219k|        }
 3216|   463k|    }
 3217|   244k|    return {range.begin(), 10, false};
 3218|   463k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3290|  1.66M|{
 3291|  1.66M|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|       |    if constexpr (ranges::contiguous_range<Range>) {
 3294|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3295|       |            return detail::unexpected_scan_error(
 3296|       |                scan_error::invalid_scanned_value,
 3297|       |                "Failed to parse integer: No digits found");
 3298|       |        }
 3299|       |        return range.end();
 3300|       |    }
 3301|  1.66M|    else {
 3302|  1.66M|        return read_while1_code_unit(range,
 3303|  1.66M|                                     [&](char_type ch) noexcept {
 3304|  1.66M|                                         return char_to_int(ch) < base;
 3305|  1.66M|                                     })
 3306|  1.66M|            .transform_error(map_parse_error_to_scan_error(
 3307|  1.66M|                scan_error::invalid_scanned_value,
 3308|  1.66M|                "Failed to parse integer: No digits found"));
 3309|  1.66M|    }
 3310|  1.66M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1985|  1.66M|{
 1986|  1.66M|    auto it = read_while_code_unit(range, pred);
 1987|  1.66M|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 86.8k, False: 1.57M]
  ------------------
 1988|  86.8k|        return unexpected(parse_error::error);
 1989|  86.8k|    }
 1990|  1.57M|    return it;
 1991|  1.66M|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|  1.66M|        : m_fptr([](storage fn,
  743|  1.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66M|              cvref<T> obj = *get<T>(fn);
  745|  1.66M|              if constexpr (std::is_void_v<R>) {
  746|  1.66M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66M|              }
  748|  1.66M|              else {
  749|  1.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66M|              }
  751|  1.66M|          }),
  752|  1.66M|          m_storage(std::addressof(f))
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  6.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.54M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.54M|              else {
  749|  6.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.54M|              }
  751|  6.54M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  6.54M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.54M|        else if constexpr (std::is_object_v<T>) {
  688|  6.54M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.54M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3303|  6.54M|                                     [&](char_type ch) noexcept {
 3304|  6.54M|                                         return char_to_int(ch) < base;
 3305|  6.54M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|  1.66M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66M|        {
  662|  1.66M|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3320|   324k|{
 3321|   324k|    std::basic_string<CharT> output;
 3322|   324k|    std::string thsep_indices;
 3323|   324k|    auto it = range.begin();
 3324|   324k|    bool digit_matched = false;
 3325|  1.59M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3325:12): [True: 1.58M, False: 4.81k]
  ------------------
 3326|  1.58M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3326:13): [True: 73.6k, False: 1.51M]
  ------------------
 3327|  73.6k|            thsep_indices.push_back(
 3328|  73.6k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3329|  73.6k|        }
 3330|  1.51M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3330:18): [True: 319k, False: 1.19M]
  ------------------
 3331|   319k|            break;
 3332|   319k|        }
 3333|  1.19M|        else {
 3334|  1.19M|            output.push_back(*it);
 3335|  1.19M|            digit_matched = true;
 3336|  1.19M|        }
 3337|  1.58M|    }
 3338|   324k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.1k, False: 313k]
  |  |  ------------------
  ------------------
 3339|  10.1k|        return detail::unexpected_scan_error(
 3340|  10.1k|            scan_error::invalid_scanned_value,
 3341|  10.1k|            "Failed to parse integer: No digits found");
 3342|  10.1k|    }
 3343|   313k|    return std::tuple{it, output, thsep_indices};
 3344|   324k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1672|  1.57M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|  1.57M|    else {
 1679|  1.57M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|  1.57M|    }
 1681|  1.57M|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1526|  1.57M|    {
 1527|  1.57M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|  1.57M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1610|  1.57M|    {
 1611|  1.57M|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|  1.57M|                           ranges::common_range<Range>) {
 1628|  1.57M|            auto beg_seg = range.begin().contiguous_segment();
 1629|  1.57M|            auto end_seg = range.end().contiguous_segment();
 1630|  1.57M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.11M, False: 464k]
  |  |  ------------------
  ------------------
 1631|  1.57M|                             detail::to_address(end_seg.end()))) {
 1632|  1.11M|                auto& str = m_storage.emplace();
 1633|  1.11M|                str.reserve(range.end().position() - range.begin().position());
 1634|  1.11M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|  1.11M|                m_view = string_view_type{str};
 1636|  1.11M|                return;
 1637|  1.11M|            }
 1638|       |
 1639|   464k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|   464k|                                                            end_seg.data());
 1641|   464k|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  1.57M|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1571|  3.13M|    {
 1572|  3.13M|        return m_view;
 1573|  3.13M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1561|  1.57M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|  1.55M|    {
 5996|  1.55M|        const bool need_skipped_width =
 5997|  1.55M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 1.55M]
  |  Branch (5997:33): [True: 0, False: 1.55M]
  ------------------
 5998|  1.55M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  1.55M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 1.55M]
  ------------------
 6001|  1.55M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 1.55M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  1.55M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.55M, False: 0]
  ------------------
 6010|  1.55M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 1.55M]
  ------------------
 6011|  1.55M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  1.55M|        return result_type{rng.begin(), 0};
 6035|  1.55M|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|  2.76M|{
 1836|  2.76M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 588, False: 2.76M]
  |  |  ------------------
  ------------------
 1837|    588|        return unexpected(e);
 1838|    588|    }
 1839|       |
 1840|  2.76M|    return ranges::next(range.begin());
 1841|  2.76M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  7.12M|{
  951|  7.12M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  7.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.2k, False: 7.09M]
  |  |  ------------------
  ------------------
  952|  27.2k|        return eof_error::eof;
  953|  27.2k|    }
  954|  7.09M|    return eof_error::good;
  955|  7.12M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  7.12M|{
  945|  7.12M|    return is_range_eof(r.begin(), r.end());
  946|  7.12M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  7.12M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  7.12M|    {
  938|  7.12M|        return begin == end;
  939|  7.12M|    }
  940|  7.12M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.76M|    {
  296|  2.76M|        ++x;
  297|  2.76M|        return x;
  298|  2.76M|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   247k|    {
 3470|   247k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   247k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   247k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 24.3k, False: 222k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  24.3k|            else {
 3481|  24.3k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 24.3k]
  ------------------
 3482|  24.3k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  24.3k|            }
 3488|  24.3k|        }
 3489|       |
 3490|   247k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 25.3k, False: 221k]
  ------------------
 3491|  25.3k|            value = T{0};
 3492|  25.3k|            return std::next(prefix_result.iterator);
 3493|  25.3k|        }
 3494|       |
 3495|   221k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 169k, False: 52.7k]
  |  |  ------------------
  ------------------
 3496|   169k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 242, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    242|    }                                                  \
  |  |  |  | 3939|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   168k|                    parse_integer_digits_without_thsep(
 3498|   168k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   168k|                        prefix_result.parsed_base));
 3500|       |
 3501|   168k|            auto buf = make_contiguous_buffer(
 3502|   168k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   168k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18.6k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  18.6k|    }                                                  \
  |  |  |  | 3939|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   150k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   150k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   150k|            return ranges::next(
 3508|   150k|                prefix_result.iterator,
 3509|   150k|                ranges::distance(buf.view().begin(), result_it));
 3510|   168k|        }
 3511|       |
 3512|  52.7k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  52.7k|            localized_number_formatting_options<CharT>{loc};
 3517|  52.7k|#endif
 3518|       |
 3519|  52.7k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  52.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.68k, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.68k|    }                                                  \
  |  |  |  | 3939|  52.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  51.1k|                parse_integer_digits_with_thsep(
 3521|  51.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  51.1k|                    prefix_result.parsed_base, locale_options));
 3523|  51.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  51.1k|            parse_digits_result;
 3525|       |
 3526|  51.1k|        auto nothsep_source_view =
 3527|  51.1k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  51.1k|        SCN_TRY(
  ------------------
  |  | 3940|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.83k, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.83k|    }                                                  \
  |  |  |  | 3939|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  49.2k|            nothsep_source_it,
 3530|  49.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  49.2k|                                prefix_result.parsed_base));
 3532|       |
 3533|  49.2k|        return ranges::next(
 3534|  49.2k|            prefix_result.iterator,
 3535|  49.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  49.2k|                ranges::ssize(thsep_indices));
 3537|  51.1k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3256|  2.17M|{
 3257|  2.17M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  2.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  2.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|  2.17M|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|  2.17M|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|  2.17M|        parse_integer_base_prefix(
 3262|  2.17M|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|  2.17M|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 270k, False: 1.90M]
  ------------------
 3265|   270k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 790, False: 269k]
  ------------------
 3266|   270k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 157k, False: 112k]
  ------------------
 3267|   158k|            digits_begin_it = base_prefix_begin_it;
 3268|   158k|        }
 3269|   112k|        else {
 3270|   112k|            parsed_zero = false;
 3271|   112k|        }
 3272|   270k|    }
 3273|  1.90M|    else {
 3274|  1.90M|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 3.57k, False: 1.90M]
  ------------------
 3275|  1.90M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 104k, False: 1.80M]
  ------------------
 3276|   107k|            digits_begin_it = base_prefix_begin_it;
 3277|   107k|        }
 3278|  1.90M|    }
 3279|       |
 3280|  2.17M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 1.99M, False: 185k]
  ------------------
 3281|  1.99M|        sign = sign_type::plus_sign;
 3282|  1.99M|    }
 3283|  2.17M|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|  2.17M|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|  2.17M|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|  2.17M|{
 3138|  2.17M|    auto r = read_one_of_code_unit(range, "+-");
 3139|  2.17M|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 1.99M, False: 185k]
  ------------------
 3140|  1.99M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 1.99M, False: 0]
  ------------------
 3141|  1.99M|            return std::pair{range.begin(), sign_type::default_sign};
 3142|  1.99M|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|  1.99M|    }
 3145|       |
 3146|   185k|    auto& it = *r;
 3147|   185k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 132k, False: 52.6k]
  ------------------
 3148|   132k|        return std::pair{it, sign_type::minus_sign};
 3149|   132k|    }
 3150|  52.6k|    return std::pair{it, sign_type::plus_sign};
 3151|   185k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|  2.17M|{
 2263|  2.17M|    auto it = read_code_unit(range);
 2264|  2.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|  4.30M|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 4.30M, False: 1.99M]
  ------------------
 2269|  4.30M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 185k, False: 4.11M]
  ------------------
 2270|   185k|            return *it;
 2271|   185k|        }
 2272|  4.30M|    }
 2273|       |
 2274|  1.99M|    return unexpected(parse_error::error);
 2275|  2.17M|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3223|  2.17M|{
 3224|  2.17M|    switch (base) {
 3225|  66.7k|        case 2:
  ------------------
  |  Branch (3225:9): [True: 66.7k, False: 2.11M]
  ------------------
 3226|       |            // allow 0b/0B
 3227|  66.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|  66.7k|                    false};
 3229|       |
 3230|   130k|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 130k, False: 2.04M]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|   130k|            bool zero_parsed = false;
 3233|   130k|            auto it = apply_opt(
 3234|   130k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|   130k|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|   371k|        case 16:
  ------------------
  |  Branch (3238:9): [True: 371k, False: 1.80M]
  ------------------
 3239|       |            // allow 0x/0X
 3240|   371k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|   371k|                    false};
 3242|       |
 3243|   468k|        case 0:
  ------------------
  |  Branch (3243:9): [True: 468k, False: 1.71M]
  ------------------
 3244|       |            // detect base
 3245|   468k|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|  1.14M|        default:
  ------------------
  |  Branch (3247:9): [True: 1.14M, False: 1.03M]
  ------------------
 3248|       |            // no base prefix allowed
 3249|  1.14M|            return {range.begin(), base, false};
 3250|  2.17M|    }
 3251|  2.17M|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2281|   568k|{
 2282|   568k|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 503k, False: 64.5k]
  ------------------
 2283|   503k|        return range.begin();
 2284|   503k|    }
 2285|  64.5k|    return *result;
 2286|   568k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3174|   530k|{
 3175|   530k|    return read_matching_string_classic_nocase(range, "0b");
 3176|   530k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|  1.96M|{
 2222|  1.96M|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|  1.96M|                  std::is_same_v<char_type, char>) {
 2226|  1.96M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2226:13): [True: 20.9k, False: 1.94M]
  ------------------
 2227|  20.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|  20.9k|        }
 2229|  1.94M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2229:13): [True: 1.92M, False: 18.8k]
  ------------------
 2230|  1.92M|            return unexpected(parse_error::error);
 2231|  1.92M|        }
 2232|  18.8k|        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|       |    else {
 2235|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|       |            if (ch < 'A' || ch > 'Z') {
 2237|       |                return ch;
 2238|       |            }
 2239|       |            return static_cast<char_type>(ch +
 2240|       |                                          static_cast<char_type>('a' - 'A'));
 2241|       |        };
 2242|       |
 2243|       |        SCN_TRY(it, read_exactly_n_code_units(
 2244|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|       |                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|       |        if (SCN_UNLIKELY(!std::equal(
 2248|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|       |                    return ascii_tolower(a) ==
 2250|       |                           static_cast<detail::char_t<Range>>(b);
 2251|       |                }))) {
 2252|       |            return unexpected(parse_error::error);
 2253|       |        }
 2254|       |
 2255|       |        return it;
 2256|       |    }
 2257|  1.96M|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3188|   591k|{
 3189|   591k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3189:14): [True: 6.39k, False: 584k]
  ------------------
 3190|  6.39k|        return *r;
 3191|  6.39k|    }
 3192|       |
 3193|   584k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3193:14): [True: 270k, False: 314k]
  ------------------
 3194|   270k|        zero_parsed = true;
 3195|   270k|        return *r;
 3196|   270k|    }
 3197|       |
 3198|   314k|    return unexpected(parse_error::error);
 3199|   584k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|   584k|{
 2137|   584k|    auto it = read_code_unit(range);
 2138|   584k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 588, False: 584k]
  |  |  ------------------
  ------------------
 2139|    588|        return unexpected(make_eof_parse_error(it.error()));
 2140|    588|    }
 2141|       |
 2142|   584k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 313k, False: 270k]
  |  |  ------------------
  ------------------
 2143|   584k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   313k|        return unexpected(parse_error::error);
 2145|   313k|    }
 2146|       |
 2147|   270k|    return *it;
 2148|   584k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3181|   840k|{
 3182|   840k|    return read_matching_string_classic_nocase(range, "0x");
 3183|   840k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3204|   468k|{
 3205|   468k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3205:14): [True: 4.91k, False: 463k]
  ------------------
 3206|  4.91k|        return {*r, 16, false};
 3207|  4.91k|    }
 3208|   463k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3208:14): [True: 2.37k, False: 461k]
  ------------------
 3209|  2.37k|        return {*r, 2, false};
 3210|  2.37k|    }
 3211|   461k|    {
 3212|   461k|        bool zero_parsed{false};
 3213|   461k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3213:18): [True: 217k, False: 243k]
  ------------------
 3214|   217k|            return {*r, 8, zero_parsed};
 3215|   217k|        }
 3216|   461k|    }
 3217|   243k|    return {range.begin(), 10, false};
 3218|   461k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3290|  1.66M|{
 3291|  1.66M|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|  1.66M|    if constexpr (ranges::contiguous_range<Range>) {
 3294|  1.66M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.42k, False: 1.66M]
  |  |  ------------------
  ------------------
 3295|  1.42k|            return detail::unexpected_scan_error(
 3296|  1.42k|                scan_error::invalid_scanned_value,
 3297|  1.42k|                "Failed to parse integer: No digits found");
 3298|  1.42k|        }
 3299|  1.66M|        return range.end();
 3300|       |    }
 3301|       |    else {
 3302|       |        return read_while1_code_unit(range,
 3303|       |                                     [&](char_type ch) noexcept {
 3304|       |                                         return char_to_int(ch) < base;
 3305|       |                                     })
 3306|       |            .transform_error(map_parse_error_to_scan_error(
 3307|       |                scan_error::invalid_scanned_value,
 3308|       |                "Failed to parse integer: No digits found"));
 3309|       |    }
 3310|  1.66M|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3320|   323k|{
 3321|   323k|    std::basic_string<CharT> output;
 3322|   323k|    std::string thsep_indices;
 3323|   323k|    auto it = range.begin();
 3324|   323k|    bool digit_matched = false;
 3325|  1.58M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3325:12): [True: 1.57M, False: 4.59k]
  ------------------
 3326|  1.57M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3326:13): [True: 72.4k, False: 1.50M]
  ------------------
 3327|  72.4k|            thsep_indices.push_back(
 3328|  72.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3329|  72.4k|        }
 3330|  1.50M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3330:18): [True: 318k, False: 1.18M]
  ------------------
 3331|   318k|            break;
 3332|   318k|        }
 3333|  1.18M|        else {
 3334|  1.18M|            output.push_back(*it);
 3335|  1.18M|            digit_matched = true;
 3336|  1.18M|        }
 3337|  1.57M|    }
 3338|   323k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.7k, False: 312k]
  |  |  ------------------
  ------------------
 3339|  10.7k|        return detail::unexpected_scan_error(
 3340|  10.7k|            scan_error::invalid_scanned_value,
 3341|  10.7k|            "Failed to parse integer: No digits found");
 3342|  10.7k|    }
 3343|   312k|    return std::tuple{it, output, thsep_indices};
 3344|   323k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|  1.66M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  1.66M|                  ranges::sized_range<Range>) {
 1676|  1.66M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  1.66M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|  1.66M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  1.66M|    {
 1480|  1.66M|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1492|  7.61M|    {
 1493|  7.61M|        return sv;
 1494|  7.61M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|  2.20M|{
 2946|  2.20M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 2.20M, False: 0]
  ------------------
 2947|  2.20M|        auto it = read_while_classic_space(range);
 2948|  2.20M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  2.20M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.3k, False: 2.17M]
  |  |  ------------------
  ------------------
 2950|  21.3k|            return unexpected(e);
 2951|  21.3k|        }
 2952|       |
 2953|  2.17M|        return it;
 2954|  2.20M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  2.20M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|  2.20M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|  2.20M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|  2.20M|        auto buf = make_contiguous_buffer(range);
 2111|  2.20M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|  2.20M|        return ranges::next(range.begin(),
 2113|  2.20M|                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|       |    else {
 2116|       |        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|       |            return detail::is_cp_space(cp);
 2129|       |        });
 2130|       |    }
 2131|  2.20M|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1672|  2.20M|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|  2.20M|                  ranges::sized_range<Range>) {
 1676|  2.20M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|  2.20M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1478|  2.20M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|  2.20M|    {
 1480|  2.20M|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.80M|    {
  304|  3.80M|        ranges::advance(x, n);
  305|  3.80M|        return x;
  306|  3.80M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  5.93M|    {
  268|  5.93M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.93M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  5.93M|    {
  181|  14.5M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 8.60M, False: 5.93M]
  ------------------
  182|  8.60M|            ++i;
  183|  8.60M|        }
  184|  5.93M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   250k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   250k|            auto rd = make_reader<T, char_type>();
 6116|   250k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   250k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 250k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   250k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 250k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   250k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   250k|                return impl(rd, range, value);
 6121|   250k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   250k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3035|  3.42M|    {
 3036|  3.42M|        reader_error_handler eh{};
 3037|  3.42M|        get_derived().check_specs_impl(specs, eh);
 3038|  3.42M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|  3.42M|        return {};
 3043|  3.42M|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3047|  3.42M|    {
 3048|  3.42M|        return static_cast<Derived&>(*this);
 3049|  3.42M|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3415|  3.42M|    {
 3416|  3.42M|        detail::check_int_type_specs(specs, eh);
 3417|  3.42M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   250k|    {
 6041|   250k|        const bool need_skipped_width =
 6042|   250k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 250k]
  |  Branch (6042:33): [True: 0, False: 250k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   250k|        auto it = rng.begin();
 6046|   250k|        std::ptrdiff_t prefix_width = 0;
 6047|   250k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 250k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   250k|        else {
 6055|   250k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.89k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.89k|    }                                                  \
  |  |  |  | 3939|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   247k|            std::tie(it, prefix_width) = prefix_result;
 6057|   247k|        }
 6058|   247k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   247k|        std::ptrdiff_t value_width = 0;
 6062|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 247k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   247k|        else {
 6078|   247k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22.1k, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  22.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  22.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  22.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  22.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  22.1k|    }                                                  \
  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   225k|                                             specs, value, loc));
 6080|       |
 6081|   225k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 225k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   225k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   225k|        std::ptrdiff_t postfix_width = 0;
 6090|   225k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 223k, False: 1.98k]
  ------------------
 6091|   223k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   223k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   223k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   223k|                                 value_width));
 6095|   223k|            std::tie(it, postfix_width) = postfix_result;
 6096|   223k|        }
 6097|       |
 6098|   225k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   225k|            specs, prefix_width, value_width, postfix_width));
 6100|   225k|        return it;
 6101|   225k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3030|  7.51M|    {
 3031|  7.51M|        return true;
 3032|  7.51M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   326k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   326k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   326k|            auto rd = make_reader<T, char_type>();
 6116|   326k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   326k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 326k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   326k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 326k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   326k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   326k|                return impl(rd, range, value);
 6121|   326k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   326k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   326k|    {
 6041|   326k|        const bool need_skipped_width =
 6042|   326k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 326k]
  |  Branch (6042:33): [True: 0, False: 326k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   326k|        auto it = rng.begin();
 6046|   326k|        std::ptrdiff_t prefix_width = 0;
 6047|   326k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 326k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   326k|        else {
 6055|   326k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.66k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.66k|    }                                                  \
  |  |  |  | 3939|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   321k|            std::tie(it, prefix_width) = prefix_result;
 6057|   321k|        }
 6058|   321k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   321k|        std::ptrdiff_t value_width = 0;
 6062|   321k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 321k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   321k|        else {
 6078|   321k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20.3k, False: 301k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  20.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  20.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  20.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  20.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  20.3k|    }                                                  \
  |  | 3939|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   301k|                                             specs, value, loc));
 6080|       |
 6081|   301k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 301k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   301k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   301k|        std::ptrdiff_t postfix_width = 0;
 6090|   301k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 297k, False: 3.24k]
  ------------------
 6091|   297k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   297k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   297k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   297k|                                 value_width));
 6095|   297k|            std::tie(it, postfix_width) = postfix_result;
 6096|   297k|        }
 6097|       |
 6098|   301k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   301k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 301k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   301k|            specs, prefix_width, value_width, postfix_width));
 6100|   301k|        return it;
 6101|   301k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   321k|    {
 3470|   321k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   321k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   321k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 25.8k, False: 295k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  25.8k|            else {
 3481|  25.8k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 25.8k]
  ------------------
 3482|  25.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  25.8k|            }
 3488|  25.8k|        }
 3489|       |
 3490|   321k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 28.2k, False: 293k]
  ------------------
 3491|  28.2k|            value = T{0};
 3492|  28.2k|            return std::next(prefix_result.iterator);
 3493|  28.2k|        }
 3494|       |
 3495|   293k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   293k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 232k, False: 61.0k]
  |  |  ------------------
  ------------------
 3496|   232k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.9k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.9k|    }                                                  \
  |  |  |  | 3939|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   218k|                    parse_integer_digits_without_thsep(
 3498|   218k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   218k|                        prefix_result.parsed_base));
 3500|       |
 3501|   218k|            auto buf = make_contiguous_buffer(
 3502|   218k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   218k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.32k, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.32k|    }                                                  \
  |  |  |  | 3939|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   214k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   214k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   214k|            return ranges::next(
 3508|   214k|                prefix_result.iterator,
 3509|   214k|                ranges::distance(buf.view().begin(), result_it));
 3510|   218k|        }
 3511|       |
 3512|  61.0k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  61.0k|            localized_number_formatting_options<CharT>{loc};
 3517|  61.0k|#endif
 3518|       |
 3519|  61.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  61.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.16k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.16k|    }                                                  \
  |  |  |  | 3939|  61.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  58.9k|                parse_integer_digits_with_thsep(
 3521|  58.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  58.9k|                    prefix_result.parsed_base, locale_options));
 3523|  58.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  58.9k|            parse_digits_result;
 3525|       |
 3526|  58.9k|        auto nothsep_source_view =
 3527|  58.9k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  58.9k|        SCN_TRY(
  ------------------
  |  | 3940|  58.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 922, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    922|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    922|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    922|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    922|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    922|    }                                                  \
  |  |  |  | 3939|  58.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  57.9k|            nothsep_source_it,
 3530|  57.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  57.9k|                                prefix_result.parsed_base));
 3532|       |
 3533|  57.9k|        return ranges::next(
 3534|  57.9k|            prefix_result.iterator,
 3535|  57.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  57.9k|                ranges::ssize(thsep_indices));
 3537|  58.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   319k|    {
 3470|   319k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   319k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   319k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 25.8k, False: 294k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  25.8k|            else {
 3481|  25.8k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 25.8k]
  ------------------
 3482|  25.8k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  25.8k|            }
 3488|  25.8k|        }
 3489|       |
 3490|   319k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 27.9k, False: 292k]
  ------------------
 3491|  27.9k|            value = T{0};
 3492|  27.9k|            return std::next(prefix_result.iterator);
 3493|  27.9k|        }
 3494|       |
 3495|   292k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 231k, False: 60.9k]
  |  |  ------------------
  ------------------
 3496|   231k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 322, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    322|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    322|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    322|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    322|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    322|    }                                                  \
  |  |  |  | 3939|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   230k|                    parse_integer_digits_without_thsep(
 3498|   230k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   230k|                        prefix_result.parsed_base));
 3500|       |
 3501|   230k|            auto buf = make_contiguous_buffer(
 3502|   230k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   230k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 17.2k, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  17.2k|    }                                                  \
  |  |  |  | 3939|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   213k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   213k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   213k|            return ranges::next(
 3508|   213k|                prefix_result.iterator,
 3509|   213k|                ranges::distance(buf.view().begin(), result_it));
 3510|   230k|        }
 3511|       |
 3512|  60.9k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  60.9k|            localized_number_formatting_options<CharT>{loc};
 3517|  60.9k|#endif
 3518|       |
 3519|  60.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  60.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.27k, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.27k|    }                                                  \
  |  |  |  | 3939|  60.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  58.6k|                parse_integer_digits_with_thsep(
 3521|  58.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  58.6k|                    prefix_result.parsed_base, locale_options));
 3523|  58.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  58.6k|            parse_digits_result;
 3525|       |
 3526|  58.6k|        auto nothsep_source_view =
 3527|  58.6k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  58.6k|        SCN_TRY(
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 920, False: 57.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    920|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    920|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    920|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    920|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    920|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  57.7k|            nothsep_source_it,
 3530|  57.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  57.7k|                                prefix_result.parsed_base));
 3532|       |
 3533|  57.7k|        return ranges::next(
 3534|  57.7k|            prefix_result.iterator,
 3535|  57.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  57.7k|                ranges::ssize(thsep_indices));
 3537|  58.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   332k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   332k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   332k|            auto rd = make_reader<T, char_type>();
 6116|   332k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   332k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 332k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   332k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 332k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   332k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   332k|                return impl(rd, range, value);
 6121|   332k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   332k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   332k|    {
 6041|   332k|        const bool need_skipped_width =
 6042|   332k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 332k]
  |  Branch (6042:33): [True: 0, False: 332k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   332k|        auto it = rng.begin();
 6046|   332k|        std::ptrdiff_t prefix_width = 0;
 6047|   332k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 332k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   332k|        else {
 6055|   332k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.16k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.16k|    }                                                  \
  |  |  |  | 3939|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   327k|            std::tie(it, prefix_width) = prefix_result;
 6057|   327k|        }
 6058|   327k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   327k|        std::ptrdiff_t value_width = 0;
 6062|   327k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 327k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   327k|        else {
 6078|   327k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.8k, False: 307k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.8k|    }                                                  \
  |  | 3939|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   307k|                                             specs, value, loc));
 6080|       |
 6081|   307k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 307k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   307k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   307k|        std::ptrdiff_t postfix_width = 0;
 6090|   307k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 303k, False: 3.60k]
  ------------------
 6091|   303k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   303k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   303k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   303k|                                 value_width));
 6095|   303k|            std::tie(it, postfix_width) = postfix_result;
 6096|   303k|        }
 6097|       |
 6098|   307k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   307k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 307k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   307k|            specs, prefix_width, value_width, postfix_width));
 6100|   307k|        return it;
 6101|   307k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   327k|    {
 3470|   327k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   327k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   327k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 26.9k, False: 300k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  26.9k|            else {
 3481|  26.9k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 26.9k]
  ------------------
 3482|  26.9k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  26.9k|            }
 3488|  26.9k|        }
 3489|       |
 3490|   327k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 28.5k, False: 298k]
  ------------------
 3491|  28.5k|            value = T{0};
 3492|  28.5k|            return std::next(prefix_result.iterator);
 3493|  28.5k|        }
 3494|       |
 3495|   298k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   298k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 236k, False: 62.1k]
  |  |  ------------------
  ------------------
 3496|   236k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.8k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.8k|    }                                                  \
  |  |  |  | 3939|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   221k|                    parse_integer_digits_without_thsep(
 3498|   221k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   221k|                        prefix_result.parsed_base));
 3500|       |
 3501|   221k|            auto buf = make_contiguous_buffer(
 3502|   221k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   221k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.01k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.01k|    }                                                  \
  |  |  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   219k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   219k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   219k|            return ranges::next(
 3508|   219k|                prefix_result.iterator,
 3509|   219k|                ranges::distance(buf.view().begin(), result_it));
 3510|   221k|        }
 3511|       |
 3512|  62.1k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  62.1k|            localized_number_formatting_options<CharT>{loc};
 3517|  62.1k|#endif
 3518|       |
 3519|  62.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.36k, False: 59.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.36k|    }                                                  \
  |  |  |  | 3939|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  59.8k|                parse_integer_digits_with_thsep(
 3521|  59.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  59.8k|                    prefix_result.parsed_base, locale_options));
 3523|  59.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  59.8k|            parse_digits_result;
 3525|       |
 3526|  59.8k|        auto nothsep_source_view =
 3527|  59.8k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  59.8k|        SCN_TRY(
  ------------------
  |  | 3940|  59.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 598, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    598|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    598|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    598|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    598|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    598|    }                                                  \
  |  |  |  | 3939|  59.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  59.2k|            nothsep_source_it,
 3530|  59.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  59.2k|                                prefix_result.parsed_base));
 3532|       |
 3533|  59.2k|        return ranges::next(
 3534|  59.2k|            prefix_result.iterator,
 3535|  59.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  59.2k|                ranges::ssize(thsep_indices));
 3537|  59.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   325k|    {
 3470|   325k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   325k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   325k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 26.9k, False: 298k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|  26.9k|            else {
 3481|  26.9k|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 26.9k]
  ------------------
 3482|  26.9k|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|  26.9k|            }
 3488|  26.9k|        }
 3489|       |
 3490|   325k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 28.1k, False: 297k]
  ------------------
 3491|  28.1k|            value = T{0};
 3492|  28.1k|            return std::next(prefix_result.iterator);
 3493|  28.1k|        }
 3494|       |
 3495|   297k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   297k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 235k, False: 61.9k]
  |  |  ------------------
  ------------------
 3496|   235k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 354, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    354|    }                                                  \
  |  |  |  | 3939|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   235k|                    parse_integer_digits_without_thsep(
 3498|   235k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   235k|                        prefix_result.parsed_base));
 3500|       |
 3501|   235k|            auto buf = make_contiguous_buffer(
 3502|   235k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   235k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16.8k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.8k|    }                                                  \
  |  |  |  | 3939|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   218k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   218k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   218k|            return ranges::next(
 3508|   218k|                prefix_result.iterator,
 3509|   218k|                ranges::distance(buf.view().begin(), result_it));
 3510|   235k|        }
 3511|       |
 3512|  61.9k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  61.9k|            localized_number_formatting_options<CharT>{loc};
 3517|  61.9k|#endif
 3518|       |
 3519|  61.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  61.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.47k, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.47k|    }                                                  \
  |  |  |  | 3939|  61.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  59.5k|                parse_integer_digits_with_thsep(
 3521|  59.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  59.5k|                    prefix_result.parsed_base, locale_options));
 3523|  59.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  59.5k|            parse_digits_result;
 3525|       |
 3526|  59.5k|        auto nothsep_source_view =
 3527|  59.5k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  59.5k|        SCN_TRY(
  ------------------
  |  | 3940|  59.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 596, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    596|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    596|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    596|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    596|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    596|    }                                                  \
  |  |  |  | 3939|  59.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  58.9k|            nothsep_source_it,
 3530|  58.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  58.9k|                                prefix_result.parsed_base));
 3532|       |
 3533|  58.9k|        return ranges::next(
 3534|  58.9k|            prefix_result.iterator,
 3535|  58.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  58.9k|                ranges::ssize(thsep_indices));
 3537|  59.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   245k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   245k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   245k|            auto rd = make_reader<T, char_type>();
 6116|   245k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   245k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 245k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   245k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 245k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   245k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   245k|                return impl(rd, range, value);
 6121|   245k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   245k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   245k|    {
 6041|   245k|        const bool need_skipped_width =
 6042|   245k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 245k]
  |  Branch (6042:33): [True: 0, False: 245k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   245k|        auto it = rng.begin();
 6046|   245k|        std::ptrdiff_t prefix_width = 0;
 6047|   245k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 245k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   245k|        else {
 6055|   245k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.42k, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.42k|    }                                                  \
  |  |  |  | 3939|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   243k|            std::tie(it, prefix_width) = prefix_result;
 6057|   243k|        }
 6058|   243k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   243k|        std::ptrdiff_t value_width = 0;
 6062|   243k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 243k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   243k|        else {
 6078|   243k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22.5k, False: 220k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  22.5k|    }                                                  \
  |  | 3939|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   220k|                                             specs, value, loc));
 6080|       |
 6081|   220k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 220k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   220k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   220k|        std::ptrdiff_t postfix_width = 0;
 6090|   220k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 219k, False: 1.62k]
  ------------------
 6091|   219k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   219k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   219k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   219k|                                 value_width));
 6095|   219k|            std::tie(it, postfix_width) = postfix_result;
 6096|   219k|        }
 6097|       |
 6098|   220k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   220k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 220k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   220k|            specs, prefix_width, value_width, postfix_width));
 6100|   220k|        return it;
 6101|   220k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   243k|    {
 3470|   243k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   243k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   243k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.48k, False: 235k]
  ------------------
 3474|  8.48k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.48k|                return detail::unexpected_scan_error(
 3476|  8.48k|                    scan_error::invalid_scanned_value,
 3477|  8.48k|                    "Unexpected '-' sign when parsing an "
 3478|  8.48k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.48k|        }
 3489|       |
 3490|   243k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 24.3k, False: 219k]
  ------------------
 3491|  24.3k|            value = T{0};
 3492|  24.3k|            return std::next(prefix_result.iterator);
 3493|  24.3k|        }
 3494|       |
 3495|   219k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 165k, False: 54.0k]
  |  |  ------------------
  ------------------
 3496|   165k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.57k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.57k|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   156k|                    parse_integer_digits_without_thsep(
 3498|   156k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   156k|                        prefix_result.parsed_base));
 3500|       |
 3501|   156k|            auto buf = make_contiguous_buffer(
 3502|   156k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   156k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.46k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.46k|    }                                                  \
  |  |  |  | 3939|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   153k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   153k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   153k|            return ranges::next(
 3508|   153k|                prefix_result.iterator,
 3509|   153k|                ranges::distance(buf.view().begin(), result_it));
 3510|   156k|        }
 3511|       |
 3512|  54.0k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  54.0k|            localized_number_formatting_options<CharT>{loc};
 3517|  54.0k|#endif
 3518|       |
 3519|  54.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.14k, False: 52.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.14k|    }                                                  \
  |  |  |  | 3939|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  52.9k|                parse_integer_digits_with_thsep(
 3521|  52.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  52.9k|                    prefix_result.parsed_base, locale_options));
 3523|  52.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  52.9k|            parse_digits_result;
 3525|       |
 3526|  52.9k|        auto nothsep_source_view =
 3527|  52.9k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  52.9k|        SCN_TRY(
  ------------------
  |  | 3940|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 936, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    936|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    936|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    936|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    936|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    936|    }                                                  \
  |  |  |  | 3939|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.9k|            nothsep_source_it,
 3530|  51.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  51.9k|                                prefix_result.parsed_base));
 3532|       |
 3533|  51.9k|        return ranges::next(
 3534|  51.9k|            prefix_result.iterator,
 3535|  51.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  51.9k|                ranges::ssize(thsep_indices));
 3537|  52.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   242k|    {
 3470|   242k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   242k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   242k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.47k, False: 234k]
  ------------------
 3474|  8.47k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.47k|                return detail::unexpected_scan_error(
 3476|  8.47k|                    scan_error::invalid_scanned_value,
 3477|  8.47k|                    "Unexpected '-' sign when parsing an "
 3478|  8.47k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.47k|        }
 3489|       |
 3490|   242k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 24.1k, False: 218k]
  ------------------
 3491|  24.1k|            value = T{0};
 3492|  24.1k|            return std::next(prefix_result.iterator);
 3493|  24.1k|        }
 3494|       |
 3495|   218k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   218k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 164k, False: 53.9k]
  |  |  ------------------
  ------------------
 3496|   164k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   164k|                    parse_integer_digits_without_thsep(
 3498|   164k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   164k|                        prefix_result.parsed_base));
 3500|       |
 3501|   164k|            auto buf = make_contiguous_buffer(
 3502|   164k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   164k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.2k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.2k|    }                                                  \
  |  |  |  | 3939|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   152k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   152k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   152k|            return ranges::next(
 3508|   152k|                prefix_result.iterator,
 3509|   152k|                ranges::distance(buf.view().begin(), result_it));
 3510|   164k|        }
 3511|       |
 3512|  53.9k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  53.9k|            localized_number_formatting_options<CharT>{loc};
 3517|  53.9k|#endif
 3518|       |
 3519|  53.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  53.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.22k, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.22k|    }                                                  \
  |  |  |  | 3939|  53.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  52.6k|                parse_integer_digits_with_thsep(
 3521|  52.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  52.6k|                    prefix_result.parsed_base, locale_options));
 3523|  52.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  52.6k|            parse_digits_result;
 3525|       |
 3526|  52.6k|        auto nothsep_source_view =
 3527|  52.6k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  52.6k|        SCN_TRY(
  ------------------
  |  | 3940|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 928, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    928|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    928|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    928|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    928|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    928|    }                                                  \
  |  |  |  | 3939|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.7k|            nothsep_source_it,
 3530|  51.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  51.7k|                                prefix_result.parsed_base));
 3532|       |
 3533|  51.7k|        return ranges::next(
 3534|  51.7k|            prefix_result.iterator,
 3535|  51.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  51.7k|                ranges::ssize(thsep_indices));
 3537|  52.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   280k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   280k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   280k|            auto rd = make_reader<T, char_type>();
 6116|   280k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   280k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 280k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   280k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 280k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   280k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   280k|                return impl(rd, range, value);
 6121|   280k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   280k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   280k|    {
 6041|   280k|        const bool need_skipped_width =
 6042|   280k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 280k]
  |  Branch (6042:33): [True: 0, False: 280k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   280k|        auto it = rng.begin();
 6046|   280k|        std::ptrdiff_t prefix_width = 0;
 6047|   280k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 280k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   280k|        else {
 6055|   280k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.29k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.29k|    }                                                  \
  |  |  |  | 3939|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   277k|            std::tie(it, prefix_width) = prefix_result;
 6057|   277k|        }
 6058|   277k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   277k|        std::ptrdiff_t value_width = 0;
 6062|   277k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 277k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   277k|        else {
 6078|   277k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 21.7k, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  21.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  21.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  21.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  21.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  21.7k|    }                                                  \
  |  | 3939|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   255k|                                             specs, value, loc));
 6080|       |
 6081|   255k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 255k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   255k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   255k|        std::ptrdiff_t postfix_width = 0;
 6090|   255k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 253k, False: 2.24k]
  ------------------
 6091|   253k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   253k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   253k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   253k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   253k|                                 value_width));
 6095|   253k|            std::tie(it, postfix_width) = postfix_result;
 6096|   253k|        }
 6097|       |
 6098|   255k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   255k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   255k|            specs, prefix_width, value_width, postfix_width));
 6100|   255k|        return it;
 6101|   255k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   277k|    {
 3470|   277k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   277k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   277k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.77k, False: 268k]
  ------------------
 3474|  8.77k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.77k|                return detail::unexpected_scan_error(
 3476|  8.77k|                    scan_error::invalid_scanned_value,
 3477|  8.77k|                    "Unexpected '-' sign when parsing an "
 3478|  8.77k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.77k|        }
 3489|       |
 3490|   277k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 26.3k, False: 250k]
  ------------------
 3491|  26.3k|            value = T{0};
 3492|  26.3k|            return std::next(prefix_result.iterator);
 3493|  26.3k|        }
 3494|       |
 3495|   250k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   250k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 191k, False: 59.6k]
  |  |  ------------------
  ------------------
 3496|   191k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.62k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.62k|    }                                                  \
  |  |  |  | 3939|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   181k|                    parse_integer_digits_without_thsep(
 3498|   181k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   181k|                        prefix_result.parsed_base));
 3500|       |
 3501|   181k|            auto buf = make_contiguous_buffer(
 3502|   181k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   181k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.49k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.49k|    }                                                  \
  |  |  |  | 3939|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   180k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   180k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   180k|            return ranges::next(
 3508|   180k|                prefix_result.iterator,
 3509|   180k|                ranges::distance(buf.view().begin(), result_it));
 3510|   181k|        }
 3511|       |
 3512|  59.6k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  59.6k|            localized_number_formatting_options<CharT>{loc};
 3517|  59.6k|#endif
 3518|       |
 3519|  59.6k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.42k, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  58.2k|                parse_integer_digits_with_thsep(
 3521|  58.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  58.2k|                    prefix_result.parsed_base, locale_options));
 3523|  58.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  58.2k|            parse_digits_result;
 3525|       |
 3526|  58.2k|        auto nothsep_source_view =
 3527|  58.2k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  58.2k|        SCN_TRY(
  ------------------
  |  | 3940|  58.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 420, False: 57.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    420|    }                                                  \
  |  |  |  | 3939|  58.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  57.7k|            nothsep_source_it,
 3530|  57.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  57.7k|                                prefix_result.parsed_base));
 3532|       |
 3533|  57.7k|        return ranges::next(
 3534|  57.7k|            prefix_result.iterator,
 3535|  57.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  57.7k|                ranges::ssize(thsep_indices));
 3537|  58.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   275k|    {
 3470|   275k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   275k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   275k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.76k, False: 267k]
  ------------------
 3474|  8.76k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.76k|                return detail::unexpected_scan_error(
 3476|  8.76k|                    scan_error::invalid_scanned_value,
 3477|  8.76k|                    "Unexpected '-' sign when parsing an "
 3478|  8.76k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.76k|        }
 3489|       |
 3490|   275k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 25.9k, False: 249k]
  ------------------
 3491|  25.9k|            value = T{0};
 3492|  25.9k|            return std::next(prefix_result.iterator);
 3493|  25.9k|        }
 3494|       |
 3495|   249k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   249k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 190k, False: 59.4k]
  |  |  ------------------
  ------------------
 3496|   190k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   190k|                    parse_integer_digits_without_thsep(
 3498|   190k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   190k|                        prefix_result.parsed_base));
 3500|       |
 3501|   190k|            auto buf = make_contiguous_buffer(
 3502|   190k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   190k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.3k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.3k|    }                                                  \
  |  |  |  | 3939|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   179k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   179k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   179k|            return ranges::next(
 3508|   179k|                prefix_result.iterator,
 3509|   179k|                ranges::distance(buf.view().begin(), result_it));
 3510|   190k|        }
 3511|       |
 3512|  59.4k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  59.4k|            localized_number_formatting_options<CharT>{loc};
 3517|  59.4k|#endif
 3518|       |
 3519|  59.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  59.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  59.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  57.9k|                parse_integer_digits_with_thsep(
 3521|  57.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  57.9k|                    prefix_result.parsed_base, locale_options));
 3523|  57.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  57.9k|            parse_digits_result;
 3525|       |
 3526|  57.9k|        auto nothsep_source_view =
 3527|  57.9k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  57.9k|        SCN_TRY(
  ------------------
  |  | 3940|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 418, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    418|    }                                                  \
  |  |  |  | 3939|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  57.5k|            nothsep_source_it,
 3530|  57.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  57.5k|                                prefix_result.parsed_base));
 3532|       |
 3533|  57.5k|        return ranges::next(
 3534|  57.5k|            prefix_result.iterator,
 3535|  57.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  57.5k|                ranges::ssize(thsep_indices));
 3537|  57.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6105|   283k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|   283k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|   283k|            auto rd = make_reader<T, char_type>();
 6116|   283k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   283k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 283k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|   283k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 283k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|   283k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|   283k|                return impl(rd, range, value);
 6121|   283k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   283k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|   283k|    {
 6041|   283k|        const bool need_skipped_width =
 6042|   283k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 283k]
  |  Branch (6042:33): [True: 0, False: 283k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   283k|        auto it = rng.begin();
 6046|   283k|        std::ptrdiff_t prefix_width = 0;
 6047|   283k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 283k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   283k|        else {
 6055|   283k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.53k, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.53k|    }                                                  \
  |  |  |  | 3939|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   280k|            std::tie(it, prefix_width) = prefix_result;
 6057|   280k|        }
 6058|   280k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   280k|        std::ptrdiff_t value_width = 0;
 6062|   280k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 280k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   280k|        else {
 6078|   280k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 21.4k, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  21.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  21.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  21.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  21.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  21.4k|    }                                                  \
  |  | 3939|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   258k|                                             specs, value, loc));
 6080|       |
 6081|   258k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 258k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   258k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   258k|        std::ptrdiff_t postfix_width = 0;
 6090|   258k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 256k, False: 2.44k]
  ------------------
 6091|   256k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   256k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   256k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   256k|                                 value_width));
 6095|   256k|            std::tie(it, postfix_width) = postfix_result;
 6096|   256k|        }
 6097|       |
 6098|   258k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   258k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   258k|            specs, prefix_width, value_width, postfix_width));
 6100|   258k|        return it;
 6101|   258k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|   280k|    {
 3470|   280k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   280k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   280k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.97k, False: 271k]
  ------------------
 3474|  8.97k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.97k|                return detail::unexpected_scan_error(
 3476|  8.97k|                    scan_error::invalid_scanned_value,
 3477|  8.97k|                    "Unexpected '-' sign when parsing an "
 3478|  8.97k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.97k|        }
 3489|       |
 3490|   280k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 26.4k, False: 253k]
  ------------------
 3491|  26.4k|            value = T{0};
 3492|  26.4k|            return std::next(prefix_result.iterator);
 3493|  26.4k|        }
 3494|       |
 3495|   253k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 193k, False: 60.4k]
  |  |  ------------------
  ------------------
 3496|   193k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.83k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.83k|    }                                                  \
  |  |  |  | 3939|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   183k|                    parse_integer_digits_without_thsep(
 3498|   183k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   183k|                        prefix_result.parsed_base));
 3500|       |
 3501|   183k|            auto buf = make_contiguous_buffer(
 3502|   183k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   183k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 948, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    948|    }                                                  \
  |  |  |  | 3939|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   182k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   182k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   182k|            return ranges::next(
 3508|   182k|                prefix_result.iterator,
 3509|   182k|                ranges::distance(buf.view().begin(), result_it));
 3510|   183k|        }
 3511|       |
 3512|  60.4k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  60.4k|            localized_number_formatting_options<CharT>{loc};
 3517|  60.4k|#endif
 3518|       |
 3519|  60.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.47k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.47k|    }                                                  \
  |  |  |  | 3939|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  58.9k|                parse_integer_digits_with_thsep(
 3521|  58.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  58.9k|                    prefix_result.parsed_base, locale_options));
 3523|  58.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  58.9k|            parse_digits_result;
 3525|       |
 3526|  58.9k|        auto nothsep_source_view =
 3527|  58.9k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  58.9k|        SCN_TRY(
  ------------------
  |  | 3940|  58.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 260, False: 58.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    260|    }                                                  \
  |  |  |  | 3939|  58.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  58.7k|            nothsep_source_it,
 3530|  58.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  58.7k|                                prefix_result.parsed_base));
 3532|       |
 3533|  58.7k|        return ranges::next(
 3534|  58.7k|            prefix_result.iterator,
 3535|  58.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  58.7k|                ranges::ssize(thsep_indices));
 3537|  58.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|   278k|    {
 3470|   278k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|   278k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|   278k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 8.95k, False: 269k]
  ------------------
 3474|  8.95k|            if constexpr (!std::is_signed_v<T>) {
 3475|  8.95k|                return detail::unexpected_scan_error(
 3476|  8.95k|                    scan_error::invalid_scanned_value,
 3477|  8.95k|                    "Unexpected '-' sign when parsing an "
 3478|  8.95k|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|  8.95k|        }
 3489|       |
 3490|   278k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 26.0k, False: 252k]
  ------------------
 3491|  26.0k|            value = T{0};
 3492|  26.0k|            return std::next(prefix_result.iterator);
 3493|  26.0k|        }
 3494|       |
 3495|   252k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 192k, False: 60.2k]
  |  |  ------------------
  ------------------
 3496|   192k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|   192k|                    parse_integer_digits_without_thsep(
 3498|   192k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|   192k|                        prefix_result.parsed_base));
 3500|       |
 3501|   192k|            auto buf = make_contiguous_buffer(
 3502|   192k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|   192k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.0k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.0k|    }                                                  \
  |  |  |  | 3939|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|   181k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|   181k|                                        prefix_result.parsed_base));
 3506|       |
 3507|   181k|            return ranges::next(
 3508|   181k|                prefix_result.iterator,
 3509|   181k|                ranges::distance(buf.view().begin(), result_it));
 3510|   192k|        }
 3511|       |
 3512|  60.2k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  60.2k|            localized_number_formatting_options<CharT>{loc};
 3517|  60.2k|#endif
 3518|       |
 3519|  60.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  60.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.56k, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.56k|    }                                                  \
  |  |  |  | 3939|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|  58.6k|                parse_integer_digits_with_thsep(
 3521|  58.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|  58.6k|                    prefix_result.parsed_base, locale_options));
 3523|  58.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|  58.6k|            parse_digits_result;
 3525|       |
 3526|  58.6k|        auto nothsep_source_view =
 3527|  58.6k|            std::basic_string_view<CharT>{nothsep_source};
 3528|  58.6k|        SCN_TRY(
  ------------------
  |  | 3940|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 258, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    258|    }                                                  \
  |  |  |  | 3939|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  58.4k|            nothsep_source_it,
 3530|  58.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|  58.4k|                                prefix_result.parsed_base));
 3532|       |
 3533|  58.4k|        return ranges::next(
 3534|  58.4k|            prefix_result.iterator,
 3535|  58.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|  58.4k|                ranges::ssize(thsep_indices));
 3537|  58.6k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  2.20M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  2.20M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  2.20M|        else {
 1055|  2.20M|            return r.begin().contiguous_segment();
 1056|  2.20M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  2.20M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|  2.13M|{
 2051|  2.13M|    auto it = range.begin();
 2052|  4.41M|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 4.39M, False: 23.2k]
  ------------------
 2053|  4.39M|        const auto val =
 2054|  4.39M|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|  4.39M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  4.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.39M, False: 4.20k]
  |  |  ------------------
  ------------------
 2056|  4.39M|            const auto cp = detail::decode_code_point_exhaustive(
 2057|  4.39M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|  4.39M|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 2.10M, False: 2.28M]
  ------------------
 2059|  2.10M|                return it;
 2060|  2.10M|            }
 2061|  4.39M|        }
 2062|  2.28M|        it = val.iterator;
 2063|  2.28M|    }
 2064|       |
 2065|  23.2k|    return it;
 2066|  2.13M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|  4.39M|{
 1889|  4.39M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  4.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|  4.39M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|  4.39M|    auto it = range.begin();
 1893|  4.39M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|  4.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  4.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.20k, False: 4.39M]
  |  |  ------------------
  ------------------
 1896|  4.20k|        ++it;
 1897|  4.20k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|  4.20k|        return {it, {}};
 1899|  4.20k|    }
 1900|       |
 1901|  4.39M|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 4.37M, False: 17.9k]
  ------------------
 1902|  4.37M|        ++it;
 1903|  4.37M|        return {it, string_type(1, *range.begin())};
 1904|  4.37M|    }
 1905|       |
 1906|  17.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|  17.9k|    return {it, string_type{range.begin(), it}};
 1908|  4.39M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1155|  4.20k|{
 1156|  4.20k|    auto it = input.begin();
 1157|  28.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1157:12): [True: 27.4k, False: 1.16k]
  ------------------
 1158|  27.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1158:13): [True: 3.04k, False: 24.4k]
  ------------------
 1159|  3.04k|            break;
 1160|  3.04k|        }
 1161|  27.4k|    }
 1162|  4.20k|    return it;
 1163|  4.20k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  17.9k|    {
  283|  17.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  17.9k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  17.9k|    {
  252|  17.9k|        constexpr iter_difference_t<I> zero{0};
  253|  17.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|  61.6k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 45.8k, False: 15.7k]
  |  Branch (255:30): [True: 43.6k, False: 2.22k]
  ------------------
  256|  43.6k|            ++i;
  257|  43.6k|            ++counter;
  258|  43.6k|        }
  259|       |
  260|  17.9k|        return counter;
  261|  17.9k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1879|  4.39M|    {
 1880|  4.39M|        return !codepoint.empty();
 1881|  4.39M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|  2.13M|{
 2072|  2.13M|    return read_until_code_point(range, std::not_fn(pred));
 2073|  2.13M|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|  2.20M|{
 2946|  2.20M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 2.20M, False: 0]
  ------------------
 2947|  2.20M|        auto it = read_while_classic_space(range);
 2948|  2.20M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|  2.20M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.2k, False: 2.18M]
  |  |  ------------------
  ------------------
 2950|  23.2k|            return unexpected(e);
 2951|  23.2k|        }
 2952|       |
 2953|  2.18M|        return it;
 2954|  2.20M|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|  2.20M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|  2.20M|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|  2.20M|    else {
 2116|  2.20M|        auto it = range.begin();
 2117|       |
 2118|  2.20M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|  2.20M|            auto seg = get_contiguous_beginning(range);
 2120|  2.20M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|  2.20M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2121:17): [True: 74.8k, False: 2.13M]
  ------------------
 2122|  74.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|  74.8k|            }
 2124|  2.13M|            ranges::advance(it, seg.size());
 2125|  2.13M|        }
 2126|       |
 2127|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  2.20M|            return detail::is_cp_space(cp);
 2129|  2.20M|        });
 2130|  2.20M|    }
 2131|  2.20M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.13M|        : m_fptr([](storage fn,
  743|  2.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.13M|              cvref<T> obj = *get<T>(fn);
  745|  2.13M|              if constexpr (std::is_void_v<R>) {
  746|  2.13M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.13M|              }
  748|  2.13M|              else {
  749|  2.13M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.13M|              }
  751|  2.13M|          }),
  752|  2.13M|          m_storage(std::addressof(f))
  753|  2.13M|    {
  754|  2.13M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  4.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.39M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.39M|              else {
  749|  4.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.39M|              }
  751|  4.39M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.39M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.39M|        else if constexpr (std::is_object_v<T>) {
  688|  4.39M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.39M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|  4.39M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|  4.39M|            return detail::is_cp_space(cp);
 2129|  4.39M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.13M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.13M|        {
  662|  2.13M|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   379k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   379k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   379k|        auto beg = r.begin();
  991|   379k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 379k, False: 0]
  ------------------
  992|   379k|            return false;
  993|   379k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   379k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   673k|    {
  763|   673k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   673k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1846|   301k|{
 1847|   301k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|       |    if constexpr (ranges::sized_range<Range>) {
 1850|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|       |        if (sz < count) {
 1852|       |            return unexpected(eof_error::eof);
 1853|       |        }
 1854|       |
 1855|       |        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|   301k|    else {
 1858|   301k|        auto it = range.begin();
 1859|   301k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1859:13): [True: 269k, False: 31.8k]
  ------------------
 1860|   269k|            return ranges::next(it, count);
 1861|   269k|        }
 1862|       |
 1863|  64.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1863:36): [True: 63.3k, False: 718]
  ------------------
 1864|  63.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1864:17): [True: 31.1k, False: 32.2k]
  ------------------
 1865|  31.1k|                return unexpected(eof_error::eof);
 1866|  31.1k|            }
 1867|  63.3k|        }
 1868|       |
 1869|    718|        return it;
 1870|  31.8k|    }
 1871|   301k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   301k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   301k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   301k|        else {
 1107|   301k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 301k, False: 0]
  ------------------
 1108|   301k|                return static_cast<size_t>(
 1109|   301k|                    r.begin().parent()->chars_available() -
 1110|   301k|                    r.begin().position());
 1111|   301k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   301k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   301k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 5953|   303k|    {
 5954|   303k|        const bool need_skipped_width =
 5955|   303k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 303k]
  |  Branch (5955:33): [True: 0, False: 303k]
  ------------------
 5956|   303k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   303k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 303k]
  ------------------
 5960|   303k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 303k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   303k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 303k, False: 0]
  |  Branch (5964:56): [True: 303k, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   303k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 303k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|   605k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.99k|    }                                                  \
  |  |  |  | 3939|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|   605k|                            make_eof_scan_error));
 5975|       |
 5976|   605k|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 301k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   301k|            return result_type{it, 0};
 5984|   605k|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|   303k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1965|   325k|{
 1966|   325k|    return read_until_code_unit(range, std::not_fn(pred));
 1967|   325k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1946|   325k|{
 1947|       |    if constexpr (ranges::common_range<Range>) {
 1948|       |        return std::find_if(range.begin(), range.end(), pred);
 1949|       |    }
 1950|   325k|    else {
 1951|   325k|        auto first = range.begin();
 1952|   338k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1952:16): [True: 336k, False: 1.14k]
  ------------------
 1953|   336k|            if (pred(*first)) {
  ------------------
  |  Branch (1953:17): [True: 324k, False: 12.4k]
  ------------------
 1954|   324k|                return first;
 1955|   324k|            }
 1956|   336k|        }
 1957|  1.14k|        return first;
 1958|   325k|    }
 1959|   325k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   102M|    {
  108|   102M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   102M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   102M|    {
   94|   102M|        iter_difference_t<I> counter{0};
   95|   210G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 209G, False: 102M]
  ------------------
   96|   209G|            ++i;
   97|   209G|            ++counter;
   98|   209G|        }
   99|   102M|        return counter;
  100|   102M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1769|   100k|    {
 1770|   100k|        auto stdloc = loc.get<std::locale>();
 1771|   100k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1772|   100k|        grouping = numpunct.grouping();
 1773|   100k|        thousands_sep =
 1774|   100k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1774:13): [True: 0, False: 100k]
  ------------------
 1775|   100k|        decimal_point = numpunct.decimal_point();
 1776|   100k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1706|   100k|{
 1707|   100k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1707:9): [True: 100k, False: 0]
  ------------------
 1708|   100k|        return std::use_facet<Facet>(stdloc);
 1709|   100k|    }
 1710|      0|    stdloc = std::locale(stdloc, new Facet{});
 1711|      0|    return std::use_facet<Facet>(stdloc);
 1712|   100k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1835|   477k|{
 1836|   477k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 477k]
  |  |  ------------------
  ------------------
 1837|    120|        return unexpected(e);
 1838|    120|    }
 1839|       |
 1840|   477k|    return ranges::next(range.begin());
 1841|   477k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   933k|{
  951|   933k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.60k, False: 930k]
  |  |  ------------------
  ------------------
  952|  2.60k|        return eof_error::eof;
  953|  2.60k|    }
  954|   930k|    return eof_error::good;
  955|   933k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.31M|{
  945|  1.31M|    return is_range_eof(r.begin(), r.end());
  946|  1.31M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.31M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.31M|    {
  938|  1.31M|        return begin == end;
  939|  1.31M|    }
  940|  1.31M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   477k|    {
  296|   477k|        ++x;
  297|   477k|        return x;
  298|   477k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 276, False: 50.0k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    276|            else {
 3481|    276|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 276]
  ------------------
 3482|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    276|            }
 3488|    276|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 52, False: 50.2k]
  ------------------
 3491|     52|            value = T{0};
 3492|     52|            return std::next(prefix_result.iterator);
 3493|     52|        }
 3494|       |
 3495|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.8k, False: 8.38k]
  |  |  ------------------
  ------------------
 3496|  41.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.3k, False: 484]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.3k|    }                                                  \
  |  |  |  | 3939|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    484|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    484|                    parse_integer_digits_without_thsep(
 3498|    484|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    484|                        prefix_result.parsed_base));
 3500|       |
 3501|    484|            auto buf = make_contiguous_buffer(
 3502|    484|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    484|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 56, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     56|    }                                                  \
  |  |  |  | 3939|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    428|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    428|                                        prefix_result.parsed_base));
 3506|       |
 3507|    428|            return ranges::next(
 3508|    428|                prefix_result.iterator,
 3509|    428|                ranges::distance(buf.view().begin(), result_it));
 3510|    484|        }
 3511|       |
 3512|  8.38k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.38k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.38k|#endif
 3518|       |
 3519|  8.38k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.24k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.24k|    }                                                  \
  |  |  |  | 3939|  8.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    138|                parse_integer_digits_with_thsep(
 3521|    138|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    138|                    prefix_result.parsed_base, locale_options));
 3523|    138|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    138|            parse_digits_result;
 3525|       |
 3526|    138|        auto nothsep_source_view =
 3527|    138|            std::basic_string_view<CharT>{nothsep_source};
 3528|    138|        SCN_TRY(
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    122|            nothsep_source_it,
 3530|    122|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    122|                                prefix_result.parsed_base));
 3532|       |
 3533|    122|        return ranges::next(
 3534|    122|            prefix_result.iterator,
 3535|    122|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    122|                ranges::ssize(thsep_indices));
 3537|    138|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3256|   377k|{
 3257|   377k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 377k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|   377k|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|   377k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|   377k|        parse_integer_base_prefix(
 3262|   377k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|   377k|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 404, False: 376k]
  ------------------
 3265|    404|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 96, False: 308]
  ------------------
 3266|    404|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 212, False: 96]
  ------------------
 3267|    308|            digits_begin_it = base_prefix_begin_it;
 3268|    308|        }
 3269|     96|        else {
 3270|     96|            parsed_zero = false;
 3271|     96|        }
 3272|    404|    }
 3273|   376k|    else {
 3274|   376k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 450, False: 376k]
  ------------------
 3275|   376k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 371k, False: 4.82k]
  ------------------
 3276|   371k|            digits_begin_it = base_prefix_begin_it;
 3277|   371k|        }
 3278|   376k|    }
 3279|       |
 3280|   377k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 374k, False: 2.27k]
  ------------------
 3281|   374k|        sign = sign_type::plus_sign;
 3282|   374k|    }
 3283|   377k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|   377k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|   377k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3137|   377k|{
 3138|   377k|    auto r = read_one_of_code_unit(range, "+-");
 3139|   377k|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 374k, False: 2.27k]
  ------------------
 3140|   374k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 374k, False: 0]
  ------------------
 3141|   374k|            return std::pair{range.begin(), sign_type::default_sign};
 3142|   374k|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|   374k|    }
 3145|       |
 3146|  2.27k|    auto& it = *r;
 3147|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 2.05k, False: 217]
  ------------------
 3148|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3149|  2.05k|    }
 3150|    217|    return std::pair{it, sign_type::plus_sign};
 3151|  2.27k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2262|   377k|{
 2263|   377k|    auto it = read_code_unit(range);
 2264|   377k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|   754k|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 754k, False: 374k]
  ------------------
 2269|   754k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 2.27k, False: 751k]
  ------------------
 2270|  2.27k|            return *it;
 2271|  2.27k|        }
 2272|   754k|    }
 2273|       |
 2274|   374k|    return unexpected(parse_error::error);
 2275|   377k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3223|   377k|{
 3224|   377k|    switch (base) {
 3225|  50.0k|        case 2:
  ------------------
  |  Branch (3225:9): [True: 50.0k, False: 327k]
  ------------------
 3226|       |            // allow 0b/0B
 3227|  50.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|  50.0k|                    false};
 3229|       |
 3230|  50.1k|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 50.1k, False: 326k]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|  50.1k|            bool zero_parsed = false;
 3233|  50.1k|            auto it = apply_opt(
 3234|  50.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|  50.1k|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|  50.3k|        case 16:
  ------------------
  |  Branch (3238:9): [True: 50.3k, False: 326k]
  ------------------
 3239|       |            // allow 0x/0X
 3240|  50.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|  50.3k|                    false};
 3242|       |
 3243|  50.3k|        case 0:
  ------------------
  |  Branch (3243:9): [True: 50.3k, False: 326k]
  ------------------
 3244|       |            // detect base
 3245|  50.3k|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|   176k|        default:
  ------------------
  |  Branch (3247:9): [True: 176k, False: 200k]
  ------------------
 3248|       |            // no base prefix allowed
 3249|   176k|            return {range.begin(), base, false};
 3250|   377k|    }
 3251|   377k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2281|   150k|{
 2282|   150k|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 150k, False: 192]
  ------------------
 2283|   150k|        return range.begin();
 2284|   150k|    }
 2285|    192|    return *result;
 2286|   150k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3174|   100k|{
 3175|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3176|   100k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2221|   301k|{
 2222|   301k|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|   301k|    else {
 2235|   301k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|   301k|            if (ch < 'A' || ch > 'Z') {
 2237|   301k|                return ch;
 2238|   301k|            }
 2239|   301k|            return static_cast<char_type>(ch +
 2240|   301k|                                          static_cast<char_type>('a' - 'A'));
 2241|   301k|        };
 2242|       |
 2243|   301k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.1k, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.1k|    }                                                  \
  |  |  |  | 3939|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|   270k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|   270k|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|   270k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 270k, False: 0]
  |  |  ------------------
  ------------------
 2248|   270k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|   270k|                    return ascii_tolower(a) ==
 2250|   270k|                           static_cast<detail::char_t<Range>>(b);
 2251|   270k|                }))) {
 2252|   270k|            return unexpected(parse_error::error);
 2253|   270k|        }
 2254|       |
 2255|      0|        return it;
 2256|   270k|    }
 2257|   301k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2235|   271k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|   271k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 160k, False: 110k]
  |  Branch (2236:29): [True: 110k, False: 432]
  ------------------
 2237|   271k|                return ch;
 2238|   271k|            }
 2239|    432|            return static_cast<char_type>(ch +
 2240|    432|                                          static_cast<char_type>('a' - 'A'));
 2241|   271k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3188|   100k|{
 3189|   100k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3189:14): [True: 0, False: 100k]
  ------------------
 3190|      0|        return *r;
 3191|      0|    }
 3192|       |
 3193|   100k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3193:14): [True: 404, False: 100k]
  ------------------
 3194|    404|        zero_parsed = true;
 3195|    404|        return *r;
 3196|    404|    }
 3197|       |
 3198|   100k|    return unexpected(parse_error::error);
 3199|   100k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2136|   100k|{
 2137|   100k|    auto it = read_code_unit(range);
 2138|   100k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 100k]
  |  |  ------------------
  ------------------
 2139|    120|        return unexpected(make_eof_parse_error(it.error()));
 2140|    120|    }
 2141|       |
 2142|   100k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 404]
  |  |  ------------------
  ------------------
 2143|   100k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   100k|        return unexpected(parse_error::error);
 2145|   100k|    }
 2146|       |
 2147|    404|    return *it;
 2148|   100k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3181|   100k|{
 3182|   100k|    return read_matching_string_classic_nocase(range, "0x");
 3183|   100k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3204|  50.3k|{
 3205|  50.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3205:14): [True: 0, False: 50.3k]
  ------------------
 3206|      0|        return {*r, 16, false};
 3207|      0|    }
 3208|  50.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3208:14): [True: 0, False: 50.3k]
  ------------------
 3209|      0|        return {*r, 2, false};
 3210|      0|    }
 3211|  50.3k|    {
 3212|  50.3k|        bool zero_parsed{false};
 3213|  50.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3213:18): [True: 212, False: 50.1k]
  ------------------
 3214|    212|            return {*r, 8, zero_parsed};
 3215|    212|        }
 3216|  50.3k|    }
 3217|  50.1k|    return {range.begin(), 10, false};
 3218|  50.3k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3290|   325k|{
 3291|   325k|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|       |    if constexpr (ranges::contiguous_range<Range>) {
 3294|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3295|       |            return detail::unexpected_scan_error(
 3296|       |                scan_error::invalid_scanned_value,
 3297|       |                "Failed to parse integer: No digits found");
 3298|       |        }
 3299|       |        return range.end();
 3300|       |    }
 3301|   325k|    else {
 3302|   325k|        return read_while1_code_unit(range,
 3303|   325k|                                     [&](char_type ch) noexcept {
 3304|   325k|                                         return char_to_int(ch) < base;
 3305|   325k|                                     })
 3306|   325k|            .transform_error(map_parse_error_to_scan_error(
 3307|   325k|                scan_error::invalid_scanned_value,
 3308|   325k|                "Failed to parse integer: No digits found"));
 3309|   325k|    }
 3310|   325k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1985|   325k|{
 1986|   325k|    auto it = read_while_code_unit(range, pred);
 1987|   325k|    if (it == range.begin()) {
  ------------------
  |  Branch (1987:9): [True: 321k, False: 3.79k]
  ------------------
 1988|   321k|        return unexpected(parse_error::error);
 1989|   321k|    }
 1990|  3.79k|    return it;
 1991|   325k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3303|   336k|                                     [&](char_type ch) noexcept {
 3304|   336k|                                         return char_to_int(ch) < base;
 3305|   336k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3320|  50.1k|{
 3321|  50.1k|    std::basic_string<CharT> output;
 3322|  50.1k|    std::string thsep_indices;
 3323|  50.1k|    auto it = range.begin();
 3324|  50.1k|    bool digit_matched = false;
 3325|   102M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3325:12): [True: 102M, False: 420]
  ------------------
 3326|   102M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3326:13): [True: 102M, False: 52.3k]
  ------------------
 3327|   102M|            thsep_indices.push_back(
 3328|   102M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3329|   102M|        }
 3330|  52.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3330:18): [True: 49.7k, False: 2.65k]
  ------------------
 3331|  49.7k|            break;
 3332|  49.7k|        }
 3333|  2.65k|        else {
 3334|  2.65k|            output.push_back(*it);
 3335|  2.65k|            digit_matched = true;
 3336|  2.65k|        }
 3337|   102M|    }
 3338|  50.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.3k, False: 760]
  |  |  ------------------
  ------------------
 3339|  49.3k|        return detail::unexpected_scan_error(
 3340|  49.3k|            scan_error::invalid_scanned_value,
 3341|  49.3k|            "Failed to parse integer: No digits found");
 3342|  49.3k|    }
 3343|    760|    return std::tuple{it, output, thsep_indices};
 3344|  50.1k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1672|  3.79k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|       |                  ranges::sized_range<Range>) {
 1676|       |        return string_view_wrapper{SCN_FWD(range)};
 1677|       |    }
 1678|  3.79k|    else {
 1679|  3.79k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1680|  3.79k|    }
 1681|  3.79k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1526|  3.79k|    {
 1527|  3.79k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1528|  3.79k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1610|  3.79k|    {
 1611|  3.79k|        using value_t = ranges::range_value_t<Range>;
 1612|       |
 1613|       |        if constexpr (ranges::borrowed_range<Range> &&
 1614|       |                      ranges::contiguous_range<Range> &&
 1615|       |                      ranges::sized_range<Range>) {
 1616|       |            m_storage.reset();
 1617|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1618|       |        }
 1619|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1620|       |                                          std::basic_string<CharT>>) {
 1621|       |            m_storage.emplace(SCN_FWD(range));
 1622|       |            m_view = string_view_type{*m_storage};
 1623|       |        }
 1624|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1625|       |                                          typename detail::basic_scan_buffer<
 1626|       |                                              value_t>::forward_iterator> &&
 1627|  3.79k|                           ranges::common_range<Range>) {
 1628|  3.79k|            auto beg_seg = range.begin().contiguous_segment();
 1629|  3.79k|            auto end_seg = range.end().contiguous_segment();
 1630|  3.79k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  3.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.39k, False: 1.39k]
  |  |  ------------------
  ------------------
 1631|  3.79k|                             detail::to_address(end_seg.end()))) {
 1632|  2.39k|                auto& str = m_storage.emplace();
 1633|  2.39k|                str.reserve(range.end().position() - range.begin().position());
 1634|  2.39k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1635|  2.39k|                m_view = string_view_type{str};
 1636|  2.39k|                return;
 1637|  2.39k|            }
 1638|       |
 1639|  1.39k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1640|  1.39k|                                                            end_seg.data());
 1641|  1.39k|            m_storage.reset();
 1642|       |        }
 1643|       |        else {
 1644|       |            auto& str = m_storage.emplace();
 1645|       |            if constexpr (ranges::sized_range<Range>) {
 1646|       |                str.reserve(range.size());
 1647|       |            }
 1648|       |            if constexpr (ranges::common_range<Range>) {
 1649|       |                std::copy(ranges::begin(range), ranges::end(range),
 1650|       |                          std::back_inserter(str));
 1651|       |            }
 1652|       |            else {
 1653|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1654|       |                     ++it) {
 1655|       |                    str.push_back(*it);
 1656|       |                }
 1657|       |            }
 1658|       |            m_view = string_view_type{str};
 1659|       |        }
 1660|  3.79k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1571|  7.13k|    {
 1572|  7.13k|        return m_view;
 1573|  7.13k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1561|  3.79k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 5995|  2.33k|    {
 5996|  2.33k|        const bool need_skipped_width =
 5997|  2.33k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 2.33k]
  |  Branch (5997:33): [True: 0, False: 2.33k]
  ------------------
 5998|  2.33k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  2.33k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 2.33k]
  ------------------
 6001|  2.33k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 2.33k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  2.33k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 2.33k, False: 0]
  ------------------
 6010|  2.33k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 2.33k]
  ------------------
 6011|  2.33k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  2.33k|        return result_type{rng.begin(), 0};
 6035|  2.33k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1846|   301k|{
 1847|   301k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1848|       |
 1849|   301k|    if constexpr (ranges::sized_range<Range>) {
 1850|   301k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1851|   301k|        if (sz < count) {
  ------------------
  |  Branch (1851:13): [True: 31.1k, False: 270k]
  ------------------
 1852|  31.1k|            return unexpected(eof_error::eof);
 1853|  31.1k|        }
 1854|       |
 1855|   270k|        return ranges::next(range.begin(), count);
 1856|       |    }
 1857|       |    else {
 1858|       |        auto it = range.begin();
 1859|       |        if (guaranteed_minimum_size(range) >= count) {
 1860|       |            return ranges::next(it, count);
 1861|       |        }
 1862|       |
 1863|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1864|       |            if (it == range.end()) {
 1865|       |                return unexpected(eof_error::eof);
 1866|       |            }
 1867|       |        }
 1868|       |
 1869|       |        return it;
 1870|       |    }
 1871|   301k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1888|   379k|{
 1889|   379k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|   379k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|   379k|    auto it = range.begin();
 1893|   379k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|   379k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 379k]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|   379k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 379k, False: 0]
  ------------------
 1902|   379k|        ++it;
 1903|   379k|        return {it, string_type(1, *range.begin())};
 1904|   379k|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|   379k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  1.63M|{
  945|  1.63M|    return is_range_eof(r.begin(), r.end());
  946|  1.63M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  1.63M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.63M|    {
  938|  1.63M|        return begin == end;
  939|  1.63M|    }
  940|  1.63M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1879|   379k|    {
 1880|   379k|        return !codepoint.empty();
 1881|   379k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.25M|{
  951|  1.25M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.83k, False: 1.25M]
  |  |  ------------------
  ------------------
  952|  2.83k|        return eof_error::eof;
  953|  2.83k|    }
  954|  1.25M|    return eof_error::good;
  955|  1.25M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1835|   477k|{
 1836|   477k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 477k]
  |  |  ------------------
  ------------------
 1837|    120|        return unexpected(e);
 1838|    120|    }
 1839|       |
 1840|   477k|    return ranges::next(range.begin());
 1841|   477k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   477k|    {
  296|   477k|        ++x;
  297|   477k|        return x;
  298|   477k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 276, False: 50.0k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    276|            else {
 3481|    276|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 276]
  ------------------
 3482|    276|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    276|            }
 3488|    276|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 52, False: 50.2k]
  ------------------
 3491|     52|            value = T{0};
 3492|     52|            return std::next(prefix_result.iterator);
 3493|     52|        }
 3494|       |
 3495|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.8k, False: 8.38k]
  |  |  ------------------
  ------------------
 3496|  41.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 50, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     50|    }                                                  \
  |  |  |  | 3939|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.7k|                    parse_integer_digits_without_thsep(
 3498|  41.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.7k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.7k|            auto buf = make_contiguous_buffer(
 3502|  41.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.3k, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.3k|    }                                                  \
  |  |  |  | 3939|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    428|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    428|                                        prefix_result.parsed_base));
 3506|       |
 3507|    428|            return ranges::next(
 3508|    428|                prefix_result.iterator,
 3509|    428|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.7k|        }
 3511|       |
 3512|  8.38k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.38k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.38k|#endif
 3518|       |
 3519|  8.38k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.24k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.24k|    }                                                  \
  |  |  |  | 3939|  8.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    138|                parse_integer_digits_with_thsep(
 3521|    138|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    138|                    prefix_result.parsed_base, locale_options));
 3523|    138|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    138|            parse_digits_result;
 3525|       |
 3526|    138|        auto nothsep_source_view =
 3527|    138|            std::basic_string_view<CharT>{nothsep_source};
 3528|    138|        SCN_TRY(
  ------------------
  |  | 3940|    138|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    138|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    138|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 122]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    138|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    122|            nothsep_source_it,
 3530|    122|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    122|                                prefix_result.parsed_base));
 3532|       |
 3533|    122|        return ranges::next(
 3534|    122|            prefix_result.iterator,
 3535|    122|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    122|                ranges::ssize(thsep_indices));
 3537|    138|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3256|   377k|{
 3257|   377k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 377k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3258|   377k|    auto [base_prefix_begin_it, sign] = sign_result;
 3259|       |
 3260|   377k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3261|   377k|        parse_integer_base_prefix(
 3262|   377k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3263|       |
 3264|   377k|    if (parsed_zero) {
  ------------------
  |  Branch (3264:9): [True: 404, False: 376k]
  ------------------
 3265|    404|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3265:13): [True: 96, False: 308]
  ------------------
 3266|    404|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3266:13): [True: 212, False: 96]
  ------------------
 3267|    308|            digits_begin_it = base_prefix_begin_it;
 3268|    308|        }
 3269|     96|        else {
 3270|     96|            parsed_zero = false;
 3271|     96|        }
 3272|    404|    }
 3273|   376k|    else {
 3274|   376k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3274:13): [True: 450, False: 376k]
  ------------------
 3275|   376k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3275:13): [True: 371k, False: 4.82k]
  ------------------
 3276|   371k|            digits_begin_it = base_prefix_begin_it;
 3277|   371k|        }
 3278|   376k|    }
 3279|       |
 3280|   377k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3280:9): [True: 374k, False: 2.27k]
  ------------------
 3281|   374k|        sign = sign_type::plus_sign;
 3282|   374k|    }
 3283|   377k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3284|   377k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3285|   377k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3137|   377k|{
 3138|   377k|    auto r = read_one_of_code_unit(range, "+-");
 3139|   377k|    if (!r) {
  ------------------
  |  Branch (3139:9): [True: 374k, False: 2.27k]
  ------------------
 3140|   374k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3140:13): [True: 374k, False: 0]
  ------------------
 3141|   374k|            return std::pair{range.begin(), sign_type::default_sign};
 3142|   374k|        }
 3143|      0|        return unexpected(eof_error::eof);
 3144|   374k|    }
 3145|       |
 3146|  2.27k|    auto& it = *r;
 3147|  2.27k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3147:9): [True: 2.05k, False: 217]
  ------------------
 3148|  2.05k|        return std::pair{it, sign_type::minus_sign};
 3149|  2.05k|    }
 3150|    217|    return std::pair{it, sign_type::plus_sign};
 3151|  2.27k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2262|   377k|{
 2263|   377k|    auto it = read_code_unit(range);
 2264|   377k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 2265|      0|        return unexpected(make_eof_parse_error(it.error()));
 2266|      0|    }
 2267|       |
 2268|   754k|    for (auto ch : str) {
  ------------------
  |  Branch (2268:18): [True: 754k, False: 374k]
  ------------------
 2269|   754k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2269:13): [True: 2.27k, False: 751k]
  ------------------
 2270|  2.27k|            return *it;
 2271|  2.27k|        }
 2272|   754k|    }
 2273|       |
 2274|   374k|    return unexpected(parse_error::error);
 2275|   377k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3223|   377k|{
 3224|   377k|    switch (base) {
 3225|  50.0k|        case 2:
  ------------------
  |  Branch (3225:9): [True: 50.0k, False: 327k]
  ------------------
 3226|       |            // allow 0b/0B
 3227|  50.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3228|  50.0k|                    false};
 3229|       |
 3230|  50.1k|        case 8: {
  ------------------
  |  Branch (3230:9): [True: 50.1k, False: 326k]
  ------------------
 3231|       |            // allow 0o/0O/0
 3232|  50.1k|            bool zero_parsed = false;
 3233|  50.1k|            auto it = apply_opt(
 3234|  50.1k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3235|  50.1k|            return {it, 8, zero_parsed};
 3236|      0|        }
 3237|       |
 3238|  50.3k|        case 16:
  ------------------
  |  Branch (3238:9): [True: 50.3k, False: 326k]
  ------------------
 3239|       |            // allow 0x/0X
 3240|  50.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3241|  50.3k|                    false};
 3242|       |
 3243|  50.3k|        case 0:
  ------------------
  |  Branch (3243:9): [True: 50.3k, False: 326k]
  ------------------
 3244|       |            // detect base
 3245|  50.3k|            return parse_integer_base_prefix_for_detection(range);
 3246|       |
 3247|   176k|        default:
  ------------------
  |  Branch (3247:9): [True: 176k, False: 200k]
  ------------------
 3248|       |            // no base prefix allowed
 3249|   176k|            return {range.begin(), base, false};
 3250|   377k|    }
 3251|   377k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2281|   150k|{
 2282|   150k|    if (!result) {
  ------------------
  |  Branch (2282:9): [True: 150k, False: 192]
  ------------------
 2283|   150k|        return range.begin();
 2284|   150k|    }
 2285|    192|    return *result;
 2286|   150k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3174|   100k|{
 3175|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3176|   100k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2221|   301k|{
 2222|   301k|    using char_type = detail::char_t<Range>;
 2223|       |
 2224|       |    if constexpr (ranges::contiguous_range<Range> &&
 2225|       |                  std::is_same_v<char_type, char>) {
 2226|       |        if (range.size() < str.size()) {
 2227|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2228|       |        }
 2229|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2230|       |            return unexpected(parse_error::error);
 2231|       |        }
 2232|       |        return ranges::next(range.begin(), str.size());
 2233|       |    }
 2234|   301k|    else {
 2235|   301k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|   301k|            if (ch < 'A' || ch > 'Z') {
 2237|   301k|                return ch;
 2238|   301k|            }
 2239|   301k|            return static_cast<char_type>(ch +
 2240|   301k|                                          static_cast<char_type>('a' - 'A'));
 2241|   301k|        };
 2242|       |
 2243|   301k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.1k, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.1k|    }                                                  \
  |  |  |  | 3939|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2244|   270k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2245|   270k|                        .transform_error(make_eof_parse_error));
 2246|       |
 2247|   270k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 270k, False: 0]
  |  |  ------------------
  ------------------
 2248|   270k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2249|   270k|                    return ascii_tolower(a) ==
 2250|   270k|                           static_cast<detail::char_t<Range>>(b);
 2251|   270k|                }))) {
 2252|   270k|            return unexpected(parse_error::error);
 2253|   270k|        }
 2254|       |
 2255|      0|        return it;
 2256|   270k|    }
 2257|   301k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2235|   271k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2236|   271k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2236:17): [True: 160k, False: 110k]
  |  Branch (2236:29): [True: 110k, False: 432]
  ------------------
 2237|   271k|                return ch;
 2238|   271k|            }
 2239|    432|            return static_cast<char_type>(ch +
 2240|    432|                                          static_cast<char_type>('a' - 'A'));
 2241|   271k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3188|   100k|{
 3189|   100k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3189:14): [True: 0, False: 100k]
  ------------------
 3190|      0|        return *r;
 3191|      0|    }
 3192|       |
 3193|   100k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3193:14): [True: 404, False: 100k]
  ------------------
 3194|    404|        zero_parsed = true;
 3195|    404|        return *r;
 3196|    404|    }
 3197|       |
 3198|   100k|    return unexpected(parse_error::error);
 3199|   100k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2136|   100k|{
 2137|   100k|    auto it = read_code_unit(range);
 2138|   100k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 120, False: 100k]
  |  |  ------------------
  ------------------
 2139|    120|        return unexpected(make_eof_parse_error(it.error()));
 2140|    120|    }
 2141|       |
 2142|   100k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 100k, False: 404]
  |  |  ------------------
  ------------------
 2143|   100k|                     static_cast<detail::char_t<Range>>(ch))) {
 2144|   100k|        return unexpected(parse_error::error);
 2145|   100k|    }
 2146|       |
 2147|    404|    return *it;
 2148|   100k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3181|   100k|{
 3182|   100k|    return read_matching_string_classic_nocase(range, "0x");
 3183|   100k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3204|  50.3k|{
 3205|  50.3k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3205:14): [True: 0, False: 50.3k]
  ------------------
 3206|      0|        return {*r, 16, false};
 3207|      0|    }
 3208|  50.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3208:14): [True: 0, False: 50.3k]
  ------------------
 3209|      0|        return {*r, 2, false};
 3210|      0|    }
 3211|  50.3k|    {
 3212|  50.3k|        bool zero_parsed{false};
 3213|  50.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3213:18): [True: 212, False: 50.1k]
  ------------------
 3214|    212|            return {*r, 8, zero_parsed};
 3215|    212|        }
 3216|  50.3k|    }
 3217|  50.1k|    return {range.begin(), 10, false};
 3218|  50.3k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3290|   325k|{
 3291|   325k|    using char_type = detail::char_t<Range>;
 3292|       |
 3293|   325k|    if constexpr (ranges::contiguous_range<Range>) {
 3294|   325k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 234, False: 325k]
  |  |  ------------------
  ------------------
 3295|    234|            return detail::unexpected_scan_error(
 3296|    234|                scan_error::invalid_scanned_value,
 3297|    234|                "Failed to parse integer: No digits found");
 3298|    234|        }
 3299|   325k|        return range.end();
 3300|       |    }
 3301|       |    else {
 3302|       |        return read_while1_code_unit(range,
 3303|       |                                     [&](char_type ch) noexcept {
 3304|       |                                         return char_to_int(ch) < base;
 3305|       |                                     })
 3306|       |            .transform_error(map_parse_error_to_scan_error(
 3307|       |                scan_error::invalid_scanned_value,
 3308|       |                "Failed to parse integer: No digits found"));
 3309|       |    }
 3310|   325k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3320|  50.1k|{
 3321|  50.1k|    std::basic_string<CharT> output;
 3322|  50.1k|    std::string thsep_indices;
 3323|  50.1k|    auto it = range.begin();
 3324|  50.1k|    bool digit_matched = false;
 3325|   102M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3325:12): [True: 102M, False: 420]
  ------------------
 3326|   102M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3326:13): [True: 102M, False: 52.3k]
  ------------------
 3327|   102M|            thsep_indices.push_back(
 3328|   102M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3329|   102M|        }
 3330|  52.3k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3330:18): [True: 49.7k, False: 2.65k]
  ------------------
 3331|  49.7k|            break;
 3332|  49.7k|        }
 3333|  2.65k|        else {
 3334|  2.65k|            output.push_back(*it);
 3335|  2.65k|            digit_matched = true;
 3336|  2.65k|        }
 3337|   102M|    }
 3338|  50.1k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 49.3k, False: 760]
  |  |  ------------------
  ------------------
 3339|  49.3k|        return detail::unexpected_scan_error(
 3340|  49.3k|            scan_error::invalid_scanned_value,
 3341|  49.3k|            "Failed to parse integer: No digits found");
 3342|  49.3k|    }
 3343|    760|    return std::tuple{it, output, thsep_indices};
 3344|  50.1k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1672|   325k|{
 1673|       |    if constexpr (ranges::borrowed_range<Range> &&
 1674|       |                  ranges::contiguous_range<Range> &&
 1675|   325k|                  ranges::sized_range<Range>) {
 1676|   325k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|       |    }
 1678|       |    else {
 1679|       |        return contiguous_range_factory{SCN_FWD(range)};
 1680|       |    }
 1681|   325k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1478|   325k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1479|   325k|    {
 1480|   325k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1492|   328k|    {
 1493|   328k|        return sv;
 1494|   328k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2945|   379k|{
 2946|   379k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 379k, False: 0]
  ------------------
 2947|   379k|        auto it = read_while_classic_space(range);
 2948|   379k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   379k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 377k]
  |  |  ------------------
  ------------------
 2950|  2.23k|            return unexpected(e);
 2951|  2.23k|        }
 2952|       |
 2953|   377k|        return it;
 2954|   379k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   379k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2106|   379k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|   379k|    else {
 2116|   379k|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|   379k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   379k|            return detail::is_cp_space(cp);
 2129|   379k|        });
 2130|   379k|    }
 2131|   379k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2071|   379k|{
 2072|   379k|    return read_until_code_point(range, std::not_fn(pred));
 2073|   379k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2050|   379k|{
 2051|   379k|    auto it = range.begin();
 2052|   381k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 379k, False: 2.23k]
  ------------------
 2053|   379k|        const auto val =
 2054|   379k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|   379k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 379k, False: 0]
  |  |  ------------------
  ------------------
 2056|   379k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|   379k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|   379k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 377k, False: 2.53k]
  ------------------
 2059|   377k|                return it;
 2060|   377k|            }
 2061|   379k|        }
 2062|  2.53k|        it = val.iterator;
 2063|  2.53k|    }
 2064|       |
 2065|  2.23k|    return it;
 2066|   379k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   379k|        : m_fptr([](storage fn,
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|   379k|              if constexpr (std::is_void_v<R>) {
  746|   379k|                  obj(static_cast<decltype(args)>(args)...);
  747|   379k|              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
  752|   379k|          m_storage(std::addressof(f))
  753|   379k|    {
  754|   379k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   379k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   379k|        else if constexpr (std::is_object_v<T>) {
  688|   379k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   379k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2127|   379k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   379k|            return detail::is_cp_space(cp);
 2129|   379k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   379k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   379k|        {
  662|   379k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   273k|    {
  304|   273k|        ranges::advance(x, n);
  305|   273k|        return x;
  306|   273k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   273k|    {
  268|   273k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   273k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   273k|    {
  181|   823k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 549k, False: 273k]
  ------------------
  182|   549k|            ++i;
  183|   549k|        }
  184|   273k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.5k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.5k|            auto rd = make_reader<T, char_type>();
 6116|  50.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.5k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.5k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.5k|                return impl(rd, range, value);
 6121|  50.5k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.5k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3035|   607k|    {
 3036|   607k|        reader_error_handler eh{};
 3037|   607k|        get_derived().check_specs_impl(specs, eh);
 3038|   607k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
 3039|      0|            return detail::unexpected_scan_error(
 3040|      0|                scan_error::invalid_format_string, eh.m_msg);
 3041|      0|        }
 3042|   607k|        return {};
 3043|   607k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3047|   607k|    {
 3048|   607k|        return static_cast<Derived&>(*this);
 3049|   607k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3415|   607k|    {
 3416|   607k|        detail::check_int_type_specs(specs, eh);
 3417|   607k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.5k|    {
 6041|  50.5k|        const bool need_skipped_width =
 6042|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.5k]
  |  Branch (6042:33): [True: 0, False: 50.5k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.5k|        auto it = rng.begin();
 6046|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.5k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.5k|        else {
 6055|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 350, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    350|    }                                                  \
  |  |  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 516]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    516|                                             specs, value, loc));
 6080|       |
 6081|    516|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 516]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    516|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    516|        std::ptrdiff_t postfix_width = 0;
 6090|    516|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 330, False: 186]
  ------------------
 6091|    330|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    330|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    330|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    330|                                 value_width));
 6095|    330|            std::tie(it, postfix_width) = postfix_result;
 6096|    330|        }
 6097|       |
 6098|    516|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    516|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 516]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    516|            specs, prefix_width, value_width, postfix_width));
 6100|    516|        return it;
 6101|    516|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3030|   763k|    {
 3031|   763k|        return true;
 3032|   763k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 266, False: 49.9k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    266|            else {
 3481|    266|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 266]
  ------------------
 3482|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    266|            }
 3488|    266|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 50, False: 50.1k]
  ------------------
 3491|     50|            value = T{0};
 3492|     50|            return std::next(prefix_result.iterator);
 3493|     50|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.7k, False: 8.36k]
  |  |  ------------------
  ------------------
 3496|  41.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.3k, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.3k|    }                                                  \
  |  |  |  | 3939|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    472|                    parse_integer_digits_without_thsep(
 3498|    472|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    472|                        prefix_result.parsed_base));
 3500|       |
 3501|    472|            auto buf = make_contiguous_buffer(
 3502|    472|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    472|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 108, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    108|    }                                                  \
  |  |  |  | 3939|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    364|                                        prefix_result.parsed_base));
 3506|       |
 3507|    364|            return ranges::next(
 3508|    364|                prefix_result.iterator,
 3509|    364|                ranges::distance(buf.view().begin(), result_it));
 3510|    472|        }
 3511|       |
 3512|  8.36k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.36k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.36k|#endif
 3518|       |
 3519|  8.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.23k, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.23k|    }                                                  \
  |  |  |  | 3939|  8.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    134|                parse_integer_digits_with_thsep(
 3521|    134|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    134|                    prefix_result.parsed_base, locale_options));
 3523|    134|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    134|            parse_digits_result;
 3525|       |
 3526|    134|        auto nothsep_source_view =
 3527|    134|            std::basic_string_view<CharT>{nothsep_source};
 3528|    134|        SCN_TRY(
  ------------------
  |  | 3940|    134|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    134|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    134|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    134|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    102|            nothsep_source_it,
 3530|    102|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    102|                                prefix_result.parsed_base));
 3532|       |
 3533|    102|        return ranges::next(
 3534|    102|            prefix_result.iterator,
 3535|    102|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    102|                ranges::ssize(thsep_indices));
 3537|    134|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 266, False: 49.9k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    266|            else {
 3481|    266|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 266]
  ------------------
 3482|    266|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    266|            }
 3488|    266|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 50, False: 50.1k]
  ------------------
 3491|     50|            value = T{0};
 3492|     50|            return std::next(prefix_result.iterator);
 3493|     50|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.7k, False: 8.36k]
  |  |  ------------------
  ------------------
 3496|  41.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 50, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     50|    }                                                  \
  |  |  |  | 3939|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.7k|                    parse_integer_digits_without_thsep(
 3498|  41.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.7k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.7k|            auto buf = make_contiguous_buffer(
 3502|  41.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.3k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.3k|    }                                                  \
  |  |  |  | 3939|  41.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    364|                                        prefix_result.parsed_base));
 3506|       |
 3507|    364|            return ranges::next(
 3508|    364|                prefix_result.iterator,
 3509|    364|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.7k|        }
 3511|       |
 3512|  8.36k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.36k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.36k|#endif
 3518|       |
 3519|  8.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.23k, False: 134]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.23k|    }                                                  \
  |  |  |  | 3939|  8.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    134|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    134|                parse_integer_digits_with_thsep(
 3521|    134|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    134|                    prefix_result.parsed_base, locale_options));
 3523|    134|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    134|            parse_digits_result;
 3525|       |
 3526|    134|        auto nothsep_source_view =
 3527|    134|            std::basic_string_view<CharT>{nothsep_source};
 3528|    134|        SCN_TRY(
  ------------------
  |  | 3940|    134|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    134|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    134|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     32|    }                                                  \
  |  |  |  | 3939|    134|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    102|            nothsep_source_it,
 3530|    102|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    102|                                prefix_result.parsed_base));
 3532|       |
 3533|    102|        return ranges::next(
 3534|    102|            prefix_result.iterator,
 3535|    102|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    102|                ranges::ssize(thsep_indices));
 3537|    134|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.6k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.6k|            auto rd = make_reader<T, char_type>();
 6116|  50.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.6k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.6k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.6k|                return impl(rd, range, value);
 6121|  50.6k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.6k|    {
 6041|  50.6k|        const bool need_skipped_width =
 6042|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.6k]
  |  Branch (6042:33): [True: 0, False: 50.6k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.6k|        auto it = rng.begin();
 6046|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.6k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.6k|        else {
 6055|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 362, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    362|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 602]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    602|                                             specs, value, loc));
 6080|       |
 6081|    602|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 602]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    602|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    602|        std::ptrdiff_t postfix_width = 0;
 6090|    602|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 404, False: 198]
  ------------------
 6091|    404|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    404|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    404|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    404|                                 value_width));
 6095|    404|            std::tie(it, postfix_width) = postfix_result;
 6096|    404|        }
 6097|       |
 6098|    602|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    602|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 602]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    602|            specs, prefix_width, value_width, postfix_width));
 6100|    602|        return it;
 6101|    602|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.7k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.7k|            auto rd = make_reader<T, char_type>();
 6116|  50.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.7k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.7k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.7k|                return impl(rd, range, value);
 6121|  50.7k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.7k|    {
 6041|  50.7k|        const bool need_skipped_width =
 6042|  50.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.7k]
  |  Branch (6042:33): [True: 0, False: 50.7k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.7k|        auto it = rng.begin();
 6046|  50.7k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.7k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.7k|        else {
 6055|  50.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 362, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    362|    }                                                  \
  |  |  |  | 3939|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.3k|        }
 6058|  50.3k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.3k|        std::ptrdiff_t value_width = 0;
 6062|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.3k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.3k|        else {
 6078|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 710]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    710|                                             specs, value, loc));
 6080|       |
 6081|    710|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 710]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    710|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    710|        std::ptrdiff_t postfix_width = 0;
 6090|    710|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 512, False: 198]
  ------------------
 6091|    512|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    512|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    512|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    512|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    512|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 512]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    512|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    512|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    512|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    512|                                 value_width));
 6095|    512|            std::tie(it, postfix_width) = postfix_result;
 6096|    512|        }
 6097|       |
 6098|    710|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    710|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 710]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    710|            specs, prefix_width, value_width, postfix_width));
 6100|    710|        return it;
 6101|    710|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.3k|    {
 3470|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.3k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 292, False: 50.0k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    292|            else {
 3481|    292|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 292]
  ------------------
 3482|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    292|            }
 3488|    292|        }
 3489|       |
 3490|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 58, False: 50.3k]
  ------------------
 3491|     58|            value = T{0};
 3492|     58|            return std::next(prefix_result.iterator);
 3493|     58|        }
 3494|       |
 3495|  50.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.9k, False: 8.41k]
  |  |  ------------------
  ------------------
 3496|  41.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.4k, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.4k|    }                                                  \
  |  |  |  | 3939|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    514|                    parse_integer_digits_without_thsep(
 3498|    514|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    514|                        prefix_result.parsed_base));
 3500|       |
 3501|    514|            auto buf = make_contiguous_buffer(
 3502|    514|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    514|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     14|    }                                                  \
  |  |  |  | 3939|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    500|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    500|                                        prefix_result.parsed_base));
 3506|       |
 3507|    500|            return ranges::next(
 3508|    500|                prefix_result.iterator,
 3509|    500|                ranges::distance(buf.view().begin(), result_it));
 3510|    514|        }
 3511|       |
 3512|  8.41k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.41k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.41k|#endif
 3518|       |
 3519|  8.41k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.26k, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.26k|    }                                                  \
  |  |  |  | 3939|  8.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    152|                parse_integer_digits_with_thsep(
 3521|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    152|                    prefix_result.parsed_base, locale_options));
 3523|    152|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    152|            parse_digits_result;
 3525|       |
 3526|    152|        auto nothsep_source_view =
 3527|    152|            std::basic_string_view<CharT>{nothsep_source};
 3528|    152|        SCN_TRY(
  ------------------
  |  | 3940|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    152|            nothsep_source_it,
 3530|    152|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    152|                                prefix_result.parsed_base));
 3532|       |
 3533|    152|        return ranges::next(
 3534|    152|            prefix_result.iterator,
 3535|    152|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    152|                ranges::ssize(thsep_indices));
 3537|    152|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.3k|    {
 3470|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.3k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 292, False: 50.0k]
  ------------------
 3474|       |            if constexpr (!std::is_signed_v<T>) {
 3475|       |                return detail::unexpected_scan_error(
 3476|       |                    scan_error::invalid_scanned_value,
 3477|       |                    "Unexpected '-' sign when parsing an "
 3478|       |                    "unsigned value");
 3479|       |            }
 3480|    292|            else {
 3481|    292|                if (specs.type ==
  ------------------
  |  Branch (3481:21): [True: 0, False: 292]
  ------------------
 3482|    292|                    detail::presentation_type::int_unsigned_decimal) {
 3483|      0|                    return detail::unexpected_scan_error(
 3484|      0|                        scan_error::invalid_scanned_value,
 3485|      0|                        "'u'-option disallows negative values");
 3486|      0|                }
 3487|    292|            }
 3488|    292|        }
 3489|       |
 3490|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 58, False: 50.3k]
  ------------------
 3491|     58|            value = T{0};
 3492|     58|            return std::next(prefix_result.iterator);
 3493|     58|        }
 3494|       |
 3495|  50.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.9k, False: 8.41k]
  |  |  ------------------
  ------------------
 3496|  41.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 50, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     50|    }                                                  \
  |  |  |  | 3939|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.8k|                    parse_integer_digits_without_thsep(
 3498|  41.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.8k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.8k|            auto buf = make_contiguous_buffer(
 3502|  41.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.3k, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.3k|    }                                                  \
  |  |  |  | 3939|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    500|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    500|                                        prefix_result.parsed_base));
 3506|       |
 3507|    500|            return ranges::next(
 3508|    500|                prefix_result.iterator,
 3509|    500|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.8k|        }
 3511|       |
 3512|  8.41k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.41k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.41k|#endif
 3518|       |
 3519|  8.41k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.26k, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.26k|    }                                                  \
  |  |  |  | 3939|  8.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    152|                parse_integer_digits_with_thsep(
 3521|    152|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    152|                    prefix_result.parsed_base, locale_options));
 3523|    152|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    152|            parse_digits_result;
 3525|       |
 3526|    152|        auto nothsep_source_view =
 3527|    152|            std::basic_string_view<CharT>{nothsep_source};
 3528|    152|        SCN_TRY(
  ------------------
  |  | 3940|    152|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    152|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    152|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 152]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    152|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    152|            nothsep_source_it,
 3530|    152|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    152|                                prefix_result.parsed_base));
 3532|       |
 3533|    152|        return ranges::next(
 3534|    152|            prefix_result.iterator,
 3535|    152|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    152|                ranges::ssize(thsep_indices));
 3537|    152|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.4k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.4k|            auto rd = make_reader<T, char_type>();
 6116|  50.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.4k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.4k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.4k|                return impl(rd, range, value);
 6121|  50.4k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.4k|    {
 6041|  50.4k|        const bool need_skipped_width =
 6042|  50.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.4k]
  |  Branch (6042:33): [True: 0, False: 50.4k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.4k|        auto it = rng.begin();
 6046|  50.4k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.4k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.4k|        else {
 6055|  50.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.1k|        }
 6058|  50.1k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.1k|        std::ptrdiff_t value_width = 0;
 6062|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.1k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.1k|        else {
 6078|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 446]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    446|                                             specs, value, loc));
 6080|       |
 6081|    446|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 446]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    446|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    446|        std::ptrdiff_t postfix_width = 0;
 6090|    446|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 302, False: 144]
  ------------------
 6091|    302|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    302|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    302|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    302|                                 value_width));
 6095|    302|            std::tie(it, postfix_width) = postfix_result;
 6096|    302|        }
 6097|       |
 6098|    446|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    446|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 446]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    446|            specs, prefix_width, value_width, postfix_width));
 6100|    446|        return it;
 6101|    446|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.1k|    {
 3470|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.1k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 260, False: 49.9k]
  ------------------
 3474|    260|            if constexpr (!std::is_signed_v<T>) {
 3475|    260|                return detail::unexpected_scan_error(
 3476|    260|                    scan_error::invalid_scanned_value,
 3477|    260|                    "Unexpected '-' sign when parsing an "
 3478|    260|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    260|        }
 3489|       |
 3490|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.1k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.5k, False: 8.57k]
  |  |  ------------------
  ------------------
 3496|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.1k, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.1k|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    398|                    parse_integer_digits_without_thsep(
 3498|    398|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    398|                        prefix_result.parsed_base));
 3500|       |
 3501|    398|            auto buf = make_contiguous_buffer(
 3502|    398|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    398|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 82, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     82|    }                                                  \
  |  |  |  | 3939|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    316|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    316|                                        prefix_result.parsed_base));
 3506|       |
 3507|    316|            return ranges::next(
 3508|    316|                prefix_result.iterator,
 3509|    316|                ranges::distance(buf.view().begin(), result_it));
 3510|    398|        }
 3511|       |
 3512|  8.57k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.57k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.57k|#endif
 3518|       |
 3519|  8.57k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.20k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.20k|    }                                                  \
  |  |  |  | 3939|  8.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    368|                parse_integer_digits_with_thsep(
 3521|    368|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    368|                    prefix_result.parsed_base, locale_options));
 3523|    368|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    368|            parse_digits_result;
 3525|       |
 3526|    368|        auto nothsep_source_view =
 3527|    368|            std::basic_string_view<CharT>{nothsep_source};
 3528|    368|        SCN_TRY(
  ------------------
  |  | 3940|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 26, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     26|    }                                                  \
  |  |  |  | 3939|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    342|            nothsep_source_it,
 3530|    342|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    342|                                prefix_result.parsed_base));
 3532|       |
 3533|    342|        return ranges::next(
 3534|    342|            prefix_result.iterator,
 3535|    342|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    342|                ranges::ssize(thsep_indices));
 3537|    368|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.1k|    {
 3470|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.1k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 260, False: 49.9k]
  ------------------
 3474|    260|            if constexpr (!std::is_signed_v<T>) {
 3475|    260|                return detail::unexpected_scan_error(
 3476|    260|                    scan_error::invalid_scanned_value,
 3477|    260|                    "Unexpected '-' sign when parsing an "
 3478|    260|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    260|        }
 3489|       |
 3490|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.1k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.5k, False: 8.57k]
  |  |  ------------------
  ------------------
 3496|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.5k|                    parse_integer_digits_without_thsep(
 3498|  41.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.5k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.5k|            auto buf = make_contiguous_buffer(
 3502|  41.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.2k, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.2k|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    316|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    316|                                        prefix_result.parsed_base));
 3506|       |
 3507|    316|            return ranges::next(
 3508|    316|                prefix_result.iterator,
 3509|    316|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.5k|        }
 3511|       |
 3512|  8.57k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.57k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.57k|#endif
 3518|       |
 3519|  8.57k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.20k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.20k|    }                                                  \
  |  |  |  | 3939|  8.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    368|                parse_integer_digits_with_thsep(
 3521|    368|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    368|                    prefix_result.parsed_base, locale_options));
 3523|    368|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    368|            parse_digits_result;
 3525|       |
 3526|    368|        auto nothsep_source_view =
 3527|    368|            std::basic_string_view<CharT>{nothsep_source};
 3528|    368|        SCN_TRY(
  ------------------
  |  | 3940|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 26, False: 342]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     26|    }                                                  \
  |  |  |  | 3939|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    342|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    342|            nothsep_source_it,
 3530|    342|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    342|                                prefix_result.parsed_base));
 3532|       |
 3533|    342|        return ranges::next(
 3534|    342|            prefix_result.iterator,
 3535|    342|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    342|                ranges::ssize(thsep_indices));
 3537|    368|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.5k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.5k|            auto rd = make_reader<T, char_type>();
 6116|  50.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.5k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.5k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.5k|                return impl(rd, range, value);
 6121|  50.5k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.5k|    {
 6041|  50.5k|        const bool need_skipped_width =
 6042|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.5k]
  |  Branch (6042:33): [True: 0, False: 50.5k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.5k|        auto it = rng.begin();
 6046|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.5k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.5k|        else {
 6055|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    492|                                             specs, value, loc));
 6080|       |
 6081|    492|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 492]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    492|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    492|        std::ptrdiff_t postfix_width = 0;
 6090|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 348, False: 144]
  ------------------
 6091|    348|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    348|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    348|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    348|                                 value_width));
 6095|    348|            std::tie(it, postfix_width) = postfix_result;
 6096|    348|        }
 6097|       |
 6098|    492|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    492|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    492|            specs, prefix_width, value_width, postfix_width));
 6100|    492|        return it;
 6101|    492|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 260, False: 49.9k]
  ------------------
 3474|    260|            if constexpr (!std::is_signed_v<T>) {
 3475|    260|                return detail::unexpected_scan_error(
 3476|    260|                    scan_error::invalid_scanned_value,
 3477|    260|                    "Unexpected '-' sign when parsing an "
 3478|    260|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    260|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.1k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.5k, False: 8.58k]
  |  |  ------------------
  ------------------
 3496|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.1k, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.1k|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    404|                    parse_integer_digits_without_thsep(
 3498|    404|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    404|                        prefix_result.parsed_base));
 3500|       |
 3501|    404|            auto buf = make_contiguous_buffer(
 3502|    404|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    404|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     54|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     54|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     54|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     54|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     54|    }                                                  \
  |  |  |  | 3939|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    350|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    350|                                        prefix_result.parsed_base));
 3506|       |
 3507|    350|            return ranges::next(
 3508|    350|                prefix_result.iterator,
 3509|    350|                ranges::distance(buf.view().begin(), result_it));
 3510|    404|        }
 3511|       |
 3512|  8.58k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.58k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.58k|#endif
 3518|       |
 3519|  8.58k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.21k, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.21k|    }                                                  \
  |  |  |  | 3939|  8.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    370|                parse_integer_digits_with_thsep(
 3521|    370|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    370|                    prefix_result.parsed_base, locale_options));
 3523|    370|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    370|            parse_digits_result;
 3525|       |
 3526|    370|        auto nothsep_source_view =
 3527|    370|            std::basic_string_view<CharT>{nothsep_source};
 3528|    370|        SCN_TRY(
  ------------------
  |  | 3940|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    354|            nothsep_source_it,
 3530|    354|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    354|                                prefix_result.parsed_base));
 3532|       |
 3533|    354|        return ranges::next(
 3534|    354|            prefix_result.iterator,
 3535|    354|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    354|                ranges::ssize(thsep_indices));
 3537|    370|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.2k|    {
 3470|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.2k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 260, False: 49.9k]
  ------------------
 3474|    260|            if constexpr (!std::is_signed_v<T>) {
 3475|    260|                return detail::unexpected_scan_error(
 3476|    260|                    scan_error::invalid_scanned_value,
 3477|    260|                    "Unexpected '-' sign when parsing an "
 3478|    260|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    260|        }
 3489|       |
 3490|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.1k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.5k, False: 8.58k]
  |  |  ------------------
  ------------------
 3496|  41.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.5k|                    parse_integer_digits_without_thsep(
 3498|  41.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.5k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.5k|            auto buf = make_contiguous_buffer(
 3502|  41.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.2k, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.2k|    }                                                  \
  |  |  |  | 3939|  41.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    350|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    350|                                        prefix_result.parsed_base));
 3506|       |
 3507|    350|            return ranges::next(
 3508|    350|                prefix_result.iterator,
 3509|    350|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.5k|        }
 3511|       |
 3512|  8.58k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.58k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.58k|#endif
 3518|       |
 3519|  8.58k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.21k, False: 370]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.21k|    }                                                  \
  |  |  |  | 3939|  8.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    370|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    370|                parse_integer_digits_with_thsep(
 3521|    370|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    370|                    prefix_result.parsed_base, locale_options));
 3523|    370|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    370|            parse_digits_result;
 3525|       |
 3526|    370|        auto nothsep_source_view =
 3527|    370|            std::basic_string_view<CharT>{nothsep_source};
 3528|    370|        SCN_TRY(
  ------------------
  |  | 3940|    370|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    370|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    370|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    370|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     16|    }                                                  \
  |  |  |  | 3939|    370|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    354|            nothsep_source_it,
 3530|    354|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    354|                                prefix_result.parsed_base));
 3532|       |
 3533|    354|        return ranges::next(
 3534|    354|            prefix_result.iterator,
 3535|    354|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    354|                ranges::ssize(thsep_indices));
 3537|    370|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6105|  50.6k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|       |                          basic_contiguous_scan_context<char_type>>) {
 6110|       |            auto rd = make_reader<T, char_type>();
 6111|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6112|       |            return impl(rd, range, value);
 6113|       |        }
 6114|  50.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6115|  50.6k|            auto rd = make_reader<T, char_type>();
 6116|  50.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6117|       |
 6118|  50.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6118:17): [True: 50.6k, False: 0]
  |  Branch (6118:50): [True: 0, False: 0]
  ------------------
 6119|  50.6k|                specs.width != 0) {
  ------------------
  |  Branch (6119:17): [True: 0, False: 0]
  ------------------
 6120|  50.6k|                return impl(rd, range, value);
 6121|  50.6k|            }
 6122|       |
 6123|      0|            auto crange = get_as_contiguous(range);
 6124|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|      0|            return ranges::next(range.begin(),
 6126|      0|                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6040|  50.6k|    {
 6041|  50.6k|        const bool need_skipped_width =
 6042|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.6k]
  |  Branch (6042:33): [True: 0, False: 50.6k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.6k|        auto it = rng.begin();
 6046|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.6k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.6k|        else {
 6055|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.3k|        }
 6058|  50.3k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.3k|        std::ptrdiff_t value_width = 0;
 6062|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.3k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.3k|        else {
 6078|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 586]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    586|                                             specs, value, loc));
 6080|       |
 6081|    586|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 586]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    586|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    586|        std::ptrdiff_t postfix_width = 0;
 6090|    586|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 442, False: 144]
  ------------------
 6091|    442|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    442|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    442|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    442|                                 value_width));
 6095|    442|            std::tie(it, postfix_width) = postfix_result;
 6096|    442|        }
 6097|       |
 6098|    586|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    586|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    586|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 586]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    586|            specs, prefix_width, value_width, postfix_width));
 6100|    586|        return it;
 6101|    586|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3469|  50.3k|    {
 3470|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.3k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 276, False: 50.0k]
  ------------------
 3474|    276|            if constexpr (!std::is_signed_v<T>) {
 3475|    276|                return detail::unexpected_scan_error(
 3476|    276|                    scan_error::invalid_scanned_value,
 3477|    276|                    "Unexpected '-' sign when parsing an "
 3478|    276|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    276|        }
 3489|       |
 3490|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.2k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.6k, False: 8.62k]
  |  |  ------------------
  ------------------
 3496|  41.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.2k, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.2k|    }                                                  \
  |  |  |  | 3939|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|    426|                    parse_integer_digits_without_thsep(
 3498|    426|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|    426|                        prefix_result.parsed_base));
 3500|       |
 3501|    426|            auto buf = make_contiguous_buffer(
 3502|    426|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|    426|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    426|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    426|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    426|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 6, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      6|    }                                                  \
  |  |  |  | 3939|    426|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    420|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    420|                                        prefix_result.parsed_base));
 3506|       |
 3507|    420|            return ranges::next(
 3508|    420|                prefix_result.iterator,
 3509|    420|                ranges::distance(buf.view().begin(), result_it));
 3510|    426|        }
 3511|       |
 3512|  8.62k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.62k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.62k|#endif
 3518|       |
 3519|  8.62k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.22k, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.22k|    }                                                  \
  |  |  |  | 3939|  8.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    394|                parse_integer_digits_with_thsep(
 3521|    394|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    394|                    prefix_result.parsed_base, locale_options));
 3523|    394|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    394|            parse_digits_result;
 3525|       |
 3526|    394|        auto nothsep_source_view =
 3527|    394|            std::basic_string_view<CharT>{nothsep_source};
 3528|    394|        SCN_TRY(
  ------------------
  |  | 3940|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    394|            nothsep_source_it,
 3530|    394|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    394|                                prefix_result.parsed_base));
 3532|       |
 3533|    394|        return ranges::next(
 3534|    394|            prefix_result.iterator,
 3535|    394|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    394|                ranges::ssize(thsep_indices));
 3537|    394|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3469|  50.3k|    {
 3470|  50.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3471|  50.3k|                                   .transform_error(make_eof_scan_error));
 3472|       |
 3473|  50.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3473:13): [True: 276, False: 50.0k]
  ------------------
 3474|    276|            if constexpr (!std::is_signed_v<T>) {
 3475|    276|                return detail::unexpected_scan_error(
 3476|    276|                    scan_error::invalid_scanned_value,
 3477|    276|                    "Unexpected '-' sign when parsing an "
 3478|    276|                    "unsigned value");
 3479|       |            }
 3480|       |            else {
 3481|       |                if (specs.type ==
 3482|       |                    detail::presentation_type::int_unsigned_decimal) {
 3483|       |                    return detail::unexpected_scan_error(
 3484|       |                        scan_error::invalid_scanned_value,
 3485|       |                        "'u'-option disallows negative values");
 3486|       |                }
 3487|       |            }
 3488|    276|        }
 3489|       |
 3490|  50.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3490:13): [True: 48, False: 50.2k]
  ------------------
 3491|     48|            value = T{0};
 3492|     48|            return std::next(prefix_result.iterator);
 3493|     48|        }
 3494|       |
 3495|  50.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  50.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 41.6k, False: 8.62k]
  |  |  ------------------
  ------------------
 3496|  41.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3497|  41.6k|                    parse_integer_digits_without_thsep(
 3498|  41.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3499|  41.6k|                        prefix_result.parsed_base));
 3500|       |
 3501|  41.6k|            auto buf = make_contiguous_buffer(
 3502|  41.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3503|  41.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  41.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  41.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  41.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  41.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.2k, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.2k|    }                                                  \
  |  |  |  | 3939|  41.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3504|    420|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3505|    420|                                        prefix_result.parsed_base));
 3506|       |
 3507|    420|            return ranges::next(
 3508|    420|                prefix_result.iterator,
 3509|    420|                ranges::distance(buf.view().begin(), result_it));
 3510|  41.6k|        }
 3511|       |
 3512|  8.62k|        auto locale_options =
 3513|       |#if SCN_DISABLE_LOCALE
 3514|       |            localized_number_formatting_options<CharT>{};
 3515|       |#else
 3516|  8.62k|            localized_number_formatting_options<CharT>{loc};
 3517|  8.62k|#endif
 3518|       |
 3519|  8.62k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  8.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  8.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.22k, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.22k|    }                                                  \
  |  |  |  | 3939|  8.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3520|    394|                parse_integer_digits_with_thsep(
 3521|    394|                    ranges::subrange{prefix_result.iterator, range.end()},
 3522|    394|                    prefix_result.parsed_base, locale_options));
 3523|    394|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3524|    394|            parse_digits_result;
 3525|       |
 3526|    394|        auto nothsep_source_view =
 3527|    394|            std::basic_string_view<CharT>{nothsep_source};
 3528|    394|        SCN_TRY(
  ------------------
  |  | 3940|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    394|            nothsep_source_it,
 3530|    394|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3531|    394|                                prefix_result.parsed_base));
 3532|       |
 3533|    394|        return ranges::next(
 3534|    394|            prefix_result.iterator,
 3535|    394|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3536|    394|                ranges::ssize(thsep_indices));
 3537|    394|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2050|   379k|{
 2051|   379k|    auto it = range.begin();
 2052|   381k|    while (it != range.end()) {
  ------------------
  |  Branch (2052:12): [True: 379k, False: 2.23k]
  ------------------
 2053|   379k|        const auto val =
 2054|   379k|            read_code_point_into(ranges::subrange{it, range.end()});
 2055|   379k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 379k, False: 0]
  |  |  ------------------
  ------------------
 2056|   379k|            const auto cp = detail::decode_code_point_exhaustive(
 2057|   379k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2058|   379k|            if (pred(cp)) {
  ------------------
  |  Branch (2058:17): [True: 377k, False: 2.53k]
  ------------------
 2059|   377k|                return it;
 2060|   377k|            }
 2061|   379k|        }
 2062|  2.53k|        it = val.iterator;
 2063|  2.53k|    }
 2064|       |
 2065|  2.23k|    return it;
 2066|   379k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1888|   379k|{
 1889|   379k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1890|   379k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1891|       |
 1892|   379k|    auto it = range.begin();
 1893|   379k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1894|       |
 1895|   379k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 379k]
  |  |  ------------------
  ------------------
 1896|      0|        ++it;
 1897|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1898|      0|        return {it, {}};
 1899|      0|    }
 1900|       |
 1901|   379k|    if (len == 1) {
  ------------------
  |  Branch (1901:9): [True: 379k, False: 0]
  ------------------
 1902|   379k|        ++it;
 1903|   379k|        return {it, string_type(1, *range.begin())};
 1904|   379k|    }
 1905|       |
 1906|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1907|      0|    return {it, string_type{range.begin(), it}};
 1908|   379k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1879|   379k|    {
 1880|   379k|        return !codepoint.empty();
 1881|   379k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2071|   379k|{
 2072|   379k|    return read_until_code_point(range, std::not_fn(pred));
 2073|   379k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2945|   379k|{
 2946|   379k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2946:9): [True: 379k, False: 0]
  ------------------
 2947|   379k|        auto it = read_while_classic_space(range);
 2948|   379k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2949|   379k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.23k, False: 377k]
  |  |  ------------------
  ------------------
 2950|  2.23k|            return unexpected(e);
 2951|  2.23k|        }
 2952|       |
 2953|   377k|        return it;
 2954|   379k|    }
 2955|       |
 2956|      0|    return read_while_classic_space(range);
 2957|   379k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2106|   379k|{
 2107|       |    if constexpr (ranges::contiguous_range<Range> &&
 2108|       |                  ranges::sized_range<Range> &&
 2109|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2110|       |        auto buf = make_contiguous_buffer(range);
 2111|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2112|       |        return ranges::next(range.begin(),
 2113|       |                            ranges::distance(buf.view().begin(), it));
 2114|       |    }
 2115|   379k|    else {
 2116|   379k|        auto it = range.begin();
 2117|       |
 2118|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2119|       |            auto seg = get_contiguous_beginning(range);
 2120|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2121|       |                seg_it != seg.end()) {
 2122|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2123|       |            }
 2124|       |            ranges::advance(it, seg.size());
 2125|       |        }
 2126|       |
 2127|   379k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   379k|            return detail::is_cp_space(cp);
 2129|   379k|        });
 2130|   379k|    }
 2131|   379k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   379k|        : m_fptr([](storage fn,
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|   379k|              if constexpr (std::is_void_v<R>) {
  746|   379k|                  obj(static_cast<decltype(args)>(args)...);
  747|   379k|              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
  752|   379k|          m_storage(std::addressof(f))
  753|   379k|    {
  754|   379k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   379k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   379k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   379k|              else {
  749|   379k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   379k|              }
  751|   379k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   379k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   379k|        else if constexpr (std::is_object_v<T>) {
  688|   379k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   379k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2127|   379k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2128|   379k|            return detail::is_cp_space(cp);
 2129|   379k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   379k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   379k|        {
  662|   379k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5790|  79.3k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  79.3k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  79.3k|            auto rd = make_reader<T, char_type>();
 5796|  79.3k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  79.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  79.3k|    {
 5783|  79.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 762, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    762|    }                                                  \
  |  |  |  | 3939|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  78.6k|                        .transform_error(make_eof_scan_error));
 5785|  78.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  79.3k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|   493k|{
 5715|   493k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.91k, False: 489k]
  |  |  ------------------
  ------------------
 5716|  3.91k|        return unexpected(e);
 5717|  3.91k|    }
 5718|       |
 5719|   489k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 489k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   489k|    return skip_classic_whitespace(range);
 5724|   489k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  78.6k|    {
 3459|  78.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  78.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  78.6k|        return read_default_with_base(range, value, 10);
 3461|  78.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5790|  91.8k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  91.8k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  91.8k|            auto rd = make_reader<T, char_type>();
 5796|  91.8k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  91.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  91.8k|    {
 5783|  91.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.16k, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.16k|    }                                                  \
  |  |  |  | 3939|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  90.7k|                        .transform_error(make_eof_scan_error));
 5785|  90.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  91.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  90.7k|    {
 3459|  90.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  90.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  90.7k|        return read_default_with_base(range, value, 10);
 3461|  90.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5790|  93.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  93.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  93.6k|            auto rd = make_reader<T, char_type>();
 5796|  93.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  93.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  93.6k|    {
 5783|  93.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  93.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  93.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  93.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.29k, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.29k|    }                                                  \
  |  |  |  | 3939|  93.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  92.3k|                        .transform_error(make_eof_scan_error));
 5785|  92.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  93.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  92.3k|    {
 3459|  92.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  92.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  92.3k|        return read_default_with_base(range, value, 10);
 3461|  92.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5790|  70.5k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  70.5k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  70.5k|            auto rd = make_reader<T, char_type>();
 5796|  70.5k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  70.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  70.5k|    {
 5783|  70.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 582, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    582|    }                                                  \
  |  |  |  | 3939|  70.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  69.9k|                        .transform_error(make_eof_scan_error));
 5785|  69.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  70.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  69.9k|    {
 3459|  69.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  69.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  69.9k|        return read_default_with_base(range, value, 10);
 3461|  69.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5790|  78.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  78.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  78.6k|            auto rd = make_reader<T, char_type>();
 5796|  78.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  78.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  78.6k|    {
 5783|  78.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 783, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    783|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    783|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    783|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    783|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    783|    }                                                  \
  |  |  |  | 3939|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  77.8k|                        .transform_error(make_eof_scan_error));
 5785|  77.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  78.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  77.8k|    {
 3459|  77.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  77.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  77.8k|        return read_default_with_base(range, value, 10);
 3461|  77.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5790|  79.7k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  79.7k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  79.7k|            auto rd = make_reader<T, char_type>();
 5796|  79.7k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  79.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  79.7k|    {
 5783|  79.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 843, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    843|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    843|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    843|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    843|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    843|    }                                                  \
  |  |  |  | 3939|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  78.8k|                        .transform_error(make_eof_scan_error));
 5785|  78.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  79.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  78.8k|    {
 3459|  78.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  78.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  78.8k|        return read_default_with_base(range, value, 10);
 3461|  78.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  79.2k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  79.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  79.2k|            auto rd = make_reader<T, char_type>();
 5800|  79.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 79.2k, False: 0]
  ------------------
 5801|  79.2k|                return impl(rd, range, value);
 5802|  79.2k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  79.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  79.2k|    {
 5783|  79.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 717, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    717|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    717|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    717|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    717|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    717|    }                                                  \
  |  |  |  | 3939|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  78.5k|                        .transform_error(make_eof_scan_error));
 5785|  78.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  79.2k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|   489k|{
 5715|   489k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.91k, False: 485k]
  |  |  ------------------
  ------------------
 5716|  3.91k|        return unexpected(e);
 5717|  3.91k|    }
 5718|       |
 5719|   485k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 485k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|   485k|    return skip_classic_whitespace(range);
 5724|   485k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  78.5k|    {
 3459|  78.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  78.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  78.5k|        return read_default_with_base(range, value, 10);
 3461|  78.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  78.5k|    {
 3423|  78.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  78.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  78.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 78.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   154k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.94k, False: 75.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.94k|    }                                                  \
  |  |  |  | 3939|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   154k|                parse_integer_digits_without_thsep(
 3442|   154k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   154k|                    prefix_result.parsed_base));
 3444|       |
 3445|   154k|        auto buf = make_contiguous_buffer(
 3446|   154k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   154k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  75.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  75.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  75.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.59k, False: 73.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.59k|    }                                                  \
  |  |  |  | 3939|  75.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  73.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  73.0k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  73.0k|        return ranges::next(prefix_result.iterator,
 3452|  73.0k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   154k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  90.2k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  90.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  90.2k|            auto rd = make_reader<T, char_type>();
 5800|  90.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 90.2k, False: 0]
  ------------------
 5801|  90.2k|                return impl(rd, range, value);
 5802|  90.2k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  90.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  90.2k|    {
 5783|  90.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  90.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.10k, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.10k|    }                                                  \
  |  |  |  | 3939|  90.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  89.1k|                        .transform_error(make_eof_scan_error));
 5785|  89.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  90.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  89.1k|    {
 3459|  89.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  89.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  89.1k|        return read_default_with_base(range, value, 10);
 3461|  89.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  89.1k|    {
 3423|  89.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  89.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  89.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  89.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  89.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  89.1k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  89.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 89.1k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   174k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  89.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  89.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  89.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.86k, False: 85.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.86k|    }                                                  \
  |  |  |  | 3939|  89.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   174k|                parse_integer_digits_without_thsep(
 3442|   174k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   174k|                    prefix_result.parsed_base));
 3444|       |
 3445|   174k|        auto buf = make_contiguous_buffer(
 3446|   174k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   174k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  85.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  85.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  85.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.28k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.28k|    }                                                  \
  |  |  |  | 3939|  85.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  83.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  83.9k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  83.9k|        return ranges::next(prefix_result.iterator,
 3452|  83.9k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   174k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  91.8k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  91.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  91.8k|            auto rd = make_reader<T, char_type>();
 5800|  91.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 91.8k, False: 0]
  ------------------
 5801|  91.8k|                return impl(rd, range, value);
 5802|  91.8k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  91.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  91.8k|    {
 5783|  91.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.22k, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.22k|    }                                                  \
  |  |  |  | 3939|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  90.6k|                        .transform_error(make_eof_scan_error));
 5785|  90.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  91.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  90.6k|    {
 3459|  90.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  90.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  90.6k|        return read_default_with_base(range, value, 10);
 3461|  90.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  90.6k|    {
 3423|  90.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  90.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  90.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 90.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   177k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.16k, False: 86.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.16k|    }                                                  \
  |  |  |  | 3939|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   177k|                parse_integer_digits_without_thsep(
 3442|   177k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   177k|                    prefix_result.parsed_base));
 3444|       |
 3445|   177k|        auto buf = make_contiguous_buffer(
 3446|   177k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   177k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  86.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  86.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  86.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 864, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    864|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    864|    }                                                  \
  |  |  |  | 3939|  86.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  85.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  85.6k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  85.6k|        return ranges::next(prefix_result.iterator,
 3452|  85.6k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   177k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  70.4k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  70.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  70.4k|            auto rd = make_reader<T, char_type>();
 5800|  70.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 70.4k, False: 0]
  ------------------
 5801|  70.4k|                return impl(rd, range, value);
 5802|  70.4k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  70.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  70.4k|    {
 5783|  70.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  70.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  70.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  70.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 564, False: 69.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    564|    }                                                  \
  |  |  |  | 3939|  70.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  69.8k|                        .transform_error(make_eof_scan_error));
 5785|  69.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  70.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  69.8k|    {
 3459|  69.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  69.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  69.8k|        return read_default_with_base(range, value, 10);
 3461|  69.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  69.8k|    {
 3423|  69.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  69.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  69.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  69.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 69.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  69.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  69.8k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  69.8k|        if constexpr (!std::is_signed_v<T>) {
 3427|  69.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.25k, False: 67.6k]
  ------------------
 3428|  2.25k|                return detail::unexpected_scan_error(
 3429|  2.25k|                    scan_error::invalid_scanned_value,
 3430|  2.25k|                    "Unexpected '-' sign when parsing an "
 3431|  2.25k|                    "unsigned value");
 3432|  2.25k|            }
 3433|  69.8k|        }
 3434|       |
 3435|  69.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 69.8k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   137k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  69.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  69.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  69.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.16k, False: 67.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.16k|    }                                                  \
  |  |  |  | 3939|  69.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   137k|                parse_integer_digits_without_thsep(
 3442|   137k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   137k|                    prefix_result.parsed_base));
 3444|       |
 3445|   137k|        auto buf = make_contiguous_buffer(
 3446|   137k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   137k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  67.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  67.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  67.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.27k, False: 66.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.27k|    }                                                  \
  |  |  |  | 3939|  67.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  66.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  66.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  66.4k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  66.4k|        return ranges::next(prefix_result.iterator,
 3452|  66.4k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   137k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  78.5k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  78.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  78.5k|            auto rd = make_reader<T, char_type>();
 5800|  78.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 78.5k, False: 0]
  ------------------
 5801|  78.5k|                return impl(rd, range, value);
 5802|  78.5k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  78.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  78.5k|    {
 5783|  78.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 762, False: 77.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    762|    }                                                  \
  |  |  |  | 3939|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  77.7k|                        .transform_error(make_eof_scan_error));
 5785|  77.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  78.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  77.7k|    {
 3459|  77.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  77.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  77.7k|        return read_default_with_base(range, value, 10);
 3461|  77.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  77.7k|    {
 3423|  77.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 77.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  77.7k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  77.7k|        if constexpr (!std::is_signed_v<T>) {
 3427|  77.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.32k, False: 75.4k]
  ------------------
 3428|  2.32k|                return detail::unexpected_scan_error(
 3429|  2.32k|                    scan_error::invalid_scanned_value,
 3430|  2.32k|                    "Unexpected '-' sign when parsing an "
 3431|  2.32k|                    "unsigned value");
 3432|  2.32k|            }
 3433|  77.7k|        }
 3434|       |
 3435|  77.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 77.7k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   152k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.61k, False: 75.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.61k|    }                                                  \
  |  |  |  | 3939|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   152k|                parse_integer_digits_without_thsep(
 3442|   152k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   152k|                    prefix_result.parsed_base));
 3444|       |
 3445|   152k|        auto buf = make_contiguous_buffer(
 3446|   152k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   152k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  75.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  75.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  75.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  75.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 558, False: 74.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    558|    }                                                  \
  |  |  |  | 3939|  75.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  74.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  74.5k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  74.5k|        return ranges::next(prefix_result.iterator,
 3452|  74.5k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   152k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5790|  79.5k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  79.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  79.5k|            auto rd = make_reader<T, char_type>();
 5800|  79.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 79.5k, False: 0]
  ------------------
 5801|  79.5k|                return impl(rd, range, value);
 5802|  79.5k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  79.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  79.5k|    {
 5783|  79.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  79.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  79.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  79.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  79.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 822, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    822|    }                                                  \
  |  |  |  | 3939|  79.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  78.6k|                        .transform_error(make_eof_scan_error));
 5785|  78.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  79.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  78.6k|    {
 3459|  78.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  78.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  78.6k|        return read_default_with_base(range, value, 10);
 3461|  78.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  78.6k|    {
 3423|  78.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  78.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  78.6k|        if constexpr (!std::is_signed_v<T>) {
 3427|  78.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.37k, False: 76.3k]
  ------------------
 3428|  2.37k|                return detail::unexpected_scan_error(
 3429|  2.37k|                    scan_error::invalid_scanned_value,
 3430|  2.37k|                    "Unexpected '-' sign when parsing an "
 3431|  2.37k|                    "unsigned value");
 3432|  2.37k|            }
 3433|  78.6k|        }
 3434|       |
 3435|  78.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 78.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   154k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 76.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.67k|    }                                                  \
  |  |  |  | 3939|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   154k|                parse_integer_digits_without_thsep(
 3442|   154k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   154k|                    prefix_result.parsed_base));
 3444|       |
 3445|   154k|        auto buf = make_contiguous_buffer(
 3446|   154k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   154k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  76.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  76.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  76.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 381, False: 75.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    381|    }                                                  \
  |  |  |  | 3939|  76.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  75.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  75.6k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  75.6k|        return ranges::next(prefix_result.iterator,
 3452|  75.6k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   154k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2865|  1.78M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  1.78M|    static_cast<    \
  |  |  935|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|  1.78M|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|  1.78M|          m_current(m_range.begin())
 2868|  1.78M|    {
 2869|  1.78M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2877|  3.27M|    {
 2878|  3.27M|        return m_range.end();
 2879|  3.27M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 2892|  1.56M|    {
 2893|  1.56M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|  1.56M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|  1.56M|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 1.56M]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|  1.56M|        }
 2899|  1.56M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  1.56M|    static_cast<    \
  |  |  935|  1.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|  1.56M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2882|  1.71M|    {
 2883|  1.71M|        return ranges::subrange{begin(), end()};
 2884|  1.71M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6105|   249k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   249k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   249k|            auto rd = make_reader<T, char_type>();
 6111|   249k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   249k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 249k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   249k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   249k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   249k|    {
 6041|   249k|        const bool need_skipped_width =
 6042|   249k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 249k]
  |  Branch (6042:33): [True: 0, False: 249k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   249k|        auto it = rng.begin();
 6046|   249k|        std::ptrdiff_t prefix_width = 0;
 6047|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 249k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   249k|        else {
 6055|   249k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.63k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.63k|    }                                                  \
  |  |  |  | 3939|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   247k|            std::tie(it, prefix_width) = prefix_result;
 6057|   247k|        }
 6058|   247k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   247k|        std::ptrdiff_t value_width = 0;
 6062|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 247k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   247k|        else {
 6078|   247k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22.3k, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  22.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  22.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  22.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  22.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  22.3k|    }                                                  \
  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   224k|                                             specs, value, loc));
 6080|       |
 6081|   224k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 224k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   224k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   224k|        std::ptrdiff_t postfix_width = 0;
 6090|   224k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 222k, False: 1.89k]
  ------------------
 6091|   222k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   222k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   222k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   222k|                                 value_width));
 6095|   222k|            std::tie(it, postfix_width) = postfix_result;
 6096|   222k|        }
 6097|       |
 6098|   224k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   224k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   224k|            specs, prefix_width, value_width, postfix_width));
 6100|   224k|        return it;
 6101|   224k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|  1.71M|    {
 5954|  1.71M|        const bool need_skipped_width =
 5955|  1.71M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 1.71M]
  |  Branch (5955:33): [True: 0, False: 1.71M]
  ------------------
 5956|  1.71M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|  1.71M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 1.71M]
  ------------------
 5960|  1.71M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 1.71M]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|  1.71M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 1.71M, False: 0]
  |  Branch (5964:56): [True: 1.71M, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|  1.71M|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 1.71M]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|  3.40M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.8k, False: 1.69M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.8k|    }                                                  \
  |  |  |  | 3939|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|  3.40M|                            make_eof_scan_error));
 5975|       |
 5976|  3.40M|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 1.69M]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|  1.69M|            return result_type{it, 0};
 5984|  3.40M|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|  1.71M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|  1.54M|    {
 5996|  1.54M|        const bool need_skipped_width =
 5997|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 1.54M]
  |  Branch (5997:33): [True: 0, False: 1.54M]
  ------------------
 5998|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  1.54M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 1.54M]
  ------------------
 6001|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 1.54M]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  1.54M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 1.54M, False: 0]
  ------------------
 6010|  1.54M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 1.54M]
  ------------------
 6011|  1.54M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  1.54M|        return result_type{rng.begin(), 0};
 6035|  1.54M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6105|   324k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   324k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   324k|            auto rd = make_reader<T, char_type>();
 6111|   324k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   324k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 324k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   324k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   324k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   324k|    {
 6041|   324k|        const bool need_skipped_width =
 6042|   324k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 324k]
  |  Branch (6042:33): [True: 0, False: 324k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   324k|        auto it = rng.begin();
 6046|   324k|        std::ptrdiff_t prefix_width = 0;
 6047|   324k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 324k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   324k|        else {
 6055|   324k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   324k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   324k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   324k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.23k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.23k|    }                                                  \
  |  |  |  | 3939|   324k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   319k|            std::tie(it, prefix_width) = prefix_result;
 6057|   319k|        }
 6058|   319k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   319k|        std::ptrdiff_t value_width = 0;
 6062|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 319k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   319k|        else {
 6078|   319k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20.7k, False: 299k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  20.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  20.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  20.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  20.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  20.7k|    }                                                  \
  |  | 3939|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   299k|                                             specs, value, loc));
 6080|       |
 6081|   299k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 299k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   299k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   299k|        std::ptrdiff_t postfix_width = 0;
 6090|   299k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 296k, False: 3.08k]
  ------------------
 6091|   296k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   296k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   296k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   296k|                                 value_width));
 6095|   296k|            std::tie(it, postfix_width) = postfix_result;
 6096|   296k|        }
 6097|       |
 6098|   299k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   299k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 299k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   299k|            specs, prefix_width, value_width, postfix_width));
 6100|   299k|        return it;
 6101|   299k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6105|   330k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   330k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   330k|            auto rd = make_reader<T, char_type>();
 6111|   330k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   330k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 330k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   330k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   330k|    {
 6041|   330k|        const bool need_skipped_width =
 6042|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 330k]
  |  Branch (6042:33): [True: 0, False: 330k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   330k|        auto it = rng.begin();
 6046|   330k|        std::ptrdiff_t prefix_width = 0;
 6047|   330k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 330k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   330k|        else {
 6055|   330k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.72k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.72k|    }                                                  \
  |  |  |  | 3939|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   325k|            std::tie(it, prefix_width) = prefix_result;
 6057|   325k|        }
 6058|   325k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   325k|        std::ptrdiff_t value_width = 0;
 6062|   325k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 325k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   325k|        else {
 6078|   325k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 20.2k, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  20.2k|    }                                                  \
  |  | 3939|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   305k|                                             specs, value, loc));
 6080|       |
 6081|   305k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 305k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   305k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   305k|        std::ptrdiff_t postfix_width = 0;
 6090|   305k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 302k, False: 3.43k]
  ------------------
 6091|   302k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   302k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   302k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   302k|                                 value_width));
 6095|   302k|            std::tie(it, postfix_width) = postfix_result;
 6096|   302k|        }
 6097|       |
 6098|   305k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   305k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 305k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   305k|            specs, prefix_width, value_width, postfix_width));
 6100|   305k|        return it;
 6101|   305k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6105|   244k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   244k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   244k|            auto rd = make_reader<T, char_type>();
 6111|   244k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   244k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 244k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   244k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   244k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   244k|    {
 6041|   244k|        const bool need_skipped_width =
 6042|   244k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 244k]
  |  Branch (6042:33): [True: 0, False: 244k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   244k|        auto it = rng.begin();
 6046|   244k|        std::ptrdiff_t prefix_width = 0;
 6047|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 244k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   244k|        else {
 6055|   244k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.14k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.14k|    }                                                  \
  |  |  |  | 3939|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   242k|            std::tie(it, prefix_width) = prefix_result;
 6057|   242k|        }
 6058|   242k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   242k|        std::ptrdiff_t value_width = 0;
 6062|   242k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 242k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   242k|        else {
 6078|   242k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22.8k, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  22.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  22.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  22.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  22.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  22.8k|    }                                                  \
  |  | 3939|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   219k|                                             specs, value, loc));
 6080|       |
 6081|   219k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 219k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   219k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   219k|        std::ptrdiff_t postfix_width = 0;
 6090|   219k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 218k, False: 1.51k]
  ------------------
 6091|   218k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   218k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   218k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   218k|                                 value_width));
 6095|   218k|            std::tie(it, postfix_width) = postfix_result;
 6096|   218k|        }
 6097|       |
 6098|   219k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   219k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 219k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   219k|            specs, prefix_width, value_width, postfix_width));
 6100|   219k|        return it;
 6101|   219k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6105|   278k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   278k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   278k|            auto rd = make_reader<T, char_type>();
 6111|   278k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   278k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 278k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   278k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   278k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   278k|    {
 6041|   278k|        const bool need_skipped_width =
 6042|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 278k]
  |  Branch (6042:33): [True: 0, False: 278k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   278k|        auto it = rng.begin();
 6046|   278k|        std::ptrdiff_t prefix_width = 0;
 6047|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 278k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   278k|        else {
 6055|   278k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.93k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.93k|    }                                                  \
  |  |  |  | 3939|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   275k|            std::tie(it, prefix_width) = prefix_result;
 6057|   275k|        }
 6058|   275k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   275k|        std::ptrdiff_t value_width = 0;
 6062|   275k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 275k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   275k|        else {
 6078|   275k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 22.0k, False: 253k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  22.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  22.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  22.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  22.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  22.0k|    }                                                  \
  |  | 3939|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   253k|                                             specs, value, loc));
 6080|       |
 6081|   253k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 253k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   253k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   253k|        std::ptrdiff_t postfix_width = 0;
 6090|   253k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 251k, False: 2.10k]
  ------------------
 6091|   251k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   251k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   251k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   251k|                                 value_width));
 6095|   251k|            std::tie(it, postfix_width) = postfix_result;
 6096|   251k|        }
 6097|       |
 6098|   253k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   253k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 253k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   253k|            specs, prefix_width, value_width, postfix_width));
 6100|   253k|        return it;
 6101|   253k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6105|   281k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|   281k|                          basic_contiguous_scan_context<char_type>>) {
 6110|   281k|            auto rd = make_reader<T, char_type>();
 6111|   281k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   281k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|   281k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|   281k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|   281k|    {
 6041|   281k|        const bool need_skipped_width =
 6042|   281k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 281k]
  |  Branch (6042:33): [True: 0, False: 281k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|   281k|        auto it = rng.begin();
 6046|   281k|        std::ptrdiff_t prefix_width = 0;
 6047|   281k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 281k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|   281k|        else {
 6055|   281k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.17k, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.17k|    }                                                  \
  |  |  |  | 3939|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|   278k|            std::tie(it, prefix_width) = prefix_result;
 6057|   278k|        }
 6058|   278k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|   278k|        std::ptrdiff_t value_width = 0;
 6062|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 278k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|   278k|        else {
 6078|   278k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 21.8k, False: 256k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  21.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  21.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  21.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  21.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  21.8k|    }                                                  \
  |  | 3939|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|   256k|                                             specs, value, loc));
 6080|       |
 6081|   256k|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 256k]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|   256k|        }
 6087|       |
 6088|       |        // Read postfix
 6089|   256k|        std::ptrdiff_t postfix_width = 0;
 6090|   256k|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 254k, False: 2.30k]
  ------------------
 6091|   254k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|   254k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|   254k|                                 rd.skip_ws_before_read(), prefix_width,
 6094|   254k|                                 value_width));
 6095|   254k|            std::tie(it, postfix_width) = postfix_result;
 6096|   254k|        }
 6097|       |
 6098|   256k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   256k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|   256k|            specs, prefix_width, value_width, postfix_width));
 6100|   256k|        return it;
 6101|   256k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.6k|            auto rd = make_reader<T, char_type>();
 5796|  12.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5714|  76.0k|{
 5715|  76.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 249, False: 75.7k]
  |  |  ------------------
  ------------------
 5716|    249|        return unexpected(e);
 5717|    249|    }
 5718|       |
 5719|  75.7k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 75.7k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|  75.7k|    return skip_classic_whitespace(range);
 5724|  75.7k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 15, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     15|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.1k|                parse_integer_digits_without_thsep(
 3442|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.1k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.1k|        auto buf = make_contiguous_buffer(
 3446|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    144|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    144|                                    prefix_result.parsed_base));
 3450|       |
 3451|    144|        return ranges::next(prefix_result.iterator,
 3452|    144|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.6k|            auto rd = make_reader<T, char_type>();
 5796|  12.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 90, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     90|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 15, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     15|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.1k|                parse_integer_digits_without_thsep(
 3442|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.1k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.1k|        auto buf = make_contiguous_buffer(
 3446|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    174|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    174|                                    prefix_result.parsed_base));
 3450|       |
 3451|    174|        return ranges::next(prefix_result.iterator,
 3452|    174|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5790|  12.7k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.7k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.7k|            auto rd = make_reader<T, char_type>();
 5796|  12.7k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.7k|    {
 5783|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 90, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     90|    }                                                  \
  |  |  |  | 3939|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.6k|                        .transform_error(make_eof_scan_error));
 5785|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.6k|    {
 3459|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.6k|        return read_default_with_base(range, value, 10);
 3461|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.6k|    {
 3423|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 15, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     15|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.2k|                parse_integer_digits_without_thsep(
 3442|  25.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.2k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.2k|        auto buf = make_contiguous_buffer(
 3446|  25.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    219|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    219|                                    prefix_result.parsed_base));
 3450|       |
 3451|    219|        return ranges::next(prefix_result.iterator,
 3452|    219|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.6k|            auto rd = make_reader<T, char_type>();
 5796|  12.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 66, False: 12.4k]
  ------------------
 3428|     66|                return detail::unexpected_scan_error(
 3429|     66|                    scan_error::invalid_scanned_value,
 3430|     66|                    "Unexpected '-' sign when parsing an "
 3431|     66|                    "unsigned value");
 3432|     66|            }
 3433|  12.5k|        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.1k|                parse_integer_digits_without_thsep(
 3442|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.1k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.1k|        auto buf = make_contiguous_buffer(
 3446|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    183|                                    prefix_result.parsed_base));
 3450|       |
 3451|    183|        return ranges::next(prefix_result.iterator,
 3452|    183|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.6k|            auto rd = make_reader<T, char_type>();
 5796|  12.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 66, False: 12.5k]
  ------------------
 3428|     66|                return detail::unexpected_scan_error(
 3429|     66|                    scan_error::invalid_scanned_value,
 3430|     66|                    "Unexpected '-' sign when parsing an "
 3431|     66|                    "unsigned value");
 3432|     66|            }
 3433|  12.5k|        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.1k|                parse_integer_digits_without_thsep(
 3442|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.1k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.1k|        auto buf = make_contiguous_buffer(
 3446|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 201]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    201|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    201|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    201|                                    prefix_result.parsed_base));
 3450|       |
 3451|    201|        return ranges::next(prefix_result.iterator,
 3452|    201|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 5795|  12.6k|            auto rd = make_reader<T, char_type>();
 5796|  12.6k|            return impl(rd, range, value);
 5797|       |        }
 5798|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5799|       |            auto rd = make_reader<T, char_type>();
 5800|       |            if (!is_segment_contiguous(range)) {
 5801|       |                return impl(rd, range, value);
 5802|       |            }
 5803|       |            auto crange = get_as_contiguous(range);
 5804|       |            SCN_TRY(it, impl(rd, crange, value));
 5805|       |            return ranges::next(range.begin(),
 5806|       |                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.6k|                        .transform_error(make_eof_scan_error));
 5785|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3458|  12.6k|    {
 3459|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.6k|        return read_default_with_base(range, value, 10);
 3461|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  12.6k|    {
 3423|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.6k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 72, False: 12.5k]
  ------------------
 3428|     72|                return detail::unexpected_scan_error(
 3429|     72|                    scan_error::invalid_scanned_value,
 3430|     72|                    "Unexpected '-' sign when parsing an "
 3431|     72|                    "unsigned value");
 3432|     72|            }
 3433|  12.6k|        }
 3434|       |
 3435|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  25.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  25.2k|                parse_integer_digits_without_thsep(
 3442|  25.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  25.2k|                    prefix_result.parsed_base));
 3444|       |
 3445|  25.2k|        auto buf = make_contiguous_buffer(
 3446|  25.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  25.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    243|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    243|                                    prefix_result.parsed_base));
 3450|       |
 3451|    243|        return ranges::next(prefix_result.iterator,
 3452|    243|                            ranges::distance(buf.view().begin(), result_it));
 3453|  25.2k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2865|   453k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   453k|    static_cast<    \
  |  |  935|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2866|   453k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2867|   453k|          m_current(m_range.begin())
 2868|   453k|    {
 2869|   453k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2877|   306k|    {
 2878|   306k|        return m_range.end();
 2879|   306k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 2892|  3.35k|    {
 2893|  3.35k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2894|  3.35k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2895|  3.35k|            if (it == nullptr) {
  ------------------
  |  Branch (2895:17): [True: 0, False: 3.35k]
  ------------------
 2896|      0|                it = end();
 2897|      0|            }
 2898|  3.35k|        }
 2899|  3.35k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  3.35k|    static_cast<    \
  |  |  935|  3.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2900|  3.35k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2882|   303k|    {
 2883|   303k|        return ranges::subrange{begin(), end()};
 2884|   303k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6105|  50.5k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.5k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.5k|            auto rd = make_reader<T, char_type>();
 6111|  50.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.5k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.5k|    {
 6041|  50.5k|        const bool need_skipped_width =
 6042|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.5k]
  |  Branch (6042:33): [True: 0, False: 50.5k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.5k|        auto it = rng.begin();
 6046|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.5k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.5k|        else {
 6055|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 350, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    350|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    350|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    350|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    350|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    350|    }                                                  \
  |  |  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 516]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    516|                                             specs, value, loc));
 6080|       |
 6081|    516|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 516]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    516|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    516|        std::ptrdiff_t postfix_width = 0;
 6090|    516|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 330, False: 186]
  ------------------
 6091|    330|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    330|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    330|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    330|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 330]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    330|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    330|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    330|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    330|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    330|                                 value_width));
 6095|    330|            std::tie(it, postfix_width) = postfix_result;
 6096|    330|        }
 6097|       |
 6098|    516|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    516|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 516]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    516|            specs, prefix_width, value_width, postfix_width));
 6100|    516|        return it;
 6101|    516|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 5953|   303k|    {
 5954|   303k|        const bool need_skipped_width =
 5955|   303k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5955:13): [True: 0, False: 303k]
  |  Branch (5955:33): [True: 0, False: 303k]
  ------------------
 5956|   303k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5957|       |
 5958|       |        // Read prefix
 5959|   303k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (5959:13): [True: 0, False: 303k]
  ------------------
 5960|   303k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5960:13): [True: 0, False: 303k]
  ------------------
 5961|      0|            return skip_fill(rng, specs.precision, specs.fill,
 5962|      0|                             need_skipped_width);
 5963|      0|        }
 5964|   303k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (5964:13): [True: 303k, False: 0]
  |  Branch (5964:56): [True: 303k, False: 0]
  ------------------
 5965|       |            // Default alignment:
 5966|       |            // Skip preceding whitespace, if required by the reader
 5967|   303k|            if (specs.precision != 0) {
  ------------------
  |  Branch (5967:17): [True: 0, False: 303k]
  ------------------
 5968|      0|                auto max_width_view = take_width(rng, specs.precision);
 5969|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5970|      0|                                  .transform_error(make_eof_scan_error));
 5971|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 5972|      0|            }
 5973|   605k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.99k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.99k|    }                                                  \
  |  |  |  | 3939|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5974|   605k|                            make_eof_scan_error));
 5975|       |
 5976|   605k|            if (need_skipped_width) {
  ------------------
  |  Branch (5976:17): [True: 0, False: 301k]
  ------------------
 5977|      0|                return result_type{
 5978|      0|                    it,
 5979|      0|                    calculate_text_width(make_contiguous_buffer(
 5980|      0|                                             ranges::subrange{rng.begin(), it})
 5981|      0|                                             .view())};
 5982|      0|            }
 5983|   301k|            return result_type{it, 0};
 5984|   605k|        }
 5985|       |
 5986|      0|        return result_type{rng.begin(), 0};
 5987|   303k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 5995|  2.33k|    {
 5996|  2.33k|        const bool need_skipped_width =
 5997|  2.33k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (5997:13): [True: 0, False: 2.33k]
  |  Branch (5997:33): [True: 0, False: 2.33k]
  ------------------
 5998|  2.33k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5999|       |
 6000|  2.33k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6000:13): [True: 0, False: 2.33k]
  ------------------
 6001|  2.33k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6001:13): [True: 0, False: 2.33k]
  ------------------
 6002|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6002:17): [True: 0, False: 0]
  ------------------
 6003|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6003:17): [True: 0, False: 0]
  ------------------
 6004|      0|                return result_type{rng.begin(), 0};
 6005|      0|            }
 6006|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6007|      0|                             specs.fill, need_skipped_width);
 6008|      0|        }
 6009|  2.33k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6009:13): [True: 2.33k, False: 0]
  ------------------
 6010|  2.33k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6010:13): [True: 0, False: 2.33k]
  ------------------
 6011|  2.33k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6011:15): [True: 0, False: 0]
  |  Branch (6011:35): [True: 0, False: 0]
  ------------------
 6012|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6012:15): [True: 0, False: 0]
  ------------------
 6013|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6013:15): [True: 0, False: 0]
  ------------------
 6014|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6014:17): [True: 0, False: 0]
  ------------------
 6015|      0|                const auto initial_width =
 6016|      0|                    specs.precision - prefix_width - value_width;
 6017|      0|                auto max_width_view = take_width(rng, initial_width);
 6018|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6019|      0|                                  .transform_error(make_eof_scan_error));
 6020|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6021|      0|            }
 6022|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6023|      0|                            make_eof_scan_error));
 6024|       |
 6025|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6025:17): [True: 0, False: 0]
  ------------------
 6026|      0|                return result_type{
 6027|      0|                    it,
 6028|      0|                    calculate_text_width(make_contiguous_buffer(
 6029|      0|                                             ranges::subrange{rng.begin(), it})
 6030|      0|                                             .view())};
 6031|      0|            }
 6032|      0|            return result_type{it, 0};
 6033|      0|        }
 6034|  2.33k|        return result_type{rng.begin(), 0};
 6035|  2.33k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6105|  50.6k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.6k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.6k|            auto rd = make_reader<T, char_type>();
 6111|  50.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.6k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.6k|    {
 6041|  50.6k|        const bool need_skipped_width =
 6042|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.6k]
  |  Branch (6042:33): [True: 0, False: 50.6k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.6k|        auto it = rng.begin();
 6046|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.6k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.6k|        else {
 6055|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 362, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    362|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 602]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    602|                                             specs, value, loc));
 6080|       |
 6081|    602|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 602]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    602|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    602|        std::ptrdiff_t postfix_width = 0;
 6090|    602|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 404, False: 198]
  ------------------
 6091|    404|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    404|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    404|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    404|                                 value_width));
 6095|    404|            std::tie(it, postfix_width) = postfix_result;
 6096|    404|        }
 6097|       |
 6098|    602|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    602|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    602|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 602]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    602|            specs, prefix_width, value_width, postfix_width));
 6100|    602|        return it;
 6101|    602|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6105|  50.7k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.7k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.7k|            auto rd = make_reader<T, char_type>();
 6111|  50.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.7k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.7k|    {
 6041|  50.7k|        const bool need_skipped_width =
 6042|  50.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.7k]
  |  Branch (6042:33): [True: 0, False: 50.7k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.7k|        auto it = rng.begin();
 6046|  50.7k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.7k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.7k|        else {
 6055|  50.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 362, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    362|    }                                                  \
  |  |  |  | 3939|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.3k|        }
 6058|  50.3k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.3k|        std::ptrdiff_t value_width = 0;
 6062|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.3k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.3k|        else {
 6078|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.6k, False: 710]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.6k|    }                                                  \
  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    710|                                             specs, value, loc));
 6080|       |
 6081|    710|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 710]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    710|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    710|        std::ptrdiff_t postfix_width = 0;
 6090|    710|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 512, False: 198]
  ------------------
 6091|    512|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    512|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    512|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    512|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    512|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 512]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    512|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    512|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    512|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    512|                                 value_width));
 6095|    512|            std::tie(it, postfix_width) = postfix_result;
 6096|    512|        }
 6097|       |
 6098|    710|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    710|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    710|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 710]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    710|            specs, prefix_width, value_width, postfix_width));
 6100|    710|        return it;
 6101|    710|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6105|  50.4k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.4k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.4k|            auto rd = make_reader<T, char_type>();
 6111|  50.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.4k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.4k|    {
 6041|  50.4k|        const bool need_skipped_width =
 6042|  50.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.4k]
  |  Branch (6042:33): [True: 0, False: 50.4k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.4k|        auto it = rng.begin();
 6046|  50.4k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.4k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.4k|        else {
 6055|  50.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.1k|        }
 6058|  50.1k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.1k|        std::ptrdiff_t value_width = 0;
 6062|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.1k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.1k|        else {
 6078|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 446]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    446|                                             specs, value, loc));
 6080|       |
 6081|    446|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 446]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    446|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    446|        std::ptrdiff_t postfix_width = 0;
 6090|    446|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 302, False: 144]
  ------------------
 6091|    302|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    302|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    302|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    302|                                 value_width));
 6095|    302|            std::tie(it, postfix_width) = postfix_result;
 6096|    302|        }
 6097|       |
 6098|    446|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    446|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 446]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    446|            specs, prefix_width, value_width, postfix_width));
 6100|    446|        return it;
 6101|    446|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6105|  50.5k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.5k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.5k|            auto rd = make_reader<T, char_type>();
 6111|  50.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.5k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.5k|    {
 6041|  50.5k|        const bool need_skipped_width =
 6042|  50.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.5k]
  |  Branch (6042:33): [True: 0, False: 50.5k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.5k|        auto it = rng.begin();
 6046|  50.5k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.5k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.5k|        else {
 6055|  50.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.2k|        }
 6058|  50.2k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.2k|        std::ptrdiff_t value_width = 0;
 6062|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.2k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.2k|        else {
 6078|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    492|                                             specs, value, loc));
 6080|       |
 6081|    492|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 492]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    492|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    492|        std::ptrdiff_t postfix_width = 0;
 6090|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 348, False: 144]
  ------------------
 6091|    348|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    348|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    348|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    348|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 348]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    348|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    348|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    348|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    348|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    348|                                 value_width));
 6095|    348|            std::tie(it, postfix_width) = postfix_result;
 6096|    348|        }
 6097|       |
 6098|    492|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    492|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    492|            specs, prefix_width, value_width, postfix_width));
 6100|    492|        return it;
 6101|    492|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6105|  50.6k|    {
 6106|       |        if constexpr (!detail::is_type_disabled<T> &&
 6107|       |                      std::is_same_v<
 6108|       |                          context_type,
 6109|  50.6k|                          basic_contiguous_scan_context<char_type>>) {
 6110|  50.6k|            auto rd = make_reader<T, char_type>();
 6111|  50.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  50.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6112|  50.6k|            return impl(rd, range, value);
 6113|       |        }
 6114|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6115|       |            auto rd = make_reader<T, char_type>();
 6116|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6117|       |
 6118|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6119|       |                specs.width != 0) {
 6120|       |                return impl(rd, range, value);
 6121|       |            }
 6122|       |
 6123|       |            auto crange = get_as_contiguous(range);
 6124|       |            SCN_TRY(it, impl(rd, crange, value));
 6125|       |            return ranges::next(range.begin(),
 6126|       |                                ranges::distance(crange.begin(), it));
 6127|       |        }
 6128|       |        else {
 6129|       |            SCN_EXPECT(false);
 6130|       |            SCN_UNREACHABLE;
 6131|       |        }
 6132|  50.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6040|  50.6k|    {
 6041|  50.6k|        const bool need_skipped_width =
 6042|  50.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6042:13): [True: 0, False: 50.6k]
  |  Branch (6042:33): [True: 0, False: 50.6k]
  ------------------
 6043|       |
 6044|       |        // Read prefix
 6045|  50.6k|        auto it = rng.begin();
 6046|  50.6k|        std::ptrdiff_t prefix_width = 0;
 6047|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 50.6k]
  ------------------
 6048|      0|            auto max_width_view = take_width(rng, specs.precision);
 6049|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6050|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6051|      0|            it = prefix_result.first.base();
 6052|      0|            prefix_width = prefix_result.second;
 6053|      0|        }
 6054|  50.6k|        else {
 6055|  50.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 308, False: 50.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    308|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6056|  50.3k|            std::tie(it, prefix_width) = prefix_result;
 6057|  50.3k|        }
 6058|  50.3k|        auto prefix_end_it = it;
 6059|       |
 6060|       |        // Read value
 6061|  50.3k|        std::ptrdiff_t value_width = 0;
 6062|  50.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6062:13): [True: 0, False: 50.3k]
  ------------------
 6063|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6063:17): [True: 0, False: 0]
  ------------------
 6064|      0|                return detail::unexpected_scan_error(
 6065|      0|                    scan_error::invalid_fill,
 6066|      0|                    "Too many fill characters before value, "
 6067|      0|                    "precision exceeded before reading value");
 6068|      0|            }
 6069|       |
 6070|      0|            const auto initial_width = specs.precision - prefix_width;
 6071|      0|            auto max_width_view =
 6072|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6073|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6074|      0|            it = w_it.base();
 6075|      0|            value_width = initial_width - w_it.count();
 6076|      0|        }
 6077|  50.3k|        else {
 6078|  50.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 49.7k, False: 586]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  49.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  49.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  49.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  49.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  49.7k|    }                                                  \
  |  | 3939|  50.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6079|    586|                                             specs, value, loc));
 6080|       |
 6081|    586|            if (need_skipped_width) {
  ------------------
  |  Branch (6081:17): [True: 0, False: 586]
  ------------------
 6082|      0|                value_width = calculate_text_width(
 6083|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6084|      0|                        .view());
 6085|      0|            }
 6086|    586|        }
 6087|       |
 6088|       |        // Read postfix
 6089|    586|        std::ptrdiff_t postfix_width = 0;
 6090|    586|        if (it != rng.end()) {
  ------------------
  |  Branch (6090:13): [True: 442, False: 144]
  ------------------
 6091|    442|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6092|    442|                    impl_postfix(ranges::subrange{it, rng.end()},
 6093|    442|                                 rd.skip_ws_before_read(), prefix_width,
 6094|    442|                                 value_width));
 6095|    442|            std::tie(it, postfix_width) = postfix_result;
 6096|    442|        }
 6097|       |
 6098|    586|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    586|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    586|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 586]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6099|    586|            specs, prefix_width, value_width, postfix_width));
 6100|    586|        return it;
 6101|    586|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.6k|            auto rd = make_reader<T, char_type>();
 5800|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.6k, False: 0]
  ------------------
 5801|  12.6k|                return impl(rd, range, value);
 5802|  12.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5714|  76.0k|{
 5715|  76.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 249, False: 75.7k]
  |  |  ------------------
  ------------------
 5716|    249|        return unexpected(e);
 5717|    249|    }
 5718|       |
 5719|  75.7k|    if (!is_required) {
  ------------------
  |  Branch (5719:9): [True: 0, False: 75.7k]
  ------------------
 5720|      0|        return range.begin();
 5721|      0|    }
 5722|       |
 5723|  75.7k|    return skip_classic_whitespace(range);
 5724|  75.7k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.7k|                parse_integer_digits_without_thsep(
 3442|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.7k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.7k|        auto buf = make_contiguous_buffer(
 3446|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 48, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     48|    }                                                  \
  |  |  |  | 3939|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    144|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    144|                                    prefix_result.parsed_base));
 3450|       |
 3451|    144|        return ranges::next(prefix_result.iterator,
 3452|    144|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.6k|            auto rd = make_reader<T, char_type>();
 5800|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.6k, False: 0]
  ------------------
 5801|  12.6k|                return impl(rd, range, value);
 5802|  12.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 90, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     90|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.7k|                parse_integer_digits_without_thsep(
 3442|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.7k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.7k|        auto buf = make_contiguous_buffer(
 3446|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    174|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    174|                                    prefix_result.parsed_base));
 3450|       |
 3451|    174|        return ranges::next(prefix_result.iterator,
 3452|    174|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.7k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.7k|            auto rd = make_reader<T, char_type>();
 5800|  12.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.7k, False: 0]
  ------------------
 5801|  12.7k|                return impl(rd, range, value);
 5802|  12.7k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.7k|    {
 5783|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 90, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     90|    }                                                  \
  |  |  |  | 3939|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.6k|                        .transform_error(make_eof_scan_error));
 5785|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.6k|    {
 3459|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.6k|        return read_default_with_base(range, value, 10);
 3461|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.6k|    {
 3423|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.4k, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.4k|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.8k|                parse_integer_digits_without_thsep(
 3442|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.8k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.8k|        auto buf = make_contiguous_buffer(
 3446|  12.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    219|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    219|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    219|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    219|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 219]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    219|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    219|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    219|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    219|                                    prefix_result.parsed_base));
 3450|       |
 3451|    219|        return ranges::next(prefix_result.iterator,
 3452|    219|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.6k|            auto rd = make_reader<T, char_type>();
 5800|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.6k, False: 0]
  ------------------
 5801|  12.6k|                return impl(rd, range, value);
 5802|  12.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 66, False: 12.4k]
  ------------------
 3428|     66|                return detail::unexpected_scan_error(
 3429|     66|                    scan_error::invalid_scanned_value,
 3430|     66|                    "Unexpected '-' sign when parsing an "
 3431|     66|                    "unsigned value");
 3432|     66|            }
 3433|  12.5k|        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.7k|                parse_integer_digits_without_thsep(
 3442|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.7k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.7k|        auto buf = make_contiguous_buffer(
 3446|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 39, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     39|    }                                                  \
  |  |  |  | 3939|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    183|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    183|                                    prefix_result.parsed_base));
 3450|       |
 3451|    183|        return ranges::next(prefix_result.iterator,
 3452|    183|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.6k|            auto rd = make_reader<T, char_type>();
 5800|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.6k, False: 0]
  ------------------
 5801|  12.6k|                return impl(rd, range, value);
 5802|  12.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.5k|                        .transform_error(make_eof_scan_error));
 5785|  12.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.5k|    {
 3459|  12.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.5k|        return read_default_with_base(range, value, 10);
 3461|  12.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.5k|    {
 3423|  12.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.5k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.5k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 66, False: 12.5k]
  ------------------
 3428|     66|                return detail::unexpected_scan_error(
 3429|     66|                    scan_error::invalid_scanned_value,
 3430|     66|                    "Unexpected '-' sign when parsing an "
 3431|     66|                    "unsigned value");
 3432|     66|            }
 3433|  12.5k|        }
 3434|       |
 3435|  12.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.5k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 225]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    225|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.7k|                parse_integer_digits_without_thsep(
 3442|  12.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.7k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.7k|        auto buf = make_contiguous_buffer(
 3446|  12.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    225|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    225|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    225|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    225|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 24, False: 201]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     24|    }                                                  \
  |  |  |  | 3939|    225|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    201|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    201|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    201|                                    prefix_result.parsed_base));
 3450|       |
 3451|    201|        return ranges::next(prefix_result.iterator,
 3452|    201|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5790|  12.6k|    {
 5791|       |        if constexpr (!detail::is_type_disabled<T> &&
 5792|       |                      std::is_same_v<
 5793|       |                          context_type,
 5794|       |                          basic_contiguous_scan_context<char_type>>) {
 5795|       |            auto rd = make_reader<T, char_type>();
 5796|       |            return impl(rd, range, value);
 5797|       |        }
 5798|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5799|  12.6k|            auto rd = make_reader<T, char_type>();
 5800|  12.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5800:17): [True: 12.6k, False: 0]
  ------------------
 5801|  12.6k|                return impl(rd, range, value);
 5802|  12.6k|            }
 5803|      0|            auto crange = get_as_contiguous(range);
 5804|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5805|      0|            return ranges::next(range.begin(),
 5806|      0|                                ranges::distance(crange.begin(), it));
 5807|       |        }
 5808|       |        else {
 5809|       |            SCN_EXPECT(false);
 5810|       |            SCN_UNREACHABLE;
 5811|       |        }
 5812|  12.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5782|  12.6k|    {
 5783|  12.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 72, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     72|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5784|  12.6k|                        .transform_error(make_eof_scan_error));
 5785|  12.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5786|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3458|  12.6k|    {
 3459|  12.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3460|  12.6k|        return read_default_with_base(range, value, 10);
 3461|  12.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3422|  12.6k|    {
 3423|  12.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 12.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  12.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  12.6k|        if constexpr (!std::is_signed_v<T>) {
 3427|  12.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 72, False: 12.5k]
  ------------------
 3428|     72|                return detail::unexpected_scan_error(
 3429|     72|                    scan_error::invalid_scanned_value,
 3430|     72|                    "Unexpected '-' sign when parsing an "
 3431|     72|                    "unsigned value");
 3432|     72|            }
 3433|  12.6k|        }
 3434|       |
 3435|  12.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 12.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|  12.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  12.8k|                parse_integer_digits_without_thsep(
 3442|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|  12.8k|                    prefix_result.parsed_base));
 3444|       |
 3445|  12.8k|        auto buf = make_contiguous_buffer(
 3446|  12.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|  12.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    243|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    243|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    243|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    243|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 243]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    243|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    243|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|    243|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|    243|                                    prefix_result.parsed_base));
 3450|       |
 3451|    243|        return ranges::next(prefix_result.iterator,
 3452|    243|                            ranges::distance(buf.view().begin(), result_it));
 3453|  12.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  78.6k|    {
 3423|  78.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 78.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  78.6k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  78.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 78.6k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   157k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 93, False: 78.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     93|    }                                                  \
  |  |  |  | 3939|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   157k|                parse_integer_digits_without_thsep(
 3442|   157k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   157k|                    prefix_result.parsed_base));
 3444|       |
 3445|   157k|        auto buf = make_contiguous_buffer(
 3446|   157k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   157k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.40k, False: 73.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.40k|    }                                                  \
  |  |  |  | 3939|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  73.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  73.1k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  73.1k|        return ranges::next(prefix_result.iterator,
 3452|  73.1k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   157k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  90.7k|    {
 3423|  90.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  90.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  90.7k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  90.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 90.7k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   181k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  90.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 123, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    123|    }                                                  \
  |  |  |  | 3939|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   181k|                parse_integer_digits_without_thsep(
 3442|   181k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   181k|                    prefix_result.parsed_base));
 3444|       |
 3445|   181k|        auto buf = make_contiguous_buffer(
 3446|   181k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   181k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  90.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.96k, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.96k|    }                                                  \
  |  |  |  | 3939|  90.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  85.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  85.6k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  85.6k|        return ranges::next(prefix_result.iterator,
 3452|  85.6k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   181k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  92.3k|    {
 3423|  92.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  92.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  92.3k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|       |        if constexpr (!std::is_signed_v<T>) {
 3427|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3428|       |                return detail::unexpected_scan_error(
 3429|       |                    scan_error::invalid_scanned_value,
 3430|       |                    "Unexpected '-' sign when parsing an "
 3431|       |                    "unsigned value");
 3432|       |            }
 3433|       |        }
 3434|       |
 3435|  92.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 92.3k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   184k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  92.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 135, False: 92.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    135|    }                                                  \
  |  |  |  | 3939|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   184k|                parse_integer_digits_without_thsep(
 3442|   184k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   184k|                    prefix_result.parsed_base));
 3444|       |
 3445|   184k|        auto buf = make_contiguous_buffer(
 3446|   184k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   184k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  92.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.83k, False: 87.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.83k|    }                                                  \
  |  |  |  | 3939|  92.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  87.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  87.3k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  87.3k|        return ranges::next(prefix_result.iterator,
 3452|  87.3k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   184k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  69.9k|    {
 3423|  69.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  69.9k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  69.9k|        if constexpr (!std::is_signed_v<T>) {
 3427|  69.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.27k, False: 67.6k]
  ------------------
 3428|  2.27k|                return detail::unexpected_scan_error(
 3429|  2.27k|                    scan_error::invalid_scanned_value,
 3430|  2.27k|                    "Unexpected '-' sign when parsing an "
 3431|  2.27k|                    "unsigned value");
 3432|  2.27k|            }
 3433|  69.9k|        }
 3434|       |
 3435|  69.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 69.9k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   139k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   139k|                parse_integer_digits_without_thsep(
 3442|   139k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   139k|                    prefix_result.parsed_base));
 3444|       |
 3445|   139k|        auto buf = make_contiguous_buffer(
 3446|   139k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   139k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.39k, False: 66.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.39k|    }                                                  \
  |  |  |  | 3939|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  66.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  66.5k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  66.5k|        return ranges::next(prefix_result.iterator,
 3452|  66.5k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   139k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  77.8k|    {
 3423|  77.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  77.8k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  77.8k|        if constexpr (!std::is_signed_v<T>) {
 3427|  77.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.36k, False: 75.5k]
  ------------------
 3428|  2.36k|                return detail::unexpected_scan_error(
 3429|  2.36k|                    scan_error::invalid_scanned_value,
 3430|  2.36k|                    "Unexpected '-' sign when parsing an "
 3431|  2.36k|                    "unsigned value");
 3432|  2.36k|            }
 3433|  77.8k|        }
 3434|       |
 3435|  77.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 77.8k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   155k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   155k|                parse_integer_digits_without_thsep(
 3442|   155k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   155k|                    prefix_result.parsed_base));
 3444|       |
 3445|   155k|        auto buf = make_contiguous_buffer(
 3446|   155k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   155k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.09k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.09k|    }                                                  \
  |  |  |  | 3939|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  74.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  74.7k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  74.7k|        return ranges::next(prefix_result.iterator,
 3452|  74.7k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   155k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3422|  78.8k|    {
 3423|  78.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3424|  78.8k|                                   .transform_error(make_eof_scan_error));
 3425|       |
 3426|  78.8k|        if constexpr (!std::is_signed_v<T>) {
 3427|  78.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3427:17): [True: 2.43k, False: 76.4k]
  ------------------
 3428|  2.43k|                return detail::unexpected_scan_error(
 3429|  2.43k|                    scan_error::invalid_scanned_value,
 3430|  2.43k|                    "Unexpected '-' sign when parsing an "
 3431|  2.43k|                    "unsigned value");
 3432|  2.43k|            }
 3433|  78.8k|        }
 3434|       |
 3435|  78.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3435:13): [True: 0, False: 78.8k]
  ------------------
 3436|      0|            value = T{0};
 3437|      0|            return std::next(prefix_result.iterator);
 3438|      0|        }
 3439|       |
 3440|   157k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|   157k|                parse_integer_digits_without_thsep(
 3442|   157k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3443|   157k|                    prefix_result.parsed_base));
 3444|       |
 3445|   157k|        auto buf = make_contiguous_buffer(
 3446|   157k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3447|   157k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.97k, False: 75.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.97k|    }                                                  \
  |  |  |  | 3939|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3448|  75.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3449|  75.8k|                                    prefix_result.parsed_base));
 3450|       |
 3451|  75.8k|        return ranges::next(prefix_result.iterator,
 3452|  75.8k|                            ranges::distance(buf.view().begin(), result_it));
 3453|   157k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.08k|{
   52|  2.08k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.08k|    string_buffer.resize(size);
   56|  2.08k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.08k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.08k|    const auto wsv_reinterpret_size =
   61|  2.08k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 138, False: 1.94k]
  ------------------
   62|  2.08k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.08k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.08k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.08k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.08k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.08k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.08k|{
  108|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.08k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.08k|{
  185|  2.08k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.08k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.08k|                                   format_strings);
  188|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   157k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   157k|            auto result = scn::scan<T>(
  139|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   157k|                scn::runtime_format(f));
  141|   157k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 136k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   136k|            it = result->begin();
  145|   136k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   157k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   157k|            auto result = scn::scan<T>(
  154|   157k|                global_locale,
  155|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   157k|                scn::runtime_format(f));
  157|   157k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 136k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   136k|            it = result->begin();
  161|   136k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.4k|            auto result = scn::scan_value<T>(
  170|  26.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 131k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 131k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  23.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.5k|            auto result = scn::scan_value<T>(
  170|  23.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 21.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  21.4k|            it = result->begin();
  175|  21.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   198k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   198k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   198k|            auto result = scn::scan<T>(
  139|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   198k|                scn::runtime_format(f));
  141|   198k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 178k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   178k|            it = result->begin();
  145|   178k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   198k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   198k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   198k|            auto result = scn::scan<T>(
  154|   198k|                global_locale,
  155|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   198k|                scn::runtime_format(f));
  157|   198k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 178k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   178k|            it = result->begin();
  161|   178k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 28.5k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  28.5k|            it = result->begin();
  175|  28.5k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   171k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   171k|            auto result = scn::scan<T>(
  139|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   171k|                scn::runtime_format(f));
  141|   171k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 151k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   151k|            it = result->begin();
  145|   151k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   171k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   171k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   171k|            auto result = scn::scan<T>(
  154|   171k|                global_locale,
  155|   171k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   171k|                scn::runtime_format(f));
  157|   171k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 151k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   151k|            it = result->begin();
  161|   151k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.2k|            auto result = scn::scan_value<T>(
  170|  26.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.1k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.1k|            it = result->begin();
  175|  24.1k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   202k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   202k|            auto result = scn::scan<T>(
  139|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   202k|                scn::runtime_format(f));
  141|   202k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 181k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   181k|            it = result->begin();
  145|   181k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   202k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   202k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   202k|            auto result = scn::scan<T>(
  154|   202k|                global_locale,
  155|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   202k|                scn::runtime_format(f));
  157|   202k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 181k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   181k|            it = result->begin();
  161|   181k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  31.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.2k|            auto result = scn::scan_value<T>(
  170|  31.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 29.1k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  29.1k|            it = result->begin();
  175|  29.1k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   173k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   173k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   173k|            auto result = scn::scan<T>(
  139|   173k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   173k|                scn::runtime_format(f));
  141|   173k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 152k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   152k|            it = result->begin();
  145|   152k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   173k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   173k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   173k|            auto result = scn::scan<T>(
  154|   173k|                global_locale,
  155|   173k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   173k|                scn::runtime_format(f));
  157|   173k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 152k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   152k|            it = result->begin();
  161|   152k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.5k|            auto result = scn::scan_value<T>(
  170|  26.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.4k|            it = result->begin();
  175|  24.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   158k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   158k|            auto result = scn::scan<T>(
  139|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   158k|                scn::runtime_format(f));
  141|   158k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 137k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   137k|            it = result->begin();
  145|   137k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   158k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   158k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   158k|            auto result = scn::scan<T>(
  154|   158k|                global_locale,
  155|   158k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   158k|                scn::runtime_format(f));
  157|   158k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 137k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   137k|            it = result->begin();
  161|   137k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.4k|            auto result = scn::scan_value<T>(
  170|  26.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.3k|            it = result->begin();
  175|  24.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 131k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 131k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  23.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.4k|            auto result = scn::scan_value<T>(
  170|  23.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 21.3k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   199k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   199k|            auto result = scn::scan<T>(
  139|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   199k|                scn::runtime_format(f));
  141|   199k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 178k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   178k|            it = result->begin();
  145|   178k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   199k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   199k|            auto result = scn::scan<T>(
  154|   199k|                global_locale,
  155|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   199k|                scn::runtime_format(f));
  157|   199k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 178k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   178k|            it = result->begin();
  161|   178k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.0k|            auto result = scn::scan_value<T>(
  170|  30.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 27.9k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  27.9k|            it = result->begin();
  175|  27.9k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   172k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   172k|            auto result = scn::scan<T>(
  139|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   172k|                scn::runtime_format(f));
  141|   172k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 151k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   151k|            it = result->begin();
  145|   151k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   172k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   172k|            auto result = scn::scan<T>(
  154|   172k|                global_locale,
  155|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   172k|                scn::runtime_format(f));
  157|   172k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 151k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   151k|            it = result->begin();
  161|   151k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.1k|            auto result = scn::scan_value<T>(
  170|  26.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.0k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.0k|            it = result->begin();
  175|  24.0k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   203k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   203k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   203k|            auto result = scn::scan<T>(
  139|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   203k|                scn::runtime_format(f));
  141|   203k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 182k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   182k|            it = result->begin();
  145|   182k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   203k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   203k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   203k|            auto result = scn::scan<T>(
  154|   203k|                global_locale,
  155|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   203k|                scn::runtime_format(f));
  157|   203k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 182k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   182k|            it = result->begin();
  161|   182k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 28.5k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  28.5k|            it = result->begin();
  175|  28.5k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 20.8k, False: 2.08k]
  ------------------
  135|  20.8k|        auto it = scn::ranges::begin(source);
  136|   174k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   174k|            auto result = scn::scan<T>(
  139|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   174k|                scn::runtime_format(f));
  141|   174k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 20.8k, False: 153k]
  ------------------
  142|  20.8k|                break;
  143|  20.8k|            }
  144|   153k|            it = result->begin();
  145|   153k|        }
  146|  20.8k|    }
  147|       |
  148|       |    // scan localized
  149|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 20.8k, False: 2.08k]
  ------------------
  150|  20.8k|        auto it = scn::ranges::begin(source);
  151|   174k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   174k|            auto result = scn::scan<T>(
  154|   174k|                global_locale,
  155|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   174k|                scn::runtime_format(f));
  157|   174k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 20.8k, False: 153k]
  ------------------
  158|  20.8k|                break;
  159|  20.8k|            }
  160|   153k|            it = result->begin();
  161|   153k|        }
  162|  20.8k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  26.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.5k|            auto result = scn::scan_value<T>(
  170|  26.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 24.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  24.4k|            it = result->begin();
  175|  24.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.08k|{
   90|  2.08k|    using char_type = ranges::range_value_t<Source>;
   91|  2.08k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.08k|    deque.clear();
   93|  2.08k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.08k|              std::back_inserter(deque));
   95|  2.08k|    return deque;
   96|  2.08k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.08k|{
   79|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.08k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.08k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.08k|    else {
  112|  2.08k|        return wformat_string_view_buffer;
  113|  2.08k|    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.17k|{
  185|  4.17k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.17k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.17k|                                   format_strings);
  188|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 306]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    306|            it = result->begin();
  145|    306|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 306]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    306|            it = result->begin();
  161|    306|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 48]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     48|            it = result->begin();
  175|     48|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 262]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    262|            it = result->begin();
  145|    262|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 262]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    262|            it = result->begin();
  161|    262|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.20k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.20k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.20k|            auto result = scn::scan_value<T>(
  170|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.20k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 39]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 359]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    359|            it = result->begin();
  145|    359|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 359]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    359|            it = result->begin();
  161|    359|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 58]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     58|            it = result->begin();
  175|     58|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 291]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    291|            it = result->begin();
  145|    291|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 291]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    291|            it = result->begin();
  161|    291|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 45]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.1k|            auto result = scn::scan<T>(
  139|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.1k|                scn::runtime_format(f));
  141|  42.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 428]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    428|            it = result->begin();
  145|    428|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.1k|            auto result = scn::scan<T>(
  154|  42.1k|                global_locale,
  155|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.1k|                scn::runtime_format(f));
  157|  42.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 428]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    428|            it = result->begin();
  161|    428|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.24k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.24k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.24k|            auto result = scn::scan_value<T>(
  170|  4.24k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.24k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 73]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     73|            it = result->begin();
  175|     73|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 350]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    350|            it = result->begin();
  145|    350|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 350]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    350|            it = result->begin();
  161|    350|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 57]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 306]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    306|            it = result->begin();
  145|    306|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 306]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    306|            it = result->begin();
  161|    306|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 48]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     48|            it = result->begin();
  175|     48|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 262]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    262|            it = result->begin();
  145|    262|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 262]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    262|            it = result->begin();
  161|    262|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.20k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.20k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.20k|            auto result = scn::scan_value<T>(
  170|  4.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.20k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 39]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 359]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    359|            it = result->begin();
  145|    359|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 359]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    359|            it = result->begin();
  161|    359|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 58]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     58|            it = result->begin();
  175|     58|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  41.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.9k|            auto result = scn::scan<T>(
  139|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.9k|                scn::runtime_format(f));
  141|  41.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 291]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    291|            it = result->begin();
  145|    291|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  41.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.9k|            auto result = scn::scan<T>(
  154|  41.9k|                global_locale,
  155|  41.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.9k|                scn::runtime_format(f));
  157|  41.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 291]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    291|            it = result->begin();
  161|    291|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.21k|            auto result = scn::scan_value<T>(
  170|  4.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 45]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.1k|            auto result = scn::scan<T>(
  139|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.1k|                scn::runtime_format(f));
  141|  42.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 428]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    428|            it = result->begin();
  145|    428|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.1k|            auto result = scn::scan<T>(
  154|  42.1k|                global_locale,
  155|  42.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.1k|                scn::runtime_format(f));
  157|  42.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 428]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    428|            it = result->begin();
  161|    428|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.24k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.24k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.24k|            auto result = scn::scan_value<T>(
  170|  4.24k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.24k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 73]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     73|            it = result->begin();
  175|     73|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.17k|{
  133|       |    // Regular scan
  134|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 41.7k, False: 4.17k]
  ------------------
  135|  41.7k|        auto it = scn::ranges::begin(source);
  136|  42.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  42.0k|            auto result = scn::scan<T>(
  139|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  42.0k|                scn::runtime_format(f));
  141|  42.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 41.7k, False: 350]
  ------------------
  142|  41.7k|                break;
  143|  41.7k|            }
  144|    350|            it = result->begin();
  145|    350|        }
  146|  41.7k|    }
  147|       |
  148|       |    // scan localized
  149|  41.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 41.7k, False: 4.17k]
  ------------------
  150|  41.7k|        auto it = scn::ranges::begin(source);
  151|  42.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  42.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  42.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  42.0k|            auto result = scn::scan<T>(
  154|  42.0k|                global_locale,
  155|  42.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  42.0k|                scn::runtime_format(f));
  157|  42.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 41.7k, False: 350]
  ------------------
  158|  41.7k|                break;
  159|  41.7k|            }
  160|    350|            it = result->begin();
  161|    350|        }
  162|  41.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.17k|    {
  166|  4.17k|        auto it = scn::ranges::begin(source);
  167|  4.22k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.22k|            auto result = scn::scan_value<T>(
  170|  4.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.22k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.17k, False: 57]
  ------------------
  172|  4.17k|                break;
  173|  4.17k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  4.17k|    }
  177|  4.17k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.17k|{
   90|  4.17k|    using char_type = ranges::range_value_t<Source>;
   91|  4.17k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.17k|    deque.clear();
   93|  4.17k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.17k|              std::back_inserter(deque));
   95|  4.17k|    return deque;
   96|  4.17k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.17k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.17k|    else {
   83|  4.17k|        return wnoncontiguous_buffer;
   84|  4.17k|    }
   85|  4.17k|}

LLVMFuzzerTestOneInput:
   59|  2.08k|{
   60|  2.08k|    scn::fuzz::run(data, size);
   61|  2.08k|    return 0;
   62|  2.08k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.08k|{
   36|  2.08k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.08k]
  |  Branch (36:35): [True: 0, False: 2.08k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.08k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.08k|    const auto& f =
   43|  2.08k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.08k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.08k|    do_basic_run(sv, f);
   46|       |
   47|  2.08k|    const auto& wf = get_format_strings<wchar_t>(
   48|  2.08k|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.08k|        L"{:'}", L"{:'L}");
   50|  2.08k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.08k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 2.08k, False: 0]
  ------------------
   52|  2.08k|        do_basic_run(wsv_transcode, wf);
   53|  2.08k|    }
   54|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.08k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.08k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.08k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.08k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.08k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.08k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.17k|{
   25|  4.17k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.17k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.17k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.17k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.17k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.17k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.17k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.17k|{
   25|  4.17k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.17k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.17k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.17k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.17k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.17k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.17k|}

