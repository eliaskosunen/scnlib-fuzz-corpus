_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  986|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  986|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  986|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|   862k|{
 4067|   862k|    if constexpr (sizeof(U) == 1) {
 4068|   862k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|   862k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|   862k|{
 4031|   862k|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|   862k|    SCN_GCC_COMPAT_PUSH
 4034|   862k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|   862k|    constexpr char lengths[] =
 4036|   862k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|   862k|        "\1\1\1\1\1\1\1\1"
 4038|   862k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|   862k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|   862k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|   862k|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|   862k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|   862k|    SCN_GCC_COMPAT_POP
 4045|   862k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   845k|{
 4273|   845k|    if constexpr (sizeof(CharT) == 1) {
 4274|   845k|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|   845k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|   845k|{
 4086|   845k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|   845k|    const auto is_trailing_code_unit = [](char ch) {
 4089|   845k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|   845k|    };
 4091|       |
 4092|   845k|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 836k, False: 8.97k]
  ------------------
 4093|   836k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 1.01k, False: 835k]
  ------------------
 4094|  1.01k|            SCN_UNLIKELY_ATTR
 4095|  1.01k|            return invalid_code_point;
 4096|  1.01k|        }
 4097|   835k|        return static_cast<char32_t>(input[0]);
 4098|   836k|    }
 4099|       |
 4100|  8.97k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 3.65k, False: 5.31k]
  ------------------
 4101|  3.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 44, False: 3.61k]
  ------------------
 4102|     44|            SCN_UNLIKELY_ATTR
 4103|     44|            return invalid_code_point;
 4104|     44|        }
 4105|  3.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 830, False: 2.78k]
  ------------------
 4106|    830|            SCN_UNLIKELY_ATTR
 4107|    830|            return invalid_code_point;
 4108|    830|        }
 4109|       |
 4110|  2.78k|        char32_t cp{};
 4111|  2.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|  2.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|  2.78k|        return cp;
 4114|  3.61k|    }
 4115|       |
 4116|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 4.14k, False: 1.17k]
  ------------------
 4117|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 53, False: 4.08k]
  ------------------
 4118|     53|            SCN_UNLIKELY_ATTR
 4119|     53|            return invalid_code_point;
 4120|     53|        }
 4121|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 613, False: 3.47k]
  ------------------
 4122|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 260, False: 3.21k]
  ------------------
 4123|    873|            SCN_UNLIKELY_ATTR
 4124|    873|            return invalid_code_point;
 4125|    873|        }
 4126|       |
 4127|  3.21k|        char32_t cp{};
 4128|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|  3.21k|        return cp;
 4132|  4.08k|    }
 4133|       |
 4134|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 1.17k, False: 0]
  ------------------
 4135|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 1.17k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 275, False: 901]
  ------------------
 4140|    275|            SCN_UNLIKELY_ATTR
 4141|    275|            return invalid_code_point;
 4142|    275|        }
 4143|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 391, False: 510]
  ------------------
 4144|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 13, False: 497]
  ------------------
 4145|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 10, False: 487]
  ------------------
 4146|    414|            SCN_UNLIKELY_ATTR
 4147|    414|            return invalid_code_point;
 4148|    414|        }
 4149|       |
 4150|    487|        char32_t cp{};
 4151|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|    487|        return cp;
 4156|    901|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|  13.0k|    const auto is_trailing_code_unit = [](char ch) {
 4089|  13.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  13.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|   593k|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|   593k|    else {
 3965|   593k|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|   593k|                                       to_address(first), to_address(last)))};
 3967|   593k|    }
 3968|   593k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.78M|{
  316|  1.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.78M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.57M|{
  294|  4.57M|    return p;
  295|  4.57M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|  1.37M|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|  1.37M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|  1.37M|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|  1.37M|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|  1.37M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  87.3k|    {
 2868|  87.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  87.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  87.3k|    {
 2849|  87.3k|        return decay_copy(t.begin());
 2850|  87.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|  4.29M|{
 2093|  4.29M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  4.29M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   901k|    {
 2925|   901k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   901k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   901k|    {
 2907|   901k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   901k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  33.9k|{
 9761|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9762|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  33.9k|                                   make_scan_args(result->values())));
 9764|  33.9k|    return result;
 9765|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9716|  73.2k|{
 9717|  73.2k|    return scan_result_type<Source, Args...>();
 9718|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1550|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.2k|        : m_value(T{}), m_has_value(true)
  427|  73.2k|    {
  428|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6623|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|   450k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|   450k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6397|   207k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  73.2k|{
 9702|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  58.7k|    else {
 9706|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  58.7k|    static_cast<    \
  |  | 1056|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  58.7k|    }
 9708|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|   450k|    {
 1739|   450k|        return has_value();
 1740|   450k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   900k|    {
  490|   900k|        return m_has_value;
  491|   900k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  86.6k|    {
 1745|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  86.6k|        return this->get_unexpected().error();
 1747|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.6k|    {
  473|  86.6k|        return m_unexpected;
  474|  86.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  5.84M|    {
  365|  5.84M|        return m_unexpected;
  366|  5.84M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.60M|        : m_unexpected(std::forward<Err>(e))
  350|  2.60M|    {
  351|  2.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.60M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  3.36M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.36M|    {
  360|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   292k|    {
  490|   292k|        return m_has_value;
  491|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   190k|    {
  456|   190k|        return m_value;
  457|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   520k|{
  396|   520k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   520k|        T(std::forward<Args>(args)...);
  398|   520k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|   363k|    {
 6498|   363k|        m_range = std::forward<Other>(r);
 6499|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|   363k|    {
 1794|   363k|        return value();
 1795|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   363k|    {
 1768|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   363k|        return this->get_value();
 1770|   363k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   363k|    {
  456|   363k|        return m_value;
  457|   363k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9522|   209k|{
 9523|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|   209k|{
 9460|   209k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   209k|    auto result = vscan_impl(buffer, format, args);
 9463|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9464|  41.2k|        return unexpected(result.error());
 9465|  41.2k|    }
 9466|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5379|   450k|{
 5380|   450k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   450k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   450k|                  "\n"
 5384|   450k|                  "Unsupported range type given as input to a scanning "
 5385|   450k|                  "function.\n"
 5386|   450k|                  "A range needs to have a character type (value type) "
 5387|   450k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   450k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   450k|                  "to be included.\n"
 5390|   450k|                  "See the scnlib documentation for more details.");
 5391|   450k|    static_assert(
 5392|   450k|        !std::is_same_v<T, custom_char_traits>,
 5393|   450k|        "\n"
 5394|   450k|        "Unsupported range type given as input to a scanning "
 5395|   450k|        "function.\n"
 5396|   450k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   450k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   450k|        "not supported.");
 5399|   450k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   450k|                  "\n"
 5401|   450k|                  "Unsupported range type given as input to a scanning "
 5402|   450k|                  "function.\n"
 5403|   450k|                  "file_marker_found cannot be used as an "
 5404|   450k|                  "source range type to scn::scan.\n"
 5405|   450k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   450k|                  "and do not provide an explicit source range, "
 5407|   450k|                  "or use scn::scan with a FILE* directly.");
 5408|   450k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   450k|                  "\n"
 5410|   450k|                  "Unsupported range type given as input to a scanning "
 5411|   450k|                  "function.\n"
 5412|   450k|                  "In order to be scannable, a range needs to satisfy "
 5413|   450k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   450k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   450k|                  "\n"
 5416|   450k|                  "Unsupported range type given as input to a scanning "
 5417|   450k|                  "function.\n"
 5418|   450k|                  "A range needs to model forward_range and have a valid "
 5419|   450k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   450k|                  "Examples of scannable ranges are std::string, "
 5421|   450k|                  "std::string_view, "
 5422|   450k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   450k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   450k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   450k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   450k|{
 5319|   450k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   450k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   450k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   450k|    {
 2999|   450k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   450k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   450k|    {
 2980|   450k|        return t.data();
 2981|   450k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3381|   450k|    {
 3382|   450k|        return detail::to_address(ranges::begin(derived()));
 3383|   450k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.78M|{
  316|  2.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.78M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   814k|    {
 2868|   814k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   814k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   814k|    {
 2849|   814k|        return decay_copy(t.begin());
 2850|   814k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  8.00M|    {
 3479|  8.00M|        return m_iterator;
 3480|  8.00M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3337|   450k|    {
 3338|   450k|        return static_cast<const D&>(*this);
 3339|   450k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   450k|    {
 3074|   450k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   450k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   450k|    {
 3040|   450k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   450k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|  1.27M|{
 2093|  1.27M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.27M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|  1.87M|    {
 3495|  1.87M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|  1.87M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|  1.90M|    {
 1739|  1.90M|        return has_value();
 1740|  1.90M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.54M|    {
  490|  3.54M|        return m_has_value;
  491|  3.54M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|   520k|    {
 1745|   520k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   520k|        return this->get_unexpected().error();
 1747|   520k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   520k|    {
  473|   520k|        return m_unexpected;
  474|   520k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  86.6k|        : base(unexpect, std::move(e.error())),
 1615|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  86.6k|    {
 1617|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.6k|          m_has_value(false)
  451|  86.6k|    {
  452|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   450k|    {
 1315|   450k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|   363k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   363k|                      ranges::iterator_t<SourceRange>>) {
 6730|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   363k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.13M|    {
 2868|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.13M|    {
 2849|  2.13M|        return decay_copy(t.begin());
 2850|  2.13M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6714|   363k|{
 6715|   363k|    return ranges::end(source);
 6716|   363k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   363k|    {
 2925|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   363k|    {
 2907|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   363k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|  5.55M|    {
 3483|  5.55M|        return m_sentinel;
 3484|  5.55M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|  1.12M|    {
 1794|  1.12M|        return value();
 1795|  1.12M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|  1.12M|    {
 1768|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.12M|        return this->get_value();
 1770|  1.12M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.12M|    {
  456|  1.12M|        return m_value;
  457|  1.12M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   363k|        : base(std::in_place, std::forward<U>(val)),
 1569|   363k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   363k|    {
 1571|   363k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   363k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   363k|    {
  442|   363k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  67.9k|    {
 8798|  67.9k|        return m_str;
 8799|  67.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   135k|{
 6127|   135k|    detail::check_scan_arg_types<Args...>();
 6128|   135k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   135k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5841|   207k|{
 5842|   207k|    constexpr bool default_constructible_constraint =
 5843|   207k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   207k|    static_assert(default_constructible_constraint,
 5845|   207k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   207k|    constexpr bool destructible_constraint =
 5848|   207k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   207k|    static_assert(destructible_constraint,
 5850|   207k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   207k|    constexpr bool non_reference_constraint =
 5853|   207k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   207k|    static_assert(non_reference_constraint,
 5855|   207k|                  "Scan argument types must not be references");
 5856|       |
 5857|   207k|    constexpr bool movable_constraint =
 5858|   207k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   207k|    static_assert(movable_constraint,
 5860|   207k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   207k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   207k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   207k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6102|   135k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   135k|    {
 6104|   135k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   135k|    {
 6112|   135k|        return {detail::make_arg<
 6113|   135k|            kind, Context,
 6114|   135k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   135k|                                 typename Context::char_type>::value>(args)...};
 6116|   135k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5891|   135k|{
 5892|   135k|    return make_value<Context>(value).ref_value;
 5893|   135k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5826|   146k|{
 5827|   146k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   146k|                                  needs_context_tag>) {
 5831|   146k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   146k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5660|   146k|    {                                                                        \
 5661|   146k|        return val;                                                          \
 5662|   146k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5795|   207k|{
 5796|   207k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   207k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   207k|    constexpr bool scannable_char =
 5800|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   207k|    static_assert(scannable_char,
 5802|   207k|                  "Cannot scan an argument of an unsupported character "
 5803|   207k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   207k|    constexpr bool scannable_const =
 5806|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   207k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   207k|    constexpr bool scannable_disabled =
 5810|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   207k|    static_assert(scannable_disabled,
 5812|   207k|                  "Cannot scan an argument that has been disabled by "
 5813|   207k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   207k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   207k|    static_assert(
 5817|   207k|        scannable,
 5818|   207k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   207k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   207k|    return arg_value{arg};
 5822|   207k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5603|   207k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   207k|    {
 5605|   207k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6406|   194k|    {
 6407|   194k|        return m_values;
 6408|   194k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   135k|        : basic_scan_args(store.desc, store.args.data())
 6153|   135k|    {
 6154|   135k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6204|   836k|        : m_desc(desc), m_builtin_values(data)
 6205|   836k|    {
 6206|   836k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  4.15M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  4.15M|    static_cast<    \
  |  | 1056|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  4.15M|    static_cast<    \
  |  | 1056|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  4.15M|    {
 3465|  4.15M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|   836k|{
 8459|   836k|    return s;
 8460|   836k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|   836k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  67.9k|        : m_str(r.str)
 8793|  67.9k|    {
 8794|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1738|  73.2k|    {
 1739|  73.2k|        return has_value();
 1740|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1813|   190k|    {
 1814|   190k|        return &value();
 1815|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   190k|    {
 1768|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   190k|        return this->get_value();
 1770|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6486|   363k|    {
 6487|   363k|        return ranges::begin(m_range);
 6488|   363k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  33.9k|{
 9830|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9831|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  33.9k|                                   make_scan_args(result->values())));
 9833|  33.9k|    return result;
 9834|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9540|   209k|{
 9541|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|   209k|{
 9476|   209k|#if !SCN_DISABLE_LOCALE
 9477|   209k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9484|  41.2k|        return unexpected(result.error());
 9485|  41.2k|    }
 9486|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  5.29k|{
 9871|  5.29k|    auto result = make_scan_result<Source, T>();
 9872|  5.29k|    fill_scan_result(
 9873|  5.29k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  5.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  5.29k|                            detail::make_arg<scan_context>(result->value())));
 9875|  5.29k|    return result;
 9876|  5.29k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9553|  31.8k|{
 9554|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  31.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  31.8k|{
 9500|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.12k, False: 27.6k]
  |  |  ------------------
  ------------------
 9504|  4.12k|        return unexpected(result.error());
 9505|  4.12k|    }
 9506|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  31.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5876|  10.5k|{
 5877|  10.5k|    check_scan_arg_types<T>();
 5878|       |
 5879|  10.5k|    basic_scan_arg<Context> arg;
 5880|  10.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  10.5k|    arg.m_value = make_value<Context>(value);
 5882|  10.5k|    return arg;
 5883|  10.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|   899k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|  1.26M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  13.4k|    {
 6429|  13.4k|        return std::get<0>(m_values);
 6430|  13.4k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  29.9k|{
 9761|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9762|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  29.9k|                                   make_scan_args(result->values())));
 9764|  29.9k|    return result;
 9765|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9716|  64.2k|{
 9717|  64.2k|    return scan_result_type<Source, Args...>();
 9718|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1550|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.2k|        : m_value(T{}), m_has_value(true)
  427|  64.2k|    {
  428|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6623|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6397|   189k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  64.2k|{
 9702|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  49.7k|    else {
 9706|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  49.7k|    static_cast<    \
  |  | 1056|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  49.7k|    }
 9708|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   163k|    {
  456|   163k|        return m_value;
  457|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  59.8k|    {
 8798|  59.8k|        return m_str;
 8799|  59.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   119k|{
 6127|   119k|    detail::check_scan_arg_types<Args...>();
 6128|   119k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   119k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5841|   189k|{
 5842|   189k|    constexpr bool default_constructible_constraint =
 5843|   189k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   189k|    static_assert(default_constructible_constraint,
 5845|   189k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   189k|    constexpr bool destructible_constraint =
 5848|   189k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   189k|    static_assert(destructible_constraint,
 5850|   189k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   189k|    constexpr bool non_reference_constraint =
 5853|   189k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   189k|    static_assert(non_reference_constraint,
 5855|   189k|                  "Scan argument types must not be references");
 5856|       |
 5857|   189k|    constexpr bool movable_constraint =
 5858|   189k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   189k|    static_assert(movable_constraint,
 5860|   189k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   189k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   189k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   189k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6102|   119k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   119k|    {
 6104|   119k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   119k|    {
 6112|   119k|        return {detail::make_arg<
 6113|   119k|            kind, Context,
 6114|   119k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   119k|                                 typename Context::char_type>::value>(args)...};
 6116|   119k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE7EhvEEPvRT2_:
 5891|   119k|{
 5892|   119k|    return make_value<Context>(value).ref_value;
 5893|   119k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5826|   128k|{
 5827|   128k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   128k|                                  needs_context_tag>) {
 5831|   128k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   128k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5660|   128k|    {                                                                        \
 5661|   128k|        return val;                                                          \
 5662|   128k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5795|   189k|{
 5796|   189k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   189k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   189k|    constexpr bool scannable_char =
 5800|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   189k|    static_assert(scannable_char,
 5802|   189k|                  "Cannot scan an argument of an unsupported character "
 5803|   189k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   189k|    constexpr bool scannable_const =
 5806|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   189k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   189k|    constexpr bool scannable_disabled =
 5810|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   189k|    static_assert(scannable_disabled,
 5812|   189k|                  "Cannot scan an argument that has been disabled by "
 5813|   189k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   189k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   189k|    static_assert(
 5817|   189k|        scannable,
 5818|   189k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   189k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   189k|    return arg_value{arg};
 5822|   189k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5603|   189k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   189k|    {
 5605|   189k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6406|   178k|    {
 6407|   178k|        return m_values;
 6408|   178k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   119k|        : basic_scan_args(store.desc, store.args.data())
 6153|   119k|    {
 6154|   119k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  59.8k|        : m_str(r.str)
 8793|  59.8k|    {
 8794|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1738|  64.2k|    {
 1739|  64.2k|        return has_value();
 1740|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1813|   163k|    {
 1814|   163k|        return &value();
 1815|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   163k|    {
 1768|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   163k|        return this->get_value();
 1770|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  29.9k|{
 9830|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9831|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  29.9k|                                   make_scan_args(result->values())));
 9833|  29.9k|    return result;
 9834|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  4.41k|{
 9871|  4.41k|    auto result = make_scan_result<Source, T>();
 9872|  4.41k|    fill_scan_result(
 9873|  4.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.41k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.41k|    return result;
 9876|  4.41k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5876|  8.82k|{
 5877|  8.82k|    check_scan_arg_types<T>();
 5878|       |
 5879|  8.82k|    basic_scan_arg<Context> arg;
 5880|  8.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  8.82k|    arg.m_value = make_value<Context>(value);
 5882|  8.82k|    return arg;
 5883|  8.82k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  11.6k|    {
 6429|  11.6k|        return std::get<0>(m_values);
 6430|  11.6k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  39.7k|{
 9761|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9762|  39.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  39.7k|                                   make_scan_args(result->values())));
 9764|  39.7k|    return result;
 9765|  39.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9716|  85.6k|{
 9717|  85.6k|    return scan_result_type<Source, Args...>();
 9718|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  85.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  85.6k|        : m_value(T{}), m_has_value(true)
  427|  85.6k|    {
  428|  85.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6623|  85.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6397|   232k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  85.6k|{
 9702|  85.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 71.1k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  71.1k|    else {
 9706|  71.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  71.1k|    static_cast<    \
  |  | 1056|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  71.1k|    }
 9708|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   342k|    {
  490|   342k|        return m_has_value;
  491|   342k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   228k|    {
  456|   228k|        return m_value;
  457|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  79.5k|    {
 8798|  79.5k|        return m_str;
 8799|  79.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   158k|{
 6127|   158k|    detail::check_scan_arg_types<Args...>();
 6128|   158k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   158k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5841|   232k|{
 5842|   232k|    constexpr bool default_constructible_constraint =
 5843|   232k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   232k|    static_assert(default_constructible_constraint,
 5845|   232k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   232k|    constexpr bool destructible_constraint =
 5848|   232k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   232k|    static_assert(destructible_constraint,
 5850|   232k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   232k|    constexpr bool non_reference_constraint =
 5853|   232k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   232k|    static_assert(non_reference_constraint,
 5855|   232k|                  "Scan argument types must not be references");
 5856|       |
 5857|   232k|    constexpr bool movable_constraint =
 5858|   232k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   232k|    static_assert(movable_constraint,
 5860|   232k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   232k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   232k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   232k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6102|   158k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   158k|    {
 6104|   158k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   158k|    {
 6112|   158k|        return {detail::make_arg<
 6113|   158k|            kind, Context,
 6114|   158k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   158k|                                 typename Context::char_type>::value>(args)...};
 6116|   158k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5891|   158k|{
 5892|   158k|    return make_value<Context>(value).ref_value;
 5893|   158k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5826|   170k|{
 5827|   170k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   170k|                                  needs_context_tag>) {
 5831|   170k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   170k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5660|   170k|    {                                                                        \
 5661|   170k|        return val;                                                          \
 5662|   170k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5795|   232k|{
 5796|   232k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   232k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   232k|    constexpr bool scannable_char =
 5800|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   232k|    static_assert(scannable_char,
 5802|   232k|                  "Cannot scan an argument of an unsupported character "
 5803|   232k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   232k|    constexpr bool scannable_const =
 5806|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   232k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   232k|    constexpr bool scannable_disabled =
 5810|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   232k|    static_assert(scannable_disabled,
 5812|   232k|                  "Cannot scan an argument that has been disabled by "
 5813|   232k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   232k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   232k|    static_assert(
 5817|   232k|        scannable,
 5818|   232k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   232k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   232k|    return arg_value{arg};
 5822|   232k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5603|   232k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   232k|    {
 5605|   232k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6406|   217k|    {
 6407|   217k|        return m_values;
 6408|   217k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   158k|        : basic_scan_args(store.desc, store.args.data())
 6153|   158k|    {
 6154|   158k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  79.5k|        : m_str(r.str)
 8793|  79.5k|    {
 8794|  79.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1738|  85.6k|    {
 1739|  85.6k|        return has_value();
 1740|  85.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1813|   228k|    {
 1814|   228k|        return &value();
 1815|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   228k|    {
 1768|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   228k|        return this->get_value();
 1770|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  39.7k|{
 9830|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9831|  39.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  39.7k|                                   make_scan_args(result->values())));
 9833|  39.7k|    return result;
 9834|  39.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  6.11k|{
 9871|  6.11k|    auto result = make_scan_result<Source, T>();
 9872|  6.11k|    fill_scan_result(
 9873|  6.11k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  6.11k|                            detail::make_arg<scan_context>(result->value())));
 9875|  6.11k|    return result;
 9876|  6.11k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5876|  12.0k|{
 5877|  12.0k|    check_scan_arg_types<T>();
 5878|       |
 5879|  12.0k|    basic_scan_arg<Context> arg;
 5880|  12.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  12.0k|    arg.m_value = make_value<Context>(value);
 5882|  12.0k|    return arg;
 5883|  12.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  14.8k|    {
 6429|  14.8k|        return std::get<0>(m_values);
 6430|  14.8k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  32.4k|{
 9761|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  32.4k|                                   make_scan_args(result->values())));
 9764|  32.4k|    return result;
 9765|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9716|  69.6k|{
 9717|  69.6k|    return scan_result_type<Source, Args...>();
 9718|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  69.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  69.6k|        : m_value(T{}), m_has_value(true)
  427|  69.6k|    {
  428|  69.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6623|  69.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6397|   200k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  69.6k|{
 9702|  69.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  55.2k|    else {
 9706|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  55.2k|    static_cast<    \
  |  | 1056|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  55.2k|    }
 9708|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   278k|    {
  490|   278k|        return m_has_value;
  491|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   180k|    {
  456|   180k|        return m_value;
  457|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  64.8k|    {
 8798|  64.8k|        return m_str;
 8799|  64.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   129k|{
 6127|   129k|    detail::check_scan_arg_types<Args...>();
 6128|   129k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   129k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5841|   200k|{
 5842|   200k|    constexpr bool default_constructible_constraint =
 5843|   200k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   200k|    static_assert(default_constructible_constraint,
 5845|   200k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   200k|    constexpr bool destructible_constraint =
 5848|   200k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   200k|    static_assert(destructible_constraint,
 5850|   200k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   200k|    constexpr bool non_reference_constraint =
 5853|   200k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   200k|    static_assert(non_reference_constraint,
 5855|   200k|                  "Scan argument types must not be references");
 5856|       |
 5857|   200k|    constexpr bool movable_constraint =
 5858|   200k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   200k|    static_assert(movable_constraint,
 5860|   200k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   200k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   200k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   200k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6102|   129k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   129k|    {
 6104|   129k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   129k|    {
 6112|   129k|        return {detail::make_arg<
 6113|   129k|            kind, Context,
 6114|   129k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   129k|                                 typename Context::char_type>::value>(args)...};
 6116|   129k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 5891|   129k|{
 5892|   129k|    return make_value<Context>(value).ref_value;
 5893|   129k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5826|   139k|{
 5827|   139k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   139k|                                  needs_context_tag>) {
 5831|   139k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   139k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5660|   139k|    {                                                                        \
 5661|   139k|        return val;                                                          \
 5662|   139k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5795|   200k|{
 5796|   200k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   200k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   200k|    constexpr bool scannable_char =
 5800|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   200k|    static_assert(scannable_char,
 5802|   200k|                  "Cannot scan an argument of an unsupported character "
 5803|   200k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   200k|    constexpr bool scannable_const =
 5806|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   200k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   200k|    constexpr bool scannable_disabled =
 5810|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   200k|    static_assert(scannable_disabled,
 5812|   200k|                  "Cannot scan an argument that has been disabled by "
 5813|   200k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   200k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   200k|    static_assert(
 5817|   200k|        scannable,
 5818|   200k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   200k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   200k|    return arg_value{arg};
 5822|   200k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5603|   200k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   200k|    {
 5605|   200k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6406|   188k|    {
 6407|   188k|        return m_values;
 6408|   188k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   129k|        : basic_scan_args(store.desc, store.args.data())
 6153|   129k|    {
 6154|   129k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  64.8k|        : m_str(r.str)
 8793|  64.8k|    {
 8794|  64.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1738|  69.6k|    {
 1739|  69.6k|        return has_value();
 1740|  69.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1813|   180k|    {
 1814|   180k|        return &value();
 1815|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   180k|    {
 1768|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   180k|        return this->get_value();
 1770|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  32.4k|{
 9830|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  32.4k|                                   make_scan_args(result->values())));
 9833|  32.4k|    return result;
 9834|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  4.85k|{
 9871|  4.85k|    auto result = make_scan_result<Source, T>();
 9872|  4.85k|    fill_scan_result(
 9873|  4.85k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.85k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.85k|    return result;
 9876|  4.85k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5876|  9.68k|{
 5877|  9.68k|    check_scan_arg_types<T>();
 5878|       |
 5879|  9.68k|    basic_scan_arg<Context> arg;
 5880|  9.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  9.68k|    arg.m_value = make_value<Context>(value);
 5882|  9.68k|    return arg;
 5883|  9.68k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  12.5k|    {
 6429|  12.5k|        return std::get<0>(m_values);
 6430|  12.5k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  40.4k|{
 9761|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  40.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  40.4k|                                   make_scan_args(result->values())));
 9764|  40.4k|    return result;
 9765|  40.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9716|  87.1k|{
 9717|  87.1k|    return scan_result_type<Source, Args...>();
 9718|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1550|  87.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.1k|        : m_value(T{}), m_has_value(true)
  427|  87.1k|    {
  428|  87.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6623|  87.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6397|   235k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  87.1k|{
 9702|  87.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 72.6k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  72.6k|    else {
 9706|  72.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  72.6k|    static_cast<    \
  |  | 1056|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  72.6k|    }
 9708|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   348k|    {
  490|   348k|        return m_has_value;
  491|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   232k|    {
  456|   232k|        return m_value;
  457|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  80.8k|    {
 8798|  80.8k|        return m_str;
 8799|  80.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   161k|{
 6127|   161k|    detail::check_scan_arg_types<Args...>();
 6128|   161k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   161k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5841|   235k|{
 5842|   235k|    constexpr bool default_constructible_constraint =
 5843|   235k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   235k|    static_assert(default_constructible_constraint,
 5845|   235k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   235k|    constexpr bool destructible_constraint =
 5848|   235k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   235k|    static_assert(destructible_constraint,
 5850|   235k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   235k|    constexpr bool non_reference_constraint =
 5853|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   235k|    static_assert(non_reference_constraint,
 5855|   235k|                  "Scan argument types must not be references");
 5856|       |
 5857|   235k|    constexpr bool movable_constraint =
 5858|   235k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   235k|    static_assert(movable_constraint,
 5860|   235k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   235k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   235k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   235k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6102|   161k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   161k|    {
 6104|   161k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   161k|    {
 6112|   161k|        return {detail::make_arg<
 6113|   161k|            kind, Context,
 6114|   161k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   161k|                                 typename Context::char_type>::value>(args)...};
 6116|   161k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5891|   161k|{
 5892|   161k|    return make_value<Context>(value).ref_value;
 5893|   161k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5826|   173k|{
 5827|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   173k|                                  needs_context_tag>) {
 5831|   173k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   173k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5660|   173k|    {                                                                        \
 5661|   173k|        return val;                                                          \
 5662|   173k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5795|   235k|{
 5796|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   235k|    constexpr bool scannable_char =
 5800|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   235k|    static_assert(scannable_char,
 5802|   235k|                  "Cannot scan an argument of an unsupported character "
 5803|   235k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   235k|    constexpr bool scannable_const =
 5806|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   235k|    constexpr bool scannable_disabled =
 5810|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   235k|    static_assert(scannable_disabled,
 5812|   235k|                  "Cannot scan an argument that has been disabled by "
 5813|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   235k|    static_assert(
 5817|   235k|        scannable,
 5818|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   235k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   235k|    return arg_value{arg};
 5822|   235k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5603|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   235k|    {
 5605|   235k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6406|   220k|    {
 6407|   220k|        return m_values;
 6408|   220k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   161k|        : basic_scan_args(store.desc, store.args.data())
 6153|   161k|    {
 6154|   161k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  80.8k|        : m_str(r.str)
 8793|  80.8k|    {
 8794|  80.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1738|  87.1k|    {
 1739|  87.1k|        return has_value();
 1740|  87.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1813|   232k|    {
 1814|   232k|        return &value();
 1815|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   232k|    {
 1768|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   232k|        return this->get_value();
 1770|   232k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  40.4k|{
 9830|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  40.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  40.4k|                                   make_scan_args(result->values())));
 9833|  40.4k|    return result;
 9834|  40.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  6.22k|{
 9871|  6.22k|    auto result = make_scan_result<Source, T>();
 9872|  6.22k|    fill_scan_result(
 9873|  6.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  6.22k|                            detail::make_arg<scan_context>(result->value())));
 9875|  6.22k|    return result;
 9876|  6.22k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5876|  12.2k|{
 5877|  12.2k|    check_scan_arg_types<T>();
 5878|       |
 5879|  12.2k|    basic_scan_arg<Context> arg;
 5880|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  12.2k|    arg.m_value = make_value<Context>(value);
 5882|  12.2k|    return arg;
 5883|  12.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  15.1k|    {
 6429|  15.1k|        return std::get<0>(m_values);
 6430|  15.1k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|  32.7k|{
 9761|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9762|  32.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  32.7k|                                   make_scan_args(result->values())));
 9764|  32.7k|    return result;
 9765|  32.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9716|  70.4k|{
 9717|  70.4k|    return scan_result_type<Source, Args...>();
 9718|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1550|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.4k|        : m_value(T{}), m_has_value(true)
  427|  70.4k|    {
  428|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6623|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6397|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  70.4k|{
 9702|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  56.0k|    else {
 9706|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  56.0k|    static_cast<    \
  |  | 1056|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  56.0k|    }
 9708|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|  65.5k|    {
 8798|  65.5k|        return m_str;
 8799|  65.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   131k|{
 6127|   131k|    detail::check_scan_arg_types<Args...>();
 6128|   131k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   131k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5841|   202k|{
 5842|   202k|    constexpr bool default_constructible_constraint =
 5843|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|   202k|    static_assert(default_constructible_constraint,
 5845|   202k|                  "Scan argument types must be default constructible");
 5846|       |
 5847|   202k|    constexpr bool destructible_constraint =
 5848|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|   202k|    static_assert(destructible_constraint,
 5850|   202k|                  "Scan argument types must be Destructible");
 5851|       |
 5852|   202k|    constexpr bool non_reference_constraint =
 5853|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|   202k|    static_assert(non_reference_constraint,
 5855|   202k|                  "Scan argument types must not be references");
 5856|       |
 5857|   202k|    constexpr bool movable_constraint =
 5858|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|   202k|    static_assert(movable_constraint,
 5860|   202k|                  "Scan argument types must be move constructible");
 5861|       |
 5862|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6102|   131k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   131k|    {
 6104|   131k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   131k|    {
 6112|   131k|        return {detail::make_arg<
 6113|   131k|            kind, Context,
 6114|   131k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   131k|                                 typename Context::char_type>::value>(args)...};
 6116|   131k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EyvEEPvRT2_:
 5891|   131k|{
 5892|   131k|    return make_value<Context>(value).ref_value;
 5893|   131k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5826|   140k|{
 5827|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   140k|                                  needs_context_tag>) {
 5831|   140k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   140k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5660|   140k|    {                                                                        \
 5661|   140k|        return val;                                                          \
 5662|   140k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5795|   202k|{
 5796|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|   202k|    constexpr bool scannable_char =
 5800|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|   202k|    static_assert(scannable_char,
 5802|   202k|                  "Cannot scan an argument of an unsupported character "
 5803|   202k|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|   202k|    constexpr bool scannable_const =
 5806|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|   202k|    constexpr bool scannable_disabled =
 5810|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|   202k|    static_assert(scannable_disabled,
 5812|   202k|                  "Cannot scan an argument that has been disabled by "
 5813|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|   202k|    static_assert(
 5817|   202k|        scannable,
 5818|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|   202k|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|   202k|    return arg_value{arg};
 5822|   202k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5603|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|   202k|    {
 5605|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6406|   189k|    {
 6407|   189k|        return m_values;
 6408|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   131k|        : basic_scan_args(store.desc, store.args.data())
 6153|   131k|    {
 6154|   131k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  65.5k|        : m_str(r.str)
 8793|  65.5k|    {
 8794|  65.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1738|  70.4k|    {
 1739|  70.4k|        return has_value();
 1740|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1813|   182k|    {
 1814|   182k|        return &value();
 1815|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   182k|    {
 1768|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   182k|        return this->get_value();
 1770|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|  32.7k|{
 9830|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9831|  32.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  32.7k|                                   make_scan_args(result->values())));
 9833|  32.7k|    return result;
 9834|  32.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  4.91k|{
 9871|  4.91k|    auto result = make_scan_result<Source, T>();
 9872|  4.91k|    fill_scan_result(
 9873|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.91k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.91k|    return result;
 9876|  4.91k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5876|  9.81k|{
 5877|  9.81k|    check_scan_arg_types<T>();
 5878|       |
 5879|  9.81k|    basic_scan_arg<Context> arg;
 5880|  9.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  9.81k|    arg.m_value = make_value<Context>(value);
 5882|  9.81k|    return arg;
 5883|  9.81k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  12.6k|    {
 6429|  12.6k|        return std::get<0>(m_values);
 6430|  12.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  86.6k|    {
 2868|  86.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  86.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  86.6k|    {
 2849|  86.6k|        return decay_copy(t.begin());
 2850|  86.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2092|  9.22M|{
 2093|  9.22M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  9.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  9.22M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   898k|    {
 2925|   898k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   898k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   898k|    {
 2907|   898k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   898k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  33.9k|{
 9761|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9762|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  33.9k|                                   make_scan_args(result->values())));
 9764|  33.9k|    return result;
 9765|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9716|  73.2k|{
 9717|  73.2k|    return scan_result_type<Source, Args...>();
 9718|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1550|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  73.2k|        : m_value(T{}), m_has_value(true)
  427|  73.2k|    {
  428|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6623|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6466|   449k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3458|   449k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  73.2k|{
 9702|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  58.7k|    else {
 9706|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  58.7k|    static_cast<    \
  |  | 1056|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  58.7k|    }
 9708|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   449k|    {
 1739|   449k|        return has_value();
 1740|   449k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   898k|    {
  490|   898k|        return m_has_value;
  491|   898k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  86.6k|    {
 1745|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  86.6k|        return this->get_unexpected().error();
 1747|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  86.6k|    {
  473|  86.6k|        return m_unexpected;
  474|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   292k|    {
  490|   292k|        return m_has_value;
  491|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   190k|    {
  456|   190k|        return m_value;
  457|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6497|   362k|    {
 6498|   362k|        m_range = std::forward<Other>(r);
 6499|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|   362k|    {
 1794|   362k|        return value();
 1795|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|   362k|    {
 1768|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   362k|        return this->get_value();
 1770|   362k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   362k|    {
  456|   362k|        return m_value;
  457|   362k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9522|   209k|{
 9523|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|   209k|{
 9460|   209k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   209k|    auto result = vscan_impl(buffer, format, args);
 9463|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9464|  41.2k|        return unexpected(result.error());
 9465|  41.2k|    }
 9466|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5379|   449k|{
 5380|   449k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   449k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   449k|                  "\n"
 5384|   449k|                  "Unsupported range type given as input to a scanning "
 5385|   449k|                  "function.\n"
 5386|   449k|                  "A range needs to have a character type (value type) "
 5387|   449k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   449k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   449k|                  "to be included.\n"
 5390|   449k|                  "See the scnlib documentation for more details.");
 5391|   449k|    static_assert(
 5392|   449k|        !std::is_same_v<T, custom_char_traits>,
 5393|   449k|        "\n"
 5394|   449k|        "Unsupported range type given as input to a scanning "
 5395|   449k|        "function.\n"
 5396|   449k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   449k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   449k|        "not supported.");
 5399|   449k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   449k|                  "\n"
 5401|   449k|                  "Unsupported range type given as input to a scanning "
 5402|   449k|                  "function.\n"
 5403|   449k|                  "file_marker_found cannot be used as an "
 5404|   449k|                  "source range type to scn::scan.\n"
 5405|   449k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   449k|                  "and do not provide an explicit source range, "
 5407|   449k|                  "or use scn::scan with a FILE* directly.");
 5408|   449k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   449k|                  "\n"
 5410|   449k|                  "Unsupported range type given as input to a scanning "
 5411|   449k|                  "function.\n"
 5412|   449k|                  "In order to be scannable, a range needs to satisfy "
 5413|   449k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   449k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   449k|                  "\n"
 5416|   449k|                  "Unsupported range type given as input to a scanning "
 5417|   449k|                  "function.\n"
 5418|   449k|                  "A range needs to model forward_range and have a valid "
 5419|   449k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   449k|                  "Examples of scannable ranges are std::string, "
 5421|   449k|                  "std::string_view, "
 5422|   449k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   449k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   449k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   449k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   449k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   449k|    else {
 5365|   449k|        return make_forward_scan_buffer(r);
 5366|   449k|    }
 5367|   449k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5183|   449k|{
 5184|   449k|    return basic_scan_forward_buffer_impl(range);
 5185|   449k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   449k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   449k|          m_cursor(ranges::begin(*m_range))
 4765|   449k|    {
 4766|   449k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|   449k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   449k|    {
 4737|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|   449k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   449k|    {
 4428|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4339|   449k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   812k|    {
 2868|   812k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   812k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   812k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   812k|    {
 2849|   812k|        return decay_copy(t.begin());
 2850|   812k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3478|  1.17M|    {
 3479|  1.17M|        return m_iterator;
 3480|  1.17M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  2.32M|    {
 4770|  2.32M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 143k, False: 2.18M]
  ------------------
 4771|   143k|            return false;
 4772|   143k|        }
 4773|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  2.18M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  2.18M|        }
 4776|  2.18M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 1.76M, False: 416k]
  ------------------
 4777|  1.76M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  1.76M|                                          this->m_current_view.begin(),
 4779|  1.76M|                                          this->m_current_view.end());
 4780|  1.76M|        }
 4781|  2.18M|        m_latest = *m_cursor;
 4782|  2.18M|        ++m_cursor;
 4783|  2.18M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  2.18M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  2.18M|        }
 4787|  2.18M|        return true;
 4788|  2.32M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  6.69M|    {
 2925|  6.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  6.69M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  6.69M|    {
 2907|  6.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  6.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3482|  7.05M|    {
 3483|  7.05M|        return m_sentinel;
 3484|  7.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4344|   449k|    {
 4345|   449k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   449k|        return true;
 4347|   449k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  86.6k|        : base(unexpect, std::move(e.error())),
 1615|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  86.6k|    {
 1617|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  86.6k|          m_has_value(false)
  451|  86.6k|    {
  452|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   449k|    {
 1315|   449k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|   362k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   362k|                      ranges::iterator_t<SourceRange>>) {
 6730|   362k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   362k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   362k|    {
 2868|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   362k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   362k|    {
 2849|   362k|        return decay_copy(t.begin());
 2850|   362k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6714|   362k|{
 6715|   362k|    return ranges::end(source);
 6716|   362k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   362k|    {
 2925|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   362k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   362k|    {
 2907|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   362k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|   362k|        : base(std::in_place, std::forward<U>(val)),
 1569|   362k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   362k|    {
 1571|   362k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   362k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   362k|    {
  442|   362k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  67.9k|    {
 8798|  67.9k|        return m_str;
 8799|  67.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   812k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   812k|    static_cast<    \
  |  | 1056|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   812k|    static_cast<    \
  |  | 1056|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   812k|    {
 3465|   812k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  67.9k|        : m_str(r.str)
 8793|  67.9k|    {
 8794|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1738|  73.2k|    {
 1739|  73.2k|        return has_value();
 1740|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1813|   190k|    {
 1814|   190k|        return &value();
 1815|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   190k|    {
 1768|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   190k|        return this->get_value();
 1770|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6486|   362k|    {
 6487|   362k|        return ranges::begin(m_range);
 6488|   362k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  33.9k|{
 9830|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9831|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  33.9k|                                   make_scan_args(result->values())));
 9833|  33.9k|    return result;
 9834|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9540|   209k|{
 9541|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|   209k|{
 9476|   209k|#if !SCN_DISABLE_LOCALE
 9477|   209k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9484|  41.2k|        return unexpected(result.error());
 9485|  41.2k|    }
 9486|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  5.28k|{
 9871|  5.28k|    auto result = make_scan_result<Source, T>();
 9872|  5.28k|    fill_scan_result(
 9873|  5.28k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  5.28k|                            detail::make_arg<scan_context>(result->value())));
 9875|  5.28k|    return result;
 9876|  5.28k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9553|  31.3k|{
 9554|  31.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  31.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  31.3k|{
 9500|  31.3k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  31.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  31.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.12k, False: 27.2k]
  |  |  ------------------
  ------------------
 9504|  4.12k|        return unexpected(result.error());
 9505|  4.12k|    }
 9506|  27.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  27.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  31.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  29.9k|{
 9761|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9762|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  29.9k|                                   make_scan_args(result->values())));
 9764|  29.9k|    return result;
 9765|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9716|  64.2k|{
 9717|  64.2k|    return scan_result_type<Source, Args...>();
 9718|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1550|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  64.2k|        : m_value(T{}), m_has_value(true)
  427|  64.2k|    {
  428|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6623|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  64.2k|{
 9702|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  49.7k|    else {
 9706|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  49.7k|    static_cast<    \
  |  | 1056|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  49.7k|    }
 9708|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   163k|    {
  456|   163k|        return m_value;
  457|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  59.8k|    {
 8798|  59.8k|        return m_str;
 8799|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  59.8k|        : m_str(r.str)
 8793|  59.8k|    {
 8794|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1738|  64.2k|    {
 1739|  64.2k|        return has_value();
 1740|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1813|   163k|    {
 1814|   163k|        return &value();
 1815|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   163k|    {
 1768|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   163k|        return this->get_value();
 1770|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  29.9k|{
 9830|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9831|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  29.9k|                                   make_scan_args(result->values())));
 9833|  29.9k|    return result;
 9834|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  4.40k|{
 9871|  4.40k|    auto result = make_scan_result<Source, T>();
 9872|  4.40k|    fill_scan_result(
 9873|  4.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.40k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.40k|    return result;
 9876|  4.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  39.6k|{
 9761|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9762|  39.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  39.6k|                                   make_scan_args(result->values())));
 9764|  39.6k|    return result;
 9765|  39.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9716|  85.1k|{
 9717|  85.1k|    return scan_result_type<Source, Args...>();
 9718|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  85.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  85.1k|        : m_value(T{}), m_has_value(true)
  427|  85.1k|    {
  428|  85.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6623|  85.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  85.1k|{
 9702|  85.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 70.7k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  70.7k|    else {
 9706|  70.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  70.7k|    static_cast<    \
  |  | 1056|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  70.7k|    }
 9708|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   340k|    {
  490|   340k|        return m_has_value;
  491|   340k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   226k|    {
  456|   226k|        return m_value;
  457|   226k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  79.2k|    {
 8798|  79.2k|        return m_str;
 8799|  79.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  79.2k|        : m_str(r.str)
 8793|  79.2k|    {
 8794|  79.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1738|  85.1k|    {
 1739|  85.1k|        return has_value();
 1740|  85.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1813|   226k|    {
 1814|   226k|        return &value();
 1815|   226k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   226k|    {
 1768|   226k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   226k|        return this->get_value();
 1770|   226k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  39.6k|{
 9830|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9831|  39.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  39.6k|                                   make_scan_args(result->values())));
 9833|  39.6k|    return result;
 9834|  39.6k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  5.92k|{
 9871|  5.92k|    auto result = make_scan_result<Source, T>();
 9872|  5.92k|    fill_scan_result(
 9873|  5.92k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  5.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  5.92k|                            detail::make_arg<scan_context>(result->value())));
 9875|  5.92k|    return result;
 9876|  5.92k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  32.4k|{
 9761|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9762|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  32.4k|                                   make_scan_args(result->values())));
 9764|  32.4k|    return result;
 9765|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9716|  69.7k|{
 9717|  69.7k|    return scan_result_type<Source, Args...>();
 9718|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  69.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  69.7k|        : m_value(T{}), m_has_value(true)
  427|  69.7k|    {
  428|  69.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6623|  69.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  69.7k|{
 9702|  69.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  55.2k|    else {
 9706|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  55.2k|    static_cast<    \
  |  | 1056|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  55.2k|    }
 9708|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   278k|    {
  490|   278k|        return m_has_value;
  491|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   180k|    {
  456|   180k|        return m_value;
  457|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  64.9k|    {
 8798|  64.9k|        return m_str;
 8799|  64.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  64.9k|        : m_str(r.str)
 8793|  64.9k|    {
 8794|  64.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1738|  69.7k|    {
 1739|  69.7k|        return has_value();
 1740|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1813|   180k|    {
 1814|   180k|        return &value();
 1815|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   180k|    {
 1768|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   180k|        return this->get_value();
 1770|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  32.4k|{
 9830|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9831|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  32.4k|                                   make_scan_args(result->values())));
 9833|  32.4k|    return result;
 9834|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  4.83k|{
 9871|  4.83k|    auto result = make_scan_result<Source, T>();
 9872|  4.83k|    fill_scan_result(
 9873|  4.83k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.83k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.83k|    return result;
 9876|  4.83k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  40.3k|{
 9761|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9762|  40.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  40.3k|                                   make_scan_args(result->values())));
 9764|  40.3k|    return result;
 9765|  40.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9716|  86.6k|{
 9717|  86.6k|    return scan_result_type<Source, Args...>();
 9718|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1550|  86.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.6k|        : m_value(T{}), m_has_value(true)
  427|  86.6k|    {
  428|  86.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6623|  86.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  86.6k|{
 9702|  86.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 72.1k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  72.1k|    else {
 9706|  72.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  72.1k|    static_cast<    \
  |  | 1056|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  72.1k|    }
 9708|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   346k|    {
  490|   346k|        return m_has_value;
  491|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   230k|    {
  456|   230k|        return m_value;
  457|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  80.6k|    {
 8798|  80.6k|        return m_str;
 8799|  80.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  80.6k|        : m_str(r.str)
 8793|  80.6k|    {
 8794|  80.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1738|  86.6k|    {
 1739|  86.6k|        return has_value();
 1740|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1813|   230k|    {
 1814|   230k|        return &value();
 1815|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   230k|    {
 1768|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   230k|        return this->get_value();
 1770|   230k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  40.3k|{
 9830|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9831|  40.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  40.3k|                                   make_scan_args(result->values())));
 9833|  40.3k|    return result;
 9834|  40.3k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  6.02k|{
 9871|  6.02k|    auto result = make_scan_result<Source, T>();
 9872|  6.02k|    fill_scan_result(
 9873|  6.02k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  6.02k|                            detail::make_arg<scan_context>(result->value())));
 9875|  6.02k|    return result;
 9876|  6.02k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|  32.8k|{
 9761|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9762|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|  32.8k|                                   make_scan_args(result->values())));
 9764|  32.8k|    return result;
 9765|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9716|  70.4k|{
 9717|  70.4k|    return scan_result_type<Source, Args...>();
 9718|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1550|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.4k|        : m_value(T{}), m_has_value(true)
  427|  70.4k|    {
  428|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6623|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  70.4k|{
 9702|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9703|  14.4k|        out = unexpected(in.error());
 9704|  14.4k|    }
 9705|  56.0k|    else {
 9706|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  56.0k|    static_cast<    \
  |  | 1056|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  56.0k|    }
 9708|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  14.4k|        : base(unexpect, std::move(e.error())),
 1615|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.4k|    {
 1617|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.4k|          m_has_value(false)
  451|  14.4k|    {
  452|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  14.4k|    {
 1315|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1555|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  901|  14.4k|    {
  902|  14.4k|        assign_common(std::move(other));
  903|  14.4k|        return *this;
  904|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  14.4k|    {
  949|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 14.4k, False: 0]
  ------------------
  950|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 14.4k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  14.4k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   281k|    {
  490|   281k|        return m_has_value;
  491|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   182k|    {
  456|   182k|        return m_value;
  457|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  14.4k|    {
 1045|  14.4k|        this->destroy_value();
 1046|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.4k|    {
  504|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.4k|                                  std::forward<Args>(args)...);
  506|  14.4k|        m_has_value = false;
  507|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.4k|    {
  473|  14.4k|        return m_unexpected;
  474|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.4k|    {
  481|  14.4k|        return std::move(m_unexpected);
  482|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|  65.6k|    {
 8798|  65.6k|        return m_str;
 8799|  65.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|  65.6k|        : m_str(r.str)
 8793|  65.6k|    {
 8794|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1738|  70.4k|    {
 1739|  70.4k|        return has_value();
 1740|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1813|   182k|    {
 1814|   182k|        return &value();
 1815|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   182k|    {
 1768|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   182k|        return this->get_value();
 1770|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|  32.8k|{
 9830|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9831|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|  32.8k|                                   make_scan_args(result->values())));
 9833|  32.8k|    return result;
 9834|  32.8k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  4.89k|{
 9871|  4.89k|    auto result = make_scan_result<Source, T>();
 9872|  4.89k|    fill_scan_result(
 9873|  4.89k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  4.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  4.89k|                            detail::make_arg<scan_context>(result->value())));
 9875|  4.89k|    return result;
 9876|  4.89k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   174k|    {
 2868|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   174k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   174k|    {
 2849|   174k|        return decay_copy(t.begin());
 2850|   174k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|  1.19M|{
 2093|  1.19M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  1.19M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   370k|    {
 2925|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   370k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   370k|    {
 2907|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   370k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9716|  30.7k|{
 9717|  30.7k|    return scan_result_type<Source, Args...>();
 9718|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1550|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6623|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|   184k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|   184k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.7k|{
 9702|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.84k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.84k|    else {
 9706|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.84k|    static_cast<    \
  |  | 1056|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.84k|    }
 9708|  30.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|   184k|    {
 1739|   184k|        return has_value();
 1740|   184k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   369k|    {
  490|   369k|        return m_has_value;
  491|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|   173k|    {
 1745|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   173k|        return this->get_unexpected().error();
 1747|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.4k|    {
  456|  34.4k|        return m_value;
  457|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|  11.3k|    {
 6498|  11.3k|        m_range = std::forward<Other>(r);
 6499|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|  11.3k|    {
 1794|  11.3k|        return value();
 1795|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|  11.3k|    {
 1768|  11.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  11.3k|        return this->get_value();
 1770|  11.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.3k|    {
  456|  11.3k|        return m_value;
  457|  11.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|  88.1k|{
 9460|  88.1k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  88.1k|    auto result = vscan_impl(buffer, format, args);
 9463|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9464|  82.5k|        return unexpected(result.error());
 9465|  82.5k|    }
 9466|  5.56k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  88.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5379|   184k|{
 5380|   184k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   184k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   184k|                  "\n"
 5384|   184k|                  "Unsupported range type given as input to a scanning "
 5385|   184k|                  "function.\n"
 5386|   184k|                  "A range needs to have a character type (value type) "
 5387|   184k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   184k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   184k|                  "to be included.\n"
 5390|   184k|                  "See the scnlib documentation for more details.");
 5391|   184k|    static_assert(
 5392|   184k|        !std::is_same_v<T, custom_char_traits>,
 5393|   184k|        "\n"
 5394|   184k|        "Unsupported range type given as input to a scanning "
 5395|   184k|        "function.\n"
 5396|   184k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   184k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   184k|        "not supported.");
 5399|   184k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   184k|                  "\n"
 5401|   184k|                  "Unsupported range type given as input to a scanning "
 5402|   184k|                  "function.\n"
 5403|   184k|                  "file_marker_found cannot be used as an "
 5404|   184k|                  "source range type to scn::scan.\n"
 5405|   184k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   184k|                  "and do not provide an explicit source range, "
 5407|   184k|                  "or use scn::scan with a FILE* directly.");
 5408|   184k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   184k|                  "\n"
 5410|   184k|                  "Unsupported range type given as input to a scanning "
 5411|   184k|                  "function.\n"
 5412|   184k|                  "In order to be scannable, a range needs to satisfy "
 5413|   184k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   184k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   184k|                  "\n"
 5416|   184k|                  "Unsupported range type given as input to a scanning "
 5417|   184k|                  "function.\n"
 5418|   184k|                  "A range needs to model forward_range and have a valid "
 5419|   184k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   184k|                  "Examples of scannable ranges are std::string, "
 5421|   184k|                  "std::string_view, "
 5422|   184k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   184k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   184k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   184k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   184k|{
 5319|   184k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   184k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   184k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   184k|    {
 2999|   184k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   184k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   184k|    {
 2980|   184k|        return t.data();
 2981|   184k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3381|   184k|    {
 3382|   184k|        return detail::to_address(ranges::begin(derived()));
 3383|   184k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   616k|{
  316|   616k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   616k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   616k|{
  294|   616k|    return p;
  295|   616k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   196k|    {
 2868|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   196k|    {
 2849|   196k|        return decay_copy(t.begin());
 2850|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|  36.7M|    {
 3479|  36.7M|        return m_iterator;
 3480|  36.7M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3337|   184k|    {
 3338|   184k|        return static_cast<const D&>(*this);
 3339|   184k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   184k|    {
 3074|   184k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   184k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   184k|    {
 3040|   184k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   184k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|   551k|    {
 3495|   551k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|   551k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|   173k|        : base(unexpect, std::move(e.error())),
 1615|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   173k|    {
 1617|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   184k|    {
 1315|   184k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|  11.3k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  11.3k|                      ranges::iterator_t<SourceRange>>) {
 6730|  11.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  11.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   437k|    {
 2868|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   437k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   437k|    {
 2849|   437k|        return decay_copy(t.begin());
 2850|   437k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6714|  11.3k|{
 6715|  11.3k|    return ranges::end(source);
 6716|  11.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  11.3k|    {
 2925|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  11.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  11.3k|    {
 2907|  11.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  11.3k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|  35.6M|    {
 3483|  35.6M|        return m_sentinel;
 3484|  35.6M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  11.3k|    {
 1571|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.3k|    {
  442|  11.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.3k|    {
 8798|  29.3k|        return m_str;
 8799|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  58.6k|{
 6127|  58.6k|    detail::check_scan_arg_types<Args...>();
 6128|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6102|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  58.6k|    {
 6104|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  58.6k|    {
 6112|  58.6k|        return {detail::make_arg<
 6113|  58.6k|            kind, Context,
 6114|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6116|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5891|  58.6k|{
 5892|  58.6k|    return make_value<Context>(value).ref_value;
 5893|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5826|  61.4k|{
 5827|  61.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.4k|                                  needs_context_tag>) {
 5831|  61.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5660|  61.4k|    {                                                                        \
 5661|  61.4k|        return val;                                                          \
 5662|  61.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6153|  58.6k|    {
 6154|  58.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6204|   352k|        : m_desc(desc), m_builtin_values(data)
 6205|   352k|    {
 6206|   352k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  1.43M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.43M|    static_cast<    \
  |  | 1056|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.43M|    static_cast<    \
  |  | 1056|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.43M|    {
 3465|  1.43M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|   352k|{
 8464|   352k|    return s;
 8465|   352k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|   352k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.3k|        : m_str(r.str)
 8793|  29.3k|    {
 8794|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1738|  30.7k|    {
 1739|  30.7k|        return has_value();
 1740|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1813|  34.4k|    {
 1814|  34.4k|        return &value();
 1815|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  34.4k|    {
 1768|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.4k|        return this->get_value();
 1770|  34.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6486|  11.3k|    {
 6487|  11.3k|        return ranges::begin(m_range);
 6488|  11.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|  88.1k|{
 9476|  88.1k|#if !SCN_DISABLE_LOCALE
 9477|  88.1k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  88.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  88.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  88.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9484|  82.5k|        return unexpected(result.error());
 9485|  82.5k|    }
 9486|  5.56k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  88.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  8.48k|{
 9500|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9504|  8.25k|        return unexpected(result.error());
 9505|  8.25k|    }
 9506|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  8.48k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.82k|{
 5877|  2.82k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.82k|    basic_scan_arg<Context> arg;
 5880|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.82k|    arg.m_value = make_value<Context>(value);
 5882|  2.82k|    return arg;
 5883|  2.82k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|   369k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9716|  30.6k|{
 9717|  30.6k|    return scan_result_type<Source, Args...>();
 9718|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1550|  30.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.6k|        : m_value(T{}), m_has_value(true)
  427|  30.6k|    {
  428|  30.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6623|  30.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.6k|{
 9702|  30.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.76k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.76k|    else {
 9706|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.76k|    static_cast<    \
  |  | 1056|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.76k|    }
 9708|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.1k|    {
  456|  34.1k|        return m_value;
  457|  34.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.2k|    {
 8798|  29.2k|        return m_str;
 8799|  29.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  58.5k|{
 6127|  58.5k|    detail::check_scan_arg_types<Args...>();
 6128|  58.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  58.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6102|  58.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  58.5k|    {
 6104|  58.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  58.5k|    {
 6112|  58.5k|        return {detail::make_arg<
 6113|  58.5k|            kind, Context,
 6114|  58.5k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  58.5k|                                 typename Context::char_type>::value>(args)...};
 6116|  58.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE7EhvEEPvRT2_:
 5891|  58.5k|{
 5892|  58.5k|    return make_value<Context>(value).ref_value;
 5893|  58.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5826|  61.3k|{
 5827|  61.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.3k|                                  needs_context_tag>) {
 5831|  61.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5660|  61.3k|    {                                                                        \
 5661|  61.3k|        return val;                                                          \
 5662|  61.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  58.5k|        : basic_scan_args(store.desc, store.args.data())
 6153|  58.5k|    {
 6154|  58.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.2k|        : m_str(r.str)
 8793|  29.2k|    {
 8794|  29.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1738|  30.6k|    {
 1739|  30.6k|        return has_value();
 1740|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1813|  34.1k|    {
 1814|  34.1k|        return &value();
 1815|  34.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  34.1k|    {
 1768|  34.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.1k|        return this->get_value();
 1770|  34.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.80k|{
 5877|  2.80k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.80k|    basic_scan_arg<Context> arg;
 5880|  2.80k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.80k|    arg.m_value = make_value<Context>(value);
 5882|  2.80k|    return arg;
 5883|  2.80k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9716|  30.8k|{
 9717|  30.8k|    return scan_result_type<Source, Args...>();
 9718|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6623|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.8k|{
 9702|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.93k|    else {
 9706|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.93k|    static_cast<    \
  |  | 1056|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.93k|    }
 9708|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.7k|    {
  456|  34.7k|        return m_value;
  457|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.4k|    {
 8798|  29.4k|        return m_str;
 8799|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  58.8k|{
 6127|  58.8k|    detail::check_scan_arg_types<Args...>();
 6128|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6102|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  58.8k|    {
 6104|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  58.8k|    {
 6112|  58.8k|        return {detail::make_arg<
 6113|  58.8k|            kind, Context,
 6114|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6116|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5891|  58.8k|{
 5892|  58.8k|    return make_value<Context>(value).ref_value;
 5893|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5826|  61.6k|{
 5827|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.6k|                                  needs_context_tag>) {
 5831|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5660|  61.6k|    {                                                                        \
 5661|  61.6k|        return val;                                                          \
 5662|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6153|  58.8k|    {
 6154|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.4k|        : m_str(r.str)
 8793|  29.4k|    {
 8794|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1738|  30.8k|    {
 1739|  30.8k|        return has_value();
 1740|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1813|  34.7k|    {
 1814|  34.7k|        return &value();
 1815|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  34.7k|    {
 1768|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.7k|        return this->get_value();
 1770|  34.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.83k|{
 5877|  2.83k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.83k|    basic_scan_arg<Context> arg;
 5880|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.83k|    arg.m_value = make_value<Context>(value);
 5882|  2.83k|    return arg;
 5883|  2.83k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9716|  30.7k|{
 9717|  30.7k|    return scan_result_type<Source, Args...>();
 9718|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6623|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.7k|{
 9702|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.83k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.83k|    else {
 9706|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.83k|    static_cast<    \
  |  | 1056|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.83k|    }
 9708|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.3k|    {
  456|  34.3k|        return m_value;
  457|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.3k|    {
 8798|  29.3k|        return m_str;
 8799|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  58.6k|{
 6127|  58.6k|    detail::check_scan_arg_types<Args...>();
 6128|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6102|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  58.6k|    {
 6104|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  58.6k|    {
 6112|  58.6k|        return {detail::make_arg<
 6113|  58.6k|            kind, Context,
 6114|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6116|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 5891|  58.6k|{
 5892|  58.6k|    return make_value<Context>(value).ref_value;
 5893|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5826|  61.4k|{
 5827|  61.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.4k|                                  needs_context_tag>) {
 5831|  61.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5660|  61.4k|    {                                                                        \
 5661|  61.4k|        return val;                                                          \
 5662|  61.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6153|  58.6k|    {
 6154|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.3k|        : m_str(r.str)
 8793|  29.3k|    {
 8794|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1738|  30.7k|    {
 1739|  30.7k|        return has_value();
 1740|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1813|  34.3k|    {
 1814|  34.3k|        return &value();
 1815|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  34.3k|    {
 1768|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.3k|        return this->get_value();
 1770|  34.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.81k|{
 5877|  2.81k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.81k|    basic_scan_arg<Context> arg;
 5880|  2.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.81k|    arg.m_value = make_value<Context>(value);
 5882|  2.81k|    return arg;
 5883|  2.81k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9716|  30.9k|{
 9717|  30.9k|    return scan_result_type<Source, Args...>();
 9718|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1550|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6623|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.9k|{
 9702|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  2.05k|    else {
 9706|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  2.05k|    static_cast<    \
  |  | 1056|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  2.05k|    }
 9708|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.0k|    {
  456|  35.0k|        return m_value;
  457|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.5k|    {
 8798|  29.5k|        return m_str;
 8799|  29.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  59.0k|{
 6127|  59.0k|    detail::check_scan_arg_types<Args...>();
 6128|  59.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  59.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6102|  59.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  59.0k|    {
 6104|  59.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  59.0k|    {
 6112|  59.0k|        return {detail::make_arg<
 6113|  59.0k|            kind, Context,
 6114|  59.0k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  59.0k|                                 typename Context::char_type>::value>(args)...};
 6116|  59.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5891|  59.0k|{
 5892|  59.0k|    return make_value<Context>(value).ref_value;
 5893|  59.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5826|  61.8k|{
 5827|  61.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.8k|                                  needs_context_tag>) {
 5831|  61.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5660|  61.8k|    {                                                                        \
 5661|  61.8k|        return val;                                                          \
 5662|  61.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  59.0k|        : basic_scan_args(store.desc, store.args.data())
 6153|  59.0k|    {
 6154|  59.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.5k|        : m_str(r.str)
 8793|  29.5k|    {
 8794|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1738|  30.9k|    {
 1739|  30.9k|        return has_value();
 1740|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1813|  35.0k|    {
 1814|  35.0k|        return &value();
 1815|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  35.0k|    {
 1768|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  35.0k|        return this->get_value();
 1770|  35.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.85k|{
 5877|  2.85k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.85k|    basic_scan_arg<Context> arg;
 5880|  2.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.85k|    arg.m_value = make_value<Context>(value);
 5882|  2.85k|    return arg;
 5883|  2.85k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9716|  30.8k|{
 9717|  30.8k|    return scan_result_type<Source, Args...>();
 9718|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1550|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6623|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|  30.8k|{
 9702|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.92k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.92k|    else {
 9706|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.92k|    static_cast<    \
  |  | 1056|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.92k|    }
 9708|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|  29.4k|    {
 8798|  29.4k|        return m_str;
 8799|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|  58.8k|{
 6127|  58.8k|    detail::check_scan_arg_types<Args...>();
 6128|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6102|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|  58.8k|    {
 6104|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|  58.8k|    {
 6112|  58.8k|        return {detail::make_arg<
 6113|  58.8k|            kind, Context,
 6114|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6115|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6116|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EyvEEPvRT2_:
 5891|  58.8k|{
 5892|  58.8k|    return make_value<Context>(value).ref_value;
 5893|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5826|  61.6k|{
 5827|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|  61.6k|                                  needs_context_tag>) {
 5831|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5660|  61.6k|    {                                                                        \
 5661|  61.6k|        return val;                                                          \
 5662|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6153|  58.8k|    {
 6154|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.4k|        : m_str(r.str)
 8793|  29.4k|    {
 8794|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1738|  30.8k|    {
 1739|  30.8k|        return has_value();
 1740|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1813|  34.6k|    {
 1814|  34.6k|        return &value();
 1815|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|  34.6k|    {
 1768|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.6k|        return this->get_value();
 1770|  34.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5876|  2.83k|{
 5877|  2.83k|    check_scan_arg_types<T>();
 5878|       |
 5879|  2.83k|    basic_scan_arg<Context> arg;
 5880|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  2.83k|    arg.m_value = make_value<Context>(value);
 5882|  2.83k|    return arg;
 5883|  2.83k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   173k|    {
 2868|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   173k|    {
 2849|   173k|        return decay_copy(t.begin());
 2850|   173k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2092|   103M|{
 2093|   103M|    return SCN_FWD(t);
  ------------------
  |  | 1057|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   103M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   369k|    {
 2925|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   369k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   369k|    {
 2907|   369k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   369k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9716|  30.7k|{
 9717|  30.7k|    return scan_result_type<Source, Args...>();
 9718|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1550|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6623|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6466|   184k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3458|   184k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.7k|{
 9702|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.84k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.84k|    else {
 9706|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.84k|    static_cast<    \
  |  | 1056|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.84k|    }
 9708|  30.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   184k|    {
 1739|   184k|        return has_value();
 1740|   184k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   369k|    {
  490|   369k|        return m_has_value;
  491|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1744|   173k|    {
 1745|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   173k|        return this->get_unexpected().error();
 1747|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   173k|    {
  473|   173k|        return m_unexpected;
  474|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.4k|    {
  456|  34.4k|        return m_value;
  457|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6497|  11.3k|    {
 6498|  11.3k|        m_range = std::forward<Other>(r);
 6499|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|  11.3k|    {
 1794|  11.3k|        return value();
 1795|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  11.3k|    {
 1768|  11.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  11.3k|        return this->get_value();
 1770|  11.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  11.3k|    {
  456|  11.3k|        return m_value;
  457|  11.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|  88.1k|{
 9460|  88.1k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|  88.1k|    auto result = vscan_impl(buffer, format, args);
 9463|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9464|  82.5k|        return unexpected(result.error());
 9465|  82.5k|    }
 9466|  5.56k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|  88.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5379|   184k|{
 5380|   184k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   184k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   184k|                  "\n"
 5384|   184k|                  "Unsupported range type given as input to a scanning "
 5385|   184k|                  "function.\n"
 5386|   184k|                  "A range needs to have a character type (value type) "
 5387|   184k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   184k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   184k|                  "to be included.\n"
 5390|   184k|                  "See the scnlib documentation for more details.");
 5391|   184k|    static_assert(
 5392|   184k|        !std::is_same_v<T, custom_char_traits>,
 5393|   184k|        "\n"
 5394|   184k|        "Unsupported range type given as input to a scanning "
 5395|   184k|        "function.\n"
 5396|   184k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   184k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   184k|        "not supported.");
 5399|   184k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   184k|                  "\n"
 5401|   184k|                  "Unsupported range type given as input to a scanning "
 5402|   184k|                  "function.\n"
 5403|   184k|                  "file_marker_found cannot be used as an "
 5404|   184k|                  "source range type to scn::scan.\n"
 5405|   184k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   184k|                  "and do not provide an explicit source range, "
 5407|   184k|                  "or use scn::scan with a FILE* directly.");
 5408|   184k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   184k|                  "\n"
 5410|   184k|                  "Unsupported range type given as input to a scanning "
 5411|   184k|                  "function.\n"
 5412|   184k|                  "In order to be scannable, a range needs to satisfy "
 5413|   184k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   184k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   184k|                  "\n"
 5416|   184k|                  "Unsupported range type given as input to a scanning "
 5417|   184k|                  "function.\n"
 5418|   184k|                  "A range needs to model forward_range and have a valid "
 5419|   184k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   184k|                  "Examples of scannable ranges are std::string, "
 5421|   184k|                  "std::string_view, "
 5422|   184k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   184k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   184k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   184k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   184k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   184k|    else {
 5365|   184k|        return make_forward_scan_buffer(r);
 5366|   184k|    }
 5367|   184k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5183|   184k|{
 5184|   184k|    return basic_scan_forward_buffer_impl(range);
 5185|   184k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   184k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   184k|          m_cursor(ranges::begin(*m_range))
 4765|   184k|    {
 4766|   184k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   184k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   184k|    {
 4737|   184k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   184k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   184k|    {
 4428|   184k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4339|   184k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   196k|    {
 2868|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   196k|    {
 2849|   196k|        return decay_copy(t.begin());
 2850|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3478|   207k|    {
 3479|   207k|        return m_iterator;
 3480|   207k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|  34.2M|    {
 4770|  34.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 104k, False: 34.1M]
  ------------------
 4771|   104k|            return false;
 4772|   104k|        }
 4773|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  34.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  34.1M|        }
 4776|  34.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 33.9M, False: 134k]
  ------------------
 4777|  33.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  33.9M|                                          this->m_current_view.begin(),
 4779|  33.9M|                                          this->m_current_view.end());
 4780|  33.9M|        }
 4781|  34.1M|        m_latest = *m_cursor;
 4782|  34.1M|        ++m_cursor;
 4783|  34.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  34.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  34.1M|        }
 4787|  34.1M|        return true;
 4788|  34.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   102M|    {
 2925|   102M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   102M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   102M|    {
 2907|   102M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   102M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3482|   102M|    {
 3483|   102M|        return m_sentinel;
 3484|   102M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4344|   184k|    {
 4345|   184k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   184k|        return true;
 4347|   184k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|   173k|        : base(unexpect, std::move(e.error())),
 1615|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   173k|    {
 1617|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   173k|          m_has_value(false)
  451|   173k|    {
  452|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   184k|    {
 1315|   184k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|  11.3k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|  11.3k|                      ranges::iterator_t<SourceRange>>) {
 6730|  11.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|  11.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  11.3k|    {
 2868|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  11.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  11.3k|    {
 2849|  11.3k|        return decay_copy(t.begin());
 2850|  11.3k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6714|  11.3k|{
 6715|  11.3k|    return ranges::end(source);
 6716|  11.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  11.3k|    {
 2925|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  11.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  11.3k|    {
 2907|  11.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  11.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  11.3k|    {
 1571|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.3k|    {
  442|  11.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.3k|    {
 8798|  29.3k|        return m_str;
 8799|  29.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|   196k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   196k|    static_cast<    \
  |  | 1056|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   196k|    static_cast<    \
  |  | 1056|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   196k|    {
 3465|   196k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.3k|        : m_str(r.str)
 8793|  29.3k|    {
 8794|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1738|  30.7k|    {
 1739|  30.7k|        return has_value();
 1740|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1813|  34.4k|    {
 1814|  34.4k|        return &value();
 1815|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  34.4k|    {
 1768|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.4k|        return this->get_value();
 1770|  34.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6486|  11.3k|    {
 6487|  11.3k|        return ranges::begin(m_range);
 6488|  11.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|  88.1k|{
 9476|  88.1k|#if !SCN_DISABLE_LOCALE
 9477|  88.1k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|  88.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|  88.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|  88.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9484|  82.5k|        return unexpected(result.error());
 9485|  82.5k|    }
 9486|  5.56k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|  88.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  8.48k|{
 9500|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9504|  8.25k|        return unexpected(result.error());
 9505|  8.25k|    }
 9506|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  8.48k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9716|  30.6k|{
 9717|  30.6k|    return scan_result_type<Source, Args...>();
 9718|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1550|  30.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.6k|        : m_value(T{}), m_has_value(true)
  427|  30.6k|    {
  428|  30.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6623|  30.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.6k|{
 9702|  30.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.76k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.76k|    else {
 9706|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.76k|    static_cast<    \
  |  | 1056|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.76k|    }
 9708|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.1k|    {
  456|  34.1k|        return m_value;
  457|  34.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.2k|    {
 8798|  29.2k|        return m_str;
 8799|  29.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.2k|        : m_str(r.str)
 8793|  29.2k|    {
 8794|  29.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1738|  30.6k|    {
 1739|  30.6k|        return has_value();
 1740|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1813|  34.1k|    {
 1814|  34.1k|        return &value();
 1815|  34.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  34.1k|    {
 1768|  34.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.1k|        return this->get_value();
 1770|  34.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9716|  30.8k|{
 9717|  30.8k|    return scan_result_type<Source, Args...>();
 9718|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1550|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6623|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.8k|{
 9702|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.93k|    else {
 9706|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.93k|    static_cast<    \
  |  | 1056|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.93k|    }
 9708|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.7k|    {
  456|  34.7k|        return m_value;
  457|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.4k|    {
 8798|  29.4k|        return m_str;
 8799|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.4k|        : m_str(r.str)
 8793|  29.4k|    {
 8794|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1738|  30.8k|    {
 1739|  30.8k|        return has_value();
 1740|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1813|  34.7k|    {
 1814|  34.7k|        return &value();
 1815|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  34.7k|    {
 1768|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.7k|        return this->get_value();
 1770|  34.7k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9716|  30.7k|{
 9717|  30.7k|    return scan_result_type<Source, Args...>();
 9718|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1550|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.7k|        : m_value(T{}), m_has_value(true)
  427|  30.7k|    {
  428|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6623|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.7k|{
 9702|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.83k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.83k|    else {
 9706|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.83k|    static_cast<    \
  |  | 1056|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.83k|    }
 9708|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   122k|    {
  490|   122k|        return m_has_value;
  491|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.3k|    {
  456|  34.3k|        return m_value;
  457|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.3k|    {
 8798|  29.3k|        return m_str;
 8799|  29.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.3k|        : m_str(r.str)
 8793|  29.3k|    {
 8794|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1738|  30.7k|    {
 1739|  30.7k|        return has_value();
 1740|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1813|  34.3k|    {
 1814|  34.3k|        return &value();
 1815|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  34.3k|    {
 1768|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.3k|        return this->get_value();
 1770|  34.3k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9716|  30.9k|{
 9717|  30.9k|    return scan_result_type<Source, Args...>();
 9718|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1550|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.9k|        : m_value(T{}), m_has_value(true)
  427|  30.9k|    {
  428|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6623|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.9k|{
 9702|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  2.05k|    else {
 9706|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  2.05k|    static_cast<    \
  |  | 1056|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  2.05k|    }
 9708|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  35.0k|    {
  456|  35.0k|        return m_value;
  457|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.5k|    {
 8798|  29.5k|        return m_str;
 8799|  29.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.5k|        : m_str(r.str)
 8793|  29.5k|    {
 8794|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1738|  30.9k|    {
 1739|  30.9k|        return has_value();
 1740|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1813|  35.0k|    {
 1814|  35.0k|        return &value();
 1815|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  35.0k|    {
 1768|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  35.0k|        return this->get_value();
 1770|  35.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9716|  30.8k|{
 9717|  30.8k|    return scan_result_type<Source, Args...>();
 9718|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1550|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.8k|        : m_value(T{}), m_has_value(true)
  427|  30.8k|    {
  428|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6623|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|  30.8k|{
 9702|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.8k, False: 1.92k]
  |  |  ------------------
  ------------------
 9703|  28.8k|        out = unexpected(in.error());
 9704|  28.8k|    }
 9705|  1.92k|    else {
 9706|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|  1.92k|    static_cast<    \
  |  | 1056|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|  1.92k|    }
 9708|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  28.8k|        : base(unexpect, std::move(e.error())),
 1615|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  28.8k|    {
 1617|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  28.8k|          m_has_value(false)
  451|  28.8k|    {
  452|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  28.8k|    {
 1315|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1555|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  901|  28.8k|    {
  902|  28.8k|        assign_common(std::move(other));
  903|  28.8k|        return *this;
  904|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  28.8k|    {
  949|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 28.8k, False: 0]
  ------------------
  950|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 28.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  28.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   123k|    {
  490|   123k|        return m_has_value;
  491|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  34.6k|    {
  456|  34.6k|        return m_value;
  457|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  28.8k|    {
 1045|  28.8k|        this->destroy_value();
 1046|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  28.8k|    {
  504|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  28.8k|                                  std::forward<Args>(args)...);
  506|  28.8k|        m_has_value = false;
  507|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  28.8k|    {
  473|  28.8k|        return m_unexpected;
  474|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  28.8k|    {
  481|  28.8k|        return std::move(m_unexpected);
  482|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|  29.4k|    {
 8798|  29.4k|        return m_str;
 8799|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|  29.4k|        : m_str(r.str)
 8793|  29.4k|    {
 8794|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1738|  30.8k|    {
 1739|  30.8k|        return has_value();
 1740|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1813|  34.6k|    {
 1814|  34.6k|        return &value();
 1815|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  34.6k|    {
 1768|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  34.6k|        return this->get_value();
 1770|  34.6k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|   718k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|   718k|    {
 3741|   718k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|   718k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|   718k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   592k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   592k|    else {
 3980|   592k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   592k|    }
 3982|   592k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  10.5M|    {
 3479|  10.5M|        return m_iterator;
 3480|  10.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  36.6M|    {
 3479|  36.6M|        return m_iterator;
 3480|  36.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.90M|    {
  572|  5.90M|        return m_has_value;
  573|  5.90M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   578k|    {
  555|   578k|        return m_unexpected;
  556|   578k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|   445k|    {
 1745|   445k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   445k|        return this->get_unexpected().error();
 1747|   445k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6989|   858k|    {
 6990|   858k|        SCN_GCC_COMPAT_PUSH
 6991|   858k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6992|   858k|        switch (type) {
 6993|   174k|            case presentation_type::none:
  ------------------
  |  Branch (6993:13): [True: 174k, False: 684k]
  ------------------
 6994|   174k|                return 10;
 6995|   175k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6995:13): [True: 175k, False: 683k]
  ------------------
 6996|   175k|                return 0;
 6997|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6997:13): [True: 0, False: 858k]
  ------------------
 6998|      0|                return arbitrary_base;
 6999|       |
 7000|  76.7k|            case presentation_type::int_binary:
  ------------------
  |  Branch (7000:13): [True: 76.7k, False: 782k]
  ------------------
 7001|  76.7k|                return 2;
 7002|   110k|            case presentation_type::int_octal:
  ------------------
  |  Branch (7002:13): [True: 110k, False: 748k]
  ------------------
 7003|   110k|                return 8;
 7004|   157k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7004:13): [True: 157k, False: 701k]
  ------------------
 7005|   157k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7005:13): [True: 0, False: 858k]
  ------------------
 7006|   157k|                return 10;
 7007|   164k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7007:13): [True: 164k, False: 694k]
  ------------------
 7008|   164k|                return 16;
 7009|       |
 7010|      0|            default:
  ------------------
  |  Branch (7010:13): [True: 0, False: 858k]
  ------------------
 7011|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7012|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7013|   858k|        }
 7014|   858k|        SCN_GCC_COMPAT_POP
 7015|   858k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7027|  1.02M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7071|   750k|    {
 7072|   750k|        m_specs.type = type;
 7073|   750k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7133|  99.0k|    {
 7134|  99.0k|        SCN_UNLIKELY_ATTR
 7135|  99.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7136|  99.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7144|   929k|    {
 7145|   929k|        return m_error;
 7146|   929k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3916|   592k|{
 3917|   592k|    return unexpected(scan_error{c, m});
 3918|   592k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|  1.07M|{
 4307|       |    // Pattern_White_Space property
 4308|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 945k, False: 130k]
  |  Branch (4308:27): [True: 378k, False: 566k]
  ------------------
 4309|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 9.25k, False: 687k]
  ------------------
 4310|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 3.48k, False: 684k]
  ------------------
 4311|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 1.56k, False: 682k]
  ------------------
 4312|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 2.08k, False: 680k]
  ------------------
 4313|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 2.41k, False: 678k]
  ------------------
 4314|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 0, False: 678k]
  ------------------
 4315|  1.07M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7827|   179k|{
 7828|   179k|    switch (type) {
 7829|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 179k]
  ------------------
 7830|      0|            return arg_type_category::none;
 7831|       |
 7832|  29.8k|        case arg_type::schar_type:
  ------------------
  |  Branch (7832:9): [True: 29.8k, False: 149k]
  ------------------
 7833|  29.8k|        case arg_type::short_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 179k]
  ------------------
 7834|  63.0k|        case arg_type::int_type:
  ------------------
  |  Branch (7834:9): [True: 33.2k, False: 146k]
  ------------------
 7835|  63.0k|        case arg_type::long_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 179k]
  ------------------
 7836|  96.8k|        case arg_type::llong_type:
  ------------------
  |  Branch (7836:9): [True: 33.7k, False: 145k]
  ------------------
 7837|  96.8k|        case arg_type::int128_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 179k]
  ------------------
 7838|  96.8k|            return arg_type_category::integer;
 7839|       |
 7840|  26.2k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7840:9): [True: 26.2k, False: 153k]
  ------------------
 7841|  26.2k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 179k]
  ------------------
 7842|  54.2k|        case arg_type::uint_type:
  ------------------
  |  Branch (7842:9): [True: 28.0k, False: 151k]
  ------------------
 7843|  54.2k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 179k]
  ------------------
 7844|  82.5k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7844:9): [True: 28.3k, False: 151k]
  ------------------
 7845|  82.5k|        case arg_type::uint128_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 179k]
  ------------------
 7846|  82.5k|            return arg_type_category::unsigned_integer;
 7847|       |
 7848|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 179k]
  ------------------
 7849|      0|            return arg_type_category::pointer;
 7850|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 179k]
  ------------------
 7851|      0|            return arg_type_category::boolean;
 7852|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7852:9): [True: 0, False: 179k]
  ------------------
 7853|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 179k]
  ------------------
 7854|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7854:9): [True: 0, False: 179k]
  ------------------
 7855|      0|            return arg_type_category::character;
 7856|       |
 7857|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7857:9): [True: 0, False: 179k]
  ------------------
 7858|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7858:9): [True: 0, False: 179k]
  ------------------
 7859|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7859:9): [True: 0, False: 179k]
  ------------------
 7860|      0|            return arg_type_category::floating;
 7861|       |
 7862|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7862:9): [True: 0, False: 179k]
  ------------------
 7863|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7863:9): [True: 0, False: 179k]
  ------------------
 7864|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7864:9): [True: 0, False: 179k]
  ------------------
 7865|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7865:9): [True: 0, False: 179k]
  ------------------
 7866|      0|            return arg_type_category::string;
 7867|       |
 7868|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7868:9): [True: 0, False: 179k]
  ------------------
 7869|      0|            return arg_type_category::custom;
 7870|       |
 7871|      0|            SCN_CLANG_PUSH
 7872|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7873|      0|        default:
  ------------------
  |  Branch (7873:9): [True: 0, False: 179k]
  ------------------
 7874|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   179k|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7876|   179k|            SCN_CLANG_POP
 7877|   179k|    }
 7878|       |
 7879|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7880|   179k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1754|   133k|    {
 1755|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|   133k|        return std::move(this->get_unexpected().error());
 1757|   133k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7915|   880k|{
 7916|   880k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  986|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 880k]
  |  |  ------------------
  ------------------
 7917|      0|        return handler.on_error("Invalid type specifier for integer type");
 7918|      0|    }
 7919|   880k|    if (specs.localized) {
  ------------------
  |  Branch (7919:9): [True: 179k, False: 700k]
  ------------------
 7920|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  986|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 7921|       |            // clang-format off
 7922|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7923|       |            // clang-format on
 7924|      0|            return;
 7925|      0|        }
 7926|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  986|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 7927|       |            // clang-format off
 7928|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7929|       |            // clang-format on
 7930|      0|        }
 7931|   179k|    }
 7932|   880k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  5.33M|    {
 1739|  5.33M|        return has_value();
 1740|  5.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|  62.0M|    {
 4472|  62.0M|        assert(m_begin);
 4473|  62.0M|        return m_end == nullptr;
 4474|  62.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|  1.41M|    {
 4489|  1.41M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 1.41M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  1.41M|        return parent()->get_segment_starting_at(position());
 4495|  1.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|  34.1M|    {
 4483|  34.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  34.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  34.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  1.41M|    {
 4376|  1.41M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 377k, False: 1.03M]
  |  |  ------------------
  ------------------
 4377|  1.41M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|   377k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|   377k|        }
 4380|  1.03M|        const auto start = pos - m_putback_buffer.size();
 4381|  1.03M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  1.03M|        return m_current_view.substr(start);
 4383|  1.03M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4477|   336k|    {
 4478|   336k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|   336k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|   336k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|  2.18M|    {
 4467|  2.18M|        return m_position;
 4468|  2.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|  1.34M|    {
 4398|  1.34M|        return m_is_contiguous;
 4399|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|   138G|    {
 4472|   138G|        assert(m_begin);
 4473|   138G|        return m_end == nullptr;
 4474|   138G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|  5.47k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|  5.47k|    else {
 3980|  5.47k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|  5.47k|    }
 3982|  5.47k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|   140k|    {
 4489|   140k|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 140k]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|   140k|        return parent()->get_segment_starting_at(position());
 4495|   140k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|  69.5G|    {
 4483|  69.5G|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  69.5G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  69.5G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  69.5G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  69.5G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|   140k|    {
 4376|   140k|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.71k, False: 137k]
  |  |  ------------------
  ------------------
 4377|   140k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  2.71k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  2.71k|        }
 4380|   137k|        const auto start = pos - m_putback_buffer.size();
 4381|   137k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   137k|        return m_current_view.substr(start);
 4383|   137k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4477|   100k|    {
 4478|   100k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|   100k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|   245k|    {
 4467|   245k|        return m_position;
 4468|   245k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|   554k|    {
 4398|   554k|        return m_is_contiguous;
 4399|   554k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|  1.76M|    {
 3333|  1.76M|        return static_cast<D&>(*this);
 3334|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|  1.76M|    {
 3374|  1.76M|        return detail::to_address(ranges::begin(derived()));
 3375|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|   425k|    {
 3333|   425k|        return static_cast<D&>(*this);
 3334|   425k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|   425k|    {
 3374|   425k|        return detail::to_address(ranges::begin(derived()));
 3375|   425k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8994|   330k|    {
 8995|   330k|        return ranges::subrange{begin(), end()};
 8996|   330k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8986|   330k|    {
 8987|   330k|        return ranges::default_sentinel;
 8988|   330k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|  3.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  3.44M|    static_cast<    \
  |  | 1056|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  3.44M|    static_cast<    \
  |  | 1056|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  3.44M|    {
 3465|  3.44M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|   835k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   424k|    {
 1978|   424k|        return detail::transform_error_impl(std::move(*this),
 1979|   424k|                                            std::forward<F>(f));
 1980|   424k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   424k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   424k|    else {
 1471|   424k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   424k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   424k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 412k, False: 12.0k]
  |  |  ------------------
  ------------------
 1473|   424k|                   ? result(*std::forward<Exp>(exp))
 1474|   424k|                   : result(unexpect,
 1475|  12.0k|                            trivial_invoke(std::forward<F>(f),
 1476|  12.0k|                                           std::forward<Exp>(exp).error()));
 1477|   424k|    }
 1478|   424k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.14M|    {
  490|  2.14M|        return m_has_value;
  491|  2.14M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   738k|    {
 1804|   738k|        return std::move(value());
 1805|   738k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   834k|    {
 1768|   834k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   834k|        return this->get_value();
 1770|   834k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   834k|    {
  456|   834k|        return m_value;
  457|   834k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|  1.33M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.33M|    {
 1571|  1.33M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.33M|    {
  442|  1.33M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.48M|    {
 1315|  1.48M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  26.7k|{
 1349|  26.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  26.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  23.4k|    {
 1755|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  23.4k|        return std::move(this->get_unexpected().error());
 1757|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  23.8k|    {
  473|  23.8k|        return m_unexpected;
  474|  23.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   153k|    {
  365|   153k|        return m_unexpected;
  366|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  40.2k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  40.2k|    {
 1627|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   142k|          m_has_value(false)
  451|   142k|    {
  452|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8994|   109k|    {
 8995|   109k|        return ranges::subrange{begin(), end()};
 8996|   109k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8986|   109k|    {
 8987|   109k|        return ranges::default_sentinel;
 8988|   109k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|   970k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   970k|    static_cast<    \
  |  | 1056|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   970k|    static_cast<    \
  |  | 1056|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   970k|    {
 3465|   970k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   135k|    {
 1978|   135k|        return detail::transform_error_impl(std::move(*this),
 1979|   135k|                                            std::forward<F>(f));
 1980|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   135k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   135k|    else {
 1471|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 133k, False: 1.76k]
  |  |  ------------------
  ------------------
 1473|   135k|                   ? result(*std::forward<Exp>(exp))
 1474|   135k|                   : result(unexpect,
 1475|  1.76k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.76k|                                           std::forward<Exp>(exp).error()));
 1477|   135k|    }
 1478|   135k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   647k|    {
  490|   647k|        return m_has_value;
  491|   647k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   214k|    {
 1804|   214k|        return std::move(value());
 1805|   214k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   225k|    {
 1768|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   225k|        return this->get_value();
 1770|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   225k|    {
  456|   225k|        return m_value;
  457|   225k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|   158k|        : base(std::in_place, std::forward<U>(val)),
 1569|   158k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   158k|    {
 1571|   158k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   158k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   158k|    {
  442|   158k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   486k|    {
 1315|   486k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  20.6k|    {
 1755|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  20.6k|        return std::move(this->get_unexpected().error());
 1757|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|   106k|        : base(unexpect, std::forward<Args>(args)...),
 1625|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|   106k|    {
 1627|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   328k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   328k|          m_has_value(false)
  451|   328k|    {
  452|   328k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   592k|        : m_unexpected(std::forward<Err>(e))
  350|   592k|    {
  351|   592k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   592k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   592k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   520k|        : base(unexpect, std::move(e.error())),
 1615|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   520k|    {
 1617|   520k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   520k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   520k|          m_has_value(false)
  451|   520k|    {
  452|   520k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.26M|    {
 1315|  1.26M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|   159k|        : base(unexpect, std::move(e.error())),
 1615|   159k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   159k|    {
 1617|   159k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   171k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   171k|          m_has_value(false)
  451|   171k|    {
  452|   171k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.67M|    {
 1315|  2.67M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|  2.50M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.50M|    {
 1571|  2.50M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.50M|    {
  442|  2.50M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|  2.67M|    {
 1739|  2.67M|        return has_value();
 1740|  2.67M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.35M|    {
  490|  5.35M|        return m_has_value;
  491|  5.35M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|   171k|    {
 1745|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   171k|        return this->get_unexpected().error();
 1747|   171k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   171k|    {
  473|   171k|        return m_unexpected;
  474|   171k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|  2.22M|    {
 1804|  2.22M|        return std::move(value());
 1805|  2.22M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|  2.50M|    {
 1768|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.50M|        return this->get_value();
 1770|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.50M|    {
  456|  2.50M|        return m_value;
  457|  2.50M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|   328k|        : base(unexpect, std::move(e.error())),
 1615|   328k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   328k|    {
 1617|   328k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   329k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   329k|          m_has_value(false)
  451|   329k|    {
  452|   329k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   618k|    {
 1315|   618k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|   289k|        : base(std::in_place, std::forward<U>(val)),
 1569|   289k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   289k|    {
 1571|   289k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   289k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   289k|    {
  442|   289k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|   618k|    {
 1739|   618k|        return has_value();
 1740|   618k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|   329k|    {
 1745|   329k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   329k|        return this->get_unexpected().error();
 1747|   329k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   329k|    {
  473|   329k|        return m_unexpected;
  474|   329k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|   278k|    {
 1804|   278k|        return std::move(value());
 1805|   278k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|   289k|    {
 1768|   289k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   289k|        return this->get_value();
 1770|   289k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   289k|    {
  456|   289k|        return m_value;
  457|   289k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   425k|    {
 1978|   425k|        return detail::transform_error_impl(std::move(*this),
 1979|   425k|                                            std::forward<F>(f));
 1980|   425k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   425k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   425k|    else {
 1471|   425k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   425k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 414k, False: 11.1k]
  |  |  ------------------
  ------------------
 1473|   425k|                   ? result(*std::forward<Exp>(exp))
 1474|   425k|                   : result(unexpect,
 1475|  11.1k|                            trivial_invoke(std::forward<F>(f),
 1476|  11.1k|                                           std::forward<Exp>(exp).error()));
 1477|   425k|    }
 1478|   425k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|   414k|    {
 1804|   414k|        return std::move(value());
 1805|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   510k|    {
 1768|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   510k|        return this->get_value();
 1770|   510k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   510k|    {
  456|   510k|        return m_value;
  457|   510k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|  11.1k|    {
 1755|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  11.1k|        return std::move(this->get_unexpected().error());
 1757|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  11.5k|    {
  473|  11.5k|        return m_unexpected;
  474|  11.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  11.1k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  11.1k|    {
 1627|  11.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8978|   967k|    {
 8979|   967k|        return m_current;
 8980|   967k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|   660k|    {
 8872|   660k|        return m_locale;
 8873|   660k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|   710k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   710k|    static_cast<    \
  |  | 1056|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   710k|    static_cast<    \
  |  | 1056|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   710k|    {
 8879|   710k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   101k|        : base(unexpect, std::move(e.error())),
 1615|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   101k|    {
 1617|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8978|   279k|    {
 8979|   279k|        return m_current;
 8980|   279k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|   219k|    {
 8872|   219k|        return m_locale;
 8873|   219k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   318k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   318k|    static_cast<    \
  |  | 1056|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   318k|    static_cast<    \
  |  | 1056|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   318k|    {
 8879|   318k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   221k|        : base(unexpect, std::move(e.error())),
 1615|   221k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   221k|    {
 1617|   221k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   777k|        : base(unexpect, std::move(e.error())),
 1615|   777k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   777k|    {
 1617|   777k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   777k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   777k|          m_has_value(false)
  550|   777k|    {
  551|   777k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   777k|    {
 1315|   777k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|  4.54M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  4.54M|        : m_deferred_init(), m_has_value(true)
  529|  4.54M|    {
  530|  4.54M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  2.29M|    {
 4558|  2.29M|        return x.is_at_end();
 4559|  2.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  4.86M|    {
 4602|  4.86M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 4.86M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  4.86M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 4.86M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  4.86M|        return !read_at_position();
 4609|  4.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|  19.7M|    {
 4582|  19.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  19.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  19.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 19.7M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  19.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  19.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 17.3M, False: 2.32M]
  |  |  ------------------
  ------------------
 4589|  17.3M|            return true;
 4590|  17.3M|        }
 4591|       |
 4592|  4.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 2.32M, False: 2.18M]
  ------------------
 4593|  2.32M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 143k, False: 2.18M]
  ------------------
 4594|   143k|                return false;
 4595|   143k|            }
 4596|  2.32M|        }
 4597|  2.18M|        return true;
 4598|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  6.15M|    {
 4517|  6.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  6.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 6.15M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  6.15M|        auto res = read_at_position();
 4526|  6.15M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  6.15M|        return parent()->get_character_at(m_position);
 4528|  6.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  6.15M|    {
 4387|  6.15M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  6.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.91M, False: 2.24M]
  |  |  ------------------
  ------------------
 4388|  6.15M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  3.91M|            return m_putback_buffer[pos];
 4390|  3.91M|        }
 4391|  2.24M|        const auto start = pos - m_putback_buffer.size();
 4392|  2.24M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  2.24M|        return m_current_view[start];
 4394|  2.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.25M|    {
 1571|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.25M|    {
  442|  1.25M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.28M|    {
 1315|  1.28M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  49.1k|        : m_unexpected(std::forward<Err>(e))
  350|  49.1k|    {
  351|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  23.8k|        : base(unexpect, std::move(e.error())),
 1615|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  23.8k|    {
 1617|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.8k|          m_has_value(false)
  451|  23.8k|    {
  452|  23.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  76.7k|        : m_unexpected(std::forward<Args>(args)...)
  359|  76.7k|    {
  360|  76.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  76.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  76.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  8.68M|    {
 4503|  8.68M|        ++m_position;
 4504|  8.68M|        (void)read_at_position();
 4505|  8.68M|        return *this;
 4506|  8.68M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1738|   520k|    {
 1739|   520k|        return has_value();
 1740|   520k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|  96.3k|    {
 1794|  96.3k|        return value();
 1795|  96.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  5.46M|    {
 4552|  5.46M|        return !(lhs == rhs);
 4553|  5.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  5.77M|    {
 4547|  5.77M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 5.77M, False: 0]
  |  Branch (4547:46): [True: 531k, False: 5.24M]
  ------------------
 4548|  5.77M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  27.5k|        : m_unexpected(std::forward<Err>(e))
  350|  27.5k|    {
  351|  27.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  27.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  27.5k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  9.70k|        : base(unexpect, std::move(e.error())),
 1615|  9.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  9.70k|    {
 1617|  9.70k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  9.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.70k|          m_has_value(false)
  451|  9.70k|    {
  452|  9.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   604k|    {
 1315|   604k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   595k|        : base(std::in_place, std::forward<U>(val)),
 1569|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   595k|    {
 1571|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   595k|    {
  442|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|   604k|    {
 1739|   604k|        return has_value();
 1740|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.20M|    {
  490|  1.20M|        return m_has_value;
  491|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|  9.70k|    {
 1745|  9.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  9.70k|        return this->get_unexpected().error();
 1747|  9.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.70k|    {
  473|  9.70k|        return m_unexpected;
  474|  9.70k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   595k|    {
 1804|   595k|        return std::move(value());
 1805|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   595k|    {
 1768|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   595k|        return this->get_value();
 1770|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   595k|    {
  456|   595k|        return m_value;
  457|   595k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  7.52M|    {
 3483|  7.52M|        return m_sentinel;
 3484|  7.52M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  12.5k|        : m_unexpected(std::forward<Err>(e))
  350|  12.5k|    {
  351|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.20M|    {
  365|  1.20M|        return m_unexpected;
  366|  1.20M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   110k|        : m_unexpected(std::forward<Args>(args)...)
  359|   110k|    {
  360|   110k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   110k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  2.30M|        : m_unexpected(std::forward<Err>(e))
  350|  2.30M|    {
  351|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.30M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  2.30M|    {
  365|  2.30M|        return m_unexpected;
  366|  2.30M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  2.30M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.30M|    {
  360|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.30M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  49.1k|{
 1349|  49.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  49.1k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  49.1k|        : m_unexpected(std::forward<Err>(e))
  350|  49.1k|    {
  351|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  49.1k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1348|   133k|{
 1349|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|   133k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  30.5k|{
  396|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  30.5k|        T(std::forward<Args>(args)...);
  398|  30.5k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3105|   129k|    {
 3106|   129k|        return fn::impl(std::forward<T>(t));
 3107|   129k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3096|   129k|    {
 3097|   129k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3098|   129k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3073|   129k|    {
 3074|   129k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   129k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3039|   129k|    {
 3040|   129k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   129k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  30.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  30.5k|    else {
  408|  30.5k|        p->~T();
  409|  30.5k|    }
  410|  30.5k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1744|    360|    {
 1745|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    360|        return this->get_unexpected().error();
 1747|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  11.8k|        : base(unexpect, std::move(e.error())),
 1615|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.8k|    {
 1617|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.2k|          m_has_value(false)
  451|  23.2k|    {
  452|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.61M|    {
 1315|  1.61M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1568|   139k|        : base(std::in_place, std::forward<U>(val)),
 1569|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   139k|    {
 1571|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|   840k|        : base(unexpect, std::move(e.error())),
 1615|   840k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   840k|    {
 1617|   840k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   840k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   840k|          m_has_value(false)
  451|   840k|    {
  452|   840k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1738|  1.30M|    {
 1739|  1.30M|        return has_value();
 1740|  1.30M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.75M|    {
  490|  2.75M|        return m_has_value;
  491|  2.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1744|   369k|    {
 1745|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   369k|        return this->get_unexpected().error();
 1747|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   397k|    {
  473|   397k|        return m_unexpected;
  474|   397k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1568|   412k|        : base(std::in_place, std::forward<U>(val)),
 1569|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   412k|    {
 1571|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   412k|    {
 1315|   412k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|   141k|    {
 1794|   141k|        return value();
 1795|   141k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   748k|    {
 1768|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   748k|        return this->get_value();
 1770|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   748k|    {
  456|   748k|        return m_value;
  457|   748k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1738|   412k|    {
 1739|   412k|        return has_value();
 1740|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   412k|    {
 1315|   412k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|   412k|    {
 1804|   412k|        return std::move(value());
 1805|   412k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|   412k|    {
 1768|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   412k|        return this->get_value();
 1770|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   336k|    {
 1978|   336k|        return detail::transform_error_impl(std::move(*this),
 1979|   336k|                                            std::forward<F>(f));
 1980|   336k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   336k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   336k|    else {
 1471|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 325k, False: 11.4k]
  |  |  ------------------
  ------------------
 1473|   336k|                   ? result(*std::forward<Exp>(exp))
 1474|   336k|                   : result(unexpect,
 1475|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1476|  11.4k|                                           std::forward<Exp>(exp).error()));
 1477|   336k|    }
 1478|   336k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1568|   609k|        : base(std::in_place, std::forward<U>(val)),
 1569|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   609k|    {
 1571|   609k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   609k|    {
  442|   609k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1624|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  11.4k|    {
 1627|  11.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   607k|    {
 1804|   607k|        return std::move(value());
 1805|   607k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1568|   412k|        : base(std::in_place, std::forward<U>(val)),
 1569|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   412k|    {
 1571|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   412k|    {
 1978|   412k|        return detail::transform_error_impl(std::move(*this),
 1979|   412k|                                            std::forward<F>(f));
 1980|   412k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|   412k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   412k|    else {
 1471|   412k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   412k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   412k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 412k, False: 0]
  |  |  ------------------
  ------------------
 1473|   412k|                   ? result(*std::forward<Exp>(exp))
 1474|   412k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   412k|    }
 1478|   412k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1803|   412k|    {
 1804|   412k|        return std::move(value());
 1805|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   412k|    {
 1768|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   412k|        return this->get_value();
 1770|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   412k|        : base(std::in_place, std::forward<U>(val)),
 1569|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   412k|    {
 1571|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   412k|    {
  442|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   412k|    {
 1315|   412k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1738|   412k|    {
 1739|   412k|        return has_value();
 1740|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   825k|    {
  490|   825k|        return m_has_value;
  491|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1803|   412k|    {
 1804|   412k|        return std::move(value());
 1805|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   412k|    {
 1768|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   412k|        return this->get_value();
 1770|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   412k|    {
  456|   412k|        return m_value;
  457|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   309k|    {
 1978|   309k|        return detail::transform_error_impl(std::move(*this),
 1979|   309k|                                            std::forward<F>(f));
 1980|   309k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1460|   309k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   309k|    else {
 1471|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 281k, False: 28.2k]
  |  |  ------------------
  ------------------
 1473|   309k|                   ? result(*std::forward<Exp>(exp))
 1474|   309k|                   : result(unexpect,
 1475|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1476|  28.2k|                                           std::forward<Exp>(exp).error()));
 1477|   309k|    }
 1478|   309k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1754|  28.2k|    {
 1755|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  28.2k|        return std::move(this->get_unexpected().error());
 1757|  28.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  3.25k|        : base(unexpect, std::move(e.error())),
 1615|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.25k|    {
 1617|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  3.25k|        : m_has_value(false)
  637|  3.25k|    {
  638|  3.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  3.25k|    {
  701|  3.25k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.25k|                                  std::forward<Args>(args)...);
  703|  3.25k|        m_has_value = false;
  704|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  9.77k|    {
  730|  9.77k|        return reinterpret_cast<unexpected<E>*>(
  731|  9.77k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  9.77k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  9.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  60.6k|    {
 1315|  60.6k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|  57.4k|        : base(std::in_place, std::forward<U>(val)),
 1569|  57.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  57.4k|    {
 1571|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|  57.4k|        : m_has_value(true)
  627|  57.4k|    {
  628|  57.4k|        construct(std::forward<Args>(args)...);
  629|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|  57.4k|    {
  694|  57.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.4k|        m_has_value = true;
  696|  57.4k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|  57.4k|{
  396|  57.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.4k|        T(std::forward<Args>(args)...);
  398|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   172k|    {
  718|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1738|  60.6k|    {
 1739|  60.6k|        return has_value();
 1740|  60.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   182k|    {
  687|   182k|        return m_has_value;
  688|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1744|  3.25k|    {
 1745|  3.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.25k|        return this->get_unexpected().error();
 1747|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.25k|    {
  670|  3.25k|        return *unexpected_ptr();
  671|  3.25k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1803|  57.4k|    {
 1804|  57.4k|        return std::move(value());
 1805|  57.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|  57.4k|    {
 1768|  57.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  57.4k|        return this->get_value();
 1770|  57.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.4k|    {
  653|  57.4k|        return *value_ptr();
  654|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|  60.6k|    {
  643|  60.6k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.4k, False: 3.25k]
  ------------------
  644|  57.4k|            destroy_value();
  645|  57.4k|        }
  646|  3.25k|        else {
  647|  3.25k|            destroy_unexpected();
  648|  3.25k|        }
  649|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.4k|    {
  708|  57.4k|        scn::detail::destroy_at(value_ptr());
  709|  57.4k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|  57.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.4k|    else {
  408|  57.4k|        p->~T();
  409|  57.4k|    }
  410|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.25k|    {
  712|  3.25k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.25k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|  1.48M|    {
 1739|  1.48M|        return has_value();
 1740|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.96M|    {
  490|  2.96M|        return m_has_value;
  491|  2.96M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   142k|    {
 1745|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   142k|        return this->get_unexpected().error();
 1747|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  1.05M|    {
 1804|  1.05M|        return std::move(value());
 1805|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  1.33M|    {
 1768|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.33M|        return this->get_value();
 1770|  1.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.33M|    {
  456|  1.33M|        return m_value;
  457|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3478|   637k|    {
 3479|   637k|        return m_iterator;
 3480|   637k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3482|   637k|    {
 3483|   637k|        return m_sentinel;
 3484|   637k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|   281k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   281k|    static_cast<    \
  |  | 1056|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   281k|    static_cast<    \
  |  | 1056|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   281k|    {
 3465|   281k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  2.57M|    {
 4569|  2.57M|        return !x.is_at_end();
 4570|  2.57M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  11.5k|        : base(unexpect, std::move(e.error())),
 1615|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.5k|    {
 1617|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.5k|          m_has_value(false)
  451|  11.5k|    {
  452|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   947k|    {
 1315|   947k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|   936k|        : base(std::in_place, std::forward<U>(val)),
 1569|   936k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   936k|    {
 1571|   936k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   936k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   936k|    {
  442|   936k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1738|   522k|    {
 1739|   522k|        return has_value();
 1740|   522k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|  96.4k|    {
 1794|  96.4k|        return value();
 1795|  96.4k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  8.74k|        : base(unexpect, std::move(e.error())),
 1615|  8.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  8.74k|    {
 1617|  8.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  8.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.74k|          m_has_value(false)
  451|  8.74k|    {
  452|  8.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   604k|    {
 1315|   604k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   595k|        : base(std::in_place, std::forward<U>(val)),
 1569|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   595k|    {
 1571|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   595k|    {
  442|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1738|   604k|    {
 1739|   604k|        return has_value();
 1740|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.20M|    {
  490|  1.20M|        return m_has_value;
  491|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1744|  8.74k|    {
 1745|  8.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  8.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  8.74k|        return this->get_unexpected().error();
 1747|  8.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.74k|    {
  473|  8.74k|        return m_unexpected;
  474|  8.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   595k|    {
 1804|   595k|        return std::move(value());
 1805|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   595k|    {
 1768|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   595k|        return this->get_value();
 1770|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   595k|    {
  456|   595k|        return m_value;
  457|   595k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1744|    360|    {
 1745|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    360|        return this->get_unexpected().error();
 1747|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  12.0k|        : base(unexpect, std::move(e.error())),
 1615|  12.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  12.0k|    {
 1617|  12.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.0k|          m_has_value(false)
  451|  12.0k|    {
  452|  12.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   968k|    {
 1315|   968k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1568|   139k|        : base(std::in_place, std::forward<U>(val)),
 1569|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   139k|    {
 1571|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   139k|    {
  442|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   814k|        : base(unexpect, std::move(e.error())),
 1615|   814k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   814k|    {
 1617|   814k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   814k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   814k|          m_has_value(false)
  451|   814k|    {
  452|   814k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1738|   968k|    {
 1739|   968k|        return has_value();
 1740|   968k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1744|   359k|    {
 1745|   359k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   359k|        return this->get_unexpected().error();
 1747|   359k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   359k|    {
  473|   359k|        return m_unexpected;
  474|   359k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|   414k|        : base(std::in_place, std::forward<U>(val)),
 1569|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   414k|    {
 1571|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   414k|    {
 1315|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|   141k|    {
 1794|   141k|        return value();
 1795|   141k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   141k|    {
 1768|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   141k|        return this->get_value();
 1770|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   141k|    {
  456|   141k|        return m_value;
  457|   141k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|   414k|    {
 1739|   414k|        return has_value();
 1740|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   414k|    {
 1315|   414k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   414k|    {
 1804|   414k|        return std::move(value());
 1805|   414k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   414k|    {
 1768|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   414k|        return this->get_value();
 1770|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.59k|    {
 1571|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1568|   414k|        : base(std::in_place, std::forward<U>(val)),
 1569|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   414k|    {
 1571|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   414k|    {
 1978|   414k|        return detail::transform_error_impl(std::move(*this),
 1979|   414k|                                            std::forward<F>(f));
 1980|   414k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1460|   414k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   414k|    else {
 1471|   414k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   414k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   414k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 414k, False: 0]
  |  |  ------------------
  ------------------
 1473|   414k|                   ? result(*std::forward<Exp>(exp))
 1474|   414k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   414k|    }
 1478|   414k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   414k|    {
 1804|   414k|        return std::move(value());
 1805|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   414k|    {
 1768|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   414k|        return this->get_value();
 1770|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   414k|        : base(std::in_place, std::forward<U>(val)),
 1569|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   414k|    {
 1571|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   414k|    {
  442|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   414k|    {
 1315|   414k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1738|   414k|    {
 1739|   414k|        return has_value();
 1740|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|   828k|    {
  490|   828k|        return m_has_value;
  491|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   414k|    {
 1804|   414k|        return std::move(value());
 1805|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   414k|    {
 1768|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   414k|        return this->get_value();
 1770|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|   414k|    {
  456|   414k|        return m_value;
  457|   414k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1614|  3.49k|        : base(unexpect, std::move(e.error())),
 1615|  3.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.49k|    {
 1617|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  3.49k|        : m_has_value(false)
  637|  3.49k|    {
  638|  3.49k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  3.49k|    {
  701|  3.49k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.49k|                                  std::forward<Args>(args)...);
  703|  3.49k|        m_has_value = false;
  704|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  10.4k|    {
  730|  10.4k|        return reinterpret_cast<unexpected<E>*>(
  731|  10.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  10.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  60.8k|    {
 1315|  60.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1568|  57.3k|        : base(std::in_place, std::forward<U>(val)),
 1569|  57.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  57.3k|    {
 1571|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|  57.3k|        : m_has_value(true)
  627|  57.3k|    {
  628|  57.3k|        construct(std::forward<Args>(args)...);
  629|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|  57.3k|    {
  694|  57.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  57.3k|        m_has_value = true;
  696|  57.3k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|  57.3k|{
  396|  57.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  57.3k|        T(std::forward<Args>(args)...);
  398|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   172k|    {
  718|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1738|  60.8k|    {
 1739|  60.8k|        return has_value();
 1740|  60.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   182k|    {
  687|   182k|        return m_has_value;
  688|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1744|  3.49k|    {
 1745|  3.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.49k|        return this->get_unexpected().error();
 1747|  3.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.49k|    {
  670|  3.49k|        return *unexpected_ptr();
  671|  3.49k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1803|  57.3k|    {
 1804|  57.3k|        return std::move(value());
 1805|  57.3k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1767|  57.3k|    {
 1768|  57.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  57.3k|        return this->get_value();
 1770|  57.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  57.3k|    {
  653|  57.3k|        return *value_ptr();
  654|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|  60.8k|    {
  643|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 57.3k, False: 3.49k]
  ------------------
  644|  57.3k|            destroy_value();
  645|  57.3k|        }
  646|  3.49k|        else {
  647|  3.49k|            destroy_unexpected();
  648|  3.49k|        }
  649|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  57.3k|    {
  708|  57.3k|        scn::detail::destroy_at(value_ptr());
  709|  57.3k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|  57.3k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  57.3k|    else {
  408|  57.3k|        p->~T();
  409|  57.3k|    }
  410|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.49k|    {
  712|  3.49k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.49k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  1.44M|    {
 2999|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  1.44M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  1.44M|    {
 2980|  1.44M|        return t.data();
 2981|  1.44M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|   749k|        : base(std::in_place, std::forward<U>(val)),
 1569|   749k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   749k|    {
 1571|   749k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   749k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   749k|    {
  442|   749k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   281k|    {
 1794|   281k|        return value();
 1795|   281k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|   280k|    {
 1794|   280k|        return value();
 1795|   280k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|   309k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   309k|    static_cast<    \
  |  | 1056|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   309k|    {
 3911|   309k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|   635k|    {
 4558|   635k|        return x.is_at_end();
 4559|   635k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|  34.7M|    {
 4602|  34.7M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 34.7M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  34.7M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 34.7M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  34.7M|        return !read_at_position();
 4609|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|  69.4G|    {
 4582|  69.4G|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  69.4G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  69.4G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  69.4G|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 69.4G]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  69.4G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  69.4G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 69.3G, False: 34.2M]
  |  |  ------------------
  ------------------
 4589|  69.3G|            return true;
 4590|  69.3G|        }
 4591|       |
 4592|  68.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 34.2M, False: 34.1M]
  ------------------
 4593|  34.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 104k, False: 34.1M]
  ------------------
 4594|   104k|                return false;
 4595|   104k|            }
 4596|  34.2M|        }
 4597|  34.1M|        return true;
 4598|  34.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|  69.4G|    {
 4356|  69.4G|        return m_putback_buffer.size() + m_current_view.size();
 4357|  69.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|  34.8M|    {
 4517|  34.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  34.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 34.8M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  34.8M|        auto res = read_at_position();
 4526|  34.8M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  34.8M|        return parent()->get_character_at(m_position);
 4528|  34.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|  34.8M|    {
 4387|  34.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  34.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 665k, False: 34.1M]
  |  |  ------------------
  ------------------
 4388|  34.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|   665k|            return m_putback_buffer[pos];
 4390|   665k|        }
 4391|  34.1M|        const auto start = pos - m_putback_buffer.size();
 4392|  34.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  34.1M|        return m_current_view[start];
 4394|  34.1M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|   381k|        : base(std::in_place, std::forward<U>(val)),
 1569|   381k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   381k|    {
 1571|   381k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   381k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   381k|    {
  442|   381k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   402k|    {
 1315|   402k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  20.7k|        : base(unexpect, std::move(e.error())),
 1615|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  20.7k|    {
 1617|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|  69.3G|    {
 4503|  69.3G|        ++m_position;
 4504|  69.3G|        (void)read_at_position();
 4505|  69.3G|        return *this;
 4506|  69.3G|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1738|   166k|    {
 1739|   166k|        return has_value();
 1740|   166k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|  10.3k|    {
 1794|  10.3k|        return value();
 1795|  10.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|  69.3G|    {
 4552|  69.3G|        return !(lhs == rhs);
 4553|  69.3G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|  69.3G|    {
 4547|  69.3G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 69.3G, False: 0]
  |  Branch (4547:46): [True: 33.9M, False: 69.2G]
  ------------------
 4548|  69.3G|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|   271k|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|   271k|    else {
 4074|       |        // utf-32
 4075|   271k|        static_assert(sizeof(U) == 4);
 4076|   271k|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|   271k|        return 1;
 4078|   271k|    }
 4079|   271k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|   271k|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|   271k|    else {
 4280|   271k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|   271k|        auto cp = static_cast<char32_t>(input.front());
 4282|   271k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 105k, False: 166k]
  |  |  ------------------
  ------------------
 4283|   105k|            return invalid_code_point;
 4284|   105k|        }
 4285|   166k|        return cp;
 4286|   271k|    }
 4287|   271k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  1.42k|        : base(unexpect, std::move(e.error())),
 1615|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.42k|    {
 1617|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.42k|          m_has_value(false)
  451|  1.42k|    {
  452|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   119k|    {
 1315|   119k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   118k|        : base(std::in_place, std::forward<U>(val)),
 1569|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   118k|    {
 1571|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   118k|    {
  442|   118k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|   119k|    {
 1739|   119k|        return has_value();
 1740|   119k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   239k|    {
  490|   239k|        return m_has_value;
  491|   239k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|  1.42k|    {
 1745|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.42k|        return this->get_unexpected().error();
 1747|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.42k|    {
  473|  1.42k|        return m_unexpected;
  474|  1.42k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   118k|    {
 1804|   118k|        return std::move(value());
 1805|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   118k|    {
 1768|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   118k|        return this->get_value();
 1770|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   118k|    {
  456|   118k|        return m_value;
  457|   118k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  35.4M|    {
 3483|  35.4M|        return m_sentinel;
 3484|  35.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1744|     72|    {
 1745|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     72|        return this->get_unexpected().error();
 1747|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  18.9k|        : base(unexpect, std::move(e.error())),
 1615|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  18.9k|    {
 1617|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   508k|    {
 1315|   508k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1568|  10.6k|        : base(std::in_place, std::forward<U>(val)),
 1569|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  10.6k|    {
 1571|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  10.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.6k|    {
  442|  10.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|   375k|        : base(unexpect, std::move(e.error())),
 1615|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   375k|    {
 1617|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   375k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   375k|          m_has_value(false)
  451|   375k|    {
  452|   375k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1738|   400k|    {
 1739|   400k|        return has_value();
 1740|   400k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   849k|    {
  490|   849k|        return m_has_value;
  491|   849k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1744|   142k|    {
 1745|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   142k|        return this->get_unexpected().error();
 1747|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   247k|    {
  473|   247k|        return m_unexpected;
  474|   247k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|  10.6k|    {
 1794|  10.6k|        return value();
 1795|  10.6k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  94.6k|    {
 1768|  94.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  94.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  94.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  94.6k|        return this->get_value();
 1770|  94.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  94.6k|    {
  456|  94.6k|        return m_value;
  457|  94.6k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   100k|    {
 1978|   100k|        return detail::transform_error_impl(std::move(*this),
 1979|   100k|                                            std::forward<F>(f));
 1980|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   100k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   100k|    else {
 1471|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1473|   100k|                   ? result(*std::forward<Exp>(exp))
 1474|   100k|                   : result(unexpect,
 1475|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1476|  18.8k|                                           std::forward<Exp>(exp).error()));
 1477|   100k|    }
 1478|   100k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1568|  84.0k|        : base(std::in_place, std::forward<U>(val)),
 1569|  84.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  84.0k|    {
 1571|  84.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  84.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  84.0k|    {
  442|  84.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1624|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  18.8k|    {
 1627|  18.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  84.0k|    {
 1804|  84.0k|        return std::move(value());
 1805|  84.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   133k|    {
 1978|   133k|        return detail::transform_error_impl(std::move(*this),
 1979|   133k|                                            std::forward<F>(f));
 1980|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1460|   133k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   133k|    else {
 1471|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1473|   133k|                   ? result(*std::forward<Exp>(exp))
 1474|   133k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   133k|    }
 1478|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   107k|    {
 1978|   107k|        return detail::transform_error_impl(std::move(*this),
 1979|   107k|                                            std::forward<F>(f));
 1980|   107k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1460|   107k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   107k|    else {
 1471|   107k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   107k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.75k, False: 104k]
  |  |  ------------------
  ------------------
 1473|   107k|                   ? result(*std::forward<Exp>(exp))
 1474|   107k|                   : result(unexpect,
 1475|   104k|                            trivial_invoke(std::forward<F>(f),
 1476|   104k|                                           std::forward<Exp>(exp).error()));
 1477|   107k|    }
 1478|   107k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1754|   104k|    {
 1755|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|   104k|        return std::move(this->get_unexpected().error());
 1757|   104k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1614|  11.8k|        : base(unexpect, std::move(e.error())),
 1615|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.8k|    {
 1617|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  11.8k|        : m_has_value(false)
  637|  11.8k|    {
  638|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  35.6k|    {
  730|  35.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  35.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  35.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  35.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  20.7k|    {
 1315|  20.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1568|  8.80k|        : base(std::in_place, std::forward<U>(val)),
 1569|  8.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  8.80k|    {
 1571|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|  8.80k|        : m_has_value(true)
  627|  8.80k|    {
  628|  8.80k|        construct(std::forward<Args>(args)...);
  629|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|  8.80k|    {
  694|  8.80k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.80k|        m_has_value = true;
  696|  8.80k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|  8.80k|{
  396|  8.80k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.80k|        T(std::forward<Args>(args)...);
  398|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.4k|    {
  718|  26.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  26.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.4k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|  20.7k|    {
 1739|  20.7k|        return has_value();
 1740|  20.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  62.1k|    {
  687|  62.1k|        return m_has_value;
  688|  62.1k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1744|  11.8k|    {
 1745|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  11.8k|        return this->get_unexpected().error();
 1747|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  11.8k|    {
  670|  11.8k|        return *unexpected_ptr();
  671|  11.8k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1803|  8.80k|    {
 1804|  8.80k|        return std::move(value());
 1805|  8.80k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1767|  8.80k|    {
 1768|  8.80k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  8.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  8.80k|        return this->get_value();
 1770|  8.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.80k|    {
  653|  8.80k|        return *value_ptr();
  654|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  20.7k|    {
  643|  20.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.80k, False: 11.8k]
  ------------------
  644|  8.80k|            destroy_value();
  645|  8.80k|        }
  646|  11.8k|        else {
  647|  11.8k|            destroy_unexpected();
  648|  11.8k|        }
  649|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.80k|    {
  708|  8.80k|        scn::detail::destroy_at(value_ptr());
  709|  8.80k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|  8.80k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.80k|    else {
  408|  8.80k|        p->~T();
  409|  8.80k|    }
  410|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  11.8k|    {
  712|  11.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  11.8k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|   486k|    {
 1739|   486k|        return has_value();
 1740|   486k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   972k|    {
  490|   972k|        return m_has_value;
  491|   972k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   328k|    {
 1745|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   328k|        return this->get_unexpected().error();
 1747|   328k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   328k|    {
  473|   328k|        return m_unexpected;
  474|   328k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   147k|    {
 1804|   147k|        return std::move(value());
 1805|   147k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   158k|    {
 1768|   158k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   158k|        return this->get_value();
 1770|   158k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   158k|    {
  456|   158k|        return m_value;
  457|   158k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3478|  6.83k|    {
 3479|  6.83k|        return m_iterator;
 3480|  6.83k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3482|  6.83k|    {
 3483|  6.83k|        return m_sentinel;
 3484|  6.83k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|  2.75k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.75k|    static_cast<    \
  |  | 1056|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.75k|    static_cast<    \
  |  | 1056|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  2.75k|    {
 3465|  2.75k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  34.1M|    {
 4569|  34.1M|        return !x.is_at_end();
 4570|  34.1M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  20.7k|        : base(unexpect, std::move(e.error())),
 1615|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  20.7k|    {
 1617|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   402k|    {
 1315|   402k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|   381k|        : base(std::in_place, std::forward<U>(val)),
 1569|   381k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   381k|    {
 1571|   381k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   381k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   381k|    {
  442|   381k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1738|   166k|    {
 1739|   166k|        return has_value();
 1740|   166k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   647k|    {
  490|   647k|        return m_has_value;
  491|   647k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|  10.3k|    {
 1794|  10.3k|        return value();
 1795|  10.3k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   225k|    {
 1768|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   225k|        return this->get_value();
 1770|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   225k|    {
  456|   225k|        return m_value;
  457|   225k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  1.42k|        : base(unexpect, std::move(e.error())),
 1615|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.42k|    {
 1617|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.42k|          m_has_value(false)
  451|  1.42k|    {
  452|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   119k|    {
 1315|   119k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   118k|        : base(std::in_place, std::forward<U>(val)),
 1569|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   118k|    {
 1571|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   118k|    {
  442|   118k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   135k|    {
 1978|   135k|        return detail::transform_error_impl(std::move(*this),
 1979|   135k|                                            std::forward<F>(f));
 1980|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   135k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   135k|    else {
 1471|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 133k, False: 1.76k]
  |  |  ------------------
  ------------------
 1473|   135k|                   ? result(*std::forward<Exp>(exp))
 1474|   135k|                   : result(unexpect,
 1475|  1.76k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.76k|                                           std::forward<Exp>(exp).error()));
 1477|   135k|    }
 1478|   135k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|   214k|    {
 1804|   214k|        return std::move(value());
 1805|   214k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|  20.6k|    {
 1755|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  20.6k|        return std::move(this->get_unexpected().error());
 1757|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.76k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.76k|    {
 1627|  1.76k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1738|   119k|    {
 1739|   119k|        return has_value();
 1740|   119k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   239k|    {
  490|   239k|        return m_has_value;
  491|   239k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1744|  1.42k|    {
 1745|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.42k|        return this->get_unexpected().error();
 1747|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.42k|    {
  473|  1.42k|        return m_unexpected;
  474|  1.42k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   118k|    {
 1804|   118k|        return std::move(value());
 1805|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   118k|    {
 1768|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   118k|        return this->get_value();
 1770|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   118k|    {
  456|   118k|        return m_value;
  457|   118k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1744|     72|    {
 1745|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|     72|        return this->get_unexpected().error();
 1747|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  18.9k|        : base(unexpect, std::move(e.error())),
 1615|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  18.9k|    {
 1617|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  37.8k|          m_has_value(false)
  451|  37.8k|    {
  452|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   400k|    {
 1315|   400k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1568|  10.6k|        : base(std::in_place, std::forward<U>(val)),
 1569|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  10.6k|    {
 1571|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  10.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  10.6k|    {
  442|  10.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   270k|        : base(unexpect, std::move(e.error())),
 1615|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   270k|    {
 1617|   270k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   270k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   270k|          m_has_value(false)
  451|   270k|    {
  452|   270k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1738|   400k|    {
 1739|   400k|        return has_value();
 1740|   400k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   634k|    {
  490|   634k|        return m_has_value;
  491|   634k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1744|   142k|    {
 1745|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   142k|        return this->get_unexpected().error();
 1747|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   142k|    {
  473|   142k|        return m_unexpected;
  474|   142k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|  10.6k|    {
 1794|  10.6k|        return value();
 1795|  10.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  91.9k|    {
 1768|  91.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  91.9k|        return this->get_value();
 1770|  91.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  91.9k|    {
  456|  91.9k|        return m_value;
  457|  91.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   100k|    {
 1978|   100k|        return detail::transform_error_impl(std::move(*this),
 1979|   100k|                                            std::forward<F>(f));
 1980|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   100k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   100k|    else {
 1471|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1473|   100k|                   ? result(*std::forward<Exp>(exp))
 1474|   100k|                   : result(unexpect,
 1475|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1476|  18.8k|                                           std::forward<Exp>(exp).error()));
 1477|   100k|    }
 1478|   100k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|  81.2k|        : base(std::in_place, std::forward<U>(val)),
 1569|  81.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  81.2k|    {
 1571|  81.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  81.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  81.2k|    {
  442|  81.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1624|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  18.8k|    {
 1627|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  81.2k|    {
 1804|  81.2k|        return std::move(value());
 1805|  81.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   133k|    {
 1978|   133k|        return detail::transform_error_impl(std::move(*this),
 1979|   133k|                                            std::forward<F>(f));
 1980|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1460|   133k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   133k|    else {
 1471|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1473|   133k|                   ? result(*std::forward<Exp>(exp))
 1474|   133k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   133k|    }
 1478|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   133k|        : base(std::in_place, std::forward<U>(val)),
 1569|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   133k|    {
 1571|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   133k|    {
  442|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   133k|    {
 1315|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1738|   133k|    {
 1739|   133k|        return has_value();
 1740|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   266k|    {
  490|   266k|        return m_has_value;
  491|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|   133k|    {
 1804|   133k|        return std::move(value());
 1805|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|   133k|    {
 1768|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   133k|        return this->get_value();
 1770|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   133k|    {
  456|   133k|        return m_value;
  457|   133k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1614|  11.8k|        : base(unexpect, std::move(e.error())),
 1615|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.8k|    {
 1617|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  11.8k|        : m_has_value(false)
  637|  11.8k|    {
  638|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  11.8k|    {
  701|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  702|  11.8k|                                  std::forward<Args>(args)...);
  703|  11.8k|        m_has_value = false;
  704|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  35.6k|    {
  730|  35.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  35.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1021|  35.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  35.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  20.7k|    {
 1315|  20.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1568|  8.80k|        : base(std::in_place, std::forward<U>(val)),
 1569|  8.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  8.80k|    {
 1571|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|  8.80k|        : m_has_value(true)
  627|  8.80k|    {
  628|  8.80k|        construct(std::forward<Args>(args)...);
  629|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|  8.80k|    {
  694|  8.80k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  8.80k|        m_has_value = true;
  696|  8.80k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|  8.80k|{
  396|  8.80k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  8.80k|        T(std::forward<Args>(args)...);
  398|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  26.4k|    {
  718|  26.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1021|  26.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  26.4k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1738|  20.7k|    {
 1739|  20.7k|        return has_value();
 1740|  20.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  62.1k|    {
  687|  62.1k|        return m_has_value;
  688|  62.1k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1744|  11.8k|    {
 1745|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  11.8k|        return this->get_unexpected().error();
 1747|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  11.8k|    {
  670|  11.8k|        return *unexpected_ptr();
  671|  11.8k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1803|  8.80k|    {
 1804|  8.80k|        return std::move(value());
 1805|  8.80k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1767|  8.80k|    {
 1768|  8.80k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  8.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  8.80k|        return this->get_value();
 1770|  8.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  8.80k|    {
  653|  8.80k|        return *value_ptr();
  654|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  20.7k|    {
  643|  20.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 8.80k, False: 11.8k]
  ------------------
  644|  8.80k|            destroy_value();
  645|  8.80k|        }
  646|  11.8k|        else {
  647|  11.8k|            destroy_unexpected();
  648|  11.8k|        }
  649|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  8.80k|    {
  708|  8.80k|        scn::detail::destroy_at(value_ptr());
  709|  8.80k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|  8.80k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  8.80k|    else {
  408|  8.80k|        p->~T();
  409|  8.80k|    }
  410|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  11.8k|    {
  712|  11.8k|        scn::detail::destroy_at(unexpected_ptr());
  713|  11.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   425k|    {
 2999|   425k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   425k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   425k|    {
 2980|   425k|        return t.data();
 2981|   425k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|  10.6k|    {
 1794|  10.6k|        return value();
 1795|  10.6k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|  10.6k|    {
 1794|  10.6k|        return value();
 1795|  10.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|   107k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   107k|    static_cast<    \
  |  | 1056|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   107k|    {
 3911|   107k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|  24.5M|    {
 4356|  24.5M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  24.5M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|   836k|    {
 6194|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   836k|        return static_cast<std::size_t>(m_desc &
 6199|   836k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|  1.67M|    {
 6220|  1.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|   836k|    {
 6162|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   836k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   836k|        const auto t = type(id);
 6174|   836k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   836k|        basic_scan_arg<Context> arg;
 6179|   836k|        arg.m_type = t;
 6180|   836k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 836k, False: 0]
  ------------------
 6181|   836k|            arg.m_value.ref_value = m_builtin_values[id];
 6182|   836k|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|   836k|        return arg;
 6187|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|   836k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   836k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   836k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   836k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|   836k|    {
 6224|   836k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   836k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|  1.56M|    {
 5978|  1.56M|        return m_type != detail::arg_type::none_type;
 5979|  1.56M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|  95.4k|{
 9362|  95.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  95.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  95.4k|{
 9251|  95.4k|#define SCN_VISIT(Type)                                                \
 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  95.4k|    }                                                                  \
 9255|  95.4k|    else {                                                             \
 9256|  95.4k|        return vis(monostate_val);                                     \
 9257|  95.4k|    }
 9258|       |
 9259|  95.4k|    monostate monostate_val{};
 9260|       |
 9261|  95.4k|    switch (get_arg_type(arg)) {
 9262|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 15.8k, False: 79.5k]
  ------------------
 9263|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  15.8k|    }                                                                  \
  |  | 9255|  15.8k|    else {                                                             \
  |  | 9256|  15.8k|        return vis(monostate_val);                                     \
  |  | 9257|  15.8k|    }
  ------------------
 9264|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 95.4k]
  ------------------
 9265|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  15.8k|    }                                                                  \
  |  | 9255|  15.8k|    else {                                                             \
  |  | 9256|  15.8k|        return vis(monostate_val);                                     \
  |  | 9257|  15.8k|    }
  ------------------
 9266|  34.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 18.3k, False: 77.1k]
  ------------------
 9267|  34.2k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  34.2k|    }                                                                  \
  |  | 9255|  34.2k|    else {                                                             \
  |  | 9256|  34.2k|        return vis(monostate_val);                                     \
  |  | 9257|  34.2k|    }
  ------------------
 9268|  34.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 95.4k]
  ------------------
 9269|  34.2k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  34.2k|    }                                                                  \
  |  | 9255|  34.2k|    else {                                                             \
  |  | 9256|  34.2k|        return vis(monostate_val);                                     \
  |  | 9257|  34.2k|    }
  ------------------
 9270|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 18.6k, False: 76.7k]
  ------------------
 9271|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  52.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  52.9k|    }                                                                  \
  |  | 9255|  52.9k|    else {                                                             \
  |  | 9256|  52.9k|        return vis(monostate_val);                                     \
  |  | 9257|  52.9k|    }
  ------------------
 9272|  52.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 95.4k]
  ------------------
 9273|  52.9k|#if SCN_HAS_INT128
 9274|  52.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  52.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  52.9k|    }                                                                  \
  |  | 9255|  52.9k|    else {                                                             \
  |  | 9256|  52.9k|        return vis(monostate_val);                                     \
  |  | 9257|  52.9k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  66.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 13.2k, False: 82.2k]
  ------------------
 9279|  66.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  66.1k|    }                                                                  \
  |  | 9255|  66.1k|    else {                                                             \
  |  | 9256|  66.1k|        return vis(monostate_val);                                     \
  |  | 9257|  66.1k|    }
  ------------------
 9280|  66.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 95.4k]
  ------------------
 9281|  66.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  66.1k|    }                                                                  \
  |  | 9255|  66.1k|    else {                                                             \
  |  | 9256|  66.1k|        return vis(monostate_val);                                     \
  |  | 9257|  66.1k|    }
  ------------------
 9282|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 14.5k, False: 80.9k]
  ------------------
 9283|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  80.7k|    }                                                                  \
  |  | 9255|  80.7k|    else {                                                             \
  |  | 9256|  80.7k|        return vis(monostate_val);                                     \
  |  | 9257|  80.7k|    }
  ------------------
 9284|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 95.4k]
  ------------------
 9285|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  80.7k|    }                                                                  \
  |  | 9255|  80.7k|    else {                                                             \
  |  | 9256|  80.7k|        return vis(monostate_val);                                     \
  |  | 9257|  80.7k|    }
  ------------------
 9286|  95.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 14.7k, False: 80.7k]
  ------------------
 9287|  95.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9288|  95.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 95.4k]
  ------------------
 9289|  95.4k|#if SCN_HAS_INT128
 9290|  95.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  95.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 95.4k]
  ------------------
 9295|  95.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9296|  95.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 95.4k]
  ------------------
 9297|  95.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9298|  95.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 95.4k]
  ------------------
 9299|  95.4k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9300|  95.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 95.4k]
  ------------------
 9301|  95.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9302|  95.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 95.4k]
  ------------------
 9303|  95.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9304|  95.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 95.4k]
  ------------------
 9305|  95.4k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9306|  95.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 95.4k]
  ------------------
 9307|  95.4k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9308|  95.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 95.4k]
  ------------------
 9309|  95.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9310|  95.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 95.4k]
  ------------------
 9311|  95.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9312|  95.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 95.4k]
  ------------------
 9313|  95.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9314|  95.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 95.4k]
  ------------------
 9315|  95.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9316|  95.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 95.4k]
  ------------------
 9317|  95.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9318|  95.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 95.4k]
  ------------------
 9319|  95.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9320|  95.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 95.4k]
  ------------------
 9321|  95.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  95.4k|    }                                                                  \
  |  | 9255|  95.4k|    else {                                                             \
  |  | 9256|  95.4k|        return vis(monostate_val);                                     \
  |  | 9257|  95.4k|    }
  ------------------
 9322|       |
 9323|  95.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 95.4k]
  ------------------
 9324|  95.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  95.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  95.4k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 95.4k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 95.4k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  95.4k|            SCN_CLANG_POP
 9341|  95.4k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|  2.27M|{
 6023|  2.27M|    return arg.m_type;
 6024|  2.27M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   850k|{
 6035|   850k|    return arg.m_value;
 6036|   850k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   355k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   355k|    {
 8964|   355k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|   449k|{
 4690|   449k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 449k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   449k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   449k|                            ranges::default_sentinel};
 4696|   449k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|   449k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   449k|    {
 4454|   449k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   449k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   449k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  94.1k|{
 9362|  94.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  94.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  94.1k|{
 9251|  94.1k|#define SCN_VISIT(Type)                                                \
 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  94.1k|    }                                                                  \
 9255|  94.1k|    else {                                                             \
 9256|  94.1k|        return vis(monostate_val);                                     \
 9257|  94.1k|    }
 9258|       |
 9259|  94.1k|    monostate monostate_val{};
 9260|       |
 9261|  94.1k|    switch (get_arg_type(arg)) {
 9262|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 15.8k, False: 78.2k]
  ------------------
 9263|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  15.8k|    }                                                                  \
  |  | 9255|  15.8k|    else {                                                             \
  |  | 9256|  15.8k|        return vis(monostate_val);                                     \
  |  | 9257|  15.8k|    }
  ------------------
 9264|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 94.1k]
  ------------------
 9265|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  15.8k|    }                                                                  \
  |  | 9255|  15.8k|    else {                                                             \
  |  | 9256|  15.8k|        return vis(monostate_val);                                     \
  |  | 9257|  15.8k|    }
  ------------------
 9266|  33.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 17.7k, False: 76.3k]
  ------------------
 9267|  33.6k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  33.6k|    }                                                                  \
  |  | 9255|  33.6k|    else {                                                             \
  |  | 9256|  33.6k|        return vis(monostate_val);                                     \
  |  | 9257|  33.6k|    }
  ------------------
 9268|  33.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 94.1k]
  ------------------
 9269|  33.6k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  33.6k|    }                                                                  \
  |  | 9255|  33.6k|    else {                                                             \
  |  | 9256|  33.6k|        return vis(monostate_val);                                     \
  |  | 9257|  33.6k|    }
  ------------------
 9270|  51.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 18.0k, False: 76.0k]
  ------------------
 9271|  51.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  51.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  51.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  51.7k|    }                                                                  \
  |  | 9255|  51.7k|    else {                                                             \
  |  | 9256|  51.7k|        return vis(monostate_val);                                     \
  |  | 9257|  51.7k|    }
  ------------------
 9272|  51.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 94.1k]
  ------------------
 9273|  51.7k|#if SCN_HAS_INT128
 9274|  51.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  51.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  51.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  51.7k|    }                                                                  \
  |  | 9255|  51.7k|    else {                                                             \
  |  | 9256|  51.7k|        return vis(monostate_val);                                     \
  |  | 9257|  51.7k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  64.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 13.2k, False: 80.9k]
  ------------------
 9279|  64.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  64.9k|    }                                                                  \
  |  | 9255|  64.9k|    else {                                                             \
  |  | 9256|  64.9k|        return vis(monostate_val);                                     \
  |  | 9257|  64.9k|    }
  ------------------
 9280|  64.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 94.1k]
  ------------------
 9281|  64.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  64.9k|    }                                                                  \
  |  | 9255|  64.9k|    else {                                                             \
  |  | 9256|  64.9k|        return vis(monostate_val);                                     \
  |  | 9257|  64.9k|    }
  ------------------
 9282|  79.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 14.5k, False: 79.6k]
  ------------------
 9283|  79.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  79.4k|    }                                                                  \
  |  | 9255|  79.4k|    else {                                                             \
  |  | 9256|  79.4k|        return vis(monostate_val);                                     \
  |  | 9257|  79.4k|    }
  ------------------
 9284|  79.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 94.1k]
  ------------------
 9285|  79.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  79.4k|    }                                                                  \
  |  | 9255|  79.4k|    else {                                                             \
  |  | 9256|  79.4k|        return vis(monostate_val);                                     \
  |  | 9257|  79.4k|    }
  ------------------
 9286|  94.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 14.6k, False: 79.4k]
  ------------------
 9287|  94.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9288|  94.1k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 94.1k]
  ------------------
 9289|  94.1k|#if SCN_HAS_INT128
 9290|  94.1k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  94.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 94.1k]
  ------------------
 9295|  94.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9296|  94.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 94.1k]
  ------------------
 9297|  94.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9298|  94.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 94.1k]
  ------------------
 9299|  94.1k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9300|  94.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 94.1k]
  ------------------
 9301|  94.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9302|  94.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 94.1k]
  ------------------
 9303|  94.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9304|  94.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 94.1k]
  ------------------
 9305|  94.1k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9306|  94.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 94.1k]
  ------------------
 9307|  94.1k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9308|  94.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 94.1k]
  ------------------
 9309|  94.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9310|  94.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 94.1k]
  ------------------
 9311|  94.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9312|  94.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 94.1k]
  ------------------
 9313|  94.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9314|  94.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 94.1k]
  ------------------
 9315|  94.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9316|  94.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 94.1k]
  ------------------
 9317|  94.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9318|  94.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 94.1k]
  ------------------
 9319|  94.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9320|  94.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 94.1k]
  ------------------
 9321|  94.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  94.1k|    }                                                                  \
  |  | 9255|  94.1k|    else {                                                             \
  |  | 9256|  94.1k|        return vis(monostate_val);                                     \
  |  | 9257|  94.1k|    }
  ------------------
 9322|       |
 9323|  94.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 94.1k]
  ------------------
 9324|  94.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  94.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  94.1k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 94.1k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 94.1k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  94.1k|            SCN_CLANG_POP
 9341|  94.1k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|   354k|        : m_format{format},
 6293|   354k|          m_next_arg_id{next_arg_id},
 6294|   354k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   354k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   354k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   354k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   354k|    {
 6300|   354k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   354k|    {
 3074|   354k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   354k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   354k|    {
 3040|   354k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   354k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   354k|{
 7809|   354k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   354k|    handler.check_args_exhausted();
 7811|   354k|    return handler.get_error();
 7812|   354k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   354k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   354k|    auto begin = format.data();
 7777|   354k|    auto it = begin;
 7778|   354k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   635k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 354k, False: 280k]
  ------------------
 7781|   354k|        const auto ch = *it++;
 7782|   354k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 354k, False: 0]
  ------------------
 7783|   354k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   354k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   354k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 74.3k, False: 280k]
  ------------------
 7787|  74.3k|                return;
 7788|  74.3k|            }
 7789|   354k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   354k|    }
 7800|       |
 7801|   280k|    handler.on_literal_text(begin, end);
 7802|   280k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|   354k|{
 7706|   354k|    struct id_adapter {
 7707|   354k|        constexpr void operator()()
 7708|   354k|        {
 7709|   354k|            arg_id = handler.on_arg_id();
 7710|   354k|        }
 7711|   354k|        constexpr void operator()(std::size_t id)
 7712|   354k|        {
 7713|   354k|            arg_id = handler.on_arg_id(id);
 7714|   354k|        }
 7715|       |
 7716|   354k|        constexpr void on_error(const char* msg)
 7717|   354k|        {
 7718|   354k|            SCN_UNLIKELY_ATTR
 7719|   354k|            handler.on_error(msg);
 7720|   354k|        }
 7721|       |
 7722|   354k|        Handler& handler;
 7723|   354k|        std::size_t arg_id;
 7724|   354k|    };
 7725|       |
 7726|   354k|    ++begin;
 7727|   354k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   354k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 354k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   354k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 354k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   354k|    else {
 7739|   354k|        auto adapter = id_adapter{handler, 0};
 7740|   354k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   354k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   354k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 354k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   354k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 354k, False: 0]
  ------------------
 7751|   354k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   354k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   354k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (986:45): [True: 0, False: 354k]
  |  |  |  Branch (986:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7757|  24.7k|                handler.on_error("Unknown format specifier");
 7758|  24.7k|                return begin;
 7759|  24.7k|            }
 7760|   354k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   354k|    }
 7767|   330k|    return begin + 1;
 7768|   354k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|   710k|    {
 8862|   710k|        return m_args.get(id);
 8863|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|   710k|    {
 6328|   710k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   710k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   710k|        do_check_arg_id(id);
 6336|   710k|        return id;
 6337|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|   710k|{
 6822|   710k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   710k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   710k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   354k|{
 7207|   354k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   354k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 354k, False: 0]
  |  Branch (7208:26): [True: 0, False: 354k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   354k|    handler();
 7213|   354k|    return begin;
 7214|   354k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   354k|        {
 7709|   354k|            arg_id = handler.on_arg_id();
 7710|   354k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|   660k|    {
 6323|   660k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   660k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|  1.37M|    {
 6312|  1.37M|        return m_format.data();
 6313|  1.37M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|   354k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   354k|    {
 7889|   354k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   354k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7621|   354k|{
 7622|   354k|    auto do_presentation = [&]() -> const CharT* {
 7623|   354k|        if (*begin == CharT{'['}) {
 7624|   354k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   354k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   354k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   354k|                return begin;
 7630|   354k|            }
 7631|   354k|            handler.on_character_set_string(set);
 7632|   354k|            return begin;
 7633|   354k|        }
 7634|   354k|        if (*begin == CharT{'/'}) {
 7635|   354k|            return parse_presentation_regex(begin, end, handler);
 7636|   354k|        }
 7637|   354k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   354k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   354k|            handler.on_error("Invalid type specifier in format string");
 7640|   354k|            return begin;
 7641|   354k|        }
 7642|   354k|        handler.on_type(type);
 7643|   354k|        return begin;
 7644|   354k|    };
 7645|       |
 7646|   354k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 354k, False: 0]
  |  Branch (7646:28): [True: 338k, False: 16.5k]
  ------------------
 7647|   354k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 330k, False: 8.25k]
  |  Branch (7647:36): [True: 265k, False: 64.4k]
  ------------------
 7648|   265k|        return do_presentation();
 7649|   265k|    }
 7650|       |
 7651|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  89.1k|    begin = parse_align(begin, end, handler);
 7657|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  89.1k|    begin = parse_width(begin, end, handler);
 7663|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  89.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 89.1k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  89.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 64.4k, False: 24.7k]
  ------------------
 7682|  64.4k|        handler.on_localized();
 7683|  64.4k|        ++begin;
 7684|  64.4k|    }
 7685|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  89.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 89.1k, False: 0]
  |  Branch (7690:25): [True: 24.7k, False: 64.4k]
  ------------------
 7691|  24.7k|        do_presentation();
 7692|  24.7k|    }
 7693|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  89.1k|    return begin;
 7699|  89.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7270|   677k|{
 7271|   677k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 531k, False: 145k]
  |  Branch (7271:33): [True: 531k, False: 0]
  ------------------
 7272|   677k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 128k, False: 16.5k]
  |  Branch (7272:33): [True: 128k, False: 0]
  ------------------
 7273|   677k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|   290k|    auto do_presentation = [&]() -> const CharT* {
 7623|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 290k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 290k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.5k, False: 273k]
  |  |  ------------------
  ------------------
 7639|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7640|  16.5k|            return begin;
 7641|  16.5k|        }
 7642|   273k|        handler.on_type(type);
 7643|   273k|        return begin;
 7644|   290k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7218|   581k|{
 7219|   581k|    switch (type) {
 7220|  44.7k|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 44.7k, False: 536k]
  ------------------
 7221|  61.2k|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 16.5k, False: 564k]
  ------------------
 7222|  61.2k|            return presentation_type::int_binary;
 7223|   127k|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 127k, False: 454k]
  ------------------
 7224|   127k|            return presentation_type::int_decimal;
 7225|   145k|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 145k, False: 436k]
  ------------------
 7226|   145k|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 581k]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|  79.4k|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 79.4k, False: 501k]
  ------------------
 7230|  79.4k|            return presentation_type::int_octal;
 7231|   134k|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 134k, False: 446k]
  ------------------
 7232|   134k|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 581k]
  ------------------
 7233|   134k|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 581k]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 581k]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|      0|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 0, False: 581k]
  ------------------
 7238|      0|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 581k]
  ------------------
 7239|      0|            return presentation_type::float_hex;
 7240|      0|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 0, False: 581k]
  ------------------
 7241|      0|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 581k]
  ------------------
 7242|      0|            return presentation_type::float_scientific;
 7243|      0|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 0, False: 581k]
  ------------------
 7244|      0|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 581k]
  ------------------
 7245|      0|            return presentation_type::float_fixed;
 7246|      0|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 0, False: 581k]
  ------------------
 7247|      0|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 581k]
  ------------------
 7248|      0|            return presentation_type::float_general;
 7249|      0|        case 's':
  ------------------
  |  Branch (7249:9): [True: 0, False: 581k]
  ------------------
 7250|      0|            return presentation_type::string;
 7251|      0|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 0, False: 581k]
  ------------------
 7252|      0|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 581k]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 581k]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 581k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 581k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|  33.0k|        default:
  ------------------
  |  Branch (7263:9): [True: 33.0k, False: 548k]
  ------------------
 7264|  33.0k|            return presentation_type::none;
 7265|   581k|    }
 7266|   581k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7295|  89.1k|{
 7296|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  89.1k|    auto check_align = [](wchar_t ch) {
 7299|  89.1k|        switch (ch) {
 7300|  89.1k|            case L'<':
 7301|  89.1k|                return align_type::left;
 7302|  89.1k|            case L'>':
 7303|  89.1k|                return align_type::right;
 7304|  89.1k|            case L'^':
 7305|  89.1k|                return align_type::center;
 7306|  89.1k|            default:
 7307|  89.1k|                return align_type::none;
 7308|  89.1k|        }
 7309|  89.1k|    };
 7310|       |
 7311|  89.1k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  89.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  |  Branch (986:45): [True: 0, False: 89.1k]
  |  |  |  Branch (986:45): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7313|  89.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  89.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  89.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  89.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  89.1k|    const auto begin_before_fill = begin;
 7323|  89.1k|    begin += potential_fill_len;
 7324|       |
 7325|  89.1k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 89.1k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  89.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  89.1k|    const auto begin_after_fill = begin;
 7331|  89.1k|    ++begin;
 7332|       |
 7333|  89.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 89.1k, False: 0]
  ------------------
 7334|  89.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  89.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 89.1k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|  89.1k|    }
 7342|       |
 7343|  89.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 89.1k, False: 0]
  ------------------
 7344|  89.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 89.1k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  89.1k|        return begin_before_fill;
 7349|  89.1k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  89.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7277|   178k|{
 7278|   178k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|       |    if constexpr (sizeof(CharT) != 1) {
 7280|       |        return 1;
 7281|       |    }
 7282|   178k|    else {
 7283|   178k|        const auto lengths =
 7284|   178k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|   178k|            "\3\4";
 7286|   178k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|   178k|        return len;
 7288|   178k|    }
 7289|   178k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|   178k|    auto check_align = [](wchar_t ch) {
 7299|   178k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 178k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 178k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 178k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   178k|            default:
  ------------------
  |  Branch (7306:13): [True: 178k, False: 0]
  ------------------
 7307|   178k|                return align_type::none;
 7308|   178k|        }
 7309|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7360|  89.1k|{
 7361|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  89.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 72.6k, False: 16.5k]
  |  Branch (7363:33): [True: 0, False: 72.6k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|  89.1k|    return begin;
 7374|  89.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7893|  64.4k|    {
 7894|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 28.6k, False: 35.7k]
  ------------------
 7896|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 0, False: 28.6k]
  ------------------
 7897|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 0]
  ------------------
 7898|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|  64.4k|        Handler::on_localized();
 7906|  64.4k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7040|   179k|    {
 7041|   179k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7042|   179k|            m_specs.localized = true;
 7043|       |        }
 7044|       |        else {
 7045|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7046|       |        }
 7047|   179k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|   330k|{
 9362|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   330k|{
 9251|   330k|#define SCN_VISIT(Type)                                                \
 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   330k|    }                                                                  \
 9255|   330k|    else {                                                             \
 9256|   330k|        return vis(monostate_val);                                     \
 9257|   330k|    }
 9258|       |
 9259|   330k|    monostate monostate_val{};
 9260|       |
 9261|   330k|    switch (get_arg_type(arg)) {
 9262|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 53.2k, False: 276k]
  ------------------
 9263|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  53.2k|    }                                                                  \
  |  | 9255|  53.2k|    else {                                                             \
  |  | 9256|  53.2k|        return vis(monostate_val);                                     \
  |  | 9257|  53.2k|    }
  ------------------
 9264|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 330k]
  ------------------
 9265|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  53.2k|    }                                                                  \
  |  | 9255|  53.2k|    else {                                                             \
  |  | 9256|  53.2k|        return vis(monostate_val);                                     \
  |  | 9257|  53.2k|    }
  ------------------
 9266|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 63.1k, False: 266k]
  ------------------
 9267|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9252|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   116k|    }                                                                  \
  |  | 9255|   116k|    else {                                                             \
  |  | 9256|   116k|        return vis(monostate_val);                                     \
  |  | 9257|   116k|    }
  ------------------
 9268|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 330k]
  ------------------
 9269|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9252|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   116k|    }                                                                  \
  |  | 9255|   116k|    else {                                                             \
  |  | 9256|   116k|        return vis(monostate_val);                                     \
  |  | 9257|   116k|    }
  ------------------
 9270|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 64.3k, False: 265k]
  ------------------
 9271|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   180k|    }                                                                  \
  |  | 9255|   180k|    else {                                                             \
  |  | 9256|   180k|        return vis(monostate_val);                                     \
  |  | 9257|   180k|    }
  ------------------
 9272|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 330k]
  ------------------
 9273|   180k|#if SCN_HAS_INT128
 9274|   180k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   180k|    }                                                                  \
  |  | 9255|   180k|    else {                                                             \
  |  | 9256|   180k|        return vis(monostate_val);                                     \
  |  | 9257|   180k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 46.8k, False: 283k]
  ------------------
 9279|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   227k|    }                                                                  \
  |  | 9255|   227k|    else {                                                             \
  |  | 9256|   227k|        return vis(monostate_val);                                     \
  |  | 9257|   227k|    }
  ------------------
 9280|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 330k]
  ------------------
 9281|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   227k|    }                                                                  \
  |  | 9255|   227k|    else {                                                             \
  |  | 9256|   227k|        return vis(monostate_val);                                     \
  |  | 9257|   227k|    }
  ------------------
 9282|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 51.0k, False: 279k]
  ------------------
 9283|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   278k|    }                                                                  \
  |  | 9255|   278k|    else {                                                             \
  |  | 9256|   278k|        return vis(monostate_val);                                     \
  |  | 9257|   278k|    }
  ------------------
 9284|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 330k]
  ------------------
 9285|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   278k|    }                                                                  \
  |  | 9255|   278k|    else {                                                             \
  |  | 9256|   278k|        return vis(monostate_val);                                     \
  |  | 9257|   278k|    }
  ------------------
 9286|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 51.5k, False: 278k]
  ------------------
 9287|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9288|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 330k]
  ------------------
 9289|   330k|#if SCN_HAS_INT128
 9290|   330k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 330k]
  ------------------
 9295|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9296|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 330k]
  ------------------
 9297|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9298|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 330k]
  ------------------
 9299|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9300|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 330k]
  ------------------
 9301|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9302|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 330k]
  ------------------
 9303|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9304|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 330k]
  ------------------
 9305|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9306|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 330k]
  ------------------
 9307|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9308|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 330k]
  ------------------
 9309|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9310|   330k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 330k]
  ------------------
 9311|   330k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9312|   330k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 330k]
  ------------------
 9313|   330k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9314|   330k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 330k]
  ------------------
 9315|   330k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9316|   330k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 330k]
  ------------------
 9317|   330k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9318|   330k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 330k]
  ------------------
 9319|   330k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9320|   330k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 330k]
  ------------------
 9321|   330k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9322|       |
 9323|   330k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 330k]
  ------------------
 9324|   330k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   330k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   330k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 330k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 330k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   330k|            SCN_CLANG_POP
 9341|   330k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6292|   355k|        : m_format{format},
 6293|   355k|          m_next_arg_id{next_arg_id},
 6294|   355k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   355k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   355k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   355k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   355k|    {
 6300|   355k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   355k|{
 7809|   355k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   355k|    handler.check_args_exhausted();
 7811|   355k|    return handler.get_error();
 7812|   355k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   355k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   355k|    auto begin = format.data();
 7777|   355k|    auto it = begin;
 7778|   355k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   636k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 355k, False: 281k]
  ------------------
 7781|   355k|        const auto ch = *it++;
 7782|   355k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 355k, False: 0]
  ------------------
 7783|   355k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   355k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   355k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 74.3k, False: 281k]
  ------------------
 7787|  74.3k|                return;
 7788|  74.3k|            }
 7789|   355k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   355k|    }
 7800|       |
 7801|   281k|    handler.on_literal_text(begin, end);
 7802|   281k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9000|   281k|    {
 9001|   281k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   281k|    static_cast<    \
  |  | 1056|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   281k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7705|   355k|{
 7706|   355k|    struct id_adapter {
 7707|   355k|        constexpr void operator()()
 7708|   355k|        {
 7709|   355k|            arg_id = handler.on_arg_id();
 7710|   355k|        }
 7711|   355k|        constexpr void operator()(std::size_t id)
 7712|   355k|        {
 7713|   355k|            arg_id = handler.on_arg_id(id);
 7714|   355k|        }
 7715|       |
 7716|   355k|        constexpr void on_error(const char* msg)
 7717|   355k|        {
 7718|   355k|            SCN_UNLIKELY_ATTR
 7719|   355k|            handler.on_error(msg);
 7720|   355k|        }
 7721|       |
 7722|   355k|        Handler& handler;
 7723|   355k|        std::size_t arg_id;
 7724|   355k|    };
 7725|       |
 7726|   355k|    ++begin;
 7727|   355k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   355k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 355k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   355k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 355k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   355k|    else {
 7739|   355k|        auto adapter = id_adapter{handler, 0};
 7740|   355k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   355k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   355k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 355k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   355k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 355k, False: 0]
  ------------------
 7751|   355k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   355k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   355k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (986:45): [True: 0, False: 355k]
  |  |  |  Branch (986:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7757|  24.7k|                handler.on_error("Unknown format specifier");
 7758|  24.7k|                return begin;
 7759|  24.7k|            }
 7760|   355k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   355k|    }
 7767|   330k|    return begin + 1;
 7768|   355k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   355k|{
 7207|   355k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   355k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 355k, False: 0]
  |  Branch (7208:26): [True: 0, False: 355k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   355k|    handler();
 7213|   355k|    return begin;
 7214|   355k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   355k|        {
 7709|   355k|            arg_id = handler.on_arg_id();
 7710|   355k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|   355k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   355k|    {
 7889|   355k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   355k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7621|   355k|{
 7622|   355k|    auto do_presentation = [&]() -> const CharT* {
 7623|   355k|        if (*begin == CharT{'['}) {
 7624|   355k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   355k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   355k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   355k|                return begin;
 7630|   355k|            }
 7631|   355k|            handler.on_character_set_string(set);
 7632|   355k|            return begin;
 7633|   355k|        }
 7634|   355k|        if (*begin == CharT{'/'}) {
 7635|   355k|            return parse_presentation_regex(begin, end, handler);
 7636|   355k|        }
 7637|   355k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   355k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   355k|            handler.on_error("Invalid type specifier in format string");
 7640|   355k|            return begin;
 7641|   355k|        }
 7642|   355k|        handler.on_type(type);
 7643|   355k|        return begin;
 7644|   355k|    };
 7645|       |
 7646|   355k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 355k, False: 0]
  |  Branch (7646:28): [True: 338k, False: 16.5k]
  ------------------
 7647|   355k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 330k, False: 8.25k]
  |  Branch (7647:36): [True: 266k, False: 64.4k]
  ------------------
 7648|   266k|        return do_presentation();
 7649|   266k|    }
 7650|       |
 7651|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  89.2k|    begin = parse_align(begin, end, handler);
 7657|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  89.2k|    begin = parse_width(begin, end, handler);
 7663|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  89.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 89.2k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  89.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 64.4k, False: 24.7k]
  ------------------
 7682|  64.4k|        handler.on_localized();
 7683|  64.4k|        ++begin;
 7684|  64.4k|    }
 7685|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  89.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 89.2k, False: 0]
  |  Branch (7690:25): [True: 24.7k, False: 64.4k]
  ------------------
 7691|  24.7k|        do_presentation();
 7692|  24.7k|    }
 7693|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  89.2k|    return begin;
 7699|  89.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|   290k|    auto do_presentation = [&]() -> const CharT* {
 7623|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 290k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 290k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.5k, False: 274k]
  |  |  ------------------
  ------------------
 7639|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7640|  16.5k|            return begin;
 7641|  16.5k|        }
 7642|   274k|        handler.on_type(type);
 7643|   274k|        return begin;
 7644|   290k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7295|  89.2k|{
 7296|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  89.2k|    auto check_align = [](wchar_t ch) {
 7299|  89.2k|        switch (ch) {
 7300|  89.2k|            case L'<':
 7301|  89.2k|                return align_type::left;
 7302|  89.2k|            case L'>':
 7303|  89.2k|                return align_type::right;
 7304|  89.2k|            case L'^':
 7305|  89.2k|                return align_type::center;
 7306|  89.2k|            default:
 7307|  89.2k|                return align_type::none;
 7308|  89.2k|        }
 7309|  89.2k|    };
 7310|       |
 7311|  89.2k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  89.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  |  Branch (986:45): [True: 0, False: 89.2k]
  |  |  |  Branch (986:45): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7313|  89.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  89.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  89.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  89.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  89.2k|    const auto begin_before_fill = begin;
 7323|  89.2k|    begin += potential_fill_len;
 7324|       |
 7325|  89.2k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 89.2k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  89.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  89.2k|    const auto begin_after_fill = begin;
 7331|  89.2k|    ++begin;
 7332|       |
 7333|  89.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 89.2k, False: 0]
  ------------------
 7334|  89.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  89.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 89.2k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|  89.2k|    }
 7342|       |
 7343|  89.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 89.2k, False: 0]
  ------------------
 7344|  89.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 89.2k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  89.2k|        return begin_before_fill;
 7349|  89.2k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  89.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|   178k|    auto check_align = [](wchar_t ch) {
 7299|   178k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 178k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 178k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 178k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   178k|            default:
  ------------------
  |  Branch (7306:13): [True: 178k, False: 0]
  ------------------
 7307|   178k|                return align_type::none;
 7308|   178k|        }
 7309|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7360|  89.2k|{
 7361|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  89.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 72.7k, False: 16.5k]
  |  Branch (7363:33): [True: 0, False: 72.7k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|  89.2k|    return begin;
 7374|  89.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7893|  64.4k|    {
 7894|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 28.7k, False: 35.7k]
  ------------------
 7896|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 0, False: 28.7k]
  ------------------
 7897|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 0]
  ------------------
 7898|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|  64.4k|        Handler::on_localized();
 7906|  64.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|   330k|{
 9362|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   330k|{
 9251|   330k|#define SCN_VISIT(Type)                                                \
 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   330k|    }                                                                  \
 9255|   330k|    else {                                                             \
 9256|   330k|        return vis(monostate_val);                                     \
 9257|   330k|    }
 9258|       |
 9259|   330k|    monostate monostate_val{};
 9260|       |
 9261|   330k|    switch (get_arg_type(arg)) {
 9262|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 53.2k, False: 277k]
  ------------------
 9263|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  53.2k|    }                                                                  \
  |  | 9255|  53.2k|    else {                                                             \
  |  | 9256|  53.2k|        return vis(monostate_val);                                     \
  |  | 9257|  53.2k|    }
  ------------------
 9264|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 330k]
  ------------------
 9265|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  53.2k|    }                                                                  \
  |  | 9255|  53.2k|    else {                                                             \
  |  | 9256|  53.2k|        return vis(monostate_val);                                     \
  |  | 9257|  53.2k|    }
  ------------------
 9266|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 63.2k, False: 267k]
  ------------------
 9267|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9252|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   116k|    }                                                                  \
  |  | 9255|   116k|    else {                                                             \
  |  | 9256|   116k|        return vis(monostate_val);                                     \
  |  | 9257|   116k|    }
  ------------------
 9268|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 330k]
  ------------------
 9269|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9252|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   116k|    }                                                                  \
  |  | 9255|   116k|    else {                                                             \
  |  | 9256|   116k|        return vis(monostate_val);                                     \
  |  | 9257|   116k|    }
  ------------------
 9270|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 64.4k, False: 266k]
  ------------------
 9271|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   180k|    }                                                                  \
  |  | 9255|   180k|    else {                                                             \
  |  | 9256|   180k|        return vis(monostate_val);                                     \
  |  | 9257|   180k|    }
  ------------------
 9272|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 330k]
  ------------------
 9273|   180k|#if SCN_HAS_INT128
 9274|   180k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   180k|    }                                                                  \
  |  | 9255|   180k|    else {                                                             \
  |  | 9256|   180k|        return vis(monostate_val);                                     \
  |  | 9257|   180k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 46.8k, False: 283k]
  ------------------
 9279|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   227k|    }                                                                  \
  |  | 9255|   227k|    else {                                                             \
  |  | 9256|   227k|        return vis(monostate_val);                                     \
  |  | 9257|   227k|    }
  ------------------
 9280|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 330k]
  ------------------
 9281|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   227k|    }                                                                  \
  |  | 9255|   227k|    else {                                                             \
  |  | 9256|   227k|        return vis(monostate_val);                                     \
  |  | 9257|   227k|    }
  ------------------
 9282|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 51.1k, False: 279k]
  ------------------
 9283|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   278k|    }                                                                  \
  |  | 9255|   278k|    else {                                                             \
  |  | 9256|   278k|        return vis(monostate_val);                                     \
  |  | 9257|   278k|    }
  ------------------
 9284|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 330k]
  ------------------
 9285|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   278k|    }                                                                  \
  |  | 9255|   278k|    else {                                                             \
  |  | 9256|   278k|        return vis(monostate_val);                                     \
  |  | 9257|   278k|    }
  ------------------
 9286|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 51.6k, False: 278k]
  ------------------
 9287|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9288|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 330k]
  ------------------
 9289|   330k|#if SCN_HAS_INT128
 9290|   330k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 330k]
  ------------------
 9295|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9296|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 330k]
  ------------------
 9297|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9298|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 330k]
  ------------------
 9299|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9300|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 330k]
  ------------------
 9301|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9302|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 330k]
  ------------------
 9303|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9304|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 330k]
  ------------------
 9305|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9306|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 330k]
  ------------------
 9307|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9308|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 330k]
  ------------------
 9309|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9310|   330k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 330k]
  ------------------
 9311|   330k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9312|   330k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 330k]
  ------------------
 9313|   330k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9314|   330k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 330k]
  ------------------
 9315|   330k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9316|   330k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 330k]
  ------------------
 9317|   330k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9318|   330k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 330k]
  ------------------
 9319|   330k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9320|   330k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 330k]
  ------------------
 9321|   330k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   330k|    }                                                                  \
  |  | 9255|   330k|    else {                                                             \
  |  | 9256|   330k|        return vis(monostate_val);                                     \
  |  | 9257|   330k|    }
  ------------------
 9322|       |
 9323|   330k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 330k]
  ------------------
 9324|   330k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   330k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   330k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 330k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 330k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   330k|            SCN_CLANG_POP
 9341|   330k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  86.6k|    {
 4351|  86.6k|        return sync(0);
 4352|  86.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|   352k|    {
 6194|   352k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|   352k|        return static_cast<std::size_t>(m_desc &
 6199|   352k|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|   704k|    {
 6220|   704k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|   704k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|   352k|    {
 6162|   352k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|   352k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|   352k|        const auto t = type(id);
 6174|   352k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|   352k|        basic_scan_arg<Context> arg;
 6179|   352k|        arg.m_type = t;
 6180|   352k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 352k, False: 0]
  ------------------
 6181|   352k|            arg.m_value.ref_value = m_builtin_values[id];
 6182|   352k|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|   352k|        return arg;
 6187|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|   352k|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|   352k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|   352k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|   352k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|   352k|    {
 6224|   352k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|   352k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|   588k|    {
 5978|   588k|        return m_type != detail::arg_type::none_type;
 5979|   588k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|  25.4k|{
 9362|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  25.4k|{
 9251|  25.4k|#define SCN_VISIT(Type)                                                \
 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  25.4k|    }                                                                  \
 9255|  25.4k|    else {                                                             \
 9256|  25.4k|        return vis(monostate_val);                                     \
 9257|  25.4k|    }
 9258|       |
 9259|  25.4k|    monostate monostate_val{};
 9260|       |
 9261|  25.4k|    switch (get_arg_type(arg)) {
 9262|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 4.23k, False: 21.2k]
  ------------------
 9263|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.23k|    }                                                                  \
  |  | 9255|  4.23k|    else {                                                             \
  |  | 9256|  4.23k|        return vis(monostate_val);                                     \
  |  | 9257|  4.23k|    }
  ------------------
 9264|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 25.4k]
  ------------------
 9265|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.23k|    }                                                                  \
  |  | 9255|  4.23k|    else {                                                             \
  |  | 9256|  4.23k|        return vis(monostate_val);                                     \
  |  | 9257|  4.23k|    }
  ------------------
 9266|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 4.25k, False: 21.2k]
  ------------------
 9267|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.48k|    }                                                                  \
  |  | 9255|  8.48k|    else {                                                             \
  |  | 9256|  8.48k|        return vis(monostate_val);                                     \
  |  | 9257|  8.48k|    }
  ------------------
 9268|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 25.4k]
  ------------------
 9269|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.48k|    }                                                                  \
  |  | 9255|  8.48k|    else {                                                             \
  |  | 9256|  8.48k|        return vis(monostate_val);                                     \
  |  | 9257|  8.48k|    }
  ------------------
 9270|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 4.28k, False: 21.1k]
  ------------------
 9271|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.7k|    }                                                                  \
  |  | 9255|  12.7k|    else {                                                             \
  |  | 9256|  12.7k|        return vis(monostate_val);                                     \
  |  | 9257|  12.7k|    }
  ------------------
 9272|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 25.4k]
  ------------------
 9273|  12.7k|#if SCN_HAS_INT128
 9274|  12.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.7k|    }                                                                  \
  |  | 9255|  12.7k|    else {                                                             \
  |  | 9256|  12.7k|        return vis(monostate_val);                                     \
  |  | 9257|  12.7k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 4.20k, False: 21.2k]
  ------------------
 9279|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  16.9k|    }                                                                  \
  |  | 9255|  16.9k|    else {                                                             \
  |  | 9256|  16.9k|        return vis(monostate_val);                                     \
  |  | 9257|  16.9k|    }
  ------------------
 9280|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 25.4k]
  ------------------
 9281|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  16.9k|    }                                                                  \
  |  | 9255|  16.9k|    else {                                                             \
  |  | 9256|  16.9k|        return vis(monostate_val);                                     \
  |  | 9257|  16.9k|    }
  ------------------
 9282|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 4.22k, False: 21.2k]
  ------------------
 9283|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  21.2k|    }                                                                  \
  |  | 9255|  21.2k|    else {                                                             \
  |  | 9256|  21.2k|        return vis(monostate_val);                                     \
  |  | 9257|  21.2k|    }
  ------------------
 9284|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 25.4k]
  ------------------
 9285|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  21.2k|    }                                                                  \
  |  | 9255|  21.2k|    else {                                                             \
  |  | 9256|  21.2k|        return vis(monostate_val);                                     \
  |  | 9257|  21.2k|    }
  ------------------
 9286|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 4.25k, False: 21.2k]
  ------------------
 9287|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9288|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 25.4k]
  ------------------
 9289|  25.4k|#if SCN_HAS_INT128
 9290|  25.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 25.4k]
  ------------------
 9295|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9296|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 25.4k]
  ------------------
 9297|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9298|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 25.4k]
  ------------------
 9299|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9300|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 25.4k]
  ------------------
 9301|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9302|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 25.4k]
  ------------------
 9303|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9304|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 25.4k]
  ------------------
 9305|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9306|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 25.4k]
  ------------------
 9307|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9308|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 25.4k]
  ------------------
 9309|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9310|  25.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 25.4k]
  ------------------
 9311|  25.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9312|  25.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 25.4k]
  ------------------
 9313|  25.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9314|  25.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 25.4k]
  ------------------
 9315|  25.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9316|  25.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 25.4k]
  ------------------
 9317|  25.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9318|  25.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 25.4k]
  ------------------
 9319|  25.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9320|  25.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 25.4k]
  ------------------
 9321|  25.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9322|       |
 9323|  25.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 25.4k]
  ------------------
 9324|  25.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  25.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  25.4k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 25.4k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 25.4k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  25.4k|            SCN_CLANG_POP
 9341|  25.4k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|   907k|{
 6023|   907k|    return arg.m_type;
 6024|   907k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|   270k|{
 6035|   270k|    return arg.m_value;
 6036|   270k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   159k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   159k|    {
 8964|   159k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|   159k|        : m_format{format},
 6293|   159k|          m_next_arg_id{next_arg_id},
 6294|   159k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   159k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   159k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   159k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   159k|    {
 6300|   159k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   159k|    {
 3074|   159k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   159k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   159k|    {
 3040|   159k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   159k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   159k|{
 7809|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   159k|    handler.check_args_exhausted();
 7811|   159k|    return handler.get_error();
 7812|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   159k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   159k|    auto begin = format.data();
 7777|   159k|    auto it = begin;
 7778|   159k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   169k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 159k, False: 10.6k]
  ------------------
 7781|   159k|        const auto ch = *it++;
 7782|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 159k, False: 0]
  ------------------
 7783|   159k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 148k, False: 10.6k]
  ------------------
 7787|   148k|                return;
 7788|   148k|            }
 7789|   159k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   159k|    }
 7800|       |
 7801|  10.6k|    handler.on_literal_text(begin, end);
 7802|  10.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|   159k|{
 7706|   159k|    struct id_adapter {
 7707|   159k|        constexpr void operator()()
 7708|   159k|        {
 7709|   159k|            arg_id = handler.on_arg_id();
 7710|   159k|        }
 7711|   159k|        constexpr void operator()(std::size_t id)
 7712|   159k|        {
 7713|   159k|            arg_id = handler.on_arg_id(id);
 7714|   159k|        }
 7715|       |
 7716|   159k|        constexpr void on_error(const char* msg)
 7717|   159k|        {
 7718|   159k|            SCN_UNLIKELY_ATTR
 7719|   159k|            handler.on_error(msg);
 7720|   159k|        }
 7721|       |
 7722|   159k|        Handler& handler;
 7723|   159k|        std::size_t arg_id;
 7724|   159k|    };
 7725|       |
 7726|   159k|    ++begin;
 7727|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 159k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 159k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   159k|    else {
 7739|   159k|        auto adapter = id_adapter{handler, 0};
 7740|   159k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 159k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 159k, False: 0]
  ------------------
 7751|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 49.5k, False: 109k]
  |  |  |  Branch (986:45): [True: 0, False: 159k]
  |  |  |  Branch (986:45): [True: 49.5k, False: 109k]
  |  |  ------------------
  ------------------
 7757|  49.5k|                handler.on_error("Unknown format specifier");
 7758|  49.5k|                return begin;
 7759|  49.5k|            }
 7760|   159k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   159k|    }
 7767|   109k|    return begin + 1;
 7768|   159k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|   318k|    {
 8862|   318k|        return m_args.get(id);
 8863|   318k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|   318k|    {
 6328|   318k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   318k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   318k|        do_check_arg_id(id);
 6336|   318k|        return id;
 6337|   318k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|   318k|{
 6822|   318k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   318k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   318k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   159k|{
 7207|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 159k, False: 0]
  |  Branch (7208:26): [True: 0, False: 159k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   159k|    handler();
 7213|   159k|    return begin;
 7214|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   159k|        {
 7709|   159k|            arg_id = handler.on_arg_id();
 7710|   159k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|   219k|    {
 6323|   219k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   219k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   184k|{
 4690|   184k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 184k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   184k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   184k|                            ranges::default_sentinel};
 4696|   184k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   184k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   184k|    {
 4454|   184k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   184k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   184k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|   538k|    {
 6312|   538k|        return m_format.data();
 6313|   538k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   159k|    {
 7889|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7621|   159k|{
 7622|   159k|    auto do_presentation = [&]() -> const CharT* {
 7623|   159k|        if (*begin == CharT{'['}) {
 7624|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   159k|                return begin;
 7630|   159k|            }
 7631|   159k|            handler.on_character_set_string(set);
 7632|   159k|            return begin;
 7633|   159k|        }
 7634|   159k|        if (*begin == CharT{'/'}) {
 7635|   159k|            return parse_presentation_regex(begin, end, handler);
 7636|   159k|        }
 7637|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   159k|            handler.on_error("Invalid type specifier in format string");
 7640|   159k|            return begin;
 7641|   159k|        }
 7642|   159k|        handler.on_type(type);
 7643|   159k|        return begin;
 7644|   159k|    };
 7645|       |
 7646|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 159k, False: 0]
  |  Branch (7646:28): [True: 126k, False: 33.0k]
  ------------------
 7647|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 109k, False: 16.5k]
  |  Branch (7647:36): [True: 84.4k, False: 25.2k]
  ------------------
 7648|  84.4k|        return do_presentation();
 7649|  84.4k|    }
 7650|       |
 7651|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  74.7k|    begin = parse_align(begin, end, handler);
 7657|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  74.7k|    begin = parse_width(begin, end, handler);
 7663|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  74.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 74.7k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  74.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 25.2k, False: 49.5k]
  ------------------
 7682|  25.2k|        handler.on_localized();
 7683|  25.2k|        ++begin;
 7684|  25.2k|    }
 7685|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  74.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 74.7k, False: 0]
  |  Branch (7690:25): [True: 49.5k, False: 25.2k]
  ------------------
 7691|  49.5k|        do_presentation();
 7692|  49.5k|    }
 7693|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  74.7k|    return begin;
 7699|  74.7k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7270|   252k|{
 7271|   252k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 168k, False: 83.5k]
  |  Branch (7271:33): [True: 168k, False: 0]
  ------------------
 7272|   252k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 50.4k, False: 33.0k]
  |  Branch (7272:33): [True: 50.4k, False: 0]
  ------------------
 7273|   252k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|   134k|    auto do_presentation = [&]() -> const CharT* {
 7623|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 134k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 134k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7639|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7640|  33.0k|            return begin;
 7641|  33.0k|        }
 7642|   100k|        handler.on_type(type);
 7643|   100k|        return begin;
 7644|   134k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7218|   268k|{
 7219|   268k|    switch (type) {
 7220|  33.4k|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 33.4k, False: 234k]
  ------------------
 7221|  66.4k|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 33.0k, False: 235k]
  ------------------
 7222|  66.4k|            return presentation_type::int_binary;
 7223|  33.9k|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 33.9k, False: 234k]
  ------------------
 7224|  33.9k|            return presentation_type::int_decimal;
 7225|  33.9k|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 33.9k, False: 234k]
  ------------------
 7226|  33.9k|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 268k]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|  33.5k|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 33.5k, False: 234k]
  ------------------
 7230|  33.5k|            return presentation_type::int_octal;
 7231|  34.0k|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 34.0k, False: 234k]
  ------------------
 7232|  34.0k|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 268k]
  ------------------
 7233|  34.0k|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 268k]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 268k]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|      0|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 0, False: 268k]
  ------------------
 7238|      0|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 268k]
  ------------------
 7239|      0|            return presentation_type::float_hex;
 7240|      0|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 0, False: 268k]
  ------------------
 7241|      0|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 268k]
  ------------------
 7242|      0|            return presentation_type::float_scientific;
 7243|      0|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 0, False: 268k]
  ------------------
 7244|      0|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 268k]
  ------------------
 7245|      0|            return presentation_type::float_fixed;
 7246|      0|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 0, False: 268k]
  ------------------
 7247|      0|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 268k]
  ------------------
 7248|      0|            return presentation_type::float_general;
 7249|      0|        case 's':
  ------------------
  |  Branch (7249:9): [True: 0, False: 268k]
  ------------------
 7250|      0|            return presentation_type::string;
 7251|      0|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 0, False: 268k]
  ------------------
 7252|      0|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 268k]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 268k]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 268k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 268k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|  66.0k|        default:
  ------------------
  |  Branch (7263:9): [True: 66.0k, False: 201k]
  ------------------
 7264|  66.0k|            return presentation_type::none;
 7265|   268k|    }
 7266|   268k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7295|  74.7k|{
 7296|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  74.7k|    auto check_align = [](wchar_t ch) {
 7299|  74.7k|        switch (ch) {
 7300|  74.7k|            case L'<':
 7301|  74.7k|                return align_type::left;
 7302|  74.7k|            case L'>':
 7303|  74.7k|                return align_type::right;
 7304|  74.7k|            case L'^':
 7305|  74.7k|                return align_type::center;
 7306|  74.7k|            default:
 7307|  74.7k|                return align_type::none;
 7308|  74.7k|        }
 7309|  74.7k|    };
 7310|       |
 7311|  74.7k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  74.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  |  Branch (986:45): [True: 0, False: 74.7k]
  |  |  |  Branch (986:45): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7313|  74.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  74.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  74.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  74.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  74.7k|    const auto begin_before_fill = begin;
 7323|  74.7k|    begin += potential_fill_len;
 7324|       |
 7325|  74.7k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 74.7k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  74.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  74.7k|    const auto begin_after_fill = begin;
 7331|  74.7k|    ++begin;
 7332|       |
 7333|  74.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 74.7k, False: 0]
  ------------------
 7334|  74.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  74.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 74.7k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|  74.7k|    }
 7342|       |
 7343|  74.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 74.7k, False: 0]
  ------------------
 7344|  74.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 74.7k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  74.7k|        return begin_before_fill;
 7349|  74.7k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  74.7k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7277|   149k|{
 7278|   149k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|   149k|    if constexpr (sizeof(CharT) != 1) {
 7280|   149k|        return 1;
 7281|       |    }
 7282|       |    else {
 7283|       |        const auto lengths =
 7284|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|       |            "\3\4";
 7286|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|       |        return len;
 7288|       |    }
 7289|   149k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|   149k|    auto check_align = [](wchar_t ch) {
 7299|   149k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 149k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 149k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 149k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   149k|            default:
  ------------------
  |  Branch (7306:13): [True: 149k, False: 0]
  ------------------
 7307|   149k|                return align_type::none;
 7308|   149k|        }
 7309|   149k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7360|  74.7k|{
 7361|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  74.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 41.7k, False: 33.0k]
  |  Branch (7363:33): [True: 0, False: 41.7k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|  74.7k|    return begin;
 7374|  74.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7893|  25.2k|    {
 7894|  25.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  25.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 12.5k, False: 12.6k]
  ------------------
 7896|  25.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 0, False: 12.5k]
  ------------------
 7897|  25.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 0]
  ------------------
 7898|  25.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|  25.2k|        Handler::on_localized();
 7906|  25.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|   109k|{
 9362|   109k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   109k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   109k|{
 9251|   109k|#define SCN_VISIT(Type)                                                \
 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   109k|    }                                                                  \
 9255|   109k|    else {                                                             \
 9256|   109k|        return vis(monostate_val);                                     \
 9257|   109k|    }
 9258|       |
 9259|   109k|    monostate monostate_val{};
 9260|       |
 9261|   109k|    switch (get_arg_type(arg)) {
 9262|  18.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 18.2k, False: 91.4k]
  ------------------
 9263|  18.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  18.2k|    }                                                                  \
  |  | 9255|  18.2k|    else {                                                             \
  |  | 9256|  18.2k|        return vis(monostate_val);                                     \
  |  | 9257|  18.2k|    }
  ------------------
 9264|  18.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 109k]
  ------------------
 9265|  18.2k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  18.2k|    }                                                                  \
  |  | 9255|  18.2k|    else {                                                             \
  |  | 9256|  18.2k|        return vis(monostate_val);                                     \
  |  | 9257|  18.2k|    }
  ------------------
 9266|  36.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 18.3k, False: 91.4k]
  ------------------
 9267|  36.5k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  36.5k|    }                                                                  \
  |  | 9255|  36.5k|    else {                                                             \
  |  | 9256|  36.5k|        return vis(monostate_val);                                     \
  |  | 9257|  36.5k|    }
  ------------------
 9268|  36.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 109k]
  ------------------
 9269|  36.5k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  36.5k|    }                                                                  \
  |  | 9255|  36.5k|    else {                                                             \
  |  | 9256|  36.5k|        return vis(monostate_val);                                     \
  |  | 9257|  36.5k|    }
  ------------------
 9270|  54.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 18.4k, False: 91.3k]
  ------------------
 9271|  54.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.9k|    }                                                                  \
  |  | 9255|  54.9k|    else {                                                             \
  |  | 9256|  54.9k|        return vis(monostate_val);                                     \
  |  | 9257|  54.9k|    }
  ------------------
 9272|  54.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 109k]
  ------------------
 9273|  54.9k|#if SCN_HAS_INT128
 9274|  54.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.9k|    }                                                                  \
  |  | 9255|  54.9k|    else {                                                             \
  |  | 9256|  54.9k|        return vis(monostate_val);                                     \
  |  | 9257|  54.9k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  73.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 18.1k, False: 91.5k]
  ------------------
 9279|  73.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  73.1k|    }                                                                  \
  |  | 9255|  73.1k|    else {                                                             \
  |  | 9256|  73.1k|        return vis(monostate_val);                                     \
  |  | 9257|  73.1k|    }
  ------------------
 9280|  73.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 109k]
  ------------------
 9281|  73.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  73.1k|    }                                                                  \
  |  | 9255|  73.1k|    else {                                                             \
  |  | 9256|  73.1k|        return vis(monostate_val);                                     \
  |  | 9257|  73.1k|    }
  ------------------
 9282|  91.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 18.2k, False: 91.4k]
  ------------------
 9283|  91.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  91.4k|    }                                                                  \
  |  | 9255|  91.4k|    else {                                                             \
  |  | 9256|  91.4k|        return vis(monostate_val);                                     \
  |  | 9257|  91.4k|    }
  ------------------
 9284|  91.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 109k]
  ------------------
 9285|  91.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  91.4k|    }                                                                  \
  |  | 9255|  91.4k|    else {                                                             \
  |  | 9256|  91.4k|        return vis(monostate_val);                                     \
  |  | 9257|  91.4k|    }
  ------------------
 9286|   109k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 18.3k, False: 91.4k]
  ------------------
 9287|   109k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9288|   109k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 109k]
  ------------------
 9289|   109k|#if SCN_HAS_INT128
 9290|   109k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|   109k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 109k]
  ------------------
 9295|   109k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9296|   109k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 109k]
  ------------------
 9297|   109k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9298|   109k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 109k]
  ------------------
 9299|   109k|            SCN_VISIT(char);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9300|   109k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 109k]
  ------------------
 9301|   109k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9302|   109k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 109k]
  ------------------
 9303|   109k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9304|   109k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 109k]
  ------------------
 9305|   109k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9306|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 109k]
  ------------------
 9307|   109k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9308|   109k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 109k]
  ------------------
 9309|   109k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9310|   109k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 109k]
  ------------------
 9311|   109k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9312|   109k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 109k]
  ------------------
 9313|   109k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9314|   109k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 109k]
  ------------------
 9315|   109k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9316|   109k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 109k]
  ------------------
 9317|   109k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9318|   109k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 109k]
  ------------------
 9319|   109k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9320|   109k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 109k]
  ------------------
 9321|   109k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9322|       |
 9323|   109k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 109k]
  ------------------
 9324|   109k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   109k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   109k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 109k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 109k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   109k|            SCN_CLANG_POP
 9341|   109k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|  25.4k|{
 9362|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|  25.4k|{
 9251|  25.4k|#define SCN_VISIT(Type)                                                \
 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|  25.4k|    }                                                                  \
 9255|  25.4k|    else {                                                             \
 9256|  25.4k|        return vis(monostate_val);                                     \
 9257|  25.4k|    }
 9258|       |
 9259|  25.4k|    monostate monostate_val{};
 9260|       |
 9261|  25.4k|    switch (get_arg_type(arg)) {
 9262|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 4.23k, False: 21.2k]
  ------------------
 9263|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.23k|    }                                                                  \
  |  | 9255|  4.23k|    else {                                                             \
  |  | 9256|  4.23k|        return vis(monostate_val);                                     \
  |  | 9257|  4.23k|    }
  ------------------
 9264|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 25.4k]
  ------------------
 9265|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  4.23k|    }                                                                  \
  |  | 9255|  4.23k|    else {                                                             \
  |  | 9256|  4.23k|        return vis(monostate_val);                                     \
  |  | 9257|  4.23k|    }
  ------------------
 9266|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 4.25k, False: 21.2k]
  ------------------
 9267|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.48k|    }                                                                  \
  |  | 9255|  8.48k|    else {                                                             \
  |  | 9256|  8.48k|        return vis(monostate_val);                                     \
  |  | 9257|  8.48k|    }
  ------------------
 9268|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 25.4k]
  ------------------
 9269|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  8.48k|    }                                                                  \
  |  | 9255|  8.48k|    else {                                                             \
  |  | 9256|  8.48k|        return vis(monostate_val);                                     \
  |  | 9257|  8.48k|    }
  ------------------
 9270|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 4.28k, False: 21.1k]
  ------------------
 9271|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.7k|    }                                                                  \
  |  | 9255|  12.7k|    else {                                                             \
  |  | 9256|  12.7k|        return vis(monostate_val);                                     \
  |  | 9257|  12.7k|    }
  ------------------
 9272|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 25.4k]
  ------------------
 9273|  12.7k|#if SCN_HAS_INT128
 9274|  12.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  12.7k|    }                                                                  \
  |  | 9255|  12.7k|    else {                                                             \
  |  | 9256|  12.7k|        return vis(monostate_val);                                     \
  |  | 9257|  12.7k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 4.20k, False: 21.2k]
  ------------------
 9279|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  16.9k|    }                                                                  \
  |  | 9255|  16.9k|    else {                                                             \
  |  | 9256|  16.9k|        return vis(monostate_val);                                     \
  |  | 9257|  16.9k|    }
  ------------------
 9280|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 25.4k]
  ------------------
 9281|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  16.9k|    }                                                                  \
  |  | 9255|  16.9k|    else {                                                             \
  |  | 9256|  16.9k|        return vis(monostate_val);                                     \
  |  | 9257|  16.9k|    }
  ------------------
 9282|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 4.22k, False: 21.2k]
  ------------------
 9283|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  21.2k|    }                                                                  \
  |  | 9255|  21.2k|    else {                                                             \
  |  | 9256|  21.2k|        return vis(monostate_val);                                     \
  |  | 9257|  21.2k|    }
  ------------------
 9284|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 25.4k]
  ------------------
 9285|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  21.2k|    }                                                                  \
  |  | 9255|  21.2k|    else {                                                             \
  |  | 9256|  21.2k|        return vis(monostate_val);                                     \
  |  | 9257|  21.2k|    }
  ------------------
 9286|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 4.25k, False: 21.2k]
  ------------------
 9287|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9288|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 25.4k]
  ------------------
 9289|  25.4k|#if SCN_HAS_INT128
 9290|  25.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 25.4k]
  ------------------
 9295|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9296|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 25.4k]
  ------------------
 9297|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9298|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 25.4k]
  ------------------
 9299|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9300|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 25.4k]
  ------------------
 9301|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9302|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 25.4k]
  ------------------
 9303|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9304|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 25.4k]
  ------------------
 9305|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9306|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 25.4k]
  ------------------
 9307|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9308|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 25.4k]
  ------------------
 9309|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9310|  25.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 25.4k]
  ------------------
 9311|  25.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9312|  25.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 25.4k]
  ------------------
 9313|  25.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9314|  25.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 25.4k]
  ------------------
 9315|  25.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9316|  25.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 25.4k]
  ------------------
 9317|  25.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9318|  25.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 25.4k]
  ------------------
 9319|  25.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9320|  25.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 25.4k]
  ------------------
 9321|  25.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  25.4k|    }                                                                  \
  |  | 9255|  25.4k|    else {                                                             \
  |  | 9256|  25.4k|        return vis(monostate_val);                                     \
  |  | 9257|  25.4k|    }
  ------------------
 9322|       |
 9323|  25.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 25.4k]
  ------------------
 9324|  25.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|  25.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|  25.4k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 25.4k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 25.4k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|  25.4k|            SCN_CLANG_POP
 9341|  25.4k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6292|   159k|        : m_format{format},
 6293|   159k|          m_next_arg_id{next_arg_id},
 6294|   159k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   159k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   159k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   159k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   159k|    {
 6300|   159k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   159k|{
 7809|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   159k|    handler.check_args_exhausted();
 7811|   159k|    return handler.get_error();
 7812|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   159k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   159k|    auto begin = format.data();
 7777|   159k|    auto it = begin;
 7778|   159k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   169k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 159k, False: 10.6k]
  ------------------
 7781|   159k|        const auto ch = *it++;
 7782|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 159k, False: 0]
  ------------------
 7783|   159k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 148k, False: 10.6k]
  ------------------
 7787|   148k|                return;
 7788|   148k|            }
 7789|   159k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   159k|    }
 7800|       |
 7801|  10.6k|    handler.on_literal_text(begin, end);
 7802|  10.6k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9000|  10.6k|    {
 9001|  10.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  10.6k|    static_cast<    \
  |  | 1056|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|  10.6k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7705|   159k|{
 7706|   159k|    struct id_adapter {
 7707|   159k|        constexpr void operator()()
 7708|   159k|        {
 7709|   159k|            arg_id = handler.on_arg_id();
 7710|   159k|        }
 7711|   159k|        constexpr void operator()(std::size_t id)
 7712|   159k|        {
 7713|   159k|            arg_id = handler.on_arg_id(id);
 7714|   159k|        }
 7715|       |
 7716|   159k|        constexpr void on_error(const char* msg)
 7717|   159k|        {
 7718|   159k|            SCN_UNLIKELY_ATTR
 7719|   159k|            handler.on_error(msg);
 7720|   159k|        }
 7721|       |
 7722|   159k|        Handler& handler;
 7723|   159k|        std::size_t arg_id;
 7724|   159k|    };
 7725|       |
 7726|   159k|    ++begin;
 7727|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 159k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 159k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   159k|    else {
 7739|   159k|        auto adapter = id_adapter{handler, 0};
 7740|   159k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 159k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 159k, False: 0]
  ------------------
 7751|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 49.5k, False: 109k]
  |  |  |  Branch (986:45): [True: 0, False: 159k]
  |  |  |  Branch (986:45): [True: 49.5k, False: 109k]
  |  |  ------------------
  ------------------
 7757|  49.5k|                handler.on_error("Unknown format specifier");
 7758|  49.5k|                return begin;
 7759|  49.5k|            }
 7760|   159k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   159k|    }
 7767|   109k|    return begin + 1;
 7768|   159k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   159k|{
 7207|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 159k, False: 0]
  |  Branch (7208:26): [True: 0, False: 159k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   159k|    handler();
 7213|   159k|    return begin;
 7214|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   159k|        {
 7709|   159k|            arg_id = handler.on_arg_id();
 7710|   159k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   159k|    {
 7889|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7621|   159k|{
 7622|   159k|    auto do_presentation = [&]() -> const CharT* {
 7623|   159k|        if (*begin == CharT{'['}) {
 7624|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   159k|                return begin;
 7630|   159k|            }
 7631|   159k|            handler.on_character_set_string(set);
 7632|   159k|            return begin;
 7633|   159k|        }
 7634|   159k|        if (*begin == CharT{'/'}) {
 7635|   159k|            return parse_presentation_regex(begin, end, handler);
 7636|   159k|        }
 7637|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   159k|            handler.on_error("Invalid type specifier in format string");
 7640|   159k|            return begin;
 7641|   159k|        }
 7642|   159k|        handler.on_type(type);
 7643|   159k|        return begin;
 7644|   159k|    };
 7645|       |
 7646|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 159k, False: 0]
  |  Branch (7646:28): [True: 126k, False: 33.0k]
  ------------------
 7647|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 109k, False: 16.5k]
  |  Branch (7647:36): [True: 84.4k, False: 25.2k]
  ------------------
 7648|  84.4k|        return do_presentation();
 7649|  84.4k|    }
 7650|       |
 7651|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|  74.7k|    begin = parse_align(begin, end, handler);
 7657|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|  74.7k|    begin = parse_width(begin, end, handler);
 7663|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|  74.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 74.7k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|  74.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 25.2k, False: 49.5k]
  ------------------
 7682|  25.2k|        handler.on_localized();
 7683|  25.2k|        ++begin;
 7684|  25.2k|    }
 7685|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|  74.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 74.7k, False: 0]
  |  Branch (7690:25): [True: 49.5k, False: 25.2k]
  ------------------
 7691|  49.5k|        do_presentation();
 7692|  49.5k|    }
 7693|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|  74.7k|    return begin;
 7699|  74.7k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|   134k|    auto do_presentation = [&]() -> const CharT* {
 7623|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 134k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 134k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7639|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7640|  33.0k|            return begin;
 7641|  33.0k|        }
 7642|   100k|        handler.on_type(type);
 7643|   100k|        return begin;
 7644|   134k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7295|  74.7k|{
 7296|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|  74.7k|    auto check_align = [](wchar_t ch) {
 7299|  74.7k|        switch (ch) {
 7300|  74.7k|            case L'<':
 7301|  74.7k|                return align_type::left;
 7302|  74.7k|            case L'>':
 7303|  74.7k|                return align_type::right;
 7304|  74.7k|            case L'^':
 7305|  74.7k|                return align_type::center;
 7306|  74.7k|            default:
 7307|  74.7k|                return align_type::none;
 7308|  74.7k|        }
 7309|  74.7k|    };
 7310|       |
 7311|  74.7k|    auto potential_fill_len = code_point_length(begin, end);
 7312|  74.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  |  Branch (986:45): [True: 0, False: 74.7k]
  |  |  |  Branch (986:45): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7313|  74.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|  74.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|  74.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|  74.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|  74.7k|    const auto begin_before_fill = begin;
 7323|  74.7k|    begin += potential_fill_len;
 7324|       |
 7325|  74.7k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 74.7k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|  74.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|  74.7k|    const auto begin_after_fill = begin;
 7331|  74.7k|    ++begin;
 7332|       |
 7333|  74.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 74.7k, False: 0]
  ------------------
 7334|  74.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|  74.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 74.7k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|  74.7k|    }
 7342|       |
 7343|  74.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 74.7k, False: 0]
  ------------------
 7344|  74.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 74.7k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|  74.7k|        return begin_before_fill;
 7349|  74.7k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|  74.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|   149k|    auto check_align = [](wchar_t ch) {
 7299|   149k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 149k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 149k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 149k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   149k|            default:
  ------------------
  |  Branch (7306:13): [True: 149k, False: 0]
  ------------------
 7307|   149k|                return align_type::none;
 7308|   149k|        }
 7309|   149k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7360|  74.7k|{
 7361|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|  74.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 41.7k, False: 33.0k]
  |  Branch (7363:33): [True: 0, False: 41.7k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|  74.7k|    return begin;
 7374|  74.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7893|  25.2k|    {
 7894|  25.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|  25.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 12.5k, False: 12.6k]
  ------------------
 7896|  25.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 0, False: 12.5k]
  ------------------
 7897|  25.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 0]
  ------------------
 7898|  25.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|  25.2k|        Handler::on_localized();
 7906|  25.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|   109k|{
 9362|   109k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   109k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   109k|{
 9251|   109k|#define SCN_VISIT(Type)                                                \
 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   109k|    }                                                                  \
 9255|   109k|    else {                                                             \
 9256|   109k|        return vis(monostate_val);                                     \
 9257|   109k|    }
 9258|       |
 9259|   109k|    monostate monostate_val{};
 9260|       |
 9261|   109k|    switch (get_arg_type(arg)) {
 9262|  18.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 18.2k, False: 91.4k]
  ------------------
 9263|  18.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  18.2k|    }                                                                  \
  |  | 9255|  18.2k|    else {                                                             \
  |  | 9256|  18.2k|        return vis(monostate_val);                                     \
  |  | 9257|  18.2k|    }
  ------------------
 9264|  18.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 109k]
  ------------------
 9265|  18.2k|            SCN_VISIT(short);
  ------------------
  |  | 9252|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  18.2k|    }                                                                  \
  |  | 9255|  18.2k|    else {                                                             \
  |  | 9256|  18.2k|        return vis(monostate_val);                                     \
  |  | 9257|  18.2k|    }
  ------------------
 9266|  36.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 18.3k, False: 91.4k]
  ------------------
 9267|  36.5k|            SCN_VISIT(int);
  ------------------
  |  | 9252|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  36.5k|    }                                                                  \
  |  | 9255|  36.5k|    else {                                                             \
  |  | 9256|  36.5k|        return vis(monostate_val);                                     \
  |  | 9257|  36.5k|    }
  ------------------
 9268|  36.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 109k]
  ------------------
 9269|  36.5k|            SCN_VISIT(long);
  ------------------
  |  | 9252|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  36.5k|    }                                                                  \
  |  | 9255|  36.5k|    else {                                                             \
  |  | 9256|  36.5k|        return vis(monostate_val);                                     \
  |  | 9257|  36.5k|    }
  ------------------
 9270|  54.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 18.4k, False: 91.3k]
  ------------------
 9271|  54.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9252|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.9k|    }                                                                  \
  |  | 9255|  54.9k|    else {                                                             \
  |  | 9256|  54.9k|        return vis(monostate_val);                                     \
  |  | 9257|  54.9k|    }
  ------------------
 9272|  54.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 109k]
  ------------------
 9273|  54.9k|#if SCN_HAS_INT128
 9274|  54.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9252|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  54.9k|    }                                                                  \
  |  | 9255|  54.9k|    else {                                                             \
  |  | 9256|  54.9k|        return vis(monostate_val);                                     \
  |  | 9257|  54.9k|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|  73.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 18.1k, False: 91.5k]
  ------------------
 9279|  73.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  73.1k|    }                                                                  \
  |  | 9255|  73.1k|    else {                                                             \
  |  | 9256|  73.1k|        return vis(monostate_val);                                     \
  |  | 9257|  73.1k|    }
  ------------------
 9280|  73.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 109k]
  ------------------
 9281|  73.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  73.1k|    }                                                                  \
  |  | 9255|  73.1k|    else {                                                             \
  |  | 9256|  73.1k|        return vis(monostate_val);                                     \
  |  | 9257|  73.1k|    }
  ------------------
 9282|  91.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 18.2k, False: 91.4k]
  ------------------
 9283|  91.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  91.4k|    }                                                                  \
  |  | 9255|  91.4k|    else {                                                             \
  |  | 9256|  91.4k|        return vis(monostate_val);                                     \
  |  | 9257|  91.4k|    }
  ------------------
 9284|  91.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 109k]
  ------------------
 9285|  91.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  91.4k|    }                                                                  \
  |  | 9255|  91.4k|    else {                                                             \
  |  | 9256|  91.4k|        return vis(monostate_val);                                     \
  |  | 9257|  91.4k|    }
  ------------------
 9286|   109k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 18.3k, False: 91.4k]
  ------------------
 9287|   109k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9288|   109k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 109k]
  ------------------
 9289|   109k|#if SCN_HAS_INT128
 9290|   109k|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|   109k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 109k]
  ------------------
 9295|   109k|            SCN_VISIT(void*);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9296|   109k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 109k]
  ------------------
 9297|   109k|            SCN_VISIT(bool);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9298|   109k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 109k]
  ------------------
 9299|   109k|            SCN_VISIT(char);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9300|   109k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 109k]
  ------------------
 9301|   109k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9302|   109k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 109k]
  ------------------
 9303|   109k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9304|   109k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 0, False: 109k]
  ------------------
 9305|   109k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9306|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 0, False: 109k]
  ------------------
 9307|   109k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9308|   109k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 0, False: 109k]
  ------------------
 9309|   109k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9310|   109k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 109k]
  ------------------
 9311|   109k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9312|   109k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 109k]
  ------------------
 9313|   109k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9314|   109k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 109k]
  ------------------
 9315|   109k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9316|   109k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 109k]
  ------------------
 9317|   109k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9318|   109k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 109k]
  ------------------
 9319|   109k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9320|   109k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 109k]
  ------------------
 9321|   109k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   109k|    }                                                                  \
  |  | 9255|   109k|    else {                                                             \
  |  | 9256|   109k|        return vis(monostate_val);                                     \
  |  | 9257|   109k|    }
  ------------------
 9322|       |
 9323|   109k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 109k]
  ------------------
 9324|   109k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   109k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   109k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 109k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 109k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   109k|            SCN_CLANG_POP
 9341|   109k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|   173k|    {
 4351|   173k|        return sync(0);
 4352|   173k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6147|  63.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6147|  16.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  88.1k|{
   44|  88.1k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.1k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  88.1k|{
   60|  88.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.1k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  88.1k|{
   44|  88.1k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.1k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  88.1k|{
   60|  88.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.1k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   594k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   594k|{
  309|   594k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   594k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   162k|{
  315|   162k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   162k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 81.4k, False: 81.4k]
  ------------------
  317|   162k|                    : std::locale{};
  318|   162k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|   117k|{
 1429|   117k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|   117k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|   117k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|   117k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|   117k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 5.09k, False: 112k]
  ------------------
 1435|  5.09k|        SCN_UNLIKELY_ATTR
 1436|  5.09k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  5.09k|                                             "Invalid integer value");
 1438|  5.09k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|   112k|    auto start = source.data();
 1442|   112k|    const auto end = source.data() + source.size();
 1443|   112k|    {
 1444|   302k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 284k, False: 18.4k]
  ------------------
 1445|   284k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 94.0k, False: 190k]
  ------------------
 1446|  94.0k|                break;
 1447|  94.0k|            }
 1448|   284k|        }
 1449|   112k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.5k, False: 81.9k]
  |  |  |  Branch (986:45): [True: 18.4k, False: 94.0k]
  |  |  |  Branch (986:45): [True: 12.1k, False: 81.9k]
  |  |  ------------------
  ------------------
 1450|  30.5k|            value = 0;
 1451|  30.5k|            return ranges::next(source.begin(),
 1452|  30.5k|                                ranges::distance(source.data(), start));
 1453|  30.5k|        }
 1454|   112k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  81.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  81.9k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 61.3k, False: 20.5k]
  ------------------
 1459|  61.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.44k, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.44k|    }                                                  \
  |  |  |  | 3938|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  57.9k|                             detail::make_string_view_from_pointers(start, end),
 1461|  57.9k|                             value, sign == sign_type::minus_sign));
 1462|  57.9k|            return ranges::next(source.begin(),
 1463|  57.9k|                                ranges::distance(source.data(), ptr));
 1464|  61.3k|        }
 1465|  81.9k|    }
 1466|       |
 1467|  80.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  81.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  81.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  81.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.94k, False: 80.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.94k|    }                                                  \
  |  |  |  | 3938|  81.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  80.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  80.0k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  80.0k|                     base, sign == sign_type::minus_sign));
 1470|  80.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  81.9k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.3k|{
 1429|  21.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.4k, False: 3.91k]
  ------------------
 1435|  17.4k|        SCN_UNLIKELY_ATTR
 1436|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.4k|                                             "Invalid integer value");
 1438|  17.4k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  3.91k|    auto start = source.data();
 1442|  3.91k|    const auto end = source.data() + source.size();
 1443|  3.91k|    {
 1444|  7.06k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 4.12k, False: 2.94k]
  ------------------
 1445|  4.12k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 976, False: 3.15k]
  ------------------
 1446|    976|                break;
 1447|    976|            }
 1448|  4.12k|        }
 1449|  3.91k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  4.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.06k, False: 856]
  |  |  |  Branch (986:45): [True: 2.94k, False: 976]
  |  |  |  Branch (986:45): [True: 120, False: 856]
  |  |  ------------------
  ------------------
 1450|  3.06k|            value = 0;
 1451|  3.06k|            return ranges::next(source.begin(),
 1452|  3.06k|                                ranges::distance(source.data(), start));
 1453|  3.06k|        }
 1454|  3.91k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    856|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    856|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    856|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    856|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 310, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    310|    }                                                  \
  |  |  |  | 3938|    856|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    546|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    546|                     base, sign == sign_type::minus_sign));
 1470|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    856|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|   139k|{
 1429|   139k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|   139k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|   139k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|   139k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|   139k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 5.71k, False: 133k]
  ------------------
 1435|  5.71k|        SCN_UNLIKELY_ATTR
 1436|  5.71k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  5.71k|                                             "Invalid integer value");
 1438|  5.71k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|   133k|    auto start = source.data();
 1442|   133k|    const auto end = source.data() + source.size();
 1443|   133k|    {
 1444|   337k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 317k, False: 20.4k]
  ------------------
 1445|   317k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 113k, False: 204k]
  ------------------
 1446|   113k|                break;
 1447|   113k|            }
 1448|   317k|        }
 1449|   133k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34.1k, False: 99.3k]
  |  |  |  Branch (986:45): [True: 20.4k, False: 113k]
  |  |  |  Branch (986:45): [True: 13.6k, False: 99.3k]
  |  |  ------------------
  ------------------
 1450|  34.1k|            value = 0;
 1451|  34.1k|            return ranges::next(source.begin(),
 1452|  34.1k|                                ranges::distance(source.data(), start));
 1453|  34.1k|        }
 1454|   133k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  99.3k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  99.3k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 71.4k, False: 27.9k]
  ------------------
 1459|  71.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  71.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  71.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  71.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.69k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|    }                                                  \
  |  |  |  | 3938|  71.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  69.7k|                             detail::make_string_view_from_pointers(start, end),
 1461|  69.7k|                             value, sign == sign_type::minus_sign));
 1462|  69.7k|            return ranges::next(source.begin(),
 1463|  69.7k|                                ranges::distance(source.data(), ptr));
 1464|  71.4k|        }
 1465|  99.3k|    }
 1466|       |
 1467|  98.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 898, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    898|    }                                                  \
  |  |  |  | 3938|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  98.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  98.4k|                     base, sign == sign_type::minus_sign));
 1470|  98.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  99.3k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.4k|{
 1429|  21.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.5k, False: 3.94k]
  ------------------
 1435|  17.5k|        SCN_UNLIKELY_ATTR
 1436|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.5k|                                             "Invalid integer value");
 1438|  17.5k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  3.94k|    auto start = source.data();
 1442|  3.94k|    const auto end = source.data() + source.size();
 1443|  3.94k|    {
 1444|  7.09k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 4.15k, False: 2.94k]
  ------------------
 1445|  4.15k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 1.00k, False: 3.15k]
  ------------------
 1446|  1.00k|                break;
 1447|  1.00k|            }
 1448|  4.15k|        }
 1449|  3.94k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.06k, False: 882]
  |  |  |  Branch (986:45): [True: 2.94k, False: 1.00k]
  |  |  |  Branch (986:45): [True: 120, False: 882]
  |  |  ------------------
  ------------------
 1450|  3.06k|            value = 0;
 1451|  3.06k|            return ranges::next(source.begin(),
 1452|  3.06k|                                ranges::distance(source.data(), start));
 1453|  3.06k|        }
 1454|  3.94k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    882|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 148, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    148|    }                                                  \
  |  |  |  | 3938|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    734|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    734|                     base, sign == sign_type::minus_sign));
 1470|    734|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    882|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|   141k|{
 1429|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 5.98k, False: 135k]
  ------------------
 1435|  5.98k|        SCN_UNLIKELY_ATTR
 1436|  5.98k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  5.98k|                                             "Invalid integer value");
 1438|  5.98k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|   135k|    auto start = source.data();
 1442|   135k|    const auto end = source.data() + source.size();
 1443|   135k|    {
 1444|   340k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 319k, False: 20.7k]
  ------------------
 1445|   319k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 114k, False: 204k]
  ------------------
 1446|   114k|                break;
 1447|   114k|            }
 1448|   319k|        }
 1449|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 34.4k, False: 100k]
  |  |  |  Branch (986:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (986:45): [True: 13.7k, False: 100k]
  |  |  ------------------
  ------------------
 1450|  34.4k|            value = 0;
 1451|  34.4k|            return ranges::next(source.begin(),
 1452|  34.4k|                                ranges::distance(source.data(), start));
 1453|  34.4k|        }
 1454|   135k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|   100k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|   100k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 72.4k, False: 28.2k]
  ------------------
 1459|  72.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 916, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    916|    }                                                  \
  |  |  |  | 3938|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  71.4k|                             detail::make_string_view_from_pointers(start, end),
 1461|  71.4k|                             value, sign == sign_type::minus_sign));
 1462|  71.4k|            return ranges::next(source.begin(),
 1463|  71.4k|                                ranges::distance(source.data(), ptr));
 1464|  72.4k|        }
 1465|   100k|    }
 1466|       |
 1467|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 462, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    462|    }                                                  \
  |  |  |  | 3938|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|   100k|                     base, sign == sign_type::minus_sign));
 1470|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.6k|{
 1429|  21.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.5k, False: 4.03k]
  ------------------
 1435|  17.5k|        SCN_UNLIKELY_ATTR
 1436|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.5k|                                             "Invalid integer value");
 1438|  17.5k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  4.03k|    auto start = source.data();
 1442|  4.03k|    const auto end = source.data() + source.size();
 1443|  4.03k|    {
 1444|  7.24k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 4.26k, False: 2.97k]
  ------------------
 1445|  4.26k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 1.06k, False: 3.20k]
  ------------------
 1446|  1.06k|                break;
 1447|  1.06k|            }
 1448|  4.26k|        }
 1449|  4.03k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.11k, False: 922]
  |  |  |  Branch (986:45): [True: 2.97k, False: 1.06k]
  |  |  |  Branch (986:45): [True: 141, False: 922]
  |  |  ------------------
  ------------------
 1450|  3.11k|            value = 0;
 1451|  3.11k|            return ranges::next(source.begin(),
 1452|  3.11k|                                ranges::distance(source.data(), start));
 1453|  3.11k|        }
 1454|  4.03k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    922|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    922|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    922|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    922|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 20, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|    }                                                  \
  |  |  |  | 3938|    922|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    902|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    902|                     base, sign == sign_type::minus_sign));
 1470|    902|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    922|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  96.2k|{
 1429|  96.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  96.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  96.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  96.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  96.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 3.53k, False: 92.7k]
  ------------------
 1435|  3.53k|        SCN_UNLIKELY_ATTR
 1436|  3.53k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  3.53k|                                             "Invalid integer value");
 1438|  3.53k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  92.7k|    auto start = source.data();
 1442|  92.7k|    const auto end = source.data() + source.size();
 1443|  92.7k|    {
 1444|   274k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 256k, False: 17.3k]
  ------------------
 1445|   256k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 75.3k, False: 181k]
  ------------------
 1446|  75.3k|                break;
 1447|  75.3k|            }
 1448|   256k|        }
 1449|  92.7k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 28.9k, False: 63.7k]
  |  |  |  Branch (986:45): [True: 17.3k, False: 75.3k]
  |  |  |  Branch (986:45): [True: 11.5k, False: 63.7k]
  |  |  ------------------
  ------------------
 1450|  28.9k|            value = 0;
 1451|  28.9k|            return ranges::next(source.begin(),
 1452|  28.9k|                                ranges::distance(source.data(), start));
 1453|  28.9k|        }
 1454|  92.7k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  63.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  63.7k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 46.3k, False: 17.4k]
  ------------------
 1459|  46.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.72k, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.72k|    }                                                  \
  |  |  |  | 3938|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  44.6k|                             detail::make_string_view_from_pointers(start, end),
 1461|  44.6k|                             value, sign == sign_type::minus_sign));
 1462|  44.6k|            return ranges::next(source.begin(),
 1463|  44.6k|                                ranges::distance(source.data(), ptr));
 1464|  46.3k|        }
 1465|  63.7k|    }
 1466|       |
 1467|  62.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.01k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|    }                                                  \
  |  |  |  | 3938|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  62.7k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  62.7k|                     base, sign == sign_type::minus_sign));
 1470|  62.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  63.7k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.0k|{
 1429|  21.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.3k, False: 3.71k]
  ------------------
 1435|  17.3k|        SCN_UNLIKELY_ATTR
 1436|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.3k|                                             "Invalid integer value");
 1438|  17.3k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  3.71k|    auto start = source.data();
 1442|  3.71k|    const auto end = source.data() + source.size();
 1443|  3.71k|    {
 1444|  6.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 3.91k, False: 2.93k]
  ------------------
 1445|  3.91k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 781, False: 3.13k]
  ------------------
 1446|    781|                break;
 1447|    781|            }
 1448|  3.91k|        }
 1449|  3.71k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.04k, False: 668]
  |  |  |  Branch (986:45): [True: 2.93k, False: 781]
  |  |  |  Branch (986:45): [True: 113, False: 668]
  |  |  ------------------
  ------------------
 1450|  3.04k|            value = 0;
 1451|  3.04k|            return ranges::next(source.begin(),
 1452|  3.04k|                                ranges::distance(source.data(), start));
 1453|  3.04k|        }
 1454|  3.71k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    668|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 250, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|    }                                                  \
  |  |  |  | 3938|    668|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    418|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    418|                     base, sign == sign_type::minus_sign));
 1470|    418|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    668|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|   105k|{
 1429|   105k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|   105k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|   105k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|   105k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|   105k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 3.77k, False: 101k]
  ------------------
 1435|  3.77k|        SCN_UNLIKELY_ATTR
 1436|  3.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  3.77k|                                             "Invalid integer value");
 1438|  3.77k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|   101k|    auto start = source.data();
 1442|   101k|    const auto end = source.data() + source.size();
 1443|   101k|    {
 1444|   289k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 270k, False: 18.5k]
  ------------------
 1445|   270k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 83.4k, False: 187k]
  ------------------
 1446|  83.4k|                break;
 1447|  83.4k|            }
 1448|   270k|        }
 1449|   101k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.9k, False: 70.9k]
  |  |  |  Branch (986:45): [True: 18.5k, False: 83.4k]
  |  |  |  Branch (986:45): [True: 12.4k, False: 70.9k]
  |  |  ------------------
  ------------------
 1450|  30.9k|            value = 0;
 1451|  30.9k|            return ranges::next(source.begin(),
 1452|  30.9k|                                ranges::distance(source.data(), start));
 1453|  30.9k|        }
 1454|   101k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  70.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  70.9k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 51.5k, False: 19.4k]
  ------------------
 1459|  51.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 906, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|    }                                                  \
  |  |  |  | 3938|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  50.6k|                             detail::make_string_view_from_pointers(start, end),
 1461|  50.6k|                             value, sign == sign_type::minus_sign));
 1462|  50.6k|            return ranges::next(source.begin(),
 1463|  50.6k|                                ranges::distance(source.data(), ptr));
 1464|  51.5k|        }
 1465|  70.9k|    }
 1466|       |
 1467|  70.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 478, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    478|    }                                                  \
  |  |  |  | 3938|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  70.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  70.4k|                     base, sign == sign_type::minus_sign));
 1470|  70.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  70.9k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.1k|{
 1429|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.3k, False: 3.73k]
  ------------------
 1435|  17.3k|        SCN_UNLIKELY_ATTR
 1436|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.3k|                                             "Invalid integer value");
 1438|  17.3k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  3.73k|    auto start = source.data();
 1442|  3.73k|    const auto end = source.data() + source.size();
 1443|  3.73k|    {
 1444|  6.86k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 3.93k, False: 2.93k]
  ------------------
 1445|  3.93k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 803, False: 3.13k]
  ------------------
 1446|    803|                break;
 1447|    803|            }
 1448|  3.93k|        }
 1449|  3.73k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.04k, False: 690]
  |  |  |  Branch (986:45): [True: 2.93k, False: 803]
  |  |  |  Branch (986:45): [True: 113, False: 690]
  |  |  ------------------
  ------------------
 1450|  3.04k|            value = 0;
 1451|  3.04k|            return ranges::next(source.begin(),
 1452|  3.04k|                                ranges::distance(source.data(), start));
 1453|  3.04k|        }
 1454|  3.73k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    690|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 144, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|    }                                                  \
  |  |  |  | 3938|    690|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    546|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    546|                     base, sign == sign_type::minus_sign));
 1470|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    690|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|   106k|{
 1429|   106k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|   106k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|   106k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|   106k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|   106k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 3.84k, False: 102k]
  ------------------
 1435|  3.84k|        SCN_UNLIKELY_ATTR
 1436|  3.84k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  3.84k|                                             "Invalid integer value");
 1438|  3.84k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|   102k|    auto start = source.data();
 1442|   102k|    const auto end = source.data() + source.size();
 1443|   102k|    {
 1444|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 271k, False: 18.5k]
  ------------------
 1445|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 84.2k, False: 187k]
  ------------------
 1446|  84.2k|                break;
 1447|  84.2k|            }
 1448|   271k|        }
 1449|   102k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 31.0k, False: 71.7k]
  |  |  |  Branch (986:45): [True: 18.5k, False: 84.2k]
  |  |  |  Branch (986:45): [True: 12.4k, False: 71.7k]
  |  |  ------------------
  ------------------
 1450|  31.0k|            value = 0;
 1451|  31.0k|            return ranges::next(source.begin(),
 1452|  31.0k|                                ranges::distance(source.data(), start));
 1453|  31.0k|        }
 1454|   102k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  71.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  71.7k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 52.1k, False: 19.6k]
  ------------------
 1459|  52.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 456, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    456|    }                                                  \
  |  |  |  | 3938|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  51.6k|                             detail::make_string_view_from_pointers(start, end),
 1461|  51.6k|                             value, sign == sign_type::minus_sign));
 1462|  51.6k|            return ranges::next(source.begin(),
 1463|  51.6k|                                ranges::distance(source.data(), ptr));
 1464|  52.1k|        }
 1465|  71.7k|    }
 1466|       |
 1467|  71.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  71.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  71.4k|                     base, sign == sign_type::minus_sign));
 1470|  71.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  71.7k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  21.1k|{
 1429|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 17.4k, False: 3.77k]
  ------------------
 1435|  17.4k|        SCN_UNLIKELY_ATTR
 1436|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|  17.4k|                                             "Invalid integer value");
 1438|  17.4k|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  3.77k|    auto start = source.data();
 1442|  3.77k|    const auto end = source.data() + source.size();
 1443|  3.77k|    {
 1444|  6.91k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 3.97k, False: 2.93k]
  ------------------
 1445|  3.97k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 847, False: 3.13k]
  ------------------
 1446|    847|                break;
 1447|    847|            }
 1448|  3.97k|        }
 1449|  3.77k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.04k, False: 734]
  |  |  |  Branch (986:45): [True: 2.93k, False: 847]
  |  |  |  Branch (986:45): [True: 113, False: 734]
  |  |  ------------------
  ------------------
 1450|  3.04k|            value = 0;
 1451|  3.04k|            return ranges::next(source.begin(),
 1452|  3.04k|                                ranges::distance(source.data(), start));
 1453|  3.04k|        }
 1454|  3.77k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|       |        if (base == 10) {
 1459|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1460|       |                             detail::make_string_view_from_pointers(start, end),
 1461|       |                             value, sign == sign_type::minus_sign));
 1462|       |            return ranges::next(source.begin(),
 1463|       |                                ranges::distance(source.data(), ptr));
 1464|       |        }
 1465|       |    }
 1466|       |
 1467|    734|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|    734|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    734|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    734|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 8, False: 726]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|    }                                                  \
  |  |  |  | 3938|    734|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    726|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|    726|                     detail::make_string_view_from_pointers(start, end), value,
 1469|    726|                     base, sign == sign_type::minus_sign));
 1470|    726|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|    734|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|   209k|{
 2180|   209k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2187|   209k|{
 2188|   209k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2189|   209k|    return sync_after_vscan(source, n);
 2190|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|  88.1k|{
 2198|  88.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|  88.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2205|  88.1k|{
 2206|  88.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2207|  88.1k|    return sync_after_vscan(source, n);
 2208|  88.1k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   846k|{
  215|   846k|    return find_classic_impl(
  216|   846k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   846k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   846k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|   209k|{
 2149|   209k|    return vscan_internal(source, format, args);
 2150|   209k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2154|   209k|{
 2155|   209k|    auto n = vscan_internal(source, format, args);
 2156|   209k|    return sync_after_vscan(source, n);
 2157|   209k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|  88.1k|{
 2163|  88.1k|    return vscan_internal(source, format, args);
 2164|  88.1k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2168|  88.1k|{
 2169|  88.1k|    auto n = vscan_internal(source, format, args);
 2170|  88.1k|    return sync_after_vscan(source, n);
 2171|  88.1k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2234|  31.8k|{
 2235|  31.8k|    return vscan_value_internal(source, arg);
 2236|  31.8k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2239|  31.3k|{
 2240|  31.3k|    auto n = vscan_value_internal(source, arg);
 2241|  31.3k|    return sync_after_vscan(source, n);
 2242|  31.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2247|  8.48k|{
 2248|  8.48k|    return vscan_value_internal(source, arg);
 2249|  8.48k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2253|  8.48k|{
 2254|  8.48k|    auto n = vscan_value_internal(source, arg);
 2255|  8.48k|    return sync_after_vscan(source, n);
 2256|  8.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1257|  82.8k|{
 1258|  82.8k|    auto max_digits = maxdigits_u64(base);
 1259|  82.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 954, False: 81.8k]
  ------------------
 1260|    954|        return true;
 1261|    954|    }
 1262|  81.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 318, False: 81.5k]
  |  Branch (1262:39): [True: 106, False: 212]
  ------------------
 1263|    106|        return true;
 1264|    106|    }
 1265|  81.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|  81.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 4.63k, False: 77.1k]
  ------------------
 1267|  81.7k|                      static_cast<uint64_t>(is_negative)) {
 1268|  4.63k|            SCN_UNLIKELY_ATTR
 1269|  4.63k|            return true;
 1270|  4.63k|        }
 1271|  81.7k|    }
 1272|       |
 1273|  77.1k|    return false;
 1274|  81.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1203|   493k|{
 1204|   493k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1051|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1205|   493k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1206|   493k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1247|  1.79k|{
 1248|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1051|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1249|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1250|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIamEET_T0_b:
 1278|  77.1k|{
 1279|  77.1k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 15.0k, False: 62.0k]
  ------------------
 1280|  15.0k|        SCN_MSVC_PUSH
 1281|  15.0k|        SCN_MSVC_IGNORE(4146)
 1282|  15.0k|        return static_cast<T>(
 1283|  15.0k|            -std::numeric_limits<T>::max() -
 1284|  15.0k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|  15.0k|        SCN_MSVC_POP
 1286|  15.0k|    }
 1287|       |
 1288|  62.0k|    return static_cast<T>(acc);
 1289|  77.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1257|   100k|{
 1258|   100k|    auto max_digits = maxdigits_u64(base);
 1259|   100k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 1.02k, False: 99.2k]
  ------------------
 1260|  1.02k|        return true;
 1261|  1.02k|    }
 1262|  99.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 326, False: 98.8k]
  |  Branch (1262:39): [True: 106, False: 220]
  ------------------
 1263|    106|        return true;
 1264|    106|    }
 1265|  99.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|  99.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 1.61k, False: 97.4k]
  ------------------
 1267|  99.1k|                      static_cast<uint64_t>(is_negative)) {
 1268|  1.61k|            SCN_UNLIKELY_ATTR
 1269|  1.61k|            return true;
 1270|  1.61k|        }
 1271|  99.1k|    }
 1272|       |
 1273|  97.4k|    return false;
 1274|  99.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIimEET_T0_b:
 1278|  97.4k|{
 1279|  97.4k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 16.3k, False: 81.1k]
  ------------------
 1280|  16.3k|        SCN_MSVC_PUSH
 1281|  16.3k|        SCN_MSVC_IGNORE(4146)
 1282|  16.3k|        return static_cast<T>(
 1283|  16.3k|            -std::numeric_limits<T>::max() -
 1284|  16.3k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|  16.3k|        SCN_MSVC_POP
 1286|  16.3k|    }
 1287|       |
 1288|  81.1k|    return static_cast<T>(acc);
 1289|  97.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1257|   101k|{
 1258|   101k|    auto max_digits = maxdigits_u64(base);
 1259|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 1.10k, False: 100k]
  ------------------
 1260|  1.10k|        return true;
 1261|  1.10k|    }
 1262|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 362, False: 100k]
  |  Branch (1262:39): [True: 106, False: 256]
  ------------------
 1263|    106|        return true;
 1264|    106|    }
 1265|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 184, False: 100k]
  ------------------
 1267|   100k|                      static_cast<uint64_t>(is_negative)) {
 1268|    184|            SCN_UNLIKELY_ATTR
 1269|    184|            return true;
 1270|    184|        }
 1271|   100k|    }
 1272|       |
 1273|   100k|    return false;
 1274|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxmEET_T0_b:
 1278|   100k|{
 1279|   100k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 17.1k, False: 83.0k]
  ------------------
 1280|  17.1k|        SCN_MSVC_PUSH
 1281|  17.1k|        SCN_MSVC_IGNORE(4146)
 1282|  17.1k|        return static_cast<T>(
 1283|  17.1k|            -std::numeric_limits<T>::max() -
 1284|  17.1k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|  17.1k|        SCN_MSVC_POP
 1286|  17.1k|    }
 1287|       |
 1288|  83.0k|    return static_cast<T>(acc);
 1289|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1257|  64.4k|{
 1258|  64.4k|    auto max_digits = maxdigits_u64(base);
 1259|  64.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 650, False: 63.8k]
  ------------------
 1260|    650|        return true;
 1261|    650|    }
 1262|  63.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 224, False: 63.5k]
  |  Branch (1262:39): [True: 58, False: 166]
  ------------------
 1263|     58|        return true;
 1264|     58|    }
 1265|  63.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|  63.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 2.28k, False: 61.4k]
  ------------------
 1267|  63.7k|                      static_cast<uint64_t>(is_negative)) {
 1268|  2.28k|            SCN_UNLIKELY_ATTR
 1269|  2.28k|            return true;
 1270|  2.28k|        }
 1271|  63.7k|    }
 1272|       |
 1273|  61.4k|    return false;
 1274|  63.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhmEET_T0_b:
 1278|  61.4k|{
 1279|  61.4k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 0, False: 61.4k]
  ------------------
 1280|      0|        SCN_MSVC_PUSH
 1281|      0|        SCN_MSVC_IGNORE(4146)
 1282|      0|        return static_cast<T>(
 1283|      0|            -std::numeric_limits<T>::max() -
 1284|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|      0|        SCN_MSVC_POP
 1286|      0|    }
 1287|       |
 1288|  61.4k|    return static_cast<T>(acc);
 1289|  61.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1257|  71.6k|{
 1258|  71.6k|    auto max_digits = maxdigits_u64(base);
 1259|  71.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 650, False: 71.0k]
  ------------------
 1260|    650|        return true;
 1261|    650|    }
 1262|  71.0k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 228, False: 70.7k]
  |  Branch (1262:39): [True: 58, False: 170]
  ------------------
 1263|     58|        return true;
 1264|     58|    }
 1265|  70.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|  70.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 820, False: 70.1k]
  ------------------
 1267|  70.9k|                      static_cast<uint64_t>(is_negative)) {
 1268|    820|            SCN_UNLIKELY_ATTR
 1269|    820|            return true;
 1270|    820|        }
 1271|  70.9k|    }
 1272|       |
 1273|  70.1k|    return false;
 1274|  71.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjmEET_T0_b:
 1278|  70.1k|{
 1279|  70.1k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 0, False: 70.1k]
  ------------------
 1280|      0|        SCN_MSVC_PUSH
 1281|      0|        SCN_MSVC_IGNORE(4146)
 1282|      0|        return static_cast<T>(
 1283|      0|            -std::numeric_limits<T>::max() -
 1284|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|      0|        SCN_MSVC_POP
 1286|      0|    }
 1287|       |
 1288|  70.1k|    return static_cast<T>(acc);
 1289|  70.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1257|  72.4k|{
 1258|  72.4k|    auto max_digits = maxdigits_u64(base);
 1259|  72.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 664, False: 71.8k]
  ------------------
 1260|    664|        return true;
 1261|    664|    }
 1262|  71.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 336, False: 71.4k]
  |  Branch (1262:39): [True: 58, False: 278]
  ------------------
 1263|     58|        return true;
 1264|     58|    }
 1265|  71.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|  71.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1266:13): [True: 0, False: 71.7k]
  ------------------
 1267|  71.7k|                      static_cast<uint64_t>(is_negative)) {
 1268|      0|            SCN_UNLIKELY_ATTR
 1269|      0|            return true;
 1270|      0|        }
 1271|  71.7k|    }
 1272|       |
 1273|  71.7k|    return false;
 1274|  71.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIymEET_T0_b:
 1278|  71.7k|{
 1279|  71.7k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 0, False: 71.7k]
  ------------------
 1280|      0|        SCN_MSVC_PUSH
 1281|      0|        SCN_MSVC_IGNORE(4146)
 1282|      0|        return static_cast<T>(
 1283|      0|            -std::numeric_limits<T>::max() -
 1284|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|      0|        SCN_MSVC_POP
 1286|      0|    }
 1287|       |
 1288|  71.7k|    return static_cast<T>(acc);
 1289|  71.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1141|   187k|{
 1142|   187k|    uint64_t val{};
 1143|   187k|    std::memcpy(&val, input, sizeof(uint64_t));
 1144|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1145|       |        val = byteswap(val);
 1146|       |    }
 1147|   187k|    return val;
 1148|   187k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1151|  33.7k|{
 1152|  33.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1153|  33.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1154|  33.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1155|  33.7k|    word -= 0x3030303030303030;
 1156|  33.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1157|  33.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1158|  33.7k|    return static_cast<uint32_t>(word);
 1159|  33.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1162|   153k|{
 1163|   153k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1164|   153k|              0x8080808080808080));
 1165|   153k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   516k|{
  118|   516k|    static_assert(sizeof(*source.data()) == 1);
  119|   516k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   516k|    uint64_t word{};
  121|   516k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   516k|    return has_byte_greater(word, 127) != 0;
  124|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   846k|{
  131|   846k|    auto it = source.begin();
  132|       |
  133|   925k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 516k, False: 408k]
  ------------------
  134|   516k|        auto sv =
  135|   516k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   516k|                .substr(0, 8);
  137|       |
  138|   516k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 492k, False: 24.1k]
  ------------------
  139|   492k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   492k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   492k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 415k, False: 76.8k]
  ------------------
  142|   415k|                break;
  143|   415k|            }
  144|  76.8k|            continue;
  145|   492k|        }
  146|       |
  147|  33.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 31.3k, False: 2.05k]
  ------------------
  148|  31.3k|            auto tmp =
  149|  31.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  31.3k|            auto res = get_next_code_point(tmp);
  151|  31.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.0k, False: 9.25k]
  ------------------
  152|  22.0k|                return it;
  153|  22.0k|            }
  154|  9.25k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.25k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.25k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  9.25k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.25k|        }
  158|  24.1k|    }
  159|       |
  160|   824k|    return detail::make_string_view_iterator(source, it);
  161|   846k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   860k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  31.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  61.3k|{
 1296|  61.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  61.3k|    uint64_t u64val{};
 1299|  61.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  61.3k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  61.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  61.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.44k, False: 57.9k]
  |  |  ------------------
  ------------------
 1304|  61.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|  3.44k|        return detail::unexpected_scan_error(
 1306|  3.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 1.07k, False: 2.37k]
  ------------------
 1307|  3.44k|                        : scan_error::value_positive_overflow,
 1308|  3.44k|            "Integer overflow");
 1309|  3.44k|    }
 1310|       |
 1311|  57.9k|    val = store_result<T>(u64val, is_negative);
 1312|  57.9k|    return ptr;
 1313|  61.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1183|   355k|{
 1184|   355k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1185|       |
 1186|   799k|    while (begin != end) {
  ------------------
  |  Branch (1186:12): [True: 578k, False: 220k]
  ------------------
 1187|   578k|        const auto digit = char_to_int(*begin);
 1188|   578k|        if (digit >= 10) {
  ------------------
  |  Branch (1188:13): [True: 134k, False: 443k]
  ------------------
 1189|   134k|            break;
 1190|   134k|        }
 1191|   443k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1192|   443k|        ++begin;
 1193|   443k|    }
 1194|       |
 1195|   355k|    return begin;
 1196|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1170|   355k|{
 1171|   355k|    while (
 1172|   388k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1172:9): [True: 153k, False: 235k]
  ------------------
 1173|   388k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1173:9): [True: 33.7k, False: 120k]
  ------------------
 1174|  33.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1175|  33.7k|                                      get_eight_digits_word(p));
 1176|  33.7k|        p += 8;
 1177|  33.7k|    }
 1178|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  20.5k|{
 1321|  20.5k|    uint64_t u64val{};
 1322|  20.5k|    const CharT* begin = input.data();
 1323|  20.5k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  72.9k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 62.2k, False: 10.7k]
  ------------------
 1326|  62.2k|        const auto digit = char_to_int(*begin);
 1327|  62.2k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 9.84k, False: 52.3k]
  ------------------
 1328|  9.84k|            break;
 1329|  9.84k|        }
 1330|  52.3k|        u64val =
 1331|  52.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  52.3k|        ++begin;
 1333|  52.3k|    }
 1334|       |
 1335|  20.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  20.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.94k, False: 18.6k]
  |  |  ------------------
  ------------------
 1337|  20.5k|                                               is_negative))) {
 1338|  1.94k|        return detail::unexpected_scan_error(
 1339|  1.94k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 608, False: 1.33k]
  ------------------
 1340|  1.94k|                        : scan_error::value_positive_overflow,
 1341|  1.94k|            "Integer overflow");
 1342|  1.94k|    }
 1343|       |
 1344|  18.6k|    val = store_result<T>(u64val, is_negative);
 1345|  18.6k|    return begin;
 1346|  20.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    856|{
 1321|    856|    uint64_t u64val{};
 1322|    856|    const CharT* begin = input.data();
 1323|    856|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.49k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.90k, False: 590]
  ------------------
 1326|  3.90k|        const auto digit = char_to_int(*begin);
 1327|  3.90k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 266, False: 3.64k]
  ------------------
 1328|    266|            break;
 1329|    266|        }
 1330|  3.64k|        u64val =
 1331|  3.64k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.64k|        ++begin;
 1333|  3.64k|    }
 1334|       |
 1335|    856|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    856|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 310, False: 546]
  |  |  ------------------
  ------------------
 1337|    856|                                               is_negative))) {
 1338|    310|        return detail::unexpected_scan_error(
 1339|    310|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 34, False: 276]
  ------------------
 1340|    310|                        : scan_error::value_positive_overflow,
 1341|    310|            "Integer overflow");
 1342|    310|    }
 1343|       |
 1344|    546|    val = store_result<T>(u64val, is_negative);
 1345|    546|    return begin;
 1346|    856|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  71.4k|{
 1296|  71.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  71.4k|    uint64_t u64val{};
 1299|  71.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  71.4k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  71.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  71.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.69k, False: 69.7k]
  |  |  ------------------
  ------------------
 1304|  71.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|  1.69k|        return detail::unexpected_scan_error(
 1306|  1.69k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 624, False: 1.07k]
  ------------------
 1307|  1.69k|                        : scan_error::value_positive_overflow,
 1308|  1.69k|            "Integer overflow");
 1309|  1.69k|    }
 1310|       |
 1311|  69.7k|    val = store_result<T>(u64val, is_negative);
 1312|  69.7k|    return ptr;
 1313|  71.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  27.9k|{
 1321|  27.9k|    uint64_t u64val{};
 1322|  27.9k|    const CharT* begin = input.data();
 1323|  27.9k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  91.6k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 77.1k, False: 14.4k]
  ------------------
 1326|  77.1k|        const auto digit = char_to_int(*begin);
 1327|  77.1k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 13.4k, False: 63.6k]
  ------------------
 1328|  13.4k|            break;
 1329|  13.4k|        }
 1330|  63.6k|        u64val =
 1331|  63.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  63.6k|        ++begin;
 1333|  63.6k|    }
 1334|       |
 1335|  27.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  27.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  27.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 898, False: 27.0k]
  |  |  ------------------
  ------------------
 1337|  27.9k|                                               is_negative))) {
 1338|    898|        return detail::unexpected_scan_error(
 1339|    898|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 336, False: 562]
  ------------------
 1340|    898|                        : scan_error::value_positive_overflow,
 1341|    898|            "Integer overflow");
 1342|    898|    }
 1343|       |
 1344|  27.0k|    val = store_result<T>(u64val, is_negative);
 1345|  27.0k|    return begin;
 1346|  27.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    882|{
 1321|    882|    uint64_t u64val{};
 1322|    882|    const CharT* begin = input.data();
 1323|    882|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.54k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.94k, False: 605]
  ------------------
 1326|  3.94k|        const auto digit = char_to_int(*begin);
 1327|  3.94k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 277, False: 3.66k]
  ------------------
 1328|    277|            break;
 1329|    277|        }
 1330|  3.66k|        u64val =
 1331|  3.66k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.66k|        ++begin;
 1333|  3.66k|    }
 1334|       |
 1335|    882|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    882|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 148, False: 734]
  |  |  ------------------
  ------------------
 1337|    882|                                               is_negative))) {
 1338|    148|        return detail::unexpected_scan_error(
 1339|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 148]
  ------------------
 1340|    148|                        : scan_error::value_positive_overflow,
 1341|    148|            "Integer overflow");
 1342|    148|    }
 1343|       |
 1344|    734|    val = store_result<T>(u64val, is_negative);
 1345|    734|    return begin;
 1346|    882|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  72.4k|{
 1296|  72.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  72.4k|    uint64_t u64val{};
 1299|  72.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  72.4k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  72.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  72.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 916, False: 71.4k]
  |  |  ------------------
  ------------------
 1304|  72.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|    916|        return detail::unexpected_scan_error(
 1306|    916|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 284, False: 632]
  ------------------
 1307|    916|                        : scan_error::value_positive_overflow,
 1308|    916|            "Integer overflow");
 1309|    916|    }
 1310|       |
 1311|  71.4k|    val = store_result<T>(u64val, is_negative);
 1312|  71.4k|    return ptr;
 1313|  72.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  28.2k|{
 1321|  28.2k|    uint64_t u64val{};
 1322|  28.2k|    const CharT* begin = input.data();
 1323|  28.2k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  94.2k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 79.6k, False: 14.6k]
  ------------------
 1326|  79.6k|        const auto digit = char_to_int(*begin);
 1327|  79.6k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 13.6k, False: 65.9k]
  ------------------
 1328|  13.6k|            break;
 1329|  13.6k|        }
 1330|  65.9k|        u64val =
 1331|  65.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  65.9k|        ++begin;
 1333|  65.9k|    }
 1334|       |
 1335|  28.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  28.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 462, False: 27.8k]
  |  |  ------------------
  ------------------
 1337|  28.2k|                                               is_negative))) {
 1338|    462|        return detail::unexpected_scan_error(
 1339|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 96, False: 366]
  ------------------
 1340|    462|                        : scan_error::value_positive_overflow,
 1341|    462|            "Integer overflow");
 1342|    462|    }
 1343|       |
 1344|  27.8k|    val = store_result<T>(u64val, is_negative);
 1345|  27.8k|    return begin;
 1346|  28.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    922|{
 1321|    922|    uint64_t u64val{};
 1322|    922|    const CharT* begin = input.data();
 1323|    922|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.62k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.99k, False: 629]
  ------------------
 1326|  3.99k|        const auto digit = char_to_int(*begin);
 1327|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 293, False: 3.70k]
  ------------------
 1328|    293|            break;
 1329|    293|        }
 1330|  3.70k|        u64val =
 1331|  3.70k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.70k|        ++begin;
 1333|  3.70k|    }
 1334|       |
 1335|    922|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    922|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 20, False: 902]
  |  |  ------------------
  ------------------
 1337|    922|                                               is_negative))) {
 1338|     20|        return detail::unexpected_scan_error(
 1339|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 20]
  ------------------
 1340|     20|                        : scan_error::value_positive_overflow,
 1341|     20|            "Integer overflow");
 1342|     20|    }
 1343|       |
 1344|    902|    val = store_result<T>(u64val, is_negative);
 1345|    902|    return begin;
 1346|    922|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  46.3k|{
 1296|  46.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  46.3k|    uint64_t u64val{};
 1299|  46.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  46.3k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  46.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  46.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.72k, False: 44.6k]
  |  |  ------------------
  ------------------
 1304|  46.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|  1.72k|        return detail::unexpected_scan_error(
 1306|  1.72k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 0, False: 1.72k]
  ------------------
 1307|  1.72k|                        : scan_error::value_positive_overflow,
 1308|  1.72k|            "Integer overflow");
 1309|  1.72k|    }
 1310|       |
 1311|  44.6k|    val = store_result<T>(u64val, is_negative);
 1312|  44.6k|    return ptr;
 1313|  46.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  17.4k|{
 1321|  17.4k|    uint64_t u64val{};
 1322|  17.4k|    const CharT* begin = input.data();
 1323|  17.4k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  56.1k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 47.1k, False: 9.06k]
  ------------------
 1326|  47.1k|        const auto digit = char_to_int(*begin);
 1327|  47.1k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 8.38k, False: 38.7k]
  ------------------
 1328|  8.38k|            break;
 1329|  8.38k|        }
 1330|  38.7k|        u64val =
 1331|  38.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  38.7k|        ++begin;
 1333|  38.7k|    }
 1334|       |
 1335|  17.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  17.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.01k, False: 16.4k]
  |  |  ------------------
  ------------------
 1337|  17.4k|                                               is_negative))) {
 1338|  1.01k|        return detail::unexpected_scan_error(
 1339|  1.01k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 1.01k]
  ------------------
 1340|  1.01k|                        : scan_error::value_positive_overflow,
 1341|  1.01k|            "Integer overflow");
 1342|  1.01k|    }
 1343|       |
 1344|  16.4k|    val = store_result<T>(u64val, is_negative);
 1345|  16.4k|    return begin;
 1346|  17.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    668|{
 1321|    668|    uint64_t u64val{};
 1322|    668|    const CharT* begin = input.data();
 1323|    668|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.00k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.56k, False: 438]
  ------------------
 1326|  3.56k|        const auto digit = char_to_int(*begin);
 1327|  3.56k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 230, False: 3.33k]
  ------------------
 1328|    230|            break;
 1329|    230|        }
 1330|  3.33k|        u64val =
 1331|  3.33k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.33k|        ++begin;
 1333|  3.33k|    }
 1334|       |
 1335|    668|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    668|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 250, False: 418]
  |  |  ------------------
  ------------------
 1337|    668|                                               is_negative))) {
 1338|    250|        return detail::unexpected_scan_error(
 1339|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 250]
  ------------------
 1340|    250|                        : scan_error::value_positive_overflow,
 1341|    250|            "Integer overflow");
 1342|    250|    }
 1343|       |
 1344|    418|    val = store_result<T>(u64val, is_negative);
 1345|    418|    return begin;
 1346|    668|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  51.5k|{
 1296|  51.5k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  51.5k|    uint64_t u64val{};
 1299|  51.5k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  51.5k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  51.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  51.5k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 906, False: 50.6k]
  |  |  ------------------
  ------------------
 1304|  51.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|    906|        return detail::unexpected_scan_error(
 1306|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 0, False: 906]
  ------------------
 1307|    906|                        : scan_error::value_positive_overflow,
 1308|    906|            "Integer overflow");
 1309|    906|    }
 1310|       |
 1311|  50.6k|    val = store_result<T>(u64val, is_negative);
 1312|  50.6k|    return ptr;
 1313|  51.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  19.4k|{
 1321|  19.4k|    uint64_t u64val{};
 1322|  19.4k|    const CharT* begin = input.data();
 1323|  19.4k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  61.4k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 51.3k, False: 10.0k]
  ------------------
 1326|  51.3k|        const auto digit = char_to_int(*begin);
 1327|  51.3k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 9.35k, False: 41.9k]
  ------------------
 1328|  9.35k|            break;
 1329|  9.35k|        }
 1330|  41.9k|        u64val =
 1331|  41.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  41.9k|        ++begin;
 1333|  41.9k|    }
 1334|       |
 1335|  19.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  19.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 478, False: 18.9k]
  |  |  ------------------
  ------------------
 1337|  19.4k|                                               is_negative))) {
 1338|    478|        return detail::unexpected_scan_error(
 1339|    478|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 478]
  ------------------
 1340|    478|                        : scan_error::value_positive_overflow,
 1341|    478|            "Integer overflow");
 1342|    478|    }
 1343|       |
 1344|  18.9k|    val = store_result<T>(u64val, is_negative);
 1345|  18.9k|    return begin;
 1346|  19.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    690|{
 1321|    690|    uint64_t u64val{};
 1322|    690|    const CharT* begin = input.data();
 1323|    690|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.04k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.59k, False: 451]
  ------------------
 1326|  3.59k|        const auto digit = char_to_int(*begin);
 1327|  3.59k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 239, False: 3.35k]
  ------------------
 1328|    239|            break;
 1329|    239|        }
 1330|  3.35k|        u64val =
 1331|  3.35k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.35k|        ++begin;
 1333|  3.35k|    }
 1334|       |
 1335|    690|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    690|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 144, False: 546]
  |  |  ------------------
  ------------------
 1337|    690|                                               is_negative))) {
 1338|    144|        return detail::unexpected_scan_error(
 1339|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 144]
  ------------------
 1340|    144|                        : scan_error::value_positive_overflow,
 1341|    144|            "Integer overflow");
 1342|    144|    }
 1343|       |
 1344|    546|    val = store_result<T>(u64val, is_negative);
 1345|    546|    return begin;
 1346|    690|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  52.1k|{
 1296|  52.1k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  52.1k|    uint64_t u64val{};
 1299|  52.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  52.1k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  52.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  52.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 456, False: 51.6k]
  |  |  ------------------
  ------------------
 1304|  52.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|    456|        return detail::unexpected_scan_error(
 1306|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 0, False: 456]
  ------------------
 1307|    456|                        : scan_error::value_positive_overflow,
 1308|    456|            "Integer overflow");
 1309|    456|    }
 1310|       |
 1311|  51.6k|    val = store_result<T>(u64val, is_negative);
 1312|  51.6k|    return ptr;
 1313|  52.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|  19.6k|{
 1321|  19.6k|    uint64_t u64val{};
 1322|  19.6k|    const CharT* begin = input.data();
 1323|  19.6k|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  62.8k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 52.6k, False: 10.1k]
  ------------------
 1326|  52.6k|        const auto digit = char_to_int(*begin);
 1327|  52.6k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 9.43k, False: 43.2k]
  ------------------
 1328|  9.43k|            break;
 1329|  9.43k|        }
 1330|  43.2k|        u64val =
 1331|  43.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  43.2k|        ++begin;
 1333|  43.2k|    }
 1334|       |
 1335|  19.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|  19.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 258, False: 19.3k]
  |  |  ------------------
  ------------------
 1337|  19.6k|                                               is_negative))) {
 1338|    258|        return detail::unexpected_scan_error(
 1339|    258|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 258]
  ------------------
 1340|    258|                        : scan_error::value_positive_overflow,
 1341|    258|            "Integer overflow");
 1342|    258|    }
 1343|       |
 1344|  19.3k|    val = store_result<T>(u64val, is_negative);
 1345|  19.3k|    return begin;
 1346|  19.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1320|    734|{
 1321|    734|    uint64_t u64val{};
 1322|    734|    const CharT* begin = input.data();
 1323|    734|    const CharT* const end = input.data() + input.size();
 1324|       |
 1325|  4.13k|    while (begin != end) {
  ------------------
  |  Branch (1325:12): [True: 3.65k, False: 477]
  ------------------
 1326|  3.65k|        const auto digit = char_to_int(*begin);
 1327|  3.65k|        if (digit >= base) {
  ------------------
  |  Branch (1327:13): [True: 257, False: 3.40k]
  ------------------
 1328|    257|            break;
 1329|    257|        }
 1330|  3.40k|        u64val =
 1331|  3.40k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1332|  3.40k|        ++begin;
 1333|  3.40k|    }
 1334|       |
 1335|    734|    auto digits_count = static_cast<size_t>(begin - input.data());
 1336|    734|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  986|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8, False: 726]
  |  |  ------------------
  ------------------
 1337|    734|                                               is_negative))) {
 1338|      8|        return detail::unexpected_scan_error(
 1339|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1339:13): [True: 0, False: 8]
  ------------------
 1340|      8|                        : scan_error::value_positive_overflow,
 1341|      8|            "Integer overflow");
 1342|      8|    }
 1343|       |
 1344|    726|    val = store_result<T>(u64val, is_negative);
 1345|    726|    return begin;
 1346|    734|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   418k|{
 2046|   418k|    const auto argcount = args.size();
 2047|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 62.7k, False: 355k]
  |  Branch (2047:60): [True: 62.7k, False: 0]
  ------------------
 2048|  62.7k|        auto arg = args.get(0);
 2049|  62.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  62.7k|    static_cast<    \
  |  | 1056|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|  62.7k|    }
 2051|       |
 2052|   355k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 355k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   355k|    SCN_UNLIKELY_ATTR
 2060|   355k|    {
 2061|   355k|        auto handler = format_handler<false, CharT>{
 2062|   355k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   355k|        return vscan_parse_format_string(format, handler);
 2064|   355k|    }
 2065|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   836k|{
 1594|   836k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 710k, False: 126k]
  ------------------
 1595|   710k|        return false;
 1596|   710k|    }
 1597|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 126k, False: 0]
  |  Branch (1597:39): [True: 126k, False: 0]
  ------------------
 1598|   836k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  94.1k|{
 1627|  94.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  94.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  94.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  94.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  94.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  94.1k|    static_cast<    \
  |  | 1056|  94.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  94.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  94.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  94.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  94.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.3k, False: 81.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|    }                                                  \
  |  |  |  | 3938|  94.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  81.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|  81.7k|    return it.position();
 1644|  94.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|   354k|        : format_handler_base{argcount},
 1870|   354k|          parse_ctx{source_tag<Source&&>, format},
 1871|   354k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   354k|    static_cast<    \
  |  | 1056|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   354k|    static_cast<    \
  |  | 1056|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   354k|    {
 1873|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|  1.02M|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|  1.02M|    {
 1689|  1.02M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|   354k|        : contiguous_ctx(source, args, loc)
 1821|   354k|    {
 1822|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   354k|{
 2011|   354k|    const auto beg = handler.get_ctx().begin();
 2012|   354k|    detail::parse_format_string<false>(format, handler);
 2013|   354k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 74.3k, False: 280k]
  |  |  ------------------
  ------------------
 2014|  74.3k|        return unexpected(err.error());
 2015|  74.3k|    }
 2016|   280k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|  2.28M|    {
 1995|  2.28M|        return ctx.get();
 1996|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|  2.28M|    {
 1826|  2.28M|        return contiguous_ctx;
 1827|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|   635k|    {
 1877|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 635k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|   396k|    {
 1737|   396k|        error = unexpected(err);
 1738|   396k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|   354k|{
 1649|   354k|    auto arg = ctx.arg(id);
 1650|   354k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   354k|    return arg;
 1654|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|  1.02M|    {
 1763|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1764|      0|            on_error({scan_error::invalid_format_string,
 1765|      0|                      "Argument ID out-of-range"});
 1766|      0|            return;
 1767|      0|        }
 1768|       |
 1769|  1.02M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1770|      0|            on_error({scan_error::invalid_format_string,
 1771|      0|                      "Argument with this ID has already been scanned"});
 1772|      0|        }
 1773|       |
 1774|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1775|  1.02M|            visited_args_lower64 |= (1ull << id);
 1776|  1.02M|            return;
 1777|  1.02M|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|  1.02M|    {
 1747|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 1754|  1.02M|            return (visited_args_lower64 >> id) & 1ull;
 1755|  1.02M|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|   354k|    {
 1917|   354k|        return parse_ctx.next_arg_id();
 1918|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|   354k|    {
 1957|   354k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   354k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   354k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 354k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   354k|        auto specs = detail::format_specs{};
 1970|   354k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   354k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   354k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   354k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   354k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 354k]
  |  Branch (1975:29): [True: 16.5k, False: 338k]
  ------------------
 1976|  16.5k|            SCN_UNLIKELY_ATTR
 1977|  16.5k|            on_error({scan_error::invalid_format_string,
 1978|  16.5k|                      "Missing '}' in format string"});
 1979|  16.5k|            return parse_ctx.begin();
 1980|  16.5k|        }
 1981|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 1982|  8.25k|            return parse_ctx.begin();
 1983|  8.25k|        }
 1984|   330k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   330k|        on_visit_scan_arg(
 1987|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   330k|                                           get_ctx().locale()},
 1989|   330k|            arg);
 1990|   330k|        return parse_ctx.begin();
 1991|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1666|   354k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   354k|    {
 1668|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1927|   330k|    {
 1928|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 330k]
  |  Branch (1928:13): [True: 0, False: 330k]
  |  Branch (1928:29): [True: 0, False: 330k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 49.5k, False: 280k]
  |  |  ------------------
  ------------------
 1935|  49.5k|            on_error(r.error());
 1936|  49.5k|        }
 1937|   280k|        else {
 1938|   280k|            get_ctx().advance_to(*r);
 1939|   280k|        }
 1940|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1730|   148k|    {
 1731|   148k|        SCN_UNLIKELY_ATTR
 1732|   148k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1733|   148k|                                              msg);
 1734|   148k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|  1.02M|    {
 1696|  1.02M|        {
 1697|  1.02M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 1.02M]
  ------------------
 1698|  1.02M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 1.02M]
  ------------------
 1699|  1.02M|                                      ? std::numeric_limits<uint64_t>::max()
 1700|  1.02M|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|  1.02M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 0, False: 1.02M]
  ------------------
 1703|      0|                return on_error({scan_error::invalid_format_string,
 1704|      0|                                 "Argument list not exhausted"});
 1705|      0|            }
 1706|  1.02M|        }
 1707|       |
 1708|  1.02M|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 1.02M, False: 0]
  ------------------
 1709|  1.02M|            return;
 1710|  1.02M|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|  3.96M|    {
 1742|  3.96M|        return error;
 1743|  3.96M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1869|   355k|        : format_handler_base{argcount},
 1870|   355k|          parse_ctx{source_tag<Source&&>, format},
 1871|   355k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   355k|    {
 1873|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1796|   355k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   355k|    static_cast<    \
  |  | 1056|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   355k|    {
 1798|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   355k|{
 2011|   355k|    const auto beg = handler.get_ctx().begin();
 2012|   355k|    detail::parse_format_string<false>(format, handler);
 2013|   355k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 74.3k, False: 281k]
  |  |  ------------------
  ------------------
 2014|  74.3k|        return unexpected(err.error());
 2015|  74.3k|    }
 2016|   281k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1994|  2.28M|    {
 1995|  2.28M|        return ctx.get();
 1996|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1801|  2.28M|    {
 1802|  2.28M|        return ctx;
 1803|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1876|   636k|    {
 1877|   636k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 636k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   636k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1648|   355k|{
 1649|   355k|    auto arg = ctx.arg(id);
 1650|   355k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   355k|    return arg;
 1654|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1916|   355k|    {
 1917|   355k|        return parse_ctx.next_arg_id();
 1918|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1956|   355k|    {
 1957|   355k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   355k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   355k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 355k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   355k|        auto specs = detail::format_specs{};
 1970|   355k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   355k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   355k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   355k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   355k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 355k]
  |  Branch (1975:29): [True: 16.5k, False: 338k]
  ------------------
 1976|  16.5k|            SCN_UNLIKELY_ATTR
 1977|  16.5k|            on_error({scan_error::invalid_format_string,
 1978|  16.5k|                      "Missing '}' in format string"});
 1979|  16.5k|            return parse_ctx.begin();
 1980|  16.5k|        }
 1981|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 1982|  8.25k|            return parse_ctx.begin();
 1983|  8.25k|        }
 1984|   330k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   330k|        on_visit_scan_arg(
 1987|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   330k|                                           get_ctx().locale()},
 1989|   330k|            arg);
 1990|   330k|        return parse_ctx.begin();
 1991|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1666|   355k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   355k|    {
 1668|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   330k|    {
 1928|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 330k]
  |  Branch (1928:13): [True: 0, False: 330k]
  |  Branch (1928:29): [True: 0, False: 330k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 49.5k, False: 281k]
  |  |  ------------------
  ------------------
 1935|  49.5k|            on_error(r.error());
 1936|  49.5k|        }
 1937|   281k|        else {
 1938|   281k|            get_ctx().advance_to(*r);
 1939|   281k|        }
 1940|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   418k|{
 2026|   418k|    const auto argcount = args.size();
 2027|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 63.6k, False: 354k]
  |  Branch (2027:60): [True: 63.6k, False: 0]
  ------------------
 2028|  63.6k|        auto arg = args.get(0);
 2029|  63.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  63.6k|    static_cast<    \
  |  | 1056|  63.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|  63.6k|    }
 2031|       |
 2032|   354k|    auto handler = format_handler<true, CharT>{
 2033|   354k|        ranges::subrange<const CharT*>{source.data(),
 2034|   354k|                                       source.data() + source.size()},
 2035|   354k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   354k|    static_cast<    \
  |  | 1056|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   354k|    static_cast<    \
  |  | 1056|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   354k|    return vscan_parse_format_string(format, handler);
 2037|   418k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  95.4k|{
 1607|  95.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 95.4k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  95.4k|    auto reader =
 1613|  95.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  95.4k|            ranges::subrange<const CharT*>{source.data(),
 1615|  95.4k|                                           source.data() + source.size()},
 1616|  95.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  95.4k|    static_cast<    \
  |  | 1056|  95.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  95.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.3k, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|    }                                                  \
  |  |  |  | 3938|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|  83.0k|    return ranges::distance(source.data(), it);
 1619|  95.4k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   449k|{
 2126|   449k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   449k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 362k, False: 86.6k]
  |  |  ------------------
  ------------------
 2127|   362k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|   362k|    }
 2133|  86.6k|    else {
 2134|  86.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  86.6k|    }
 2140|   449k|    return result;
 2141|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   176k|{
 2026|   176k|    const auto argcount = args.size();
 2027|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 16.9k, False: 159k]
  |  Branch (2027:60): [True: 16.9k, False: 0]
  ------------------
 2028|  16.9k|        auto arg = args.get(0);
 2029|  16.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  16.9k|    static_cast<    \
  |  | 1056|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|  16.9k|    }
 2031|       |
 2032|   159k|    auto handler = format_handler<true, CharT>{
 2033|   159k|        ranges::subrange<const CharT*>{source.data(),
 2034|   159k|                                       source.data() + source.size()},
 2035|   159k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   159k|    return vscan_parse_format_string(format, handler);
 2037|   176k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|   352k|{
 1594|   352k|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 318k, False: 33.9k]
  ------------------
 1595|   318k|        return false;
 1596|   318k|    }
 1597|  33.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 33.9k, False: 0]
  |  Branch (1597:39): [True: 33.9k, False: 0]
  ------------------
 1598|   352k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|  25.4k|{
 1607|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|  25.4k|    auto reader =
 1613|  25.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|  25.4k|            ranges::subrange<const CharT*>{source.data(),
 1615|  25.4k|                                           source.data() + source.size()},
 1616|  25.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  25.4k|    static_cast<    \
  |  | 1056|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.7k|    }                                                  \
  |  |  |  | 3938|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|    690|    return ranges::distance(source.data(), it);
 1619|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|   159k|        : format_handler_base{argcount},
 1870|   159k|          parse_ctx{source_tag<Source&&>, format},
 1871|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   159k|    {
 1873|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|   159k|        : contiguous_ctx(source, args, loc)
 1821|   159k|    {
 1822|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   159k|{
 2011|   159k|    const auto beg = handler.get_ctx().begin();
 2012|   159k|    detail::parse_format_string<false>(format, handler);
 2013|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 148k, False: 10.6k]
  |  |  ------------------
  ------------------
 2014|   148k|        return unexpected(err.error());
 2015|   148k|    }
 2016|  10.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|   718k|    {
 1995|   718k|        return ctx.get();
 1996|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|   718k|    {
 1826|   718k|        return contiguous_ctx;
 1827|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|   169k|    {
 1877|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 169k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|   159k|{
 1649|   159k|    auto arg = ctx.arg(id);
 1650|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   159k|    return arg;
 1654|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|   159k|    {
 1917|   159k|        return parse_ctx.next_arg_id();
 1918|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|   159k|    {
 1957|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   159k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 159k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   159k|        auto specs = detail::format_specs{};
 1970|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   159k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 159k]
  |  Branch (1975:29): [True: 33.0k, False: 126k]
  ------------------
 1976|  33.0k|            SCN_UNLIKELY_ATTR
 1977|  33.0k|            on_error({scan_error::invalid_format_string,
 1978|  33.0k|                      "Missing '}' in format string"});
 1979|  33.0k|            return parse_ctx.begin();
 1980|  33.0k|        }
 1981|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.5k, False: 109k]
  |  |  ------------------
  ------------------
 1982|  16.5k|            return parse_ctx.begin();
 1983|  16.5k|        }
 1984|   109k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   109k|        on_visit_scan_arg(
 1987|   109k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   109k|                                           get_ctx().locale()},
 1989|   109k|            arg);
 1990|   109k|        return parse_ctx.begin();
 1991|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1666|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   159k|    {
 1668|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1927|   109k|    {
 1928|   109k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 109k]
  |  Branch (1928:13): [True: 0, False: 109k]
  |  Branch (1928:29): [True: 0, False: 109k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   109k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   109k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 99.0k, False: 10.6k]
  |  |  ------------------
  ------------------
 1935|  99.0k|            on_error(r.error());
 1936|  99.0k|        }
 1937|  10.6k|        else {
 1938|  10.6k|            get_ctx().advance_to(*r);
 1939|  10.6k|        }
 1940|   109k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   176k|{
 2046|   176k|    const auto argcount = args.size();
 2047|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 16.9k, False: 159k]
  |  Branch (2047:60): [True: 16.9k, False: 0]
  ------------------
 2048|  16.9k|        auto arg = args.get(0);
 2049|  16.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|  16.9k|    static_cast<    \
  |  | 1056|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|  16.9k|    }
 2051|       |
 2052|   159k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 159k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   159k|    SCN_UNLIKELY_ATTR
 2060|   159k|    {
 2061|   159k|        auto handler = format_handler<false, CharT>{
 2062|   159k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   159k|        return vscan_parse_format_string(format, handler);
 2064|   159k|    }
 2065|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|  25.4k|{
 1627|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|  25.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|  25.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|  25.4k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|  25.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|  25.4k|    static_cast<    \
  |  | 1056|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  24.7k|    }                                                  \
  |  |  |  | 3938|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|    690|    return it.position();
 1644|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1869|   159k|        : format_handler_base{argcount},
 1870|   159k|          parse_ctx{source_tag<Source&&>, format},
 1871|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   159k|    {
 1873|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1796|   159k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   159k|    {
 1798|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   159k|{
 2011|   159k|    const auto beg = handler.get_ctx().begin();
 2012|   159k|    detail::parse_format_string<false>(format, handler);
 2013|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 148k, False: 10.6k]
  |  |  ------------------
  ------------------
 2014|   148k|        return unexpected(err.error());
 2015|   148k|    }
 2016|  10.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1994|   718k|    {
 1995|   718k|        return ctx.get();
 1996|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1801|   718k|    {
 1802|   718k|        return ctx;
 1803|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1876|   169k|    {
 1877|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 169k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1648|   159k|{
 1649|   159k|    auto arg = ctx.arg(id);
 1650|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   159k|    return arg;
 1654|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1916|   159k|    {
 1917|   159k|        return parse_ctx.next_arg_id();
 1918|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1956|   159k|    {
 1957|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   159k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 159k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   159k|        auto specs = detail::format_specs{};
 1970|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   159k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 159k]
  |  Branch (1975:29): [True: 33.0k, False: 126k]
  ------------------
 1976|  33.0k|            SCN_UNLIKELY_ATTR
 1977|  33.0k|            on_error({scan_error::invalid_format_string,
 1978|  33.0k|                      "Missing '}' in format string"});
 1979|  33.0k|            return parse_ctx.begin();
 1980|  33.0k|        }
 1981|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.5k, False: 109k]
  |  |  ------------------
  ------------------
 1982|  16.5k|            return parse_ctx.begin();
 1983|  16.5k|        }
 1984|   109k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   109k|        on_visit_scan_arg(
 1987|   109k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   109k|                                           get_ctx().locale()},
 1989|   109k|            arg);
 1990|   109k|        return parse_ctx.begin();
 1991|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1666|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   159k|    {
 1668|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   109k|    {
 1928|   109k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 109k]
  |  Branch (1928:13): [True: 0, False: 109k]
  |  Branch (1928:29): [True: 0, False: 109k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   109k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   109k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 99.0k, False: 10.6k]
  |  |  ------------------
  ------------------
 1935|  99.0k|            on_error(r.error());
 1936|  99.0k|        }
 1937|  10.6k|        else {
 1938|  10.6k|            get_ctx().advance_to(*r);
 1939|  10.6k|        }
 1940|   109k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   184k|{
 2126|   184k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   184k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 11.3k, False: 173k]
  |  |  ------------------
  ------------------
 2127|  11.3k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|  11.3k|    }
 2133|   173k|    else {
 2134|   173k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|   173k|    }
 2140|   184k|    return result;
 2141|   184k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  31.8k|{
 2072|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  31.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  31.3k|{
 2072|  31.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  31.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  8.48k|{
 2072|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  8.48k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  8.48k|{
 2072|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  8.48k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    688|{
 1462|    688|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    688|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    688|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    688|            return transcode_to_string_impl_to32(src, dest);
 1473|    688|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    688|    SCN_EXPECT(false);
  ------------------
  |  | 1051|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    688|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    688|{
 1355|    688|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    688|    auto it = src.begin();
 1358|  46.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 45.5k, False: 688]
  ------------------
 1359|  45.5k|        auto res = get_next_code_point(
 1360|  45.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  45.5k|                                                                 src.end()));
 1362|  45.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 486, False: 45.0k]
  |  |  ------------------
  ------------------
 1363|    486|            dest.push_back(DestCharT{0xfffd});
 1364|    486|        }
 1365|  45.0k|        else {
 1366|  45.0k|            dest.push_back(res.value);
 1367|  45.0k|        }
 1368|  45.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  45.5k|    }
 1370|    688|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  76.8k|{
 1279|  76.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  76.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  76.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.50k, False: 74.3k]
  |  |  ------------------
  ------------------
 1283|  2.50k|        return {get_start_for_next_code_point(input),
 1284|  2.50k|                detail::invalid_code_point};
 1285|  2.50k|    }
 1286|  74.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.06k, False: 72.3k]
  |  |  ------------------
  ------------------
 1287|  2.06k|        return {input.end(), detail::invalid_code_point};
 1288|  2.06k|    }
 1289|       |
 1290|  72.3k|    return {input.begin() + len,
 1291|  72.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  74.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.50k|{
 1265|  2.50k|    auto it = input.begin();
 1266|  10.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.05k, False: 1.23k]
  ------------------
 1267|  9.05k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.27k, False: 7.78k]
  ------------------
 1268|  1.27k|            break;
 1269|  1.27k|        }
 1270|  9.05k|    }
 1271|  2.50k|    return it;
 1272|  2.50k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.72M|    constexpr parse_error(code c) : m_code(c)
  808|  3.72M|    {
  809|  3.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|  3.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.72M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.36M|    {
  823|  1.36M|        return a.m_code == b.m_code;
  824|  1.36M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   133k|    {
  827|   133k|        return !(a == b);
  828|   133k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|   880k|    {
 3051|   880k|        return m_msg == nullptr;
 3052|   880k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   860k|{
  458|   860k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   860k|        static_cast<unsigned char>(ch))];
  460|   860k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   516k|{
  539|   516k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   516k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.15M|{
  784|  3.15M|    return e != eof_error::good;
  785|  3.15M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.7k|{
  798|  26.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.7k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  61.7k|{
  845|  61.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  61.7k|    return parse_error::eof;
  847|  61.7k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   133k|{
  854|   133k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 133k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   133k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 133k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   133k|    return detail::unexpected_scan_error(code, msg);
  863|   133k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   417k|{
  868|   417k|    return [code, msg](parse_error err) {
  869|   417k|        assert(err != parse_error::good);
  870|   417k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   417k|    };
  872|   417k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|   325k|{
 2320|   325k|    unsigned char running_diff{0};
 2321|   977k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 651k, False: 325k]
  ------------------
 2322|   651k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|   651k|    }
 2324|   325k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 2.13k, False: 323k]
  |  Branch (2324:33): [True: 462, False: 323k]
  ------------------
 2325|   325k|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  5.15M|{
 3240|  5.15M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  5.15M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|   600k|{
 3244|   600k|#if WCHAR_MIN < 0
 3245|   600k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 575k, False: 25.0k]
  |  Branch (3245:20): [True: 371k, False: 203k]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|   371k|        return char_to_int(static_cast<char>(ch));
 3250|   371k|    }
 3251|   228k|    return 255;
 3252|   600k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|   582k|{
 6047|   582k|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 582k]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|   582k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 582k]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|   582k|    return {};
 6061|   582k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.42M|    {
  151|  1.42M|        i += n;
  152|  1.42M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.18M|    {
  108|  2.18M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.18M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.18M|    {
   87|  2.18M|        return s - i;
   88|  2.18M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   114k|    {
  304|   114k|        ranges::advance(x, n);
  305|   114k|        return x;
  306|   114k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   114k|    {
  268|   114k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   114k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   114k|    {
  151|   114k|        i += n;
  152|   114k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.8M|    {
   87|  33.8M|        return s - i;
   88|  33.8M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   965k|    {
 2993|   965k|        return m_current;
 2994|   965k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|   279k|    {
 2993|   279k|        return m_current;
 2994|   279k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   424k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   424k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   424k|        auto beg = r.begin();
  991|   424k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 424k, False: 0]
  ------------------
  992|   424k|            return false;
  993|   424k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   424k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   336k|{
 1956|   336k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   336k|    else {
 1967|   336k|        auto it = range.begin();
 1968|   336k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 301k, False: 35.8k]
  ------------------
 1969|   301k|            return ranges::next(it, count);
 1970|   301k|        }
 1971|       |
 1972|  94.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 70.5k, False: 24.4k]
  ------------------
 1973|  70.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.4k, False: 59.1k]
  ------------------
 1974|  11.4k|                return unexpected(eof_error::eof);
 1975|  11.4k|            }
 1976|  70.5k|        }
 1977|       |
 1978|  24.4k|        return it;
 1979|  35.8k|    }
 1980|   336k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   336k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   336k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   336k|        else {
 1107|   336k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 336k, False: 0]
  ------------------
 1108|   336k|                return static_cast<size_t>(
 1109|   336k|                    r.begin().parent()->chars_available() -
 1110|   336k|                    r.begin().position());
 1111|   336k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   336k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   336k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.30M|    {
  763|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.30M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.08M|    {
  763|  2.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.08M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   669k|        : m_fptr([](storage fn,
  743|   669k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   669k|              cvref<T> obj = *get<T>(fn);
  745|   669k|              if constexpr (std::is_void_v<R>) {
  746|   669k|                  obj(static_cast<decltype(args)>(args)...);
  747|   669k|              }
  748|   669k|              else {
  749|   669k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   669k|              }
  751|   669k|          }),
  752|   669k|          m_storage(std::addressof(f))
  753|   669k|    {
  754|   669k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.04M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   669k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   669k|        {
  662|   669k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   330k|    {
 6075|   330k|        const bool need_skipped_width =
 6076|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 330k]
  |  Branch (6076:33): [True: 0, False: 330k]
  ------------------
 6077|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 330k]
  ------------------
 6081|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 330k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 330k, False: 0]
  |  Branch (6085:56): [True: 330k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 330k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 9.70k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  9.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  9.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  9.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  9.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.70k|    }                                                  \
  |  |  |  | 3938|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   651k|                            make_eof_scan_error));
 6096|       |
 6097|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 320k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   320k|            return result_type{it, 0};
 6105|   651k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   330k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   309k|{
 2075|   309k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   309k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   309k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   309k|    else {
 2060|   309k|        auto first = range.begin();
 2061|  1.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.15M, False: 9.05k]
  ------------------
 2062|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 300k, False: 852k]
  ------------------
 2063|   300k|                return first;
 2064|   300k|            }
 2065|  1.15M|        }
 2066|  9.05k|        return first;
 2067|   309k|    }
 2068|   309k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   312k|    {
  108|   312k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   312k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   312k|    {
   94|   312k|        iter_difference_t<I> counter{0};
   95|  4.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.72M, False: 312k]
  ------------------
   96|  3.72M|            ++i;
   97|  3.72M|            ++counter;
   98|  3.72M|        }
   99|   312k|        return counter;
  100|   312k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   133k|    return [code, msg](parse_error err) {
  869|   133k|        assert(err != parse_error::good);
  870|   133k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   133k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   121k|    {
 1879|   121k|        auto stdloc = loc.get<std::locale>();
 1880|   121k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   121k|        grouping = numpunct.grouping();
 1882|   121k|        thousands_sep =
 1883|   121k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 121k]
  ------------------
 1884|   121k|        decimal_point = numpunct.decimal_point();
 1885|   121k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   121k|{
 1816|   121k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 121k, False: 0]
  ------------------
 1817|   121k|        return std::use_facet<Facet>(stdloc);
 1818|   121k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   121k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   520k|{
 1945|   520k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 360, False: 520k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   520k|    return ranges::next(range.begin());
 1950|   520k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.03M|{
  951|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.3k, False: 1.02M]
  |  |  ------------------
  ------------------
  952|  12.3k|        return eof_error::eof;
  953|  12.3k|    }
  954|  1.02M|    return eof_error::good;
  955|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.81M|{
  945|  1.81M|    return is_range_eof(r.begin(), r.end());
  946|  1.81M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.81M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.81M|    {
  938|  1.81M|        return begin == end;
  939|  1.81M|    }
  940|  1.81M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   520k|    {
  296|   520k|        ++x;
  297|   520k|        return x;
  298|   520k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  51.7k|    {
 3590|  51.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  51.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  51.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.65k, False: 44.0k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.65k|            else {
 3601|  7.65k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.65k]
  ------------------
 3602|  7.65k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.65k|            }
 3608|  7.65k|        }
 3609|       |
 3610|  51.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 46.5k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 36.1k, False: 10.3k]
  |  |  ------------------
  ------------------
 3616|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.05k, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|    }                                                  \
  |  |  |  | 3938|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  32.1k|                    parse_integer_digits_without_thsep(
 3618|  32.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  32.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  32.1k|            auto buf = make_contiguous_buffer(
 3622|  32.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  32.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.68k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.68k|    }                                                  \
  |  |  |  | 3938|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.4k|            return ranges::next(
 3628|  30.4k|                prefix_result.iterator,
 3629|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  32.1k|        }
 3631|       |
 3632|  10.3k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.3k|#endif
 3638|       |
 3639|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 588, False: 9.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    588|    }                                                  \
  |  |  |  | 3938|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  9.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.77k|                parse_integer_digits_with_thsep(
 3641|  9.77k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.77k|                    prefix_result.parsed_base, locale_options));
 3643|  9.77k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.77k|            parse_digits_result;
 3645|       |
 3646|  9.77k|        auto nothsep_source_view =
 3647|  9.77k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.77k|        SCN_TRY(
  ------------------
  |  | 3939|  9.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  9.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  9.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 434, False: 9.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    434|    }                                                  \
  |  |  |  | 3938|  9.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  9.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.33k|            nothsep_source_it,
 3650|  9.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.33k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.33k|        return ranges::next(
 3654|  9.33k|            prefix_result.iterator,
 3655|  9.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.33k|                ranges::ssize(thsep_indices));
 3657|  9.77k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   412k|{
 3377|   412k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   412k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   412k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   412k|        parse_integer_base_prefix(
 3382|   412k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   412k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 370k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   370k|    else {
 3394|   370k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 368k]
  ------------------
 3395|   370k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 33.8k, False: 334k]
  ------------------
 3396|  35.9k|            digits_begin_it = base_prefix_begin_it;
 3397|  35.9k|        }
 3398|   370k|    }
 3399|       |
 3400|   412k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 358k, False: 54.5k]
  ------------------
 3401|   358k|        sign = sign_type::plus_sign;
 3402|   358k|    }
 3403|   412k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   412k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   412k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   412k|{
 3258|   412k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   412k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 358k, False: 54.5k]
  ------------------
 3260|   358k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 358k, False: 0]
  ------------------
 3261|   358k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   358k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   358k|    }
 3265|       |
 3266|  54.5k|    auto& it = *r;
 3267|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.0k, False: 12.4k]
  ------------------
 3268|  42.0k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.0k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   412k|{
 2372|   412k|    auto it = read_code_unit(range);
 2373|   412k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   812k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 812k, False: 358k]
  ------------------
 2378|   812k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.5k, False: 758k]
  ------------------
 2379|  54.5k|            return *it;
 2380|  54.5k|        }
 2381|   812k|    }
 2382|       |
 2383|   358k|    return unexpected(parse_error::error);
 2384|   412k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   412k|{
 3344|   412k|    switch (base) {
 3345|  21.7k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.7k, False: 390k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.7k|                    false};
 3349|       |
 3350|  38.7k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 38.7k, False: 373k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  38.7k|            bool zero_parsed = false;
 3353|  38.7k|            auto it = apply_opt(
 3354|  38.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  38.7k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.3k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.3k, False: 347k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.3k|                    false};
 3362|       |
 3363|  70.8k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 70.8k, False: 341k]
  ------------------
 3364|       |            // detect base
 3365|  70.8k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   216k|        default:
  ------------------
  |  Branch (3367:9): [True: 216k, False: 196k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   216k|            return {range.begin(), base, false};
 3370|   412k|    }
 3371|   412k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|   125k|{
 2391|   125k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 108k, False: 17.4k]
  ------------------
 2392|   108k|        return range.begin();
 2393|   108k|    }
 2394|  17.4k|    return *result;
 2395|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  92.0k|{
 3295|  92.0k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   336k|{
 2331|   336k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   336k|    else {
 2344|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   336k|            if (ch < 'A' || ch > 'Z') {
 2346|   336k|                return ch;
 2347|   336k|            }
 2348|   336k|            return static_cast<char_type>(ch +
 2349|   336k|                                          static_cast<char_type>('a' - 'A'));
 2350|   336k|        };
 2351|       |
 2352|   336k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 11.4k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|    }                                                  \
  |  |  |  | 3938|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|   325k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|   325k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|   325k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 322k, False: 2.59k]
  |  |  ------------------
  ------------------
 2357|   325k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|   325k|                    return ascii_tolower(a) ==
 2359|   325k|                           static_cast<detail::char_t<Range>>(b);
 2360|   325k|                }))) {
 2361|   322k|            return unexpected(parse_error::error);
 2362|   322k|        }
 2363|       |
 2364|  2.59k|        return it;
 2365|   325k|    }
 2366|   336k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|   461k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   461k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 447k, False: 13.6k]
  |  Branch (2345:29): [True: 7.59k, False: 6.10k]
  ------------------
 2346|   455k|                return ch;
 2347|   455k|            }
 2348|  6.10k|            return static_cast<char_type>(ch +
 2349|  6.10k|                                          static_cast<char_type>('a' - 'A'));
 2350|   461k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|   108k|{
 3309|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 107k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 65.8k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  65.8k|    return unexpected(parse_error::error);
 3319|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   107k|{
 2246|   107k|    auto it = read_code_unit(range);
 2247|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 65.5k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  65.5k|        return unexpected(parse_error::error);
 2254|  65.5k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|   136k|{
 3302|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  70.8k|{
 3325|  70.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.3k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 69.9k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  69.9k|    {
 3332|  69.9k|        bool zero_parsed{false};
 3333|  69.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.2k, False: 43.7k]
  ------------------
 3334|  26.2k|            return {*r, 8, zero_parsed};
 3335|  26.2k|        }
 3336|  69.9k|    }
 3337|  43.7k|    return {range.begin(), 10, false};
 3338|  69.9k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   309k|{
 3411|   309k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   309k|    else {
 3422|   309k|        return read_while1_code_unit(range,
 3423|   309k|                                     [&](char_type ch) noexcept {
 3424|   309k|                                         return char_to_int(ch) < base;
 3425|   309k|                                     })
 3426|   309k|            .transform_error(map_parse_error_to_scan_error(
 3427|   309k|                scan_error::invalid_scanned_value,
 3428|   309k|                "Failed to parse integer: No digits found"));
 3429|   309k|    }
 3430|   309k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   309k|{
 2095|   309k|    auto it = read_while_code_unit(range, pred);
 2096|   309k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 28.2k, False: 281k]
  ------------------
 2097|  28.2k|        return unexpected(parse_error::error);
 2098|  28.2k|    }
 2099|   281k|    return it;
 2100|   309k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3423|  1.15M|                                     [&](char_type ch) noexcept {
 3424|  1.15M|                                         return char_to_int(ch) < base;
 3425|  1.15M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  60.6k|{
 3441|  60.6k|    std::basic_string<CharT> output;
 3442|  60.6k|    std::string thsep_indices;
 3443|  60.6k|    auto it = range.begin();
 3444|  60.6k|    bool digit_matched = false;
 3445|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 324k, False: 2.20k]
  ------------------
 3446|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.5k, False: 292k]
  ------------------
 3447|  31.5k|            thsep_indices.push_back(
 3448|  31.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.5k|        }
 3450|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 58.4k, False: 234k]
  ------------------
 3451|  58.4k|            break;
 3452|  58.4k|        }
 3453|   234k|        else {
 3454|   234k|            output.push_back(*it);
 3455|   234k|            digit_matched = true;
 3456|   234k|        }
 3457|   324k|    }
 3458|  60.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.25k, False: 57.4k]
  |  |  ------------------
  ------------------
 3459|  3.25k|        return detail::unexpected_scan_error(
 3460|  3.25k|            scan_error::invalid_scanned_value,
 3461|  3.25k|            "Failed to parse integer: No digits found");
 3462|  3.25k|    }
 3463|  57.4k|    return std::tuple{it, output, thsep_indices};
 3464|  60.6k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   281k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   281k|    else {
 1788|   281k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   281k|    }
 1790|   281k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   281k|    {
 1636|   281k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   281k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   281k|    {
 1720|   281k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   281k|                           ranges::common_range<Range>) {
 1737|   281k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   281k|            auto end_seg = range.end().contiguous_segment();
 1739|   281k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 177k, False: 103k]
  |  |  ------------------
  ------------------
 1740|   281k|                             detail::to_address(end_seg.end()))) {
 1741|   177k|                auto& str = m_storage.emplace();
 1742|   177k|                str.reserve(range.end().position() - range.begin().position());
 1743|   177k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   177k|                m_view = string_view_type{str};
 1745|   177k|                return;
 1746|   177k|            }
 1747|       |
 1748|   103k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   103k|                                                            end_seg.data());
 1750|   103k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   281k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   557k|    {
 1681|   557k|        return m_view;
 1682|   557k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   281k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   274k|    {
 6117|   274k|        const bool need_skipped_width =
 6118|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 274k]
  |  Branch (6118:33): [True: 0, False: 274k]
  ------------------
 6119|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 274k]
  ------------------
 6122|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 274k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 274k, False: 0]
  ------------------
 6131|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 274k]
  ------------------
 6132|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   274k|        return result_type{rng.begin(), 0};
 6156|   274k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   522k|{
 1945|   522k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 360, False: 522k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   522k|    return ranges::next(range.begin());
 1950|   522k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.35M|{
  951|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.4k, False: 1.34M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.34M|    return eof_error::good;
  955|  1.35M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.35M|{
  945|  1.35M|    return is_range_eof(r.begin(), r.end());
  946|  1.35M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.35M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.35M|    {
  938|  1.35M|        return begin == end;
  939|  1.35M|    }
  940|  1.35M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   522k|    {
  296|   522k|        ++x;
  297|   522k|        return x;
  298|   522k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  51.8k|    {
 3590|  51.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  51.8k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  51.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 7.64k, False: 44.2k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  7.64k|            else {
 3601|  7.64k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 7.64k]
  ------------------
 3602|  7.64k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  7.64k|            }
 3608|  7.64k|        }
 3609|       |
 3610|  51.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.21k, False: 46.6k]
  ------------------
 3611|  5.21k|            value = T{0};
 3612|  5.21k|            return std::next(prefix_result.iterator);
 3613|  5.21k|        }
 3614|       |
 3615|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 36.2k, False: 10.3k]
  |  |  ------------------
  ------------------
 3616|  36.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 128, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|    }                                                  \
  |  |  |  | 3938|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  36.1k|                    parse_integer_digits_without_thsep(
 3618|  36.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  36.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  36.1k|            auto buf = make_contiguous_buffer(
 3622|  36.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  36.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.72k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.72k|    }                                                  \
  |  |  |  | 3938|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  30.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  30.4k|            return ranges::next(
 3628|  30.4k|                prefix_result.iterator,
 3629|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  36.1k|        }
 3631|       |
 3632|  10.3k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3637|  10.3k|#endif
 3638|       |
 3639|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 624, False: 9.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    624|    }                                                  \
  |  |  |  | 3938|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.75k|                parse_integer_digits_with_thsep(
 3641|  9.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  9.75k|                    prefix_result.parsed_base, locale_options));
 3643|  9.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  9.75k|            parse_digits_result;
 3645|       |
 3646|  9.75k|        auto nothsep_source_view =
 3647|  9.75k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  9.75k|        SCN_TRY(
  ------------------
  |  | 3939|  9.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  9.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  9.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 430, False: 9.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    430|    }                                                  \
  |  |  |  | 3938|  9.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  9.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  9.32k|            nothsep_source_it,
 3650|  9.32k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  9.32k|                                prefix_result.parsed_base));
 3652|       |
 3653|  9.32k|        return ranges::next(
 3654|  9.32k|            prefix_result.iterator,
 3655|  9.32k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  9.32k|                ranges::ssize(thsep_indices));
 3657|  9.75k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   414k|{
 3377|   414k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   414k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   414k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   414k|        parse_integer_base_prefix(
 3382|   414k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   414k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 41.8k, False: 372k]
  ------------------
 3385|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 478, False: 41.3k]
  ------------------
 3386|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 30.7k, False: 10.6k]
  ------------------
 3387|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3388|  31.2k|        }
 3389|  10.6k|        else {
 3390|  10.6k|            parsed_zero = false;
 3391|  10.6k|        }
 3392|  41.8k|    }
 3393|   372k|    else {
 3394|   372k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 2.15k, False: 370k]
  ------------------
 3395|   372k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 34.6k, False: 335k]
  ------------------
 3396|  36.7k|            digits_begin_it = base_prefix_begin_it;
 3397|  36.7k|        }
 3398|   372k|    }
 3399|       |
 3400|   414k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 359k, False: 54.5k]
  ------------------
 3401|   359k|        sign = sign_type::plus_sign;
 3402|   359k|    }
 3403|   414k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   414k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   414k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   414k|{
 3258|   414k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   414k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 359k, False: 54.5k]
  ------------------
 3260|   359k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 359k, False: 0]
  ------------------
 3261|   359k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   359k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   359k|    }
 3265|       |
 3266|  54.5k|    auto& it = *r;
 3267|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 42.1k, False: 12.4k]
  ------------------
 3268|  42.1k|        return std::pair{it, sign_type::minus_sign};
 3269|  42.1k|    }
 3270|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3271|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   414k|{
 2372|   414k|    auto it = read_code_unit(range);
 2373|   414k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   816k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 816k, False: 359k]
  ------------------
 2378|   816k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 54.5k, False: 761k]
  ------------------
 2379|  54.5k|            return *it;
 2380|  54.5k|        }
 2381|   816k|    }
 2382|       |
 2383|   359k|    return unexpected(parse_error::error);
 2384|   414k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   414k|{
 3344|   414k|    switch (base) {
 3345|  21.8k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 21.8k, False: 392k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  21.8k|                    false};
 3349|       |
 3350|  38.8k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 38.8k, False: 375k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  38.8k|            bool zero_parsed = false;
 3353|  38.8k|            auto it = apply_opt(
 3354|  38.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  38.8k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  65.3k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 65.3k, False: 349k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  65.3k|                    false};
 3362|       |
 3363|  70.9k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 70.9k, False: 343k]
  ------------------
 3364|       |            // detect base
 3365|  70.9k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|   217k|        default:
  ------------------
  |  Branch (3367:9): [True: 217k, False: 196k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|   217k|            return {range.begin(), base, false};
 3370|   414k|    }
 3371|   414k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|   125k|{
 2391|   125k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 108k, False: 17.4k]
  ------------------
 2392|   108k|        return range.begin();
 2393|   108k|    }
 2394|  17.4k|    return *result;
 2395|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  92.2k|{
 3295|  92.2k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  92.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   337k|{
 2331|   337k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|   337k|                  std::is_same_v<char_type, char>) {
 2335|   337k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 11.6k, False: 325k]
  ------------------
 2336|  11.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  11.6k|        }
 2338|   325k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 323k, False: 2.59k]
  ------------------
 2339|   323k|            return unexpected(parse_error::error);
 2340|   323k|        }
 2341|  2.59k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|   337k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|   108k|{
 3309|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 952, False: 107k]
  ------------------
 3310|    952|        return *r;
 3311|    952|    }
 3312|       |
 3313|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 41.8k, False: 66.0k]
  ------------------
 3314|  41.8k|        zero_parsed = true;
 3315|  41.8k|        return *r;
 3316|  41.8k|    }
 3317|       |
 3318|  66.0k|    return unexpected(parse_error::error);
 3319|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   107k|{
 2246|   107k|    auto it = read_code_unit(range);
 2247|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 65.7k, False: 41.8k]
  |  |  ------------------
  ------------------
 2252|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  65.7k|        return unexpected(parse_error::error);
 2254|  65.7k|    }
 2255|       |
 2256|  41.8k|    return *it;
 2257|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|   136k|{
 3302|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3303|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  70.9k|{
 3325|  70.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 532, False: 70.4k]
  ------------------
 3326|    532|        return {*r, 16, false};
 3327|    532|    }
 3328|  70.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 318, False: 70.0k]
  ------------------
 3329|    318|        return {*r, 2, false};
 3330|    318|    }
 3331|  70.0k|    {
 3332|  70.0k|        bool zero_parsed{false};
 3333|  70.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 26.1k, False: 43.8k]
  ------------------
 3334|  26.1k|            return {*r, 8, zero_parsed};
 3335|  26.1k|        }
 3336|  70.0k|    }
 3337|  43.8k|    return {range.begin(), 10, false};
 3338|  70.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   311k|{
 3411|   311k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   311k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   311k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 891, False: 310k]
  |  |  ------------------
  ------------------
 3415|    891|            return detail::unexpected_scan_error(
 3416|    891|                scan_error::invalid_scanned_value,
 3417|    891|                "Failed to parse integer: No digits found");
 3418|    891|        }
 3419|   310k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   311k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  60.8k|{
 3441|  60.8k|    std::basic_string<CharT> output;
 3442|  60.8k|    std::string thsep_indices;
 3443|  60.8k|    auto it = range.begin();
 3444|  60.8k|    bool digit_matched = false;
 3445|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 324k, False: 2.16k]
  ------------------
 3446|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 31.4k, False: 292k]
  ------------------
 3447|  31.4k|            thsep_indices.push_back(
 3448|  31.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  31.4k|        }
 3450|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 58.6k, False: 233k]
  ------------------
 3451|  58.6k|            break;
 3452|  58.6k|        }
 3453|   233k|        else {
 3454|   233k|            output.push_back(*it);
 3455|   233k|            digit_matched = true;
 3456|   233k|        }
 3457|   324k|    }
 3458|  60.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.49k, False: 57.3k]
  |  |  ------------------
  ------------------
 3459|  3.49k|        return detail::unexpected_scan_error(
 3460|  3.49k|            scan_error::invalid_scanned_value,
 3461|  3.49k|            "Failed to parse integer: No digits found");
 3462|  3.49k|    }
 3463|  57.3k|    return std::tuple{it, output, thsep_indices};
 3464|  60.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   310k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   310k|                  ranges::sized_range<Range>) {
 1785|   310k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   310k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   310k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   310k|    {
 1589|   310k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.43M|    {
 1602|  1.43M|        return sv;
 1603|  1.43M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   423k|{
 3066|   423k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 423k, False: 0]
  ------------------
 3067|   423k|        auto it = read_while_classic_space(range);
 3068|   423k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   423k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.32k, False: 414k]
  |  |  ------------------
  ------------------
 3070|  9.32k|            return unexpected(e);
 3071|  9.32k|        }
 3072|       |
 3073|   414k|        return it;
 3074|   423k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   423k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   423k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   423k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   423k|        auto buf = make_contiguous_buffer(range);
 2220|   423k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   423k|        return ranges::next(range.begin(),
 2222|   423k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   423k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   423k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   423k|                  ranges::sized_range<Range>) {
 1785|   423k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   423k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   423k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   423k|    {
 1589|   423k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   656k|    {
  304|   656k|        ranges::advance(x, n);
  305|   656k|        return x;
  306|   656k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.05M|    {
  268|  1.05M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.05M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.05M|    {
  181|  2.59M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.54M, False: 1.05M]
  ------------------
  182|  1.54M|            ++i;
  183|  1.54M|        }
  184|  1.05M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  53.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  53.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  53.2k|            auto rd = make_reader<T, char_type>();
 6237|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  53.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 53.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  53.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  53.2k|                return impl(rd, range, value);
 6242|  53.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  53.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   660k|    {
 3156|   660k|        reader_error_handler eh{};
 3157|   660k|        get_derived().check_specs_impl(specs, eh);
 3158|   660k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   660k|        return {};
 3163|   660k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3167|   660k|    {
 3168|   660k|        return static_cast<Derived&>(*this);
 3169|   660k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   660k|    {
 3536|   660k|        detail::check_int_type_specs(specs, eh);
 3537|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  53.2k|    {
 6162|  53.2k|        const bool need_skipped_width =
 6163|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 53.2k]
  |  Branch (6163:33): [True: 0, False: 53.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  53.2k|        auto it = rng.begin();
 6167|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 53.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  53.2k|        else {
 6176|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.49k, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|    }                                                  \
  |  |  |  | 3938|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.7k|        }
 6179|  51.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.7k|        std::ptrdiff_t value_width = 0;
 6183|  51.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.7k|        else {
 6199|  51.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.76k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.76k|    }                                                  \
  |  | 3938|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  44.9k|                                             specs, value, loc));
 6201|       |
 6202|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 44.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  44.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 43.9k, False: 1.01k]
  ------------------
 6212|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  43.9k|                                 value_width));
 6216|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  43.9k|        }
 6218|       |
 6219|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  44.9k|        return it;
 6222|  44.9k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3150|  1.39M|    {
 3151|  1.39M|        return true;
 3152|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  63.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  63.2k|            auto rd = make_reader<T, char_type>();
 6237|  63.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  63.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 63.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  63.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 63.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  63.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  63.2k|                return impl(rd, range, value);
 6242|  63.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  63.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  63.2k|    {
 6162|  63.2k|        const bool need_skipped_width =
 6163|  63.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 63.2k]
  |  Branch (6163:33): [True: 0, False: 63.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  63.2k|        auto it = rng.begin();
 6167|  63.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  63.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 63.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  63.2k|        else {
 6176|  63.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.97k, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.97k|    }                                                  \
  |  |  |  | 3938|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  61.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  61.2k|        }
 6179|  61.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  61.2k|        std::ptrdiff_t value_width = 0;
 6183|  61.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 61.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  61.2k|        else {
 6199|  61.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.28k, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.28k|    }                                                  \
  |  | 3938|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  55.0k|                                             specs, value, loc));
 6201|       |
 6202|  55.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 55.0k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  55.0k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  55.0k|        std::ptrdiff_t postfix_width = 0;
 6211|  55.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 53.6k, False: 1.36k]
  ------------------
 6212|  53.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  53.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  53.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  53.6k|                                 value_width));
 6216|  53.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  53.6k|        }
 6218|       |
 6219|  55.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  55.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  55.0k|            specs, prefix_width, value_width, postfix_width));
 6221|  55.0k|        return it;
 6222|  55.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  61.2k|    {
 3590|  61.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.01k, False: 53.2k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.01k|            else {
 3601|  8.01k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.01k]
  ------------------
 3602|  8.01k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.01k|            }
 3608|  8.01k|        }
 3609|       |
 3610|  61.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 55.7k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  55.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  55.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.56k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.56k|    }                                                  \
  |  |  |  | 3938|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  39.2k|                    parse_integer_digits_without_thsep(
 3618|  39.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  39.2k|                        prefix_result.parsed_base));
 3620|       |
 3621|  39.2k|            auto buf = make_contiguous_buffer(
 3622|  39.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  39.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 790, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    790|    }                                                  \
  |  |  |  | 3938|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.4k|            return ranges::next(
 3628|  38.4k|                prefix_result.iterator,
 3629|  38.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  39.2k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 704, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    704|    }                                                  \
  |  |  |  | 3938|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.2k|                parse_integer_digits_with_thsep(
 3641|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.2k|                    prefix_result.parsed_base, locale_options));
 3643|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.2k|            parse_digits_result;
 3645|       |
 3646|  11.2k|        auto nothsep_source_view =
 3647|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.2k|        SCN_TRY(
  ------------------
  |  | 3939|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 218, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    218|    }                                                  \
  |  |  |  | 3938|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.0k|            nothsep_source_it,
 3650|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.0k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.0k|        return ranges::next(
 3654|  11.0k|            prefix_result.iterator,
 3655|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.0k|                ranges::ssize(thsep_indices));
 3657|  11.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  61.3k|    {
 3590|  61.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  61.3k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  61.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.00k, False: 53.3k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.00k|            else {
 3601|  8.00k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.00k]
  ------------------
 3602|  8.00k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.00k|            }
 3608|  8.00k|        }
 3609|       |
 3610|  61.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.49k, False: 55.8k]
  ------------------
 3611|  5.49k|            value = T{0};
 3612|  5.49k|            return std::next(prefix_result.iterator);
 3613|  5.49k|        }
 3614|       |
 3615|  55.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  55.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 192, False: 43.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|    }                                                  \
  |  |  |  | 3938|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  43.7k|                    parse_integer_digits_without_thsep(
 3618|  43.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  43.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  43.7k|            auto buf = make_contiguous_buffer(
 3622|  43.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  43.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.31k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.31k|    }                                                  \
  |  |  |  | 3938|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  38.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  38.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  38.3k|            return ranges::next(
 3628|  38.3k|                prefix_result.iterator,
 3629|  38.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  43.7k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 748, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    748|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    748|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    748|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    748|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    748|    }                                                  \
  |  |  |  | 3938|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.2k|                parse_integer_digits_with_thsep(
 3641|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.2k|                    prefix_result.parsed_base, locale_options));
 3643|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.2k|            parse_digits_result;
 3645|       |
 3646|  11.2k|        auto nothsep_source_view =
 3647|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.2k|        SCN_TRY(
  ------------------
  |  | 3939|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 216, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|    }                                                  \
  |  |  |  | 3938|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.0k|            nothsep_source_it,
 3650|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.0k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.0k|        return ranges::next(
 3654|  11.0k|            prefix_result.iterator,
 3655|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.0k|                ranges::ssize(thsep_indices));
 3657|  11.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  64.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  64.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  64.4k|            auto rd = make_reader<T, char_type>();
 6237|  64.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  64.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 64.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  64.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 64.4k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  64.4k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  64.4k|                return impl(rd, range, value);
 6242|  64.4k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  64.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  64.4k|    {
 6162|  64.4k|        const bool need_skipped_width =
 6163|  64.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 64.4k]
  |  Branch (6163:33): [True: 0, False: 64.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  64.4k|        auto it = rng.begin();
 6167|  64.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  64.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 64.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  64.4k|        else {
 6176|  64.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.18k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.18k|    }                                                  \
  |  |  |  | 3938|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  62.2k|        }
 6179|  62.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  62.2k|        std::ptrdiff_t value_width = 0;
 6183|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 62.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  62.2k|        else {
 6199|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.07k, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.07k|    }                                                  \
  |  | 3938|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  56.1k|                                             specs, value, loc));
 6201|       |
 6202|  56.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 56.1k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  56.1k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  56.1k|        std::ptrdiff_t postfix_width = 0;
 6211|  56.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 54.6k, False: 1.52k]
  ------------------
 6212|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  54.6k|                                 value_width));
 6216|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  54.6k|        }
 6218|       |
 6219|  56.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  56.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  56.1k|            specs, prefix_width, value_width, postfix_width));
 6221|  56.1k|        return it;
 6222|  56.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  62.2k|    {
 3590|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.20k, False: 54.0k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.20k|            else {
 3601|  8.20k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.20k]
  ------------------
 3602|  8.20k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.20k|            }
 3608|  8.20k|        }
 3609|       |
 3610|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 56.7k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 44.5k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.79k, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.79k|    }                                                  \
  |  |  |  | 3938|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  39.7k|                    parse_integer_digits_without_thsep(
 3618|  39.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  39.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  39.7k|            auto buf = make_contiguous_buffer(
 3622|  39.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  39.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 406, False: 39.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|    }                                                  \
  |  |  |  | 3938|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.3k|            return ranges::next(
 3628|  39.3k|                prefix_result.iterator,
 3629|  39.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  39.7k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 760, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    760|    }                                                  \
  |  |  |  | 3938|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.4k|                parse_integer_digits_with_thsep(
 3641|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.4k|                    prefix_result.parsed_base, locale_options));
 3643|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.4k|            parse_digits_result;
 3645|       |
 3646|  11.4k|        auto nothsep_source_view =
 3647|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.4k|        SCN_TRY(
  ------------------
  |  | 3939|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 116, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|    }                                                  \
  |  |  |  | 3938|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.2k|            nothsep_source_it,
 3650|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.2k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.2k|        return ranges::next(
 3654|  11.2k|            prefix_result.iterator,
 3655|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.2k|                ranges::ssize(thsep_indices));
 3657|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  62.3k|    {
 3590|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  62.3k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 8.19k, False: 54.1k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  8.19k|            else {
 3601|  8.19k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 8.19k]
  ------------------
 3602|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  8.19k|            }
 3608|  8.19k|        }
 3609|       |
 3610|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 5.53k, False: 56.7k]
  ------------------
 3611|  5.53k|            value = T{0};
 3612|  5.53k|            return std::next(prefix_result.iterator);
 3613|  5.53k|        }
 3614|       |
 3615|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 44.6k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 222, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|    }                                                  \
  |  |  |  | 3938|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  44.3k|                    parse_integer_digits_without_thsep(
 3618|  44.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  44.3k|                        prefix_result.parsed_base));
 3620|       |
 3621|  44.3k|            auto buf = make_contiguous_buffer(
 3622|  44.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  44.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.12k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.12k|    }                                                  \
  |  |  |  | 3938|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  39.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  39.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  39.2k|            return ranges::next(
 3628|  39.2k|                prefix_result.iterator,
 3629|  39.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  44.3k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 806, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    806|    }                                                  \
  |  |  |  | 3938|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.3k|                parse_integer_digits_with_thsep(
 3641|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.3k|                    prefix_result.parsed_base, locale_options));
 3643|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.3k|            parse_digits_result;
 3645|       |
 3646|  11.3k|        auto nothsep_source_view =
 3647|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.3k|        SCN_TRY(
  ------------------
  |  | 3939|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 114, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    114|    }                                                  \
  |  |  |  | 3938|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.2k|            nothsep_source_it,
 3650|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.2k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.2k|        return ranges::next(
 3654|  11.2k|            prefix_result.iterator,
 3655|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.2k|                ranges::ssize(thsep_indices));
 3657|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  46.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  46.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  46.8k|            auto rd = make_reader<T, char_type>();
 6237|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  46.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 46.8k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  46.8k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  46.8k|                return impl(rd, range, value);
 6242|  46.8k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  46.8k|    {
 6162|  46.8k|        const bool need_skipped_width =
 6163|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 46.8k]
  |  Branch (6163:33): [True: 0, False: 46.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  46.8k|        auto it = rng.begin();
 6167|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 46.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  46.8k|        else {
 6176|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.14k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|    }                                                  \
  |  |  |  | 3938|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  45.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  45.7k|        }
 6179|  45.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  45.7k|        std::ptrdiff_t value_width = 0;
 6183|  45.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  45.7k|        else {
 6199|  45.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 7.11k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.11k|    }                                                  \
  |  | 3938|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  38.6k|                                             specs, value, loc));
 6201|       |
 6202|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 38.6k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  38.6k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6211|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.8k, False: 772]
  ------------------
 6212|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.8k|                                 value_width));
 6216|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.8k|        }
 6218|       |
 6219|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6221|  38.6k|        return it;
 6222|  38.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  45.7k|    {
 3590|  45.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  45.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  45.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  45.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.90k, False: 42.8k]
  ------------------
 3594|  2.90k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.90k|                return detail::unexpected_scan_error(
 3596|  2.90k|                    scan_error::invalid_scanned_value,
 3597|  2.90k|                    "Unexpected '-' sign when parsing an "
 3598|  2.90k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.90k|        }
 3609|       |
 3610|  45.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 40.9k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  40.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  40.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 29.8k, False: 11.0k]
  |  |  ------------------
  ------------------
 3616|  29.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.74k, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.74k|    }                                                  \
  |  |  |  | 3938|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  27.1k|                    parse_integer_digits_without_thsep(
 3618|  27.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  27.1k|                        prefix_result.parsed_base));
 3620|       |
 3621|  27.1k|            auto buf = make_contiguous_buffer(
 3622|  27.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  27.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 860, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    860|    }                                                  \
  |  |  |  | 3938|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.2k|            return ranges::next(
 3628|  26.2k|                prefix_result.iterator,
 3629|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  27.1k|        }
 3631|       |
 3632|  11.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.0k|#endif
 3638|       |
 3639|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 374, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    374|    }                                                  \
  |  |  |  | 3938|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.6k|                parse_integer_digits_with_thsep(
 3641|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.6k|                    prefix_result.parsed_base, locale_options));
 3643|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.6k|            parse_digits_result;
 3645|       |
 3646|  10.6k|        auto nothsep_source_view =
 3647|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.6k|        SCN_TRY(
  ------------------
  |  | 3939|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 232, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    232|    }                                                  \
  |  |  |  | 3938|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.4k|            nothsep_source_it,
 3650|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.4k|        return ranges::next(
 3654|  10.4k|            prefix_result.iterator,
 3655|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.4k|                ranges::ssize(thsep_indices));
 3657|  10.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  45.8k|    {
 3590|  45.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  45.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  45.8k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  45.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.89k, False: 42.9k]
  ------------------
 3594|  2.89k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.89k|                return detail::unexpected_scan_error(
 3596|  2.89k|                    scan_error::invalid_scanned_value,
 3597|  2.89k|                    "Unexpected '-' sign when parsing an "
 3598|  2.89k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.89k|        }
 3609|       |
 3610|  45.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.80k, False: 41.0k]
  ------------------
 3611|  4.80k|            value = T{0};
 3612|  4.80k|            return std::next(prefix_result.iterator);
 3613|  4.80k|        }
 3614|       |
 3615|  41.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  41.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 29.9k, False: 11.0k]
  |  |  ------------------
  ------------------
 3616|  29.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 38, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|    }                                                  \
  |  |  |  | 3938|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  29.9k|                    parse_integer_digits_without_thsep(
 3618|  29.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  29.9k|                        prefix_result.parsed_base));
 3620|       |
 3621|  29.9k|            auto buf = make_contiguous_buffer(
 3622|  29.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  29.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.66k, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.66k|    }                                                  \
  |  |  |  | 3938|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  26.2k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  26.2k|            return ranges::next(
 3628|  26.2k|                prefix_result.iterator,
 3629|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3630|  29.9k|        }
 3631|       |
 3632|  11.0k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.0k|#endif
 3638|       |
 3639|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 408, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|    }                                                  \
  |  |  |  | 3938|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  10.6k|                parse_integer_digits_with_thsep(
 3641|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  10.6k|                    prefix_result.parsed_base, locale_options));
 3643|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  10.6k|            parse_digits_result;
 3645|       |
 3646|  10.6k|        auto nothsep_source_view =
 3647|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  10.6k|        SCN_TRY(
  ------------------
  |  | 3939|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 228, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    228|    }                                                  \
  |  |  |  | 3938|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  10.4k|            nothsep_source_it,
 3650|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  10.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  10.4k|        return ranges::next(
 3654|  10.4k|            prefix_result.iterator,
 3655|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  10.4k|                ranges::ssize(thsep_indices));
 3657|  10.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  51.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  51.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  51.1k|            auto rd = make_reader<T, char_type>();
 6237|  51.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  51.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  51.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 51.1k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  51.1k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  51.1k|                return impl(rd, range, value);
 6242|  51.1k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  51.1k|    {
 6162|  51.1k|        const bool need_skipped_width =
 6163|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.1k]
  |  Branch (6163:33): [True: 0, False: 51.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.1k|        auto it = rng.begin();
 6167|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.1k|        else {
 6176|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.39k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|    }                                                  \
  |  |  |  | 3938|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.7k|        }
 6179|  49.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.7k|        std::ptrdiff_t value_width = 0;
 6183|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.7k|        else {
 6199|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.85k, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.85k|    }                                                  \
  |  | 3938|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  42.8k|                                             specs, value, loc));
 6201|       |
 6202|  42.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 42.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  42.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  42.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  42.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.9k, False: 946]
  ------------------
 6212|  41.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.9k|                                 value_width));
 6216|  41.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.9k|        }
 6218|       |
 6219|  42.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  42.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  42.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  42.8k|        return it;
 6222|  42.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  49.7k|    {
 3590|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  49.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.99k, False: 46.7k]
  ------------------
 3594|  2.99k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.99k|                return detail::unexpected_scan_error(
 3596|  2.99k|                    scan_error::invalid_scanned_value,
 3597|  2.99k|                    "Unexpected '-' sign when parsing an "
 3598|  2.99k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.99k|        }
 3609|       |
 3610|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 44.7k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.92k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.92k|    }                                                  \
  |  |  |  | 3938|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  29.8k|                    parse_integer_digits_without_thsep(
 3618|  29.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  29.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  29.8k|            auto buf = make_contiguous_buffer(
 3622|  29.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  29.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 416, False: 29.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    416|    }                                                  \
  |  |  |  | 3938|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.4k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.4k|            return ranges::next(
 3628|  29.4k|                prefix_result.iterator,
 3629|  29.4k|                ranges::distance(buf.view().begin(), result_it));
 3630|  29.8k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 406, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|    }                                                  \
  |  |  |  | 3938|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.5k|                parse_integer_digits_with_thsep(
 3641|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.5k|                    prefix_result.parsed_base, locale_options));
 3643|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.5k|            parse_digits_result;
 3645|       |
 3646|  11.5k|        auto nothsep_source_view =
 3647|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.5k|        SCN_TRY(
  ------------------
  |  | 3939|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 124, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    124|    }                                                  \
  |  |  |  | 3938|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.4k|            nothsep_source_it,
 3650|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.4k|        return ranges::next(
 3654|  11.4k|            prefix_result.iterator,
 3655|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.4k|                ranges::ssize(thsep_indices));
 3657|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  49.7k|    {
 3590|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  49.7k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 2.98k, False: 46.7k]
  ------------------
 3594|  2.98k|            if constexpr (!std::is_signed_v<T>) {
 3595|  2.98k|                return detail::unexpected_scan_error(
 3596|  2.98k|                    scan_error::invalid_scanned_value,
 3597|  2.98k|                    "Unexpected '-' sign when parsing an "
 3598|  2.98k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  2.98k|        }
 3609|       |
 3610|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.98k, False: 44.7k]
  ------------------
 3611|  4.98k|            value = T{0};
 3612|  4.98k|            return std::next(prefix_result.iterator);
 3613|  4.98k|        }
 3614|       |
 3615|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3616|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 40, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|    }                                                  \
  |  |  |  | 3938|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  32.7k|                    parse_integer_digits_without_thsep(
 3618|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  32.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  32.7k|            auto buf = make_contiguous_buffer(
 3622|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.41k, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.41k|    }                                                  \
  |  |  |  | 3938|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.3k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.3k|            return ranges::next(
 3628|  29.3k|                prefix_result.iterator,
 3629|  29.3k|                ranges::distance(buf.view().begin(), result_it));
 3630|  32.7k|        }
 3631|       |
 3632|  11.9k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3637|  11.9k|#endif
 3638|       |
 3639|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 444, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    444|    }                                                  \
  |  |  |  | 3938|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.5k|                parse_integer_digits_with_thsep(
 3641|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.5k|                    prefix_result.parsed_base, locale_options));
 3643|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.5k|            parse_digits_result;
 3645|       |
 3646|  11.5k|        auto nothsep_source_view =
 3647|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.5k|        SCN_TRY(
  ------------------
  |  | 3939|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 122, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    122|    }                                                  \
  |  |  |  | 3938|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.4k|            nothsep_source_it,
 3650|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.4k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.4k|        return ranges::next(
 3654|  11.4k|            prefix_result.iterator,
 3655|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.4k|                ranges::ssize(thsep_indices));
 3657|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  51.6k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  51.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  51.6k|            auto rd = make_reader<T, char_type>();
 6237|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  51.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  51.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 51.6k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  51.6k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  51.6k|                return impl(rd, range, value);
 6242|  51.6k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  51.6k|    {
 6162|  51.6k|        const bool need_skipped_width =
 6163|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.6k]
  |  Branch (6163:33): [True: 0, False: 51.6k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.6k|        auto it = rng.begin();
 6167|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.6k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.6k|        else {
 6176|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.50k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|    }                                                  \
  |  |  |  | 3938|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  50.1k|        }
 6179|  50.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  50.1k|        std::ptrdiff_t value_width = 0;
 6183|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  50.1k|        else {
 6199|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.74k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.74k|    }                                                  \
  |  | 3938|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  43.4k|                                             specs, value, loc));
 6201|       |
 6202|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 43.4k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  43.4k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6211|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 42.3k, False: 1.05k]
  ------------------
 6212|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  42.3k|                                 value_width));
 6216|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6217|  42.3k|        }
 6218|       |
 6219|  43.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  43.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  43.4k|            specs, prefix_width, value_width, postfix_width));
 6221|  43.4k|        return it;
 6222|  43.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  50.1k|    {
 3590|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.07k, False: 47.0k]
  ------------------
 3594|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.07k|                return detail::unexpected_scan_error(
 3596|  3.07k|                    scan_error::invalid_scanned_value,
 3597|  3.07k|                    "Unexpected '-' sign when parsing an "
 3598|  3.07k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.07k|        }
 3609|       |
 3610|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.1k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.97k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.97k|    }                                                  \
  |  |  |  | 3938|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  30.0k|                    parse_integer_digits_without_thsep(
 3618|  30.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  30.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  30.0k|            auto buf = make_contiguous_buffer(
 3622|  30.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  30.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  30.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  30.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  30.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 214, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    214|    }                                                  \
  |  |  |  | 3938|  30.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.8k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.8k|            return ranges::next(
 3628|  29.8k|                prefix_result.iterator,
 3629|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3630|  30.0k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 426, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    426|    }                                                  \
  |  |  |  | 3938|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.7k|                parse_integer_digits_with_thsep(
 3641|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.7k|                    prefix_result.parsed_base, locale_options));
 3643|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.7k|            parse_digits_result;
 3645|       |
 3646|  11.7k|        auto nothsep_source_view =
 3647|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.7k|        SCN_TRY(
  ------------------
  |  | 3939|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 60, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|    }                                                  \
  |  |  |  | 3938|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.6k|            nothsep_source_it,
 3650|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.6k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.6k|        return ranges::next(
 3654|  11.6k|            prefix_result.iterator,
 3655|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.6k|                ranges::ssize(thsep_indices));
 3657|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  50.2k|    {
 3590|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  50.2k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 3.07k, False: 47.1k]
  ------------------
 3594|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3595|  3.07k|                return detail::unexpected_scan_error(
 3596|  3.07k|                    scan_error::invalid_scanned_value,
 3597|  3.07k|                    "Unexpected '-' sign when parsing an "
 3598|  3.07k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  3.07k|        }
 3609|       |
 3610|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 4.99k, False: 45.2k]
  ------------------
 3611|  4.99k|            value = T{0};
 3612|  4.99k|            return std::next(prefix_result.iterator);
 3613|  4.99k|        }
 3614|       |
 3615|  45.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  45.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3616|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 40, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|    }                                                  \
  |  |  |  | 3938|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  33.0k|                    parse_integer_digits_without_thsep(
 3618|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  33.0k|                        prefix_result.parsed_base));
 3620|       |
 3621|  33.0k|            auto buf = make_contiguous_buffer(
 3622|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.27k, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.27k|    }                                                  \
  |  |  |  | 3938|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|  29.7k|                                        prefix_result.parsed_base));
 3626|       |
 3627|  29.7k|            return ranges::next(
 3628|  29.7k|                prefix_result.iterator,
 3629|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3630|  33.0k|        }
 3631|       |
 3632|  12.1k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3637|  12.1k|#endif
 3638|       |
 3639|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 466, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    466|    }                                                  \
  |  |  |  | 3938|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  11.7k|                parse_integer_digits_with_thsep(
 3641|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  11.7k|                    prefix_result.parsed_base, locale_options));
 3643|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  11.7k|            parse_digits_result;
 3645|       |
 3646|  11.7k|        auto nothsep_source_view =
 3647|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  11.7k|        SCN_TRY(
  ------------------
  |  | 3939|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 58, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|    }                                                  \
  |  |  |  | 3938|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  11.6k|            nothsep_source_it,
 3650|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  11.6k|                                prefix_result.parsed_base));
 3652|       |
 3653|  11.6k|        return ranges::next(
 3654|  11.6k|            prefix_result.iterator,
 3655|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  11.6k|                ranges::ssize(thsep_indices));
 3657|  11.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   422k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   422k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   422k|        else {
 1055|   422k|            return r.begin().contiguous_segment();
 1056|   422k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   422k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   399k|{
 2160|   399k|    auto it = range.begin();
 2161|   784k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 774k, False: 10.1k]
  ------------------
 2162|   774k|        const auto val =
 2163|   774k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   774k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   774k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 772k, False: 1.70k]
  |  |  ------------------
  ------------------
 2165|   772k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   772k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   772k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 389k, False: 383k]
  ------------------
 2168|   389k|                return it;
 2169|   389k|            }
 2170|   772k|        }
 2171|   385k|        it = val.iterator;
 2172|   385k|    }
 2173|       |
 2174|  10.1k|    return it;
 2175|   399k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   774k|{
 1998|   774k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   774k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   774k|    auto it = range.begin();
 2002|   774k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   774k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.70k, False: 772k]
  |  |  ------------------
  ------------------
 2005|  1.70k|        ++it;
 2006|  1.70k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.70k|        return {it, {}};
 2008|  1.70k|    }
 2009|       |
 2010|   772k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 767k, False: 4.89k]
  ------------------
 2011|   767k|        ++it;
 2012|   767k|        return {it, string_type(1, *range.begin())};
 2013|   767k|    }
 2014|       |
 2015|  4.89k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.89k|    return {it, string_type{range.begin(), it}};
 2017|   772k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.70k|{
 1265|  1.70k|    auto it = input.begin();
 1266|  2.86k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.03k, False: 825]
  ------------------
 1267|  2.03k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 882, False: 1.15k]
  ------------------
 1268|    882|            break;
 1269|    882|        }
 1270|  2.03k|    }
 1271|  1.70k|    return it;
 1272|  1.70k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.89k|    {
  283|  4.89k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.89k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.89k|    {
  252|  4.89k|        constexpr iter_difference_t<I> zero{0};
  253|  4.89k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 12.6k, False: 3.77k]
  |  Branch (255:30): [True: 11.5k, False: 1.11k]
  ------------------
  256|  11.5k|            ++i;
  257|  11.5k|            ++counter;
  258|  11.5k|        }
  259|       |
  260|  4.89k|        return counter;
  261|  4.89k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   774k|    {
 1989|   774k|        return !codepoint.empty();
 1990|   774k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   399k|{
 2181|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   399k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   422k|{
 3066|   422k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 422k, False: 0]
  ------------------
 3067|   422k|        auto it = read_while_classic_space(range);
 3068|   422k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   422k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 10.1k, False: 412k]
  |  |  ------------------
  ------------------
 3070|  10.1k|            return unexpected(e);
 3071|  10.1k|        }
 3072|       |
 3073|   412k|        return it;
 3074|   422k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   422k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   422k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   422k|    else {
 2225|   422k|        auto it = range.begin();
 2226|       |
 2227|   422k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   422k|            auto seg = get_contiguous_beginning(range);
 2229|   422k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   422k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 23.2k, False: 399k]
  ------------------
 2231|  23.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  23.2k|            }
 2233|   399k|            ranges::advance(it, seg.size());
 2234|   399k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   422k|            return detail::is_cp_space(cp);
 2238|   422k|        });
 2239|   422k|    }
 2240|   422k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   399k|        : m_fptr([](storage fn,
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
  752|   399k|          m_storage(std::addressof(f))
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   772k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   772k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   772k|              else {
  749|   772k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   772k|              }
  751|   772k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   772k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   772k|        else if constexpr (std::is_object_v<T>) {
  688|   772k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   772k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   772k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   772k|            return detail::is_cp_space(cp);
 2238|   772k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   399k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   135k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   135k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   135k|        auto beg = r.begin();
  991|   135k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 135k, False: 0]
  ------------------
  992|   135k|            return false;
  993|   135k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   135k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   100k|    else {
 1967|   100k|        auto it = range.begin();
 1968|   100k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 80.6k, False: 19.5k]
  ------------------
 1969|  80.6k|            return ranges::next(it, count);
 1970|  80.6k|        }
 1971|       |
 1972|  39.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 38.8k, False: 652]
  ------------------
 1973|  38.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 18.8k, False: 19.9k]
  ------------------
 1974|  18.8k|                return unexpected(eof_error::eof);
 1975|  18.8k|            }
 1976|  38.8k|        }
 1977|       |
 1978|    652|        return it;
 1979|  19.5k|    }
 1980|   100k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   100k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   100k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   100k|        else {
 1107|   100k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 100k, False: 0]
  ------------------
 1108|   100k|                return static_cast<size_t>(
 1109|   100k|                    r.begin().parent()->chars_available() -
 1110|   100k|                    r.begin().position());
 1111|   100k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   100k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   100k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   233k|    {
  763|   233k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   233k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   109k|    {
 6075|   109k|        const bool need_skipped_width =
 6076|   109k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 109k]
  |  Branch (6076:33): [True: 0, False: 109k]
  ------------------
 6077|   109k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   109k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 109k]
  ------------------
 6081|   109k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 109k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   109k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 109k, False: 0]
  |  Branch (6085:56): [True: 109k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   109k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 109k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.42k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|    }                                                  \
  |  |  |  | 3938|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   218k|                            make_eof_scan_error));
 6096|       |
 6097|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 108k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   108k|            return result_type{it, 0};
 6105|   218k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   109k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   107k|{
 2075|   107k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   107k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   107k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   107k|    else {
 2060|   107k|        auto first = range.begin();
 2061|   117k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 116k, False: 630]
  ------------------
 2062|   116k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 106k, False: 9.68k]
  ------------------
 2063|   106k|                return first;
 2064|   106k|            }
 2065|   116k|        }
 2066|    630|        return first;
 2067|   107k|    }
 2068|   107k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  33.8M|    {
   94|  33.8M|        iter_difference_t<I> counter{0};
   95|  69.3G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 69.2G, False: 33.8M]
  ------------------
   96|  69.2G|            ++i;
   97|  69.2G|            ++counter;
   98|  69.2G|        }
   99|  33.8M|        return counter;
  100|  33.8M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  41.4k|    {
 1879|  41.4k|        auto stdloc = loc.get<std::locale>();
 1880|  41.4k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  41.4k|        grouping = numpunct.grouping();
 1882|  41.4k|        thousands_sep =
 1883|  41.4k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 41.4k]
  ------------------
 1884|  41.4k|        decimal_point = numpunct.decimal_point();
 1885|  41.4k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  41.4k|{
 1816|  41.4k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 41.4k, False: 0]
  ------------------
 1817|  41.4k|        return std::use_facet<Facet>(stdloc);
 1818|  41.4k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  41.4k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   166k|{
 1945|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72, False: 166k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   166k|    return ranges::next(range.begin());
 1950|   166k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   327k|{
  951|   327k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.83k, False: 325k]
  |  |  ------------------
  ------------------
  952|  1.83k|        return eof_error::eof;
  953|  1.83k|    }
  954|   325k|    return eof_error::good;
  955|   327k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   463k|{
  945|   463k|    return is_range_eof(r.begin(), r.end());
  946|   463k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   463k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   463k|    {
  938|   463k|        return begin == end;
  939|   463k|    }
  940|   463k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   166k|    {
  296|   166k|        ++x;
  297|   166k|        return x;
  298|   166k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.58k|            else {
 3601|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.58k]
  ------------------
 3602|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.58k|            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.5k, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    352|                    parse_integer_digits_without_thsep(
 3618|    352|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    352|                        prefix_result.parsed_base));
 3620|       |
 3621|    352|            auto buf = make_contiguous_buffer(
 3622|    352|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    352|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 44, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     44|    }                                                  \
  |  |  |  | 3938|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    308|                                        prefix_result.parsed_base));
 3626|       |
 3627|    308|            return ranges::next(
 3628|    308|                prefix_result.iterator,
 3629|    308|                ranges::distance(buf.view().begin(), result_it));
 3630|    352|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.68k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3939|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.46k|            nothsep_source_it,
 3650|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.46k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.46k|        return ranges::next(
 3654|  1.46k|            prefix_result.iterator,
 3655|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.46k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3376|   133k|{
 3377|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   133k|        parse_integer_base_prefix(
 3382|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 328, False: 133k]
  ------------------
 3385|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 304]
  ------------------
 3386|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 208, False: 96]
  ------------------
 3387|    232|            digits_begin_it = base_prefix_begin_it;
 3388|    232|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    328|    }
 3393|   133k|    else {
 3394|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 282, False: 132k]
  ------------------
 3395|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 129k, False: 3.49k]
  ------------------
 3396|   129k|            digits_begin_it = base_prefix_begin_it;
 3397|   129k|        }
 3398|   133k|    }
 3399|       |
 3400|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 10.0k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   133k|{
 3258|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   133k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 10.0k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  10.0k|    auto& it = *r;
 3267|  10.0k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 9.82k, False: 179]
  ------------------
 3268|  9.82k|        return std::pair{it, sign_type::minus_sign};
 3269|  9.82k|    }
 3270|    179|    return std::pair{it, sign_type::plus_sign};
 3271|  10.0k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   133k|{
 2372|   133k|    auto it = read_code_unit(range);
 2373|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 266k, False: 123k]
  ------------------
 2378|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 10.0k, False: 256k]
  ------------------
 2379|  10.0k|            return *it;
 2380|  10.0k|        }
 2381|   266k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3343|   133k|{
 3344|   133k|    switch (base) {
 3345|  16.5k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.5k, False: 116k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.5k|                    false};
 3349|       |
 3350|  16.5k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.5k, False: 116k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.5k|            bool zero_parsed = false;
 3353|  16.5k|            auto it = apply_opt(
 3354|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.5k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 116k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.7k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.7k, False: 116k]
  ------------------
 3364|       |            // detect base
 3365|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  66.7k|        default:
  ------------------
  |  Branch (3367:9): [True: 66.7k, False: 66.6k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  66.7k|            return {range.begin(), base, false};
 3370|   133k|    }
 3371|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|  49.8k|{
 2391|  49.8k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.7k, False: 156]
  ------------------
 2392|  49.7k|        return range.begin();
 2393|  49.7k|    }
 2394|    156|    return *result;
 2395|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3294|  33.3k|{
 3295|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|    }                                                  \
  |  |  |  | 3938|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.2k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.2k|                    return ascii_tolower(a) ==
 2359|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.2k|                }))) {
 2361|  81.2k|            return unexpected(parse_error::error);
 2362|  81.2k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.2k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 54.7k, False: 27.4k]
  |  Branch (2345:29): [True: 27.1k, False: 288]
  ------------------
 2346|  81.9k|                return ch;
 2347|  81.9k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3308|  33.3k|{
 3309|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.3k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 328, False: 33.0k]
  ------------------
 3314|    328|        zero_parsed = true;
 3315|    328|        return *r;
 3316|    328|    }
 3317|       |
 3318|  33.0k|    return unexpected(parse_error::error);
 3319|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  33.3k|{
 2246|  33.3k|    auto it = read_code_unit(range);
 2247|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2252|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  32.9k|        return unexpected(parse_error::error);
 2254|  32.9k|    }
 2255|       |
 2256|    328|    return *it;
 2257|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3301|  33.4k|{
 3302|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3324|  16.7k|{
 3325|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.7k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.7k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.7k|    {
 3332|  16.7k|        bool zero_parsed{false};
 3333|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 172, False: 16.5k]
  ------------------
 3334|    172|            return {*r, 8, zero_parsed};
 3335|    172|        }
 3336|  16.7k|    }
 3337|  16.5k|    return {range.begin(), 10, false};
 3338|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|       |    if constexpr (ranges::contiguous_range<Range>) {
 3414|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3415|       |            return detail::unexpected_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found");
 3418|       |        }
 3419|       |        return range.end();
 3420|       |    }
 3421|   107k|    else {
 3422|   107k|        return read_while1_code_unit(range,
 3423|   107k|                                     [&](char_type ch) noexcept {
 3424|   107k|                                         return char_to_int(ch) < base;
 3425|   107k|                                     })
 3426|   107k|            .transform_error(map_parse_error_to_scan_error(
 3427|   107k|                scan_error::invalid_scanned_value,
 3428|   107k|                "Failed to parse integer: No digits found"));
 3429|   107k|    }
 3430|   107k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   107k|{
 2095|   107k|    auto it = read_while_code_unit(range, pred);
 2096|   107k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 104k, False: 2.75k]
  ------------------
 2097|   104k|        return unexpected(parse_error::error);
 2098|   104k|    }
 2099|  2.75k|    return it;
 2100|   107k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3423|   116k|                                     [&](char_type ch) noexcept {
 3424|   116k|                                         return char_to_int(ch) < base;
 3425|   116k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3440|  20.7k|{
 3441|  20.7k|    std::basic_string<CharT> output;
 3442|  20.7k|    std::string thsep_indices;
 3443|  20.7k|    auto it = range.begin();
 3444|  20.7k|    bool digit_matched = false;
 3445|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.8M, False: 306]
  ------------------
 3446|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.8M, False: 30.7k]
  ------------------
 3447|  33.8M|            thsep_indices.push_back(
 3448|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.8M|        }
 3450|  30.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 20.3k, False: 10.3k]
  ------------------
 3451|  20.3k|            break;
 3452|  20.3k|        }
 3453|  10.3k|        else {
 3454|  10.3k|            output.push_back(*it);
 3455|  10.3k|            digit_matched = true;
 3456|  10.3k|        }
 3457|  33.8M|    }
 3458|  20.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.8k, False: 8.80k]
  |  |  ------------------
  ------------------
 3459|  11.8k|        return detail::unexpected_scan_error(
 3460|  11.8k|            scan_error::invalid_scanned_value,
 3461|  11.8k|            "Failed to parse integer: No digits found");
 3462|  11.8k|    }
 3463|  8.80k|    return std::tuple{it, output, thsep_indices};
 3464|  20.7k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.75k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.75k|    else {
 1788|  2.75k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1057|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.75k|    }
 1790|  2.75k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.75k|    {
 1636|  2.75k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.75k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.75k|    {
 1720|  2.75k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.75k|                           ranges::common_range<Range>) {
 1737|  2.75k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.75k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.75k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.03k, False: 719]
  |  |  ------------------
  ------------------
 1740|  2.75k|                             detail::to_address(end_seg.end()))) {
 1741|  2.03k|                auto& str = m_storage.emplace();
 1742|  2.03k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.03k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.03k|                m_view = string_view_type{str};
 1745|  2.03k|                return;
 1746|  2.03k|            }
 1747|       |
 1748|    719|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    719|                                                            end_seg.data());
 1750|    719|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.75k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.14k|    {
 1681|  5.14k|        return m_view;
 1682|  5.14k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.75k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  10.1k|    {
 6117|  10.1k|        const bool need_skipped_width =
 6118|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 10.1k]
  |  Branch (6118:33): [True: 0, False: 10.1k]
  ------------------
 6119|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 10.1k]
  ------------------
 6122|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 10.1k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 10.1k, False: 0]
  ------------------
 6131|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 10.1k]
  ------------------
 6132|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  10.1k|        return result_type{rng.begin(), 0};
 6156|  10.1k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   100k|    if constexpr (ranges::sized_range<Range>) {
 1959|   100k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   100k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 18.8k, False: 81.2k]
  ------------------
 1961|  18.8k|            return unexpected(eof_error::eof);
 1962|  18.8k|        }
 1963|       |
 1964|  81.2k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   135k|{
 1998|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   135k|    auto it = range.begin();
 2002|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   135k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 135k, False: 0]
  ------------------
 2011|   135k|        ++it;
 2012|   135k|        return {it, string_type(1, *range.begin())};
 2013|   135k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   135k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   570k|{
  945|   570k|    return is_range_eof(r.begin(), r.end());
  946|   570k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   570k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   570k|    {
  938|   570k|        return begin == end;
  939|   570k|    }
  940|   570k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   135k|    {
 1989|   135k|        return !codepoint.empty();
 1990|   135k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   434k|{
  951|   434k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.98k, False: 432k]
  |  |  ------------------
  ------------------
  952|  1.98k|        return eof_error::eof;
  953|  1.98k|    }
  954|   432k|    return eof_error::good;
  955|   434k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   166k|{
 1945|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72, False: 166k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   166k|    return ranges::next(range.begin());
 1950|   166k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   166k|    {
  296|   166k|        ++x;
  297|   166k|        return x;
  298|   166k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.58k|            else {
 3601|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.58k]
  ------------------
 3602|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.58k|            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 18.0k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.5k, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    308|                                        prefix_result.parsed_base));
 3626|       |
 3627|    308|            return ranges::next(
 3628|    308|                prefix_result.iterator,
 3629|    308|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.15k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.15k|#endif
 3638|       |
 3639|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.68k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.68k|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3939|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.46k|            nothsep_source_it,
 3650|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.46k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.46k|        return ranges::next(
 3654|  1.46k|            prefix_result.iterator,
 3655|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.46k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3376|   133k|{
 3377|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|   133k|        parse_integer_base_prefix(
 3382|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 328, False: 133k]
  ------------------
 3385|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 24, False: 304]
  ------------------
 3386|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 208, False: 96]
  ------------------
 3387|    232|            digits_begin_it = base_prefix_begin_it;
 3388|    232|        }
 3389|     96|        else {
 3390|     96|            parsed_zero = false;
 3391|     96|        }
 3392|    328|    }
 3393|   133k|    else {
 3394|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 282, False: 132k]
  ------------------
 3395|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 129k, False: 3.49k]
  ------------------
 3396|   129k|            digits_begin_it = base_prefix_begin_it;
 3397|   129k|        }
 3398|   133k|    }
 3399|       |
 3400|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 123k, False: 10.0k]
  ------------------
 3401|   123k|        sign = sign_type::plus_sign;
 3402|   123k|    }
 3403|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   133k|{
 3258|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   133k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 123k, False: 10.0k]
  ------------------
 3260|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 123k, False: 0]
  ------------------
 3261|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   123k|        }
 3263|      0|        return unexpected(eof_error::eof);
 3264|   123k|    }
 3265|       |
 3266|  10.0k|    auto& it = *r;
 3267|  10.0k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 9.82k, False: 179]
  ------------------
 3268|  9.82k|        return std::pair{it, sign_type::minus_sign};
 3269|  9.82k|    }
 3270|    179|    return std::pair{it, sign_type::plus_sign};
 3271|  10.0k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   133k|{
 2372|   133k|    auto it = read_code_unit(range);
 2373|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 266k, False: 123k]
  ------------------
 2378|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 10.0k, False: 256k]
  ------------------
 2379|  10.0k|            return *it;
 2380|  10.0k|        }
 2381|   266k|    }
 2382|       |
 2383|   123k|    return unexpected(parse_error::error);
 2384|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|   133k|{
 3344|   133k|    switch (base) {
 3345|  16.5k|        case 2:
  ------------------
  |  Branch (3345:9): [True: 16.5k, False: 116k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|  16.5k|                    false};
 3349|       |
 3350|  16.5k|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 16.5k, False: 116k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|  16.5k|            bool zero_parsed = false;
 3353|  16.5k|            auto it = apply_opt(
 3354|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|  16.5k|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|  16.7k|        case 16:
  ------------------
  |  Branch (3358:9): [True: 16.7k, False: 116k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|  16.7k|                    false};
 3362|       |
 3363|  16.7k|        case 0:
  ------------------
  |  Branch (3363:9): [True: 16.7k, False: 116k]
  ------------------
 3364|       |            // detect base
 3365|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  66.7k|        default:
  ------------------
  |  Branch (3367:9): [True: 66.7k, False: 66.6k]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  66.7k|            return {range.begin(), base, false};
 3370|   133k|    }
 3371|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  49.8k|{
 2391|  49.8k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 49.7k, False: 156]
  ------------------
 2392|  49.7k|        return range.begin();
 2393|  49.7k|    }
 2394|    156|    return *result;
 2395|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3294|  33.3k|{
 3295|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3296|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   100k|{
 2331|   100k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   100k|    else {
 2344|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   100k|            if (ch < 'A' || ch > 'Z') {
 2346|   100k|                return ch;
 2347|   100k|            }
 2348|   100k|            return static_cast<char_type>(ch +
 2349|   100k|                                          static_cast<char_type>('a' - 'A'));
 2350|   100k|        };
 2351|       |
 2352|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  18.8k|    }                                                  \
  |  |  |  | 3938|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  81.2k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2357|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  81.2k|                    return ascii_tolower(a) ==
 2359|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2360|  81.2k|                }))) {
 2361|  81.2k|            return unexpected(parse_error::error);
 2362|  81.2k|        }
 2363|       |
 2364|      0|        return it;
 2365|  81.2k|    }
 2366|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 54.7k, False: 27.4k]
  |  Branch (2345:29): [True: 27.1k, False: 288]
  ------------------
 2346|  81.9k|                return ch;
 2347|  81.9k|            }
 2348|    288|            return static_cast<char_type>(ch +
 2349|    288|                                          static_cast<char_type>('a' - 'A'));
 2350|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3308|  33.3k|{
 3309|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3309:14): [True: 0, False: 33.3k]
  ------------------
 3310|      0|        return *r;
 3311|      0|    }
 3312|       |
 3313|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3313:14): [True: 328, False: 33.0k]
  ------------------
 3314|    328|        zero_parsed = true;
 3315|    328|        return *r;
 3316|    328|    }
 3317|       |
 3318|  33.0k|    return unexpected(parse_error::error);
 3319|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  33.3k|{
 2246|  33.3k|    auto it = read_code_unit(range);
 2247|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2252|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  32.9k|        return unexpected(parse_error::error);
 2254|  32.9k|    }
 2255|       |
 2256|    328|    return *it;
 2257|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3301|  33.4k|{
 3302|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3303|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3324|  16.7k|{
 3325|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3325:14): [True: 0, False: 16.7k]
  ------------------
 3326|      0|        return {*r, 16, false};
 3327|      0|    }
 3328|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3328:14): [True: 0, False: 16.7k]
  ------------------
 3329|      0|        return {*r, 2, false};
 3330|      0|    }
 3331|  16.7k|    {
 3332|  16.7k|        bool zero_parsed{false};
 3333|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3333:18): [True: 172, False: 16.5k]
  ------------------
 3334|    172|            return {*r, 8, zero_parsed};
 3335|    172|        }
 3336|  16.7k|    }
 3337|  16.5k|    return {range.begin(), 10, false};
 3338|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|   107k|{
 3411|   107k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|   107k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|   107k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 156, False: 107k]
  |  |  ------------------
  ------------------
 3415|    156|            return detail::unexpected_scan_error(
 3416|    156|                scan_error::invalid_scanned_value,
 3417|    156|                "Failed to parse integer: No digits found");
 3418|    156|        }
 3419|   107k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|   107k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3440|  20.7k|{
 3441|  20.7k|    std::basic_string<CharT> output;
 3442|  20.7k|    std::string thsep_indices;
 3443|  20.7k|    auto it = range.begin();
 3444|  20.7k|    bool digit_matched = false;
 3445|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3445:12): [True: 33.8M, False: 306]
  ------------------
 3446|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3446:13): [True: 33.8M, False: 30.7k]
  ------------------
 3447|  33.8M|            thsep_indices.push_back(
 3448|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3449|  33.8M|        }
 3450|  30.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3450:18): [True: 20.3k, False: 10.3k]
  ------------------
 3451|  20.3k|            break;
 3452|  20.3k|        }
 3453|  10.3k|        else {
 3454|  10.3k|            output.push_back(*it);
 3455|  10.3k|            digit_matched = true;
 3456|  10.3k|        }
 3457|  33.8M|    }
 3458|  20.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  986|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.8k, False: 8.80k]
  |  |  ------------------
  ------------------
 3459|  11.8k|        return detail::unexpected_scan_error(
 3460|  11.8k|            scan_error::invalid_scanned_value,
 3461|  11.8k|            "Failed to parse integer: No digits found");
 3462|  11.8k|    }
 3463|  8.80k|    return std::tuple{it, output, thsep_indices};
 3464|  20.7k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   107k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   107k|                  ranges::sized_range<Range>) {
 1785|   107k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   107k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   107k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   107k|    {
 1589|   107k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   109k|    {
 1602|   109k|        return sv;
 1603|   109k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   135k|{
 3066|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 135k, False: 0]
  ------------------
 3067|   135k|        auto it = read_while_classic_space(range);
 3068|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.63k, False: 133k]
  |  |  ------------------
  ------------------
 3070|  1.63k|            return unexpected(e);
 3071|  1.63k|        }
 3072|       |
 3073|   133k|        return it;
 3074|   135k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   135k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   135k|    else {
 2225|   135k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
 2239|   135k|    }
 2240|   135k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   135k|{
 2181|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   135k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   135k|{
 2160|   135k|    auto it = range.begin();
 2161|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 135k, False: 1.63k]
  ------------------
 2162|   135k|        const auto val =
 2163|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2165|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 133k, False: 2.37k]
  ------------------
 2168|   133k|                return it;
 2169|   133k|            }
 2170|   135k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.63k|    return it;
 2175|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  91.7k|    {
  304|  91.7k|        ranges::advance(x, n);
  305|  91.7k|        return x;
  306|  91.7k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  91.7k|    {
  268|  91.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  91.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  91.7k|    {
  181|  34.0M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 33.9M, False: 91.7k]
  ------------------
  182|  33.9M|            ++i;
  183|  33.9M|        }
  184|  91.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.2k|            auto rd = make_reader<T, char_type>();
 6237|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.2k|                return impl(rd, range, value);
 6242|  18.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   219k|    {
 3156|   219k|        reader_error_handler eh{};
 3157|   219k|        get_derived().check_specs_impl(specs, eh);
 3158|   219k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   219k|        return {};
 3163|   219k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3167|   219k|    {
 3168|   219k|        return static_cast<Derived&>(*this);
 3169|   219k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3535|   219k|    {
 3536|   219k|        detail::check_int_type_specs(specs, eh);
 3537|   219k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 246, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|    }                                                  \
  |  |  |  | 3938|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.74k|                                             specs, value, loc));
 6201|       |
 6202|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.74k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.74k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.64k, False: 98]
  ------------------
 6212|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.64k|                                 value_width));
 6216|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.64k|        }
 6218|       |
 6219|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.74k|        return it;
 6222|  1.74k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3150|   290k|    {
 3151|   290k|        return true;
 3152|   290k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.58k|            else {
 3601|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.58k]
  ------------------
 3602|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.58k|            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 17.9k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.8k, False: 4.14k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    344|                    parse_integer_digits_without_thsep(
 3618|    344|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    344|                        prefix_result.parsed_base));
 3620|       |
 3621|    344|            auto buf = make_contiguous_buffer(
 3622|    344|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    344|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 90, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     90|    }                                                  \
  |  |  |  | 3938|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|    344|        }
 3631|       |
 3632|  4.14k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.14k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.14k|#endif
 3638|       |
 3639|  4.14k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|    }                                                  \
  |  |  |  | 3938|  4.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3939|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 26, False: 1.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     26|    }                                                  \
  |  |  |  | 3938|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.44k|            nothsep_source_it,
 3650|  1.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.44k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.44k|        return ranges::next(
 3654|  1.44k|            prefix_result.iterator,
 3655|  1.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.44k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.58k, False: 16.4k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.58k|            else {
 3601|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.58k]
  ------------------
 3602|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.58k|            }
 3608|  1.58k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 38, False: 17.9k]
  ------------------
 3611|     38|            value = T{0};
 3612|     38|            return std::next(prefix_result.iterator);
 3613|     38|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.8k, False: 4.14k]
  |  |  ------------------
  ------------------
 3616|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 30, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.7k|                    parse_integer_digits_without_thsep(
 3618|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.7k|            auto buf = make_contiguous_buffer(
 3622|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.5k, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|    }                                                  \
  |  |  |  | 3938|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    254|                                        prefix_result.parsed_base));
 3626|       |
 3627|    254|            return ranges::next(
 3628|    254|                prefix_result.iterator,
 3629|    254|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.7k|        }
 3631|       |
 3632|  4.14k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.14k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.14k|#endif
 3638|       |
 3639|  4.14k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.67k|    }                                                  \
  |  |  |  | 3938|  4.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.47k|                parse_integer_digits_with_thsep(
 3641|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.47k|                    prefix_result.parsed_base, locale_options));
 3643|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.47k|            parse_digits_result;
 3645|       |
 3646|  1.47k|        auto nothsep_source_view =
 3647|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.47k|        SCN_TRY(
  ------------------
  |  | 3939|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 26, False: 1.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     26|    }                                                  \
  |  |  |  | 3938|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.44k|            nothsep_source_it,
 3650|  1.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.44k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.44k|        return ranges::next(
 3654|  1.44k|            prefix_result.iterator,
 3655|  1.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.44k|                ranges::ssize(thsep_indices));
 3657|  1.47k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.3k|            auto rd = make_reader<T, char_type>();
 6237|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.3k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.3k|                return impl(rd, range, value);
 6242|  18.3k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.81k|                                             specs, value, loc));
 6201|       |
 6202|  1.81k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.81k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.81k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.81k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.81k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.70k, False: 110]
  ------------------
 6212|  1.70k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.70k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.70k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.70k|                                 value_width));
 6216|  1.70k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.70k|        }
 6218|       |
 6219|  1.81k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.81k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.81k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.81k|        return it;
 6222|  1.81k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.4k|            auto rd = make_reader<T, char_type>();
 6237|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.4k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.4k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.4k|                return impl(rd, range, value);
 6242|  18.4k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.4k|    {
 6162|  18.4k|        const bool need_skipped_width =
 6163|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.4k]
  |  Branch (6163:33): [True: 0, False: 18.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.4k|        auto it = rng.begin();
 6167|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.4k|        else {
 6176|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.1k|        }
 6179|  18.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.1k|        std::ptrdiff_t value_width = 0;
 6183|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.1k|        else {
 6199|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.89k|                                             specs, value, loc));
 6201|       |
 6202|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.89k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.89k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.78k, False: 110]
  ------------------
 6212|  1.78k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.78k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.78k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.78k|                                 value_width));
 6216|  1.78k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.78k|        }
 6218|       |
 6219|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.89k|        return it;
 6222|  1.89k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.59k|            else {
 3601|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.59k]
  ------------------
 3602|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.59k|            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 44, False: 18.1k]
  ------------------
 3611|     44|            value = T{0};
 3612|     44|            return std::next(prefix_result.iterator);
 3613|     44|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.9k, False: 4.18k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.5k, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|    }                                                  \
  |  |  |  | 3938|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    374|                    parse_integer_digits_without_thsep(
 3618|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    374|                        prefix_result.parsed_base));
 3620|       |
 3621|    374|            auto buf = make_contiguous_buffer(
 3622|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    364|                                        prefix_result.parsed_base));
 3626|       |
 3627|    364|            return ranges::next(
 3628|    364|                prefix_result.iterator,
 3629|    364|                ranges::distance(buf.view().begin(), result_it));
 3630|    374|        }
 3631|       |
 3632|  4.18k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.18k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.18k|#endif
 3638|       |
 3639|  4.18k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.69k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|    }                                                  \
  |  |  |  | 3938|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3939|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.48k|            nothsep_source_it,
 3650|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.48k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.48k|        return ranges::next(
 3654|  1.48k|            prefix_result.iterator,
 3655|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.48k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.1k|    {
 3590|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.1k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|       |            if constexpr (!std::is_signed_v<T>) {
 3595|       |                return detail::unexpected_scan_error(
 3596|       |                    scan_error::invalid_scanned_value,
 3597|       |                    "Unexpected '-' sign when parsing an "
 3598|       |                    "unsigned value");
 3599|       |            }
 3600|  1.59k|            else {
 3601|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3601:21): [True: 0, False: 1.59k]
  ------------------
 3602|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3603|      0|                    return detail::unexpected_scan_error(
 3604|      0|                        scan_error::invalid_scanned_value,
 3605|      0|                        "'u'-option disallows negative values");
 3606|      0|                }
 3607|  1.59k|            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 44, False: 18.1k]
  ------------------
 3611|     44|            value = T{0};
 3612|     44|            return std::next(prefix_result.iterator);
 3613|     44|        }
 3614|       |
 3615|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.9k, False: 4.18k]
  |  |  ------------------
  ------------------
 3616|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|    }                                                  \
  |  |  |  | 3938|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.8k|                    parse_integer_digits_without_thsep(
 3618|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.8k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.8k|            auto buf = make_contiguous_buffer(
 3622|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.5k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|    }                                                  \
  |  |  |  | 3938|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    364|                                        prefix_result.parsed_base));
 3626|       |
 3627|    364|            return ranges::next(
 3628|    364|                prefix_result.iterator,
 3629|    364|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.8k|        }
 3631|       |
 3632|  4.18k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.18k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.18k|#endif
 3638|       |
 3639|  4.18k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 2.69k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.69k|    }                                                  \
  |  |  |  | 3938|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  1.48k|                parse_integer_digits_with_thsep(
 3641|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  1.48k|                    prefix_result.parsed_base, locale_options));
 3643|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  1.48k|            parse_digits_result;
 3645|       |
 3646|  1.48k|        auto nothsep_source_view =
 3647|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  1.48k|        SCN_TRY(
  ------------------
  |  | 3939|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  1.48k|            nothsep_source_it,
 3650|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  1.48k|                                prefix_result.parsed_base));
 3652|       |
 3653|  1.48k|        return ranges::next(
 3654|  1.48k|            prefix_result.iterator,
 3655|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  1.48k|                ranges::ssize(thsep_indices));
 3657|  1.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.1k|            auto rd = make_reader<T, char_type>();
 6237|  18.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.1k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.1k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.1k|                return impl(rd, range, value);
 6242|  18.1k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.1k|    {
 6162|  18.1k|        const bool need_skipped_width =
 6163|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.1k]
  |  Branch (6163:33): [True: 0, False: 18.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.1k|        auto it = rng.begin();
 6167|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.1k|        else {
 6176|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  17.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  17.9k|        }
 6179|  17.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  17.9k|        std::ptrdiff_t value_width = 0;
 6183|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 17.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  17.9k|        else {
 6199|  17.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.68k|                                             specs, value, loc));
 6201|       |
 6202|  1.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.68k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.68k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.61k, False: 72]
  ------------------
 6212|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.61k|                                 value_width));
 6216|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.61k|        }
 6218|       |
 6219|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.68k|        return it;
 6222|  1.68k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  17.9k|    {
 3590|  17.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  17.9k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  17.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.57k|                return detail::unexpected_scan_error(
 3596|  1.57k|                    scan_error::invalid_scanned_value,
 3597|  1.57k|                    "Unexpected '-' sign when parsing an "
 3598|  1.57k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.57k|        }
 3609|       |
 3610|  17.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.3k, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    288|                    parse_integer_digits_without_thsep(
 3618|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    288|                        prefix_result.parsed_base));
 3620|       |
 3621|    288|            auto buf = make_contiguous_buffer(
 3622|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 70, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     70|    }                                                  \
  |  |  |  | 3938|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|    288|        }
 3631|       |
 3632|  4.30k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.30k|#endif
 3638|       |
 3639|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.27k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.27k|    }                                                  \
  |  |  |  | 3938|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.02k|                parse_integer_digits_with_thsep(
 3641|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.02k|                    prefix_result.parsed_base, locale_options));
 3643|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.02k|            parse_digits_result;
 3645|       |
 3646|  3.02k|        auto nothsep_source_view =
 3647|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.02k|        SCN_TRY(
  ------------------
  |  | 3939|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.00k|            nothsep_source_it,
 3650|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.00k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.00k|        return ranges::next(
 3654|  3.00k|            prefix_result.iterator,
 3655|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.00k|                ranges::ssize(thsep_indices));
 3657|  3.02k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  17.9k|    {
 3590|  17.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  17.9k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  17.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.57k|                return detail::unexpected_scan_error(
 3596|  1.57k|                    scan_error::invalid_scanned_value,
 3597|  1.57k|                    "Unexpected '-' sign when parsing an "
 3598|  1.57k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.57k|        }
 3609|       |
 3610|  17.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    218|                                        prefix_result.parsed_base));
 3626|       |
 3627|    218|            return ranges::next(
 3628|    218|                prefix_result.iterator,
 3629|    218|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  4.30k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.30k|#endif
 3638|       |
 3639|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.27k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.27k|    }                                                  \
  |  |  |  | 3938|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.02k|                parse_integer_digits_with_thsep(
 3641|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.02k|                    prefix_result.parsed_base, locale_options));
 3643|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.02k|            parse_digits_result;
 3645|       |
 3646|  3.02k|        auto nothsep_source_view =
 3647|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.02k|        SCN_TRY(
  ------------------
  |  | 3939|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 22, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|    }                                                  \
  |  |  |  | 3938|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.00k|            nothsep_source_it,
 3650|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.00k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.00k|        return ranges::next(
 3654|  3.00k|            prefix_result.iterator,
 3655|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.00k|                ranges::ssize(thsep_indices));
 3657|  3.02k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.2k|            auto rd = make_reader<T, char_type>();
 6237|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.2k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.2k|                return impl(rd, range, value);
 6242|  18.2k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.73k|                                             specs, value, loc));
 6201|       |
 6202|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.73k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.73k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.66k, False: 72]
  ------------------
 6212|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.66k|                                 value_width));
 6216|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.66k|        }
 6218|       |
 6219|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.73k|        return it;
 6222|  1.73k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.57k|                return detail::unexpected_scan_error(
 3596|  1.57k|                    scan_error::invalid_scanned_value,
 3597|  1.57k|                    "Unexpected '-' sign when parsing an "
 3598|  1.57k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.57k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.6k, False: 4.31k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.3k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.3k|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    294|                    parse_integer_digits_without_thsep(
 3618|    294|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    294|                        prefix_result.parsed_base));
 3620|       |
 3621|    294|            auto buf = make_contiguous_buffer(
 3622|    294|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    294|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 42, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|    }                                                  \
  |  |  |  | 3938|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|    294|        }
 3631|       |
 3632|  4.31k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.31k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.31k|#endif
 3638|       |
 3639|  4.31k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.28k, False: 3.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|    }                                                  \
  |  |  |  | 3938|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.03k|                parse_integer_digits_with_thsep(
 3641|  3.03k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.03k|                    prefix_result.parsed_base, locale_options));
 3643|  3.03k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.03k|            parse_digits_result;
 3645|       |
 3646|  3.03k|        auto nothsep_source_view =
 3647|  3.03k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.03k|        SCN_TRY(
  ------------------
  |  | 3939|  3.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 3.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  3.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.01k|            nothsep_source_it,
 3650|  3.01k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.01k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.01k|        return ranges::next(
 3654|  3.01k|            prefix_result.iterator,
 3655|  3.01k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.01k|                ranges::ssize(thsep_indices));
 3657|  3.03k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.57k, False: 16.4k]
  ------------------
 3594|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.57k|                return detail::unexpected_scan_error(
 3596|  1.57k|                    scan_error::invalid_scanned_value,
 3597|  1.57k|                    "Unexpected '-' sign when parsing an "
 3598|  1.57k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.57k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 17.9k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.6k, False: 4.31k]
  |  |  ------------------
  ------------------
 3616|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.6k|                    parse_integer_digits_without_thsep(
 3618|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.6k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.6k|            auto buf = make_contiguous_buffer(
 3622|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    252|                                        prefix_result.parsed_base));
 3626|       |
 3627|    252|            return ranges::next(
 3628|    252|                prefix_result.iterator,
 3629|    252|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.6k|        }
 3631|       |
 3632|  4.31k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.31k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.31k|#endif
 3638|       |
 3639|  4.31k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.28k, False: 3.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.28k|    }                                                  \
  |  |  |  | 3938|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.03k|                parse_integer_digits_with_thsep(
 3641|  3.03k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.03k|                    prefix_result.parsed_base, locale_options));
 3643|  3.03k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.03k|            parse_digits_result;
 3645|       |
 3646|  3.03k|        auto nothsep_source_view =
 3647|  3.03k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.03k|        SCN_TRY(
  ------------------
  |  | 3939|  3.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 3.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  3.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.01k|            nothsep_source_it,
 3650|  3.01k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.01k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.01k|        return ranges::next(
 3654|  3.01k|            prefix_result.iterator,
 3655|  3.01k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.01k|                ranges::ssize(thsep_indices));
 3657|  3.03k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  18.3k|            auto rd = make_reader<T, char_type>();
 6237|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 18.3k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  18.3k|                return impl(rd, range, value);
 6242|  18.3k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.79k|                                             specs, value, loc));
 6201|       |
 6202|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.79k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.79k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.72k, False: 72]
  ------------------
 6212|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.72k|                                 value_width));
 6216|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.72k|        }
 6218|       |
 6219|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.79k|        return it;
 6222|  1.79k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|  1.59k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.59k|                return detail::unexpected_scan_error(
 3596|  1.59k|                    scan_error::invalid_scanned_value,
 3597|  1.59k|                    "Unexpected '-' sign when parsing an "
 3598|  1.59k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.7k, False: 4.34k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|    306|                    parse_integer_digits_without_thsep(
 3618|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|    306|                        prefix_result.parsed_base));
 3620|       |
 3621|    306|            auto buf = make_contiguous_buffer(
 3622|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3939|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|    }                                                  \
  |  |  |  | 3938|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|    306|        }
 3631|       |
 3632|  4.34k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.34k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.34k|#endif
 3638|       |
 3639|  4.34k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.29k, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|    }                                                  \
  |  |  |  | 3938|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.05k|                parse_integer_digits_with_thsep(
 3641|  3.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.05k|                    prefix_result.parsed_base, locale_options));
 3643|  3.05k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.05k|            parse_digits_result;
 3645|       |
 3646|  3.05k|        auto nothsep_source_view =
 3647|  3.05k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.05k|        SCN_TRY(
  ------------------
  |  | 3939|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.05k|            nothsep_source_it,
 3650|  3.05k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.05k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.05k|        return ranges::next(
 3654|  3.05k|            prefix_result.iterator,
 3655|  3.05k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.05k|                ranges::ssize(thsep_indices));
 3657|  3.05k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3589|  18.0k|    {
 3590|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3591|  18.0k|                                   .transform_error(make_eof_scan_error));
 3592|       |
 3593|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3593:13): [True: 1.59k, False: 16.5k]
  ------------------
 3594|  1.59k|            if constexpr (!std::is_signed_v<T>) {
 3595|  1.59k|                return detail::unexpected_scan_error(
 3596|  1.59k|                    scan_error::invalid_scanned_value,
 3597|  1.59k|                    "Unexpected '-' sign when parsing an "
 3598|  1.59k|                    "unsigned value");
 3599|       |            }
 3600|       |            else {
 3601|       |                if (specs.type ==
 3602|       |                    detail::presentation_type::int_unsigned_decimal) {
 3603|       |                    return detail::unexpected_scan_error(
 3604|       |                        scan_error::invalid_scanned_value,
 3605|       |                        "'u'-option disallows negative values");
 3606|       |                }
 3607|       |            }
 3608|  1.59k|        }
 3609|       |
 3610|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3610:13): [True: 36, False: 18.0k]
  ------------------
 3611|     36|            value = T{0};
 3612|     36|            return std::next(prefix_result.iterator);
 3613|     36|        }
 3614|       |
 3615|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  985|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 13.7k, False: 4.34k]
  |  |  ------------------
  ------------------
 3616|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 10, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|    }                                                  \
  |  |  |  | 3938|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3617|  13.7k|                    parse_integer_digits_without_thsep(
 3618|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3619|  13.7k|                        prefix_result.parsed_base));
 3620|       |
 3621|  13.7k|            auto buf = make_contiguous_buffer(
 3622|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3623|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3624|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3625|    302|                                        prefix_result.parsed_base));
 3626|       |
 3627|    302|            return ranges::next(
 3628|    302|                prefix_result.iterator,
 3629|    302|                ranges::distance(buf.view().begin(), result_it));
 3630|  13.7k|        }
 3631|       |
 3632|  4.34k|        auto locale_options =
 3633|       |#if SCN_DISABLE_LOCALE
 3634|       |            localized_number_formatting_options<CharT>{};
 3635|       |#else
 3636|  4.34k|            localized_number_formatting_options<CharT>{loc};
 3637|  4.34k|#endif
 3638|       |
 3639|  4.34k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3939|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.29k, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|    }                                                  \
  |  |  |  | 3938|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  3.05k|                parse_integer_digits_with_thsep(
 3641|  3.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3642|  3.05k|                    prefix_result.parsed_base, locale_options));
 3643|  3.05k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3644|  3.05k|            parse_digits_result;
 3645|       |
 3646|  3.05k|        auto nothsep_source_view =
 3647|  3.05k|            std::basic_string_view<CharT>{nothsep_source};
 3648|  3.05k|        SCN_TRY(
  ------------------
  |  | 3939|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3649|  3.05k|            nothsep_source_it,
 3650|  3.05k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3651|  3.05k|                                prefix_result.parsed_base));
 3652|       |
 3653|  3.05k|        return ranges::next(
 3654|  3.05k|            prefix_result.iterator,
 3655|  3.05k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3656|  3.05k|                ranges::ssize(thsep_indices));
 3657|  3.05k|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   135k|{
 2160|   135k|    auto it = range.begin();
 2161|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 135k, False: 1.63k]
  ------------------
 2162|   135k|        const auto val =
 2163|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2165|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 133k, False: 2.37k]
  ------------------
 2168|   133k|                return it;
 2169|   133k|            }
 2170|   135k|        }
 2171|  2.37k|        it = val.iterator;
 2172|  2.37k|    }
 2173|       |
 2174|  1.63k|    return it;
 2175|   135k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   135k|{
 1998|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   135k|    auto it = range.begin();
 2002|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   135k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 135k, False: 0]
  ------------------
 2011|   135k|        ++it;
 2012|   135k|        return {it, string_type(1, *range.begin())};
 2013|   135k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   135k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   135k|    {
 1989|   135k|        return !codepoint.empty();
 1990|   135k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   135k|{
 2181|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   135k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   135k|{
 3066|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 135k, False: 0]
  ------------------
 3067|   135k|        auto it = read_while_classic_space(range);
 3068|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.63k, False: 133k]
  |  |  ------------------
  ------------------
 3070|  1.63k|            return unexpected(e);
 3071|  1.63k|        }
 3072|       |
 3073|   133k|        return it;
 3074|   135k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   135k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   135k|    else {
 2225|   135k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
 2239|   135k|    }
 2240|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   135k|            return detail::is_cp_space(cp);
 2238|   135k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  15.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  15.8k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  15.8k|            auto rd = make_reader<T, char_type>();
 5916|  15.8k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  15.8k|    {
 5903|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 390, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    390|    }                                                  \
  |  |  |  | 3938|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.4k|                        .transform_error(make_eof_scan_error));
 5905|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  95.4k|{
 5835|  95.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.86k, False: 93.6k]
  |  |  ------------------
  ------------------
 5836|  1.86k|        return unexpected(e);
 5837|  1.86k|    }
 5838|       |
 5839|  93.6k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 93.6k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  93.6k|    return skip_classic_whitespace(range);
 5844|  93.6k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  15.4k|    {
 3579|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.4k|        return read_default_with_base(range, value, 10);
 3581|  15.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  18.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.3k|            auto rd = make_reader<T, char_type>();
 5916|  18.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.3k|    {
 5903|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 504, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    504|    }                                                  \
  |  |  |  | 3938|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.8k|                        .transform_error(make_eof_scan_error));
 5905|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  17.8k|    {
 3579|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.8k|        return read_default_with_base(range, value, 10);
 3581|  17.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  18.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  18.6k|            auto rd = make_reader<T, char_type>();
 5916|  18.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  18.6k|    {
 5903|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 552, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    552|    }                                                  \
  |  |  |  | 3938|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  18.1k|                        .transform_error(make_eof_scan_error));
 5905|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  18.1k|    {
 3579|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  18.1k|        return read_default_with_base(range, value, 10);
 3581|  18.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  13.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  13.2k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  13.2k|            auto rd = make_reader<T, char_type>();
 5916|  13.2k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  13.2k|    {
 5903|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 279, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    279|    }                                                  \
  |  |  |  | 3938|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  12.9k|                        .transform_error(make_eof_scan_error));
 5905|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  12.9k|    {
 3579|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  12.9k|        return read_default_with_base(range, value, 10);
 3581|  12.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  14.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.5k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.5k|            auto rd = make_reader<T, char_type>();
 5916|  14.5k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.5k|    {
 5903|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 342, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    342|    }                                                  \
  |  |  |  | 3938|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.2k|                        .transform_error(make_eof_scan_error));
 5905|  14.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.2k|    {
 3579|  14.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.2k|        return read_default_with_base(range, value, 10);
 3581|  14.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  14.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  14.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  14.7k|            auto rd = make_reader<T, char_type>();
 5916|  14.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  14.7k|    {
 5903|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 369, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    369|    }                                                  \
  |  |  |  | 3938|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  15.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  15.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  15.8k|            auto rd = make_reader<T, char_type>();
 5920|  15.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 15.8k, False: 0]
  ------------------
 5921|  15.8k|                return impl(rd, range, value);
 5922|  15.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  15.8k|    {
 5903|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 372, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    372|    }                                                  \
  |  |  |  | 3938|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  15.4k|                        .transform_error(make_eof_scan_error));
 5905|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  94.1k|{
 5835|  94.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.85k, False: 92.2k]
  |  |  ------------------
  ------------------
 5836|  1.85k|        return unexpected(e);
 5837|  1.85k|    }
 5838|       |
 5839|  92.2k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 92.2k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  92.2k|    return skip_classic_whitespace(range);
 5844|  92.2k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  15.4k|    {
 3579|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  15.4k|        return read_default_with_base(range, value, 10);
 3581|  15.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  15.4k|    {
 3543|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  29.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.11k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.11k|    }                                                  \
  |  |  |  | 3938|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  29.8k|                parse_integer_digits_without_thsep(
 3562|  29.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  29.8k|                    prefix_result.parsed_base));
 3564|       |
 3565|  29.8k|        auto buf = make_contiguous_buffer(
 3566|  29.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  29.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 576, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    576|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.8k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.8k|        return ranges::next(prefix_result.iterator,
 3572|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  29.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  17.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  17.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  17.7k|            auto rd = make_reader<T, char_type>();
 5920|  17.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 17.7k, False: 0]
  ------------------
 5921|  17.7k|                return impl(rd, range, value);
 5922|  17.7k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  17.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  17.7k|    {
 5903|  17.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 477, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    477|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    477|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    477|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    477|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    477|    }                                                  \
  |  |  |  | 3938|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.2k|                        .transform_error(make_eof_scan_error));
 5905|  17.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  17.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.2k|    {
 3579|  17.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  17.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.2k|        return read_default_with_base(range, value, 10);
 3581|  17.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.2k|    {
 3543|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.2k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.2k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  33.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.29k, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.29k|    }                                                  \
  |  |  |  | 3938|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  33.2k|                parse_integer_digits_without_thsep(
 3562|  33.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  33.2k|                    prefix_result.parsed_base));
 3564|       |
 3565|  33.2k|        auto buf = make_contiguous_buffer(
 3566|  33.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  33.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 288, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|    }                                                  \
  |  |  |  | 3938|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  15.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  15.7k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  15.7k|        return ranges::next(prefix_result.iterator,
 3572|  15.7k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  33.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  18.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  18.0k|            auto rd = make_reader<T, char_type>();
 5920|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 18.0k, False: 0]
  ------------------
 5921|  18.0k|                return impl(rd, range, value);
 5922|  18.0k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  18.0k|    {
 5903|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 522, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    522|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  17.5k|                        .transform_error(make_eof_scan_error));
 5905|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  18.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  17.5k|    {
 3579|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  17.5k|        return read_default_with_base(range, value, 10);
 3581|  17.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  17.5k|    {
 3543|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.5k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.5k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.37k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|    }                                                  \
  |  |  |  | 3938|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  33.7k|                parse_integer_digits_without_thsep(
 3562|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  33.7k|                    prefix_result.parsed_base));
 3564|       |
 3565|  33.7k|        auto buf = make_contiguous_buffer(
 3566|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 171, False: 16.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    171|    }                                                  \
  |  |  |  | 3938|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.0k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.0k|        return ranges::next(prefix_result.iterator,
 3572|  16.0k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  33.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  13.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  13.2k|            auto rd = make_reader<T, char_type>();
 5920|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 13.2k, False: 0]
  ------------------
 5921|  13.2k|                return impl(rd, range, value);
 5922|  13.2k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  13.2k|    {
 5903|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 267, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    267|    }                                                  \
  |  |  |  | 3938|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  12.9k|                        .transform_error(make_eof_scan_error));
 5905|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  12.9k|    {
 3579|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  12.9k|        return read_default_with_base(range, value, 10);
 3581|  12.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  12.9k|    {
 3543|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  12.9k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3547|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 756, False: 12.1k]
  ------------------
 3548|    756|                return detail::unexpected_scan_error(
 3549|    756|                    scan_error::invalid_scanned_value,
 3550|    756|                    "Unexpected '-' sign when parsing an "
 3551|    756|                    "unsigned value");
 3552|    756|            }
 3553|  12.9k|        }
 3554|       |
 3555|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 12.9k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 759, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    759|    }                                                  \
  |  |  |  | 3938|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  25.1k|                parse_integer_digits_without_thsep(
 3562|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  25.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  25.1k|        auto buf = make_contiguous_buffer(
 3566|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 282, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    282|    }                                                  \
  |  |  |  | 3938|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  11.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  11.9k|        return ranges::next(prefix_result.iterator,
 3572|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.5k|            auto rd = make_reader<T, char_type>();
 5920|  14.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.5k, False: 0]
  ------------------
 5921|  14.5k|                return impl(rd, range, value);
 5922|  14.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.5k|    {
 5903|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 324, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|    }                                                  \
  |  |  |  | 3938|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.1k|                        .transform_error(make_eof_scan_error));
 5905|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.1k|    {
 3579|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.1k|        return read_default_with_base(range, value, 10);
 3581|  14.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.1k|    {
 3543|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.1k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 774, False: 13.4k]
  ------------------
 3548|    774|                return detail::unexpected_scan_error(
 3549|    774|                    scan_error::invalid_scanned_value,
 3550|    774|                    "Unexpected '-' sign when parsing an "
 3551|    774|                    "unsigned value");
 3552|    774|            }
 3553|  14.1k|        }
 3554|       |
 3555|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.1k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  27.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 813, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    813|    }                                                  \
  |  |  |  | 3938|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  27.5k|                parse_integer_digits_without_thsep(
 3562|  27.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  27.5k|                    prefix_result.parsed_base));
 3564|       |
 3565|  27.5k|        auto buf = make_contiguous_buffer(
 3566|  27.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  27.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 153, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    153|    }                                                  \
  |  |  |  | 3938|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.2k|        return ranges::next(prefix_result.iterator,
 3572|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  27.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  14.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  14.6k|            auto rd = make_reader<T, char_type>();
 5920|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 14.6k, False: 0]
  ------------------
 5921|  14.6k|                return impl(rd, range, value);
 5922|  14.6k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  14.6k|    {
 5903|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 351, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|    }                                                  \
  |  |  |  | 3938|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  14.3k|                        .transform_error(make_eof_scan_error));
 5905|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  14.3k|    {
 3579|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  14.3k|        return read_default_with_base(range, value, 10);
 3581|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 798, False: 13.5k]
  ------------------
 3548|    798|                return detail::unexpected_scan_error(
 3549|    798|                    scan_error::invalid_scanned_value,
 3550|    798|                    "Unexpected '-' sign when parsing an "
 3551|    798|                    "unsigned value");
 3552|    798|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  27.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 828, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    828|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  27.8k|                parse_integer_digits_without_thsep(
 3562|  27.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  27.8k|                    prefix_result.parsed_base));
 3564|       |
 3565|  27.8k|        auto buf = make_contiguous_buffer(
 3566|  27.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  27.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 87, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|    }                                                  \
  |  |  |  | 3938|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.4k|        return ranges::next(prefix_result.iterator,
 3572|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  27.8k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   354k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   354k|    static_cast<    \
  |  | 1056|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   354k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   354k|          m_current(m_range.begin())
 2988|   354k|    {
 2989|   354k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   610k|    {
 2998|   610k|        return m_range.end();
 2999|   610k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   280k|    {
 3013|   280k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   280k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   280k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 280k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   280k|        }
 3019|   280k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   280k|    static_cast<    \
  |  | 1056|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   280k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   330k|    {
 3003|   330k|        return ranges::subrange{begin(), end()};
 3004|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6226|  53.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  53.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  53.2k|            auto rd = make_reader<T, char_type>();
 6232|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  53.2k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  53.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  53.2k|    {
 6162|  53.2k|        const bool need_skipped_width =
 6163|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 53.2k]
  |  Branch (6163:33): [True: 0, False: 53.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  53.2k|        auto it = rng.begin();
 6167|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 53.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  53.2k|        else {
 6176|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.34k, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.34k|    }                                                  \
  |  |  |  | 3938|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  51.8k|            std::tie(it, prefix_width) = prefix_result;
 6178|  51.8k|        }
 6179|  51.8k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  51.8k|        std::ptrdiff_t value_width = 0;
 6183|  51.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.8k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  51.8k|        else {
 6199|  51.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.90k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.90k|    }                                                  \
  |  | 3938|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  44.9k|                                             specs, value, loc));
 6201|       |
 6202|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 44.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  44.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 43.9k, False: 1.00k]
  ------------------
 6212|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  43.9k|                                 value_width));
 6216|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6217|  43.9k|        }
 6218|       |
 6219|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  44.9k|        return it;
 6222|  44.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   330k|    {
 6075|   330k|        const bool need_skipped_width =
 6076|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 330k]
  |  Branch (6076:33): [True: 0, False: 330k]
  ------------------
 6077|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 330k]
  ------------------
 6081|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 330k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 330k, False: 0]
  |  Branch (6085:56): [True: 330k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 330k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 8.74k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  8.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  8.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  8.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  8.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.74k|    }                                                  \
  |  |  |  | 3938|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   651k|                            make_eof_scan_error));
 6096|       |
 6097|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 321k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   321k|            return result_type{it, 0};
 6105|   651k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   274k|    {
 6117|   274k|        const bool need_skipped_width =
 6118|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 274k]
  |  Branch (6118:33): [True: 0, False: 274k]
  ------------------
 6119|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 274k]
  ------------------
 6122|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 274k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 274k, False: 0]
  ------------------
 6131|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 274k]
  ------------------
 6132|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   274k|        return result_type{rng.begin(), 0};
 6156|   274k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  63.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  63.1k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  63.1k|            auto rd = make_reader<T, char_type>();
 6232|  63.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  63.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 63.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  63.1k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  63.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  63.1k|    {
 6162|  63.1k|        const bool need_skipped_width =
 6163|  63.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 63.1k]
  |  Branch (6163:33): [True: 0, False: 63.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  63.1k|        auto it = rng.begin();
 6167|  63.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 63.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  63.1k|        else {
 6176|  63.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.78k, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.78k|    }                                                  \
  |  |  |  | 3938|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  61.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  61.3k|        }
 6179|  61.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  61.3k|        std::ptrdiff_t value_width = 0;
 6183|  61.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 61.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  61.3k|        else {
 6199|  61.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.46k, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.46k|    }                                                  \
  |  | 3938|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  54.8k|                                             specs, value, loc));
 6201|       |
 6202|  54.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 54.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  54.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  54.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  54.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 53.5k, False: 1.34k]
  ------------------
 6212|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  53.5k|                                 value_width));
 6216|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  53.5k|        }
 6218|       |
 6219|  54.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  54.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  54.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  54.8k|        return it;
 6222|  54.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6226|  64.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  64.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  64.3k|            auto rd = make_reader<T, char_type>();
 6232|  64.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  64.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 64.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  64.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  64.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  64.3k|    {
 6162|  64.3k|        const bool need_skipped_width =
 6163|  64.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 64.3k]
  |  Branch (6163:33): [True: 0, False: 64.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  64.3k|        auto it = rng.begin();
 6167|  64.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  64.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 64.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  64.3k|        else {
 6176|  64.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.98k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.98k|    }                                                  \
  |  |  |  | 3938|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  62.3k|        }
 6179|  62.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  62.3k|        std::ptrdiff_t value_width = 0;
 6183|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 62.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  62.3k|        else {
 6199|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.27k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.27k|    }                                                  \
  |  | 3938|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  56.0k|                                             specs, value, loc));
 6201|       |
 6202|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 56.0k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  56.0k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6211|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 54.5k, False: 1.50k]
  ------------------
 6212|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  54.5k|                                 value_width));
 6216|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  54.5k|        }
 6218|       |
 6219|  56.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  56.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  56.0k|            specs, prefix_width, value_width, postfix_width));
 6221|  56.0k|        return it;
 6222|  56.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6226|  46.8k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  46.8k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  46.8k|            auto rd = make_reader<T, char_type>();
 6232|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  46.8k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  46.8k|    {
 6162|  46.8k|        const bool need_skipped_width =
 6163|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 46.8k]
  |  Branch (6163:33): [True: 0, False: 46.8k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  46.8k|        auto it = rng.begin();
 6167|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6168|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 46.8k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  46.8k|        else {
 6176|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.02k, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.02k|    }                                                  \
  |  |  |  | 3938|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  45.8k|            std::tie(it, prefix_width) = prefix_result;
 6178|  45.8k|        }
 6179|  45.8k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  45.8k|        std::ptrdiff_t value_width = 0;
 6183|  45.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 45.8k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  45.8k|        else {
 6199|  45.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 7.23k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.23k|    }                                                  \
  |  | 3938|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  38.6k|                                             specs, value, loc));
 6201|       |
 6202|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 38.6k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  38.6k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6211|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 37.8k, False: 762]
  ------------------
 6212|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  37.8k|                                 value_width));
 6216|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  37.8k|        }
 6218|       |
 6219|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6221|  38.6k|        return it;
 6222|  38.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  51.0k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.0k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.0k|            auto rd = make_reader<T, char_type>();
 6232|  51.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  51.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  51.0k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  51.0k|    {
 6162|  51.0k|        const bool need_skipped_width =
 6163|  51.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.0k]
  |  Branch (6163:33): [True: 0, False: 51.0k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.0k|        auto it = rng.begin();
 6167|  51.0k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.0k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.0k|        else {
 6176|  51.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.24k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.24k|    }                                                  \
  |  |  |  | 3938|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  49.7k|        }
 6179|  49.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  49.7k|        std::ptrdiff_t value_width = 0;
 6183|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 49.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  49.7k|        else {
 6199|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 7.00k, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.00k|    }                                                  \
  |  | 3938|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  42.7k|                                             specs, value, loc));
 6201|       |
 6202|  42.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 42.7k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  42.7k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  42.7k|        std::ptrdiff_t postfix_width = 0;
 6211|  42.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 41.8k, False: 928]
  ------------------
 6212|  41.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  41.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  41.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  41.8k|                                 value_width));
 6216|  41.8k|            std::tie(it, postfix_width) = postfix_result;
 6217|  41.8k|        }
 6218|       |
 6219|  42.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  42.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  42.7k|            specs, prefix_width, value_width, postfix_width));
 6221|  42.7k|        return it;
 6222|  42.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6226|  51.5k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  51.5k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  51.5k|            auto rd = make_reader<T, char_type>();
 6232|  51.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  51.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  51.5k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  51.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  51.5k|    {
 6162|  51.5k|        const bool need_skipped_width =
 6163|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 51.5k]
  |  Branch (6163:33): [True: 0, False: 51.5k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  51.5k|        auto it = rng.begin();
 6167|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6168|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 51.5k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  51.5k|        else {
 6176|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.35k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.35k|    }                                                  \
  |  |  |  | 3938|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6178|  50.2k|        }
 6179|  50.2k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  50.2k|        std::ptrdiff_t value_width = 0;
 6183|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.2k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  50.2k|        else {
 6199|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 6.90k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.90k|    }                                                  \
  |  | 3938|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  43.3k|                                             specs, value, loc));
 6201|       |
 6202|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 43.3k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  43.3k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6211|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 42.3k, False: 1.03k]
  ------------------
 6212|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  42.3k|                                 value_width));
 6216|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6217|  42.3k|        }
 6218|       |
 6219|  43.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  43.3k|            specs, prefix_width, value_width, postfix_width));
 6221|  43.3k|        return it;
 6222|  43.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.23k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.23k|            auto rd = make_reader<T, char_type>();
 5916|  4.23k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|    }                                                  \
  |  |  |  | 3938|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  25.4k|{
 5835|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.3k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.3k|    return skip_classic_whitespace(range);
 5844|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 9, False: 4.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.33k|                parse_integer_digits_without_thsep(
 3562|  8.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.33k|        auto buf = make_contiguous_buffer(
 3566|  8.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.05k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|    }                                                  \
  |  |  |  | 3938|  4.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.25k|            auto rd = make_reader<T, char_type>();
 5916|  4.25k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|    }                                                  \
  |  |  |  | 3938|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.19k|                        .transform_error(make_eof_scan_error));
 5905|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.19k|    {
 3579|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.19k|        return read_default_with_base(range, value, 10);
 3581|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.19k|    {
 3543|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.19k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.19k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 9, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|    }                                                  \
  |  |  |  | 3938|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.37k|                parse_integer_digits_without_thsep(
 3562|  8.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.37k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.37k|        auto buf = make_contiguous_buffer(
 3566|  8.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.05k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|    }                                                  \
  |  |  |  | 3938|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    126|                                    prefix_result.parsed_base));
 3570|       |
 3571|    126|        return ranges::next(prefix_result.iterator,
 3572|    126|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5910|  4.28k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.28k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.28k|            auto rd = make_reader<T, char_type>();
 5916|  4.28k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.28k|    {
 5903|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|    }                                                  \
  |  |  |  | 3938|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.22k|                        .transform_error(make_eof_scan_error));
 5905|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.22k|    {
 3579|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.22k|        return read_default_with_base(range, value, 10);
 3581|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.22k|    {
 3543|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.22k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.22k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 9, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.43k|                parse_integer_digits_without_thsep(
 3562|  8.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.43k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.43k|        auto buf = make_contiguous_buffer(
 3566|  8.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.05k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.05k|    }                                                  \
  |  |  |  | 3938|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    159|                                    prefix_result.parsed_base));
 3570|       |
 3571|    159|        return ranges::next(prefix_result.iterator,
 3572|    159|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.43k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5910|  4.20k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.20k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.20k|            auto rd = make_reader<T, char_type>();
 5916|  4.20k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.20k|    {
 5903|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.15k|                        .transform_error(make_eof_scan_error));
 5905|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.15k|    {
 3579|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.15k|        return read_default_with_base(range, value, 10);
 3581|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.15k|    {
 3543|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.15k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.10k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.15k|        }
 3554|       |
 3555|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.15k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.31k|                parse_integer_digits_without_thsep(
 3562|  8.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.31k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.31k|        auto buf = make_contiguous_buffer(
 3566|  8.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.02k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.22k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.22k|            auto rd = make_reader<T, char_type>();
 5916|  4.22k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.12k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.34k|                parse_integer_digits_without_thsep(
 3562|  8.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.34k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.34k|        auto buf = make_contiguous_buffer(
 3566|  8.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.02k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    150|                                    prefix_result.parsed_base));
 3570|       |
 3571|    150|        return ranges::next(prefix_result.iterator,
 3572|    150|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  4.25k|            auto rd = make_reader<T, char_type>();
 5916|  4.25k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 57, False: 4.14k]
  ------------------
 3548|     57|                return detail::unexpected_scan_error(
 3549|     57|                    scan_error::invalid_scanned_value,
 3550|     57|                    "Unexpected '-' sign when parsing an "
 3551|     57|                    "unsigned value");
 3552|     57|            }
 3553|  4.20k|        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  8.39k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  8.39k|                parse_integer_digits_without_thsep(
 3562|  8.39k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  8.39k|                    prefix_result.parsed_base));
 3564|       |
 3565|  8.39k|        auto buf = make_contiguous_buffer(
 3566|  8.39k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  8.39k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.01k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.01k|    }                                                  \
  |  |  |  | 3938|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    180|                                    prefix_result.parsed_base));
 3570|       |
 3571|    180|        return ranges::next(prefix_result.iterator,
 3572|    180|                            ranges::distance(buf.view().begin(), result_it));
 3573|  8.39k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   159k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   159k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   159k|          m_current(m_range.begin())
 2988|   159k|    {
 2989|   159k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   120k|    {
 2998|   120k|        return m_range.end();
 2999|   120k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|  10.6k|    {
 3013|  10.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  10.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  10.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 10.6k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  10.6k|        }
 3019|  10.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|  10.6k|    static_cast<    \
  |  | 1056|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  10.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   109k|    {
 3003|   109k|        return ranges::subrange{begin(), end()};
 3004|   109k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.2k|            auto rd = make_reader<T, char_type>();
 6232|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.2k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 246, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|    }                                                  \
  |  |  |  | 3938|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.74k|                                             specs, value, loc));
 6201|       |
 6202|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.74k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.74k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.64k, False: 98]
  ------------------
 6212|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.64k|                                 value_width));
 6216|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.64k|        }
 6218|       |
 6219|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.74k|        return it;
 6222|  1.74k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   109k|    {
 6075|   109k|        const bool need_skipped_width =
 6076|   109k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 109k]
  |  Branch (6076:33): [True: 0, False: 109k]
  ------------------
 6077|   109k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   109k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 109k]
  ------------------
 6081|   109k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 109k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   109k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 109k, False: 0]
  |  Branch (6085:56): [True: 109k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   109k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 109k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.42k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|    }                                                  \
  |  |  |  | 3938|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   218k|                            make_eof_scan_error));
 6096|       |
 6097|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 108k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   108k|            return result_type{it, 0};
 6105|   218k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   109k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  10.1k|    {
 6117|  10.1k|        const bool need_skipped_width =
 6118|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 10.1k]
  |  Branch (6118:33): [True: 0, False: 10.1k]
  ------------------
 6119|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 10.1k]
  ------------------
 6122|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 10.1k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 10.1k, False: 0]
  ------------------
 6131|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 10.1k]
  ------------------
 6132|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  10.1k|        return result_type{rng.begin(), 0};
 6156|  10.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.3k|            auto rd = make_reader<T, char_type>();
 6232|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.81k|                                             specs, value, loc));
 6201|       |
 6202|  1.81k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.81k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.81k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.81k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.81k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.70k, False: 110]
  ------------------
 6212|  1.70k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.70k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.70k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.70k|                                 value_width));
 6216|  1.70k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.70k|        }
 6218|       |
 6219|  1.81k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.81k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.81k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.81k|        return it;
 6222|  1.81k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6226|  18.4k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.4k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.4k|            auto rd = make_reader<T, char_type>();
 6232|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.4k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.4k|    {
 6162|  18.4k|        const bool need_skipped_width =
 6163|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.4k]
  |  Branch (6163:33): [True: 0, False: 18.4k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.4k|        auto it = rng.begin();
 6167|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.4k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.4k|        else {
 6176|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 258, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    258|    }                                                  \
  |  |  |  | 3938|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.1k|        }
 6179|  18.1k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.1k|        std::ptrdiff_t value_width = 0;
 6183|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.1k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.1k|        else {
 6199|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.89k|                                             specs, value, loc));
 6201|       |
 6202|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.89k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.89k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.78k, False: 110]
  ------------------
 6212|  1.78k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.78k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.78k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.78k|                                 value_width));
 6216|  1.78k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.78k|        }
 6218|       |
 6219|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.89k|        return it;
 6222|  1.89k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6226|  18.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.1k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.1k|            auto rd = make_reader<T, char_type>();
 6232|  18.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.1k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.1k|    {
 6162|  18.1k|        const bool need_skipped_width =
 6163|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.1k]
  |  Branch (6163:33): [True: 0, False: 18.1k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.1k|        auto it = rng.begin();
 6167|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.1k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.1k|        else {
 6176|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  17.9k|            std::tie(it, prefix_width) = prefix_result;
 6178|  17.9k|        }
 6179|  17.9k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  17.9k|        std::ptrdiff_t value_width = 0;
 6183|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 17.9k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  17.9k|        else {
 6199|  17.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.68k|                                             specs, value, loc));
 6201|       |
 6202|  1.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.68k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.68k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.61k, False: 72]
  ------------------
 6212|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.61k|                                 value_width));
 6216|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.61k|        }
 6218|       |
 6219|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.68k|        return it;
 6222|  1.68k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6226|  18.2k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.2k|            auto rd = make_reader<T, char_type>();
 6232|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.2k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.2k|    {
 6162|  18.2k|        const bool need_skipped_width =
 6163|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.2k]
  |  Branch (6163:33): [True: 0, False: 18.2k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.2k|        auto it = rng.begin();
 6167|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.2k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.2k|        else {
 6176|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.73k|                                             specs, value, loc));
 6201|       |
 6202|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.73k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.73k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.66k, False: 72]
  ------------------
 6212|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.66k|                                 value_width));
 6216|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.66k|        }
 6218|       |
 6219|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.73k|        return it;
 6222|  1.73k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6226|  18.3k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  18.3k|            auto rd = make_reader<T, char_type>();
 6232|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|  18.3k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|  18.3k|    {
 6162|  18.3k|        const bool need_skipped_width =
 6163|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 18.3k]
  |  Branch (6163:33): [True: 0, False: 18.3k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  18.3k|        auto it = rng.begin();
 6167|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6168|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 18.3k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  18.3k|        else {
 6176|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|    }                                                  \
  |  |  |  | 3938|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6178|  18.0k|        }
 6179|  18.0k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  18.0k|        std::ptrdiff_t value_width = 0;
 6183|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 18.0k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  18.0k|        else {
 6199|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.2k|    }                                                  \
  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  1.79k|                                             specs, value, loc));
 6201|       |
 6202|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 1.79k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  1.79k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6211|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 1.72k, False: 72]
  ------------------
 6212|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  1.72k|                                 value_width));
 6216|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6217|  1.72k|        }
 6218|       |
 6219|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6221|  1.79k|        return it;
 6222|  1.79k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.23k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.23k|            auto rd = make_reader<T, char_type>();
 5920|  4.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.23k, False: 0]
  ------------------
 5921|  4.23k|                return impl(rd, range, value);
 5922|  4.23k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.23k|    {
 5903|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|    }                                                  \
  |  |  |  | 3938|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  25.4k|{
 5835|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5836|    123|        return unexpected(e);
 5837|    123|    }
 5838|       |
 5839|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 25.3k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  25.3k|    return skip_classic_whitespace(range);
 5844|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.02k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.31k|                parse_integer_digits_without_thsep(
 3562|  4.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.31k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.31k|        auto buf = make_contiguous_buffer(
 3566|  4.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    141|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    141|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    141|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    141|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 39, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     39|    }                                                  \
  |  |  |  | 3938|    141|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    102|                                    prefix_result.parsed_base));
 3570|       |
 3571|    102|        return ranges::next(prefix_result.iterator,
 3572|    102|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.25k|            auto rd = make_reader<T, char_type>();
 5920|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.25k, False: 0]
  ------------------
 5921|  4.25k|                return impl(rd, range, value);
 5922|  4.25k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|    }                                                  \
  |  |  |  | 3938|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.19k|                        .transform_error(make_eof_scan_error));
 5905|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.19k|    {
 3579|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.19k|        return read_default_with_base(range, value, 10);
 3581|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.19k|    {
 3543|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.19k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.19k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.04k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.04k|    }                                                  \
  |  |  |  | 3938|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.33k|                parse_integer_digits_without_thsep(
 3562|  4.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.33k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.33k|        auto buf = make_contiguous_buffer(
 3566|  4.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|    }                                                  \
  |  |  |  | 3938|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    126|                                    prefix_result.parsed_base));
 3570|       |
 3571|    126|        return ranges::next(prefix_result.iterator,
 3572|    126|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.28k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.28k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.28k|            auto rd = make_reader<T, char_type>();
 5920|  4.28k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.28k, False: 0]
  ------------------
 5921|  4.28k|                return impl(rd, range, value);
 5922|  4.28k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.28k|    {
 5903|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     63|    }                                                  \
  |  |  |  | 3938|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.22k|                        .transform_error(make_eof_scan_error));
 5905|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.22k|    {
 3579|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.22k|        return read_default_with_base(range, value, 10);
 3581|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.22k|    {
 3543|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.22k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.22k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.06k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.06k|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.38k|                parse_integer_digits_without_thsep(
 3562|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.38k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.38k|        auto buf = make_contiguous_buffer(
 3566|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    159|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    159|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    159|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    159|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    159|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    159|                                    prefix_result.parsed_base));
 3570|       |
 3571|    159|        return ranges::next(prefix_result.iterator,
 3572|    159|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.38k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.20k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.20k|            auto rd = make_reader<T, char_type>();
 5920|  4.20k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.20k, False: 0]
  ------------------
 5921|  4.20k|                return impl(rd, range, value);
 5922|  4.20k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.20k|    {
 5903|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.15k|                        .transform_error(make_eof_scan_error));
 5905|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.15k|    {
 3579|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.15k|        return read_default_with_base(range, value, 10);
 3581|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.15k|    {
 3543|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.15k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.10k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.15k|        }
 3554|       |
 3555|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.15k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.99k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.99k|    }                                                  \
  |  |  |  | 3938|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.32k|                parse_integer_digits_without_thsep(
 3562|  4.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.32k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.32k|        auto buf = make_contiguous_buffer(
 3566|  4.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 33, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     33|    }                                                  \
  |  |  |  | 3938|    165|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    132|                                    prefix_result.parsed_base));
 3570|       |
 3571|    132|        return ranges::next(prefix_result.iterator,
 3572|    132|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.22k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.22k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.22k|            auto rd = make_reader<T, char_type>();
 5920|  4.22k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.22k, False: 0]
  ------------------
 5921|  4.22k|                return impl(rd, range, value);
 5922|  4.22k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.22k|    {
 5903|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.17k|                        .transform_error(make_eof_scan_error));
 5905|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.17k|    {
 3579|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.17k|        return read_default_with_base(range, value, 10);
 3581|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.17k|    {
 3543|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.17k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 51, False: 4.12k]
  ------------------
 3548|     51|                return detail::unexpected_scan_error(
 3549|     51|                    scan_error::invalid_scanned_value,
 3550|     51|                    "Unexpected '-' sign when parsing an "
 3551|     51|                    "unsigned value");
 3552|     51|            }
 3553|  4.17k|        }
 3554|       |
 3555|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.17k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.00k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.00k|    }                                                  \
  |  |  |  | 3938|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.34k|                parse_integer_digits_without_thsep(
 3562|  4.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.34k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.34k|        auto buf = make_contiguous_buffer(
 3566|  4.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 18, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|    }                                                  \
  |  |  |  | 3938|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    150|                                    prefix_result.parsed_base));
 3570|       |
 3571|    150|        return ranges::next(prefix_result.iterator,
 3572|    150|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  4.25k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  4.25k|            auto rd = make_reader<T, char_type>();
 5920|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 4.25k, False: 0]
  ------------------
 5921|  4.25k|                return impl(rd, range, value);
 5922|  4.25k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  4.25k|    {
 5903|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     51|    }                                                  \
  |  |  |  | 3938|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  4.20k|                        .transform_error(make_eof_scan_error));
 5905|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3578|  4.20k|    {
 3579|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  4.20k|        return read_default_with_base(range, value, 10);
 3581|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3542|  4.20k|    {
 3543|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  4.20k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3547|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 57, False: 4.14k]
  ------------------
 3548|     57|                return detail::unexpected_scan_error(
 3549|     57|                    scan_error::invalid_scanned_value,
 3550|     57|                    "Unexpected '-' sign when parsing an "
 3551|     57|                    "unsigned value");
 3552|     57|            }
 3553|  4.20k|        }
 3554|       |
 3555|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 4.20k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.02k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.02k|    }                                                  \
  |  |  |  | 3938|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  4.38k|                parse_integer_digits_without_thsep(
 3562|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  4.38k|                    prefix_result.parsed_base));
 3564|       |
 3565|  4.38k|        auto buf = make_contiguous_buffer(
 3566|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|    180|                                    prefix_result.parsed_base));
 3570|       |
 3571|    180|        return ranges::next(prefix_result.iterator,
 3572|    180|                            ranges::distance(buf.view().begin(), result_it));
 3573|  4.38k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  15.4k|    {
 3543|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  15.4k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 15.4k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  30.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 45, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     45|    }                                                  \
  |  |  |  | 3938|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  30.9k|                parse_integer_digits_without_thsep(
 3562|  30.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  30.9k|                    prefix_result.parsed_base));
 3564|       |
 3565|  30.9k|        auto buf = make_contiguous_buffer(
 3566|  30.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  30.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.62k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|    }                                                  \
  |  |  |  | 3938|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.8k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.8k|        return ranges::next(prefix_result.iterator,
 3572|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  30.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  17.8k|    {
 3543|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  17.8k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 17.8k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  35.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 69, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|    }                                                  \
  |  |  |  | 3938|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  35.6k|                parse_integer_digits_without_thsep(
 3562|  35.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  35.6k|                    prefix_result.parsed_base));
 3564|       |
 3565|  35.6k|        auto buf = make_contiguous_buffer(
 3566|  35.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  35.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.49k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.49k|    }                                                  \
  |  |  |  | 3938|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.2k|        return ranges::next(prefix_result.iterator,
 3572|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  35.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  18.1k|    {
 3543|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  18.1k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|       |        if constexpr (!std::is_signed_v<T>) {
 3547|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3548|       |                return detail::unexpected_scan_error(
 3549|       |                    scan_error::invalid_scanned_value,
 3550|       |                    "Unexpected '-' sign when parsing an "
 3551|       |                    "unsigned value");
 3552|       |            }
 3553|       |        }
 3554|       |
 3555|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 18.1k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 81, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     81|    }                                                  \
  |  |  |  | 3938|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  36.1k|                parse_integer_digits_without_thsep(
 3562|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  36.1k|                    prefix_result.parsed_base));
 3564|       |
 3565|  36.1k|        auto buf = make_contiguous_buffer(
 3566|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.43k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.43k|    }                                                  \
  |  |  |  | 3938|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  16.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  16.6k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  16.6k|        return ranges::next(prefix_result.iterator,
 3572|  16.6k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  36.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  12.9k|    {
 3543|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  12.9k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3547|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 759, False: 12.2k]
  ------------------
 3548|    759|                return detail::unexpected_scan_error(
 3549|    759|                    scan_error::invalid_scanned_value,
 3550|    759|                    "Unexpected '-' sign when parsing an "
 3551|    759|                    "unsigned value");
 3552|    759|            }
 3553|  12.9k|        }
 3554|       |
 3555|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 12.9k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  25.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  25.9k|                parse_integer_digits_without_thsep(
 3562|  25.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  25.9k|                    prefix_result.parsed_base));
 3564|       |
 3565|  25.9k|        auto buf = make_contiguous_buffer(
 3566|  25.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  25.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.01k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.01k|    }                                                  \
  |  |  |  | 3938|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  11.9k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  11.9k|        return ranges::next(prefix_result.iterator,
 3572|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  25.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.2k|    {
 3543|  14.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.2k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.2k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 786, False: 13.4k]
  ------------------
 3548|    786|                return detail::unexpected_scan_error(
 3549|    786|                    scan_error::invalid_scanned_value,
 3550|    786|                    "Unexpected '-' sign when parsing an "
 3551|    786|                    "unsigned value");
 3552|    786|            }
 3553|  14.2k|        }
 3554|       |
 3555|  14.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.2k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.4k|                parse_integer_digits_without_thsep(
 3562|  28.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.4k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.4k|        auto buf = make_contiguous_buffer(
 3566|  28.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 924, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    924|    }                                                  \
  |  |  |  | 3938|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.2k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.2k|        return ranges::next(prefix_result.iterator,
 3572|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3542|  14.3k|    {
 3543|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  14.3k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3547|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 816, False: 13.5k]
  ------------------
 3548|    816|                return detail::unexpected_scan_error(
 3549|    816|                    scan_error::invalid_scanned_value,
 3550|    816|                    "Unexpected '-' sign when parsing an "
 3551|    816|                    "unsigned value");
 3552|    816|            }
 3553|  14.3k|        }
 3554|       |
 3555|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 14.3k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  28.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  28.7k|                parse_integer_digits_without_thsep(
 3562|  28.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  28.7k|                    prefix_result.parsed_base));
 3564|       |
 3565|  28.7k|        auto buf = make_contiguous_buffer(
 3566|  28.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  28.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 867, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    867|    }                                                  \
  |  |  |  | 3938|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  13.4k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  13.4k|        return ranges::next(prefix_result.iterator,
 3572|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  28.7k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    688|{
   53|    688|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    688|    string_buffer.resize(size);
   57|    688|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    688|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    688|    const auto wsv_reinterpret_size =
   62|    688|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 103, False: 585]
  ------------------
   63|    688|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    688|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    688|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    688|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    688|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    688|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    688|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    688|{
  109|    688|    if constexpr (std::is_same_v<CharT, char>) {
  110|    688|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    688|{
  186|    688|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    688|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    688|                                   format_strings);
  189|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.29k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.29k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  5.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.29k|            auto result = scn::scan_value<T>(
  171|  5.29k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.29k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.41k|            auto result = scn::scan_value<T>(
  171|  4.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.72k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.72k|            it = result->begin();
  176|  3.72k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.7k|            auto result = scn::scan<T>(
  140|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.7k|                scn::runtime_format(f));
  142|  39.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.8k|            it = result->begin();
  146|  32.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.7k|            auto result = scn::scan<T>(
  155|  39.7k|                global_locale,
  156|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.7k|                scn::runtime_format(f));
  158|  39.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.8k|            it = result->begin();
  162|  32.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.11k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.11k|            auto result = scn::scan_value<T>(
  171|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.11k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.42k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.42k|            it = result->begin();
  176|  5.42k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.85k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.85k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.85k|            auto result = scn::scan_value<T>(
  171|  4.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.85k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.16k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.16k|            it = result->begin();
  176|  4.16k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.4k|            auto result = scn::scan<T>(
  140|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.4k|                scn::runtime_format(f));
  142|  40.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.5k|            it = result->begin();
  146|  33.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.4k|            auto result = scn::scan<T>(
  155|  40.4k|                global_locale,
  156|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.4k|                scn::runtime_format(f));
  158|  40.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.5k|            it = result->begin();
  162|  33.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.22k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  6.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.22k|            auto result = scn::scan_value<T>(
  171|  6.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.22k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.54k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.54k|            it = result->begin();
  176|  5.54k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.7k|            auto result = scn::scan<T>(
  140|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.7k|                scn::runtime_format(f));
  142|  32.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.8k|            it = result->begin();
  146|  25.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.7k|            auto result = scn::scan<T>(
  155|  32.7k|                global_locale,
  156|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.7k|                scn::runtime_format(f));
  158|  32.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.8k|            it = result->begin();
  162|  25.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.91k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.91k|            auto result = scn::scan_value<T>(
  171|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.91k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.22k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.22k|            it = result->begin();
  176|  4.22k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.28k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.28k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.28k|            auto result = scn::scan_value<T>(
  171|  5.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.28k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.40k|            auto result = scn::scan_value<T>(
  171|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.71k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.71k|            it = result->begin();
  176|  3.71k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.6k|            auto result = scn::scan<T>(
  140|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.6k|                scn::runtime_format(f));
  142|  39.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.7k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.7k|            it = result->begin();
  146|  32.7k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.6k|            auto result = scn::scan<T>(
  155|  39.6k|                global_locale,
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.7k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.7k|            it = result->begin();
  162|  32.7k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.92k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.92k|            auto result = scn::scan_value<T>(
  171|  5.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.92k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.23k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.23k|            it = result->begin();
  176|  5.23k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.83k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.83k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.83k|            auto result = scn::scan_value<T>(
  171|  4.83k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.83k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.14k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.14k|            it = result->begin();
  176|  4.14k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.3k|            auto result = scn::scan<T>(
  140|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.3k|                scn::runtime_format(f));
  142|  40.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.4k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.4k|            it = result->begin();
  146|  33.4k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.3k|            auto result = scn::scan<T>(
  155|  40.3k|                global_locale,
  156|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.3k|                scn::runtime_format(f));
  158|  40.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.4k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.4k|            it = result->begin();
  162|  33.4k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.02k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.02k|            auto result = scn::scan_value<T>(
  171|  6.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.02k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.33k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.33k|            it = result->begin();
  176|  5.33k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.8k|            auto result = scn::scan<T>(
  140|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.8k|                scn::runtime_format(f));
  142|  32.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.9k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.9k|            it = result->begin();
  146|  25.9k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.8k|            auto result = scn::scan<T>(
  155|  32.8k|                global_locale,
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.9k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.9k|            it = result->begin();
  162|  25.9k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.89k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.89k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.89k|            auto result = scn::scan_value<T>(
  171|  4.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.89k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.20k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.20k|            it = result->begin();
  176|  4.20k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    688|{
   91|    688|    using char_type = ranges::range_value_t<Source>;
   92|    688|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    688|    deque.clear();
   94|    688|    std::copy(ranges::begin(source), ranges::end(source),
   95|    688|              std::back_inserter(deque));
   96|    688|    return deque;
   97|    688|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    688|{
   80|    688|    if constexpr (std::is_same_v<CharT, char>) {
   81|    688|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    688|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    688|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    688|    else {
  113|    688|        return wformat_string_view_buffer;
  114|    688|    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.37k|{
  186|  1.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.37k|                                   format_strings);
  189|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 904]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    904|            it = result->begin();
  146|    904|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 904]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    904|            it = result->begin();
  162|    904|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 870]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    870|            it = result->begin();
  146|    870|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 870]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    870|            it = result->begin();
  162|    870|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 947]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    947|            it = result->begin();
  146|    947|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 947]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    947|            it = result->begin();
  162|    947|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 899]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    899|            it = result->begin();
  146|    899|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 899]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    899|            it = result->begin();
  162|    899|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 1.00k]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|  1.00k|            it = result->begin();
  146|  1.00k|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 1.00k]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|  1.00k|            it = result->begin();
  162|  1.00k|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 940]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    940|            it = result->begin();
  146|    940|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 940]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    940|            it = result->begin();
  162|    940|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 904]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    904|            it = result->begin();
  146|    904|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 904]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    904|            it = result->begin();
  162|    904|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 870]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    870|            it = result->begin();
  146|    870|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 870]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    870|            it = result->begin();
  162|    870|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 947]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    947|            it = result->begin();
  146|    947|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 947]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    947|            it = result->begin();
  162|    947|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 899]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    899|            it = result->begin();
  146|    899|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 899]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    899|            it = result->begin();
  162|    899|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 1.00k]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|  1.00k|            it = result->begin();
  146|  1.00k|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 1.00k]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|  1.00k|            it = result->begin();
  162|  1.00k|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 940]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    940|            it = result->begin();
  146|    940|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 940]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    940|            it = result->begin();
  162|    940|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.37k|{
   91|  1.37k|    using char_type = ranges::range_value_t<Source>;
   92|  1.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.37k|    deque.clear();
   94|  1.37k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.37k|              std::back_inserter(deque));
   96|  1.37k|    return deque;
   97|  1.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.37k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.37k|    else {
   84|  1.37k|        return wnoncontiguous_buffer;
   85|  1.37k|    }
   86|  1.37k|}

LLVMFuzzerTestOneInput:
   59|    688|{
   60|    688|    scn::fuzz::run(data, size);
   61|    688|    return 0;
   62|    688|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    688|{
   36|    688|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 688]
  |  Branch (36:35): [True: 0, False: 688]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    688|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    688|    const auto& f =
   43|    688|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    688|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    688|    do_basic_run(sv, f);
   46|       |
   47|    688|    const auto& wf = get_format_strings<wchar_t>(
   48|    688|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    688|        L"{:'}", L"{:'L}");
   50|    688|    do_basic_run(wsv_reinterpret, wf);
   51|    688|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 688, False: 0]
  ------------------
   52|    688|        do_basic_run(wsv_transcode, wf);
   53|    688|    }
   54|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}

