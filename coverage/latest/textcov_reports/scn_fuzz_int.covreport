_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   886k|{
 3803|   886k|    if constexpr (sizeof(U) == 1) {
 3804|   886k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|   886k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   886k|{
 3767|   886k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   886k|    SCN_GCC_COMPAT_PUSH
 3770|   886k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   886k|    constexpr char lengths[] =
 3772|   886k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   886k|        "\1\1\1\1\1\1\1\1"
 3774|   886k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   886k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   886k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   886k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   886k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   886k|    SCN_GCC_COMPAT_POP
 3781|   886k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   867k|{
 4009|   867k|    if constexpr (sizeof(CharT) == 1) {
 4010|   867k|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|   867k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|   867k|{
 3822|   867k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   867k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   867k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|   867k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   867k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   867k|    };
 3827|       |
 3828|   867k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 857k, False: 9.79k]
  ------------------
 3829|   857k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 1.07k, False: 856k]
  ------------------
 3830|  1.07k|            SCN_UNLIKELY_ATTR
 3831|  1.07k|            return invalid_code_point;
 3832|  1.07k|        }
 3833|   856k|        return static_cast<char32_t>(input[0]);
 3834|   857k|    }
 3835|       |
 3836|  9.79k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 4.49k, False: 5.29k]
  ------------------
 3837|  4.49k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 44, False: 4.45k]
  ------------------
 3838|     44|            SCN_UNLIKELY_ATTR
 3839|     44|            return invalid_code_point;
 3840|     44|        }
 3841|  4.45k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 894, False: 3.55k]
  ------------------
 3842|    894|            SCN_UNLIKELY_ATTR
 3843|    894|            return invalid_code_point;
 3844|    894|        }
 3845|       |
 3846|  3.55k|        char32_t cp{};
 3847|  3.55k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  3.55k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  3.55k|        return cp;
 3850|  4.45k|    }
 3851|       |
 3852|  5.29k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 4.14k, False: 1.15k]
  ------------------
 3853|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 53, False: 4.09k]
  ------------------
 3854|     53|            SCN_UNLIKELY_ATTR
 3855|     53|            return invalid_code_point;
 3856|     53|        }
 3857|  4.09k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 614, False: 3.47k]
  ------------------
 3858|  4.09k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 260, False: 3.21k]
  ------------------
 3859|    874|            SCN_UNLIKELY_ATTR
 3860|    874|            return invalid_code_point;
 3861|    874|        }
 3862|       |
 3863|  3.21k|        char32_t cp{};
 3864|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  3.21k|        return cp;
 3868|  4.09k|    }
 3869|       |
 3870|  1.15k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 1.15k, False: 0]
  ------------------
 3871|  1.15k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 1.15k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  1.15k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 263, False: 893]
  ------------------
 3876|    263|            SCN_UNLIKELY_ATTR
 3877|    263|            return invalid_code_point;
 3878|    263|        }
 3879|    893|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 391, False: 502]
  ------------------
 3880|    893|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 13, False: 489]
  ------------------
 3881|    893|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 2, False: 487]
  ------------------
 3882|    406|            SCN_UNLIKELY_ATTR
 3883|    406|            return invalid_code_point;
 3884|    406|        }
 3885|       |
 3886|    487|        char32_t cp{};
 3887|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    487|        return cp;
 3892|    893|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  13.9k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  13.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  13.9k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   614k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   614k|    else {
 3701|   614k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   614k|                                       to_address(first), to_address(last)))};
 3703|   614k|    }
 3704|   614k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.85M|{
  326|  1.85M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.85M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  3.98M|{
  304|  3.98M|    return p;
  305|  3.98M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.40M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.40M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.40M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.40M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.40M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  92.9k|    {
 2724|  92.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  92.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  92.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  92.9k|    {
 2705|  92.9k|        return decay_copy(t.begin());
 2706|  92.9k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.68M|{
 1949|  3.68M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.68M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   927k|    {
 2781|   927k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   927k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   927k|    {
 2763|   927k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   927k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  34.9k|{
 8878|  34.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  34.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  34.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  34.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5405|   139k|{
 5406|   139k|    detail::check_scan_arg_types<Args...>();
 5407|   139k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   139k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5144|   213k|{
 5145|   213k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   213k|                  "Scan argument types must be default constructible");
 5147|   213k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   213k|                  "Scan argument types must be Destructible");
 5149|   213k|    static_assert(
 5150|   213k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   213k|        "Scan argument types must not be references");
 5152|   213k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5357|   139k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   139k|    {
 5359|   139k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   139k|    {
 5370|   139k|        return {detail::make_arg<
 5371|   139k|            kind, Context,
 5372|   139k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   139k|                                 typename Context::char_type>::value>(args)...};
 5374|   139k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|   139k|{
 5180|   139k|    return make_value<Context>(value).ref_value;
 5181|   139k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5129|   150k|{
 5130|   150k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   150k|                                  needs_context_tag>) {
 5134|   150k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   150k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4968|   150k|    {                                                                        \
 4969|   150k|        return val;                                                          \
 4970|   150k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5098|   213k|{
 5099|   213k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   213k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   213k|    constexpr bool scannable_char =
 5103|   213k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   213k|    static_assert(scannable_char,
 5105|   213k|                  "Cannot scan an argument of an unsupported character "
 5106|   213k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   213k|    constexpr bool scannable_const =
 5109|   213k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   213k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   213k|    constexpr bool scannable_disabled =
 5113|   213k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   213k|    static_assert(scannable_disabled,
 5115|   213k|                  "Cannot scan an argument that has been disabled by "
 5116|   213k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   213k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   213k|    static_assert(
 5120|   213k|        scannable,
 5121|   213k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   213k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   213k|    return arg_value{arg};
 5125|   213k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4909|   213k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   213k|    {
 4911|   213k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   215k|{
 8665|   215k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   215k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   215k|{
 8602|   215k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   215k|    auto result = vscan_impl(buffer, format, args);
 8605|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.9k, False: 171k]
  |  |  ------------------
  ------------------
 8606|  43.9k|        return unexpected(result.error());
 8607|  43.9k|    }
 8608|   171k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   215k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   463k|{
 4729|   463k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   463k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   463k|                  "\n"
 4733|   463k|                  "Unsupported range type given as input to a scanning "
 4734|   463k|                  "function.\n"
 4735|   463k|                  "A range needs to have a character type (value type) "
 4736|   463k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   463k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   463k|                  "to be included.\n"
 4739|   463k|                  "See the scnlib documentation for more details.");
 4740|   463k|    static_assert(
 4741|   463k|        !std::is_same_v<T, custom_char_traits>,
 4742|   463k|        "\n"
 4743|   463k|        "Unsupported range type given as input to a scanning "
 4744|   463k|        "function.\n"
 4745|   463k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   463k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   463k|        "not supported.");
 4748|   463k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   463k|                  "\n"
 4750|   463k|                  "Unsupported range type given as input to a scanning "
 4751|   463k|                  "function.\n"
 4752|   463k|                  "file_marker_found cannot be used as an "
 4753|   463k|                  "source range type to scn::scan.\n"
 4754|   463k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   463k|                  "and do not provide an explicit source range, "
 4756|   463k|                  "or use scn::scan with a FILE* directly.");
 4757|   463k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   463k|                  "\n"
 4759|   463k|                  "Unsupported range type given as input to a scanning "
 4760|   463k|                  "function.\n"
 4761|   463k|                  "In order to be scannable, a range needs to satisfy "
 4762|   463k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   463k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   463k|                  "\n"
 4765|   463k|                  "Unsupported range type given as input to a scanning "
 4766|   463k|                  "function.\n"
 4767|   463k|                  "A range needs to model forward_range and have a valid "
 4768|   463k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   463k|                  "Examples of scannable ranges are std::string, "
 4770|   463k|                  "std::string_view, "
 4771|   463k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   463k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   463k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   463k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   463k|{
 4668|   463k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   463k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   463k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   463k|    {
 2855|   463k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   463k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   463k|    {
 2836|   463k|        return t.data();
 2837|   463k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   463k|    {
 3229|   463k|        return detail::to_address(ranges::begin(derived()));
 3230|   463k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.12M|{
  326|  2.12M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.12M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   834k|    {
 2724|   834k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   834k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   834k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   834k|    {
 2705|   834k|        return decay_copy(t.begin());
 2706|   834k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  7.49M|    {
 3326|  7.49M|        return m_iterator;
 3327|  7.49M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   463k|    {
 3185|   463k|        return static_cast<const D&>(*this);
 3186|   463k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   463k|    {
 2930|   463k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   463k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   463k|    {
 2896|   463k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   463k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|   765k|{
 1949|   765k|    return SCN_FWD(t);
  ------------------
  |  |  930|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   765k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  1.56M|    {
 3342|  1.56M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.56M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  1.95M|    {
 1598|  1.95M|        return has_value();
 1599|  1.95M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.62M|    {
  485|  3.62M|        return m_has_value;
  486|  3.62M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   553k|    {
 1604|   553k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   553k|        return this->get_unexpected().error();
 1606|   553k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   553k|    {
  468|   553k|        return m_unexpected;
  469|   553k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  4.75M|    {
  361|  4.75M|        return m_unexpected;
  362|  4.75M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.36M|        : m_unexpected(std::forward<Err>(e))
  346|  2.36M|    {
  347|  2.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.36M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  92.2k|        : base(unexpect, std::move(e.error())),
 1474|  92.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  92.2k|    {
 1476|  92.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  92.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  92.2k|          m_has_value(false)
  446|  92.2k|    {
  447|  92.2k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.73M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.73M|    {
  356|  2.73M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.73M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.73M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   463k|    {
 1177|   463k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   370k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   370k|                      ranges::iterator_t<SourceRange>>) {
 5935|   370k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   370k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.45M|    {
 2724|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.45M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.45M|    {
 2705|  1.45M|        return decay_copy(t.begin());
 2706|  1.45M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   370k|{
 5920|   370k|    return ranges::end(source);
 5921|   370k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   370k|    {
 2781|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   370k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   370k|    {
 2763|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   370k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  5.72M|    {
 3330|  5.72M|        return m_sentinel;
 3331|  5.72M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  1.12M|    {
 1653|  1.12M|        return value();
 1654|  1.12M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  1.12M|    {
 1627|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12M|        return this->get_value();
 1629|  1.12M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.12M|    {
  451|  1.12M|        return m_value;
  452|  1.12M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   370k|        : base(std::in_place, std::forward<U>(val)),
 1428|   370k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   370k|    {
 1430|   370k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   370k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   370k|    {
  437|   370k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  69.9k|    {
 7986|  69.9k|        return m_str;
 7987|  69.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   139k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   139k|    {
 5436|   139k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5388|   139k|    {
 5389|   139k|        return m_argptrs;
 5390|   139k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   860k|        : m_desc(desc), m_builtin_values(data)
 5487|   860k|    {
 5488|   860k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  69.9k|{
 8831|  69.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 55.3k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  55.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.3k|    static_cast<    \
  |  |  929|  55.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.3k|    static_cast<    \
  |  |  929|  55.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  69.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   463k|    {
 1598|   463k|        return has_value();
 1599|   463k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   926k|    {
  485|   926k|        return m_has_value;
  486|   926k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  92.2k|    {
 1604|  92.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  92.2k|        return this->get_unexpected().error();
 1606|  92.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  92.2k|    {
  468|  92.2k|        return m_unexpected;
  469|  92.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  75.4k|    {
 1177|  75.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   342k|    {
 1653|   342k|        return value();
 1654|   342k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   370k|    {
 1627|   370k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   370k|        return this->get_value();
 1629|   370k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   370k|    {
  451|   370k|        return m_value;
  452|   370k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|  60.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  60.0k|    {
 5840|  60.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   370k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   370k|    {
 5691|   370k|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5624|   121k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   121k|    {
 5626|   121k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  60.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  60.0k|    {
 1430|  60.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  60.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  60.0k|    {
  437|  60.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5383|   139k|    {
 5384|   139k|        return m_args;
 5385|   139k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  3.90M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.90M|    static_cast<    \
  |  |  929|  3.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.90M|    static_cast<    \
  |  |  929|  3.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.90M|    {
 3312|  3.90M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   860k|{
 7702|   860k|    return s;
 7703|   860k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   860k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  69.9k|        : m_str(r.str)
 7981|  69.9k|    {
 7982|  69.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  75.4k|    {
 1598|  75.4k|        return has_value();
 1599|  75.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   135k|    {
  485|   135k|        return m_has_value;
  486|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|  60.0k|    {
 1673|  60.0k|        return &value();
 1674|  60.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  60.0k|    {
 1627|  60.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.0k|        return this->get_value();
 1629|  60.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.0k|    {
  451|  60.0k|        return m_value;
  452|  60.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   370k|    {
 5708|   370k|        return ranges::begin(m_range);
 5709|   370k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  34.9k|{
 8945|  34.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  34.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  34.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  34.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   215k|{
 8683|   215k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   215k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   215k|{
 8618|   215k|#if !SCN_DISABLE_LOCALE
 8619|   215k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   215k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   215k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   215k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.9k, False: 171k]
  |  |  ------------------
  ------------------
 8626|  43.9k|        return unexpected(result.error());
 8627|  43.9k|    }
 8628|   171k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   215k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.44k|{
 8984|  5.44k|    T value;
 8985|  5.44k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.44k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.70k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.44k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.8k|{
 5165|  10.8k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.8k|    basic_scan_arg<Context> arg;
 5168|  10.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.8k|    arg.m_value = make_value<Context>(value);
 5170|  10.8k|    return arg;
 5171|  10.8k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   925k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  1.30M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  32.6k|{
 8696|  32.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  32.6k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  32.6k|{
 8642|  32.6k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  32.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  32.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.39k, False: 28.2k]
  |  |  ------------------
  ------------------
 8646|  4.39k|        return unexpected(result.error());
 8647|  4.39k|    }
 8648|  28.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  32.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  28.2k|    {
 1663|  28.2k|        return std::move(value());
 1664|  28.2k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  30.8k|{
 8878|  30.8k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5405|   123k|{
 5406|   123k|    detail::check_scan_arg_types<Args...>();
 5407|   123k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   123k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5144|   194k|{
 5145|   194k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   194k|                  "Scan argument types must be default constructible");
 5147|   194k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   194k|                  "Scan argument types must be Destructible");
 5149|   194k|    static_assert(
 5150|   194k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   194k|        "Scan argument types must not be references");
 5152|   194k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5357|   123k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   123k|    {
 5359|   123k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   123k|    {
 5370|   123k|        return {detail::make_arg<
 5371|   123k|            kind, Context,
 5372|   123k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   123k|                                 typename Context::char_type>::value>(args)...};
 5374|   123k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|   123k|{
 5180|   123k|    return make_value<Context>(value).ref_value;
 5181|   123k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5129|   132k|{
 5130|   132k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   132k|                                  needs_context_tag>) {
 5134|   132k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   132k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4968|   132k|    {                                                                        \
 4969|   132k|        return val;                                                          \
 4970|   132k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5098|   194k|{
 5099|   194k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   194k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   194k|    constexpr bool scannable_char =
 5103|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   194k|    static_assert(scannable_char,
 5105|   194k|                  "Cannot scan an argument of an unsupported character "
 5106|   194k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   194k|    constexpr bool scannable_const =
 5109|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   194k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   194k|    constexpr bool scannable_disabled =
 5113|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   194k|    static_assert(scannable_disabled,
 5115|   194k|                  "Cannot scan an argument that has been disabled by "
 5116|   194k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   194k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   194k|    static_assert(
 5120|   194k|        scannable,
 5121|   194k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   194k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   194k|    return arg_value{arg};
 5125|   194k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4909|   194k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   194k|    {
 4911|   194k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  61.6k|    {
 7986|  61.6k|        return m_str;
 7987|  61.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   123k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   123k|    {
 5436|   123k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5388|   123k|    {
 5389|   123k|        return m_argptrs;
 5390|   123k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  61.6k|{
 8831|  61.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 47.0k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  47.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  47.0k|    static_cast<    \
  |  |  929|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  47.0k|    static_cast<    \
  |  |  929|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  61.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  66.1k|    {
 1177|  66.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|  50.8k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.8k|    static_cast<    \
  |  |  929|  50.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.8k|    static_cast<    \
  |  |  929|  50.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.8k|    {
 5840|  50.8k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5624|   102k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   102k|    {
 5626|   102k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  50.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.8k|    {
 1430|  50.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  50.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.8k|    {
  437|  50.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5383|   123k|    {
 5384|   123k|        return m_args;
 5385|   123k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  61.6k|        : m_str(r.str)
 7981|  61.6k|    {
 7982|  61.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  66.1k|    {
 1598|  66.1k|        return has_value();
 1599|  66.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   117k|    {
  485|   117k|        return m_has_value;
  486|   117k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.8k|    {
 1673|  50.8k|        return &value();
 1674|  50.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  50.8k|    {
 1627|  50.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.8k|        return this->get_value();
 1629|  50.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.8k|    {
  451|  50.8k|        return m_value;
  452|  50.8k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  30.8k|{
 8945|  30.8k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.8k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.54k|{
 8984|  4.54k|    T value;
 8985|  4.54k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.54k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 3.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  4.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.80k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.80k|    static_cast<    \
  |  |  929|  3.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.80k|    static_cast<    \
  |  |  929|  3.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.54k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.07k|{
 5165|  9.07k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.07k|    basic_scan_arg<Context> arg;
 5168|  9.07k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.07k|    arg.m_value = make_value<Context>(value);
 5170|  9.07k|    return arg;
 5171|  9.07k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  40.8k|{
 8878|  40.8k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|   163k|{
 5406|   163k|    detail::check_scan_arg_types<Args...>();
 5407|   163k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   163k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|   238k|{
 5145|   238k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   238k|                  "Scan argument types must be default constructible");
 5147|   238k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   238k|                  "Scan argument types must be Destructible");
 5149|   238k|    static_assert(
 5150|   238k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   238k|        "Scan argument types must not be references");
 5152|   238k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|   163k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   163k|    {
 5359|   163k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   163k|    {
 5370|   163k|        return {detail::make_arg<
 5371|   163k|            kind, Context,
 5372|   163k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   163k|                                 typename Context::char_type>::value>(args)...};
 5374|   163k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|   163k|{
 5180|   163k|    return make_value<Context>(value).ref_value;
 5181|   163k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|   175k|{
 5130|   175k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   175k|                                  needs_context_tag>) {
 5134|   175k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   175k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|   175k|    {                                                                        \
 4969|   175k|        return val;                                                          \
 4970|   175k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|   238k|{
 5099|   238k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   238k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   238k|    constexpr bool scannable_char =
 5103|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   238k|    static_assert(scannable_char,
 5105|   238k|                  "Cannot scan an argument of an unsupported character "
 5106|   238k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   238k|    constexpr bool scannable_const =
 5109|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   238k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   238k|    constexpr bool scannable_disabled =
 5113|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   238k|    static_assert(scannable_disabled,
 5115|   238k|                  "Cannot scan an argument that has been disabled by "
 5116|   238k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   238k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   238k|    static_assert(
 5120|   238k|        scannable,
 5121|   238k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   238k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   238k|    return arg_value{arg};
 5125|   238k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|   238k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   238k|    {
 4911|   238k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  81.6k|    {
 7986|  81.6k|        return m_str;
 7987|  81.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   163k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   163k|    {
 5436|   163k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|   163k|    {
 5389|   163k|        return m_argptrs;
 5390|   163k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  81.6k|{
 8831|  81.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 67.0k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  67.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.0k|    static_cast<    \
  |  |  929|  67.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.0k|    static_cast<    \
  |  |  929|  67.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  81.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  87.9k|    {
 1177|  87.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|  72.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  72.5k|    {
 5840|  72.5k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5624|   145k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   145k|    {
 5626|   145k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  72.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.5k|    {
 1430|  72.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  72.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.5k|    {
  437|  72.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|   163k|    {
 5384|   163k|        return m_args;
 5385|   163k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  81.6k|        : m_str(r.str)
 7981|  81.6k|    {
 7982|  81.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  87.9k|    {
 1598|  87.9k|        return has_value();
 1599|  87.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   160k|    {
  485|   160k|        return m_has_value;
  486|   160k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|  72.5k|    {
 1673|  72.5k|        return &value();
 1674|  72.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  72.5k|    {
 1627|  72.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.5k|        return this->get_value();
 1629|  72.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.5k|    {
  451|  72.5k|        return m_value;
  452|  72.5k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  40.8k|{
 8945|  40.8k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.8k|    static_cast<    \
  |  |  929|  40.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.8k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.27k|{
 8984|  6.27k|    T value;
 8985|  6.27k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.27k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 5.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  6.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.54k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.54k|    static_cast<    \
  |  |  929|  5.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.54k|    static_cast<    \
  |  |  929|  5.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.27k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.3k|{
 5165|  12.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.3k|    basic_scan_arg<Context> arg;
 5168|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.3k|    arg.m_value = make_value<Context>(value);
 5170|  12.3k|    return arg;
 5171|  12.3k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  33.3k|{
 8878|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|   133k|{
 5406|   133k|    detail::check_scan_arg_types<Args...>();
 5407|   133k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   133k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|   205k|{
 5145|   205k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   205k|                  "Scan argument types must be default constructible");
 5147|   205k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   205k|                  "Scan argument types must be Destructible");
 5149|   205k|    static_assert(
 5150|   205k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   205k|        "Scan argument types must not be references");
 5152|   205k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|   133k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   133k|    {
 5359|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   133k|    {
 5370|   133k|        return {detail::make_arg<
 5371|   133k|            kind, Context,
 5372|   133k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   133k|                                 typename Context::char_type>::value>(args)...};
 5374|   133k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|   133k|{
 5180|   133k|    return make_value<Context>(value).ref_value;
 5181|   133k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|   143k|{
 5130|   143k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   143k|                                  needs_context_tag>) {
 5134|   143k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   143k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|   143k|    {                                                                        \
 4969|   143k|        return val;                                                          \
 4970|   143k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|   205k|{
 5099|   205k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   205k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   205k|    constexpr bool scannable_char =
 5103|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   205k|    static_assert(scannable_char,
 5105|   205k|                  "Cannot scan an argument of an unsupported character "
 5106|   205k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   205k|    constexpr bool scannable_const =
 5109|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   205k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   205k|    constexpr bool scannable_disabled =
 5113|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   205k|    static_assert(scannable_disabled,
 5115|   205k|                  "Cannot scan an argument that has been disabled by "
 5116|   205k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   205k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   205k|    static_assert(
 5120|   205k|        scannable,
 5121|   205k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   205k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   205k|    return arg_value{arg};
 5125|   205k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|   205k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   205k|    {
 4911|   205k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  66.7k|    {
 7986|  66.7k|        return m_str;
 7987|  66.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   133k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   133k|    {
 5436|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|   133k|    {
 5389|   133k|        return m_argptrs;
 5390|   133k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  66.7k|{
 8831|  66.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 52.0k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  52.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.0k|    static_cast<    \
  |  |  929|  52.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.0k|    static_cast<    \
  |  |  929|  52.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.7k|    {
 1177|  71.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|  56.3k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.3k|    {
 5840|  56.3k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5624|   113k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   113k|    {
 5626|   113k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  56.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.3k|    {
 1430|  56.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  56.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.3k|    {
  437|  56.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|   133k|    {
 5384|   133k|        return m_args;
 5385|   133k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.7k|        : m_str(r.str)
 7981|  66.7k|    {
 7982|  66.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  71.7k|    {
 1598|  71.7k|        return has_value();
 1599|  71.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.3k|    {
 1673|  56.3k|        return &value();
 1674|  56.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  56.3k|    {
 1627|  56.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.3k|        return this->get_value();
 1629|  56.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.3k|    {
  451|  56.3k|        return m_value;
  452|  56.3k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  33.3k|{
 8945|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.3k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.98k|{
 8984|  4.98k|    T value;
 8985|  4.98k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.98k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  4.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.25k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.25k|    static_cast<    \
  |  |  929|  4.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.25k|    static_cast<    \
  |  |  929|  4.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.98k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.95k|{
 5165|  9.95k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.95k|    basic_scan_arg<Context> arg;
 5168|  9.95k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.95k|    arg.m_value = make_value<Context>(value);
 5170|  9.95k|    return arg;
 5171|  9.95k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  41.5k|{
 8878|  41.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  41.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  41.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5405|   165k|{
 5406|   165k|    detail::check_scan_arg_types<Args...>();
 5407|   165k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   165k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5144|   241k|{
 5145|   241k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   241k|                  "Scan argument types must be default constructible");
 5147|   241k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   241k|                  "Scan argument types must be Destructible");
 5149|   241k|    static_assert(
 5150|   241k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   241k|        "Scan argument types must not be references");
 5152|   241k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5357|   165k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   165k|    {
 5359|   165k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   165k|    {
 5370|   165k|        return {detail::make_arg<
 5371|   165k|            kind, Context,
 5372|   165k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   165k|                                 typename Context::char_type>::value>(args)...};
 5374|   165k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|   165k|{
 5180|   165k|    return make_value<Context>(value).ref_value;
 5181|   165k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5129|   178k|{
 5130|   178k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   178k|                                  needs_context_tag>) {
 5134|   178k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   178k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4968|   178k|    {                                                                        \
 4969|   178k|        return val;                                                          \
 4970|   178k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5098|   241k|{
 5099|   241k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   241k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   241k|    constexpr bool scannable_char =
 5103|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   241k|    static_assert(scannable_char,
 5105|   241k|                  "Cannot scan an argument of an unsupported character "
 5106|   241k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   241k|    constexpr bool scannable_const =
 5109|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   241k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   241k|    constexpr bool scannable_disabled =
 5113|   241k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   241k|    static_assert(scannable_disabled,
 5115|   241k|                  "Cannot scan an argument that has been disabled by "
 5116|   241k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   241k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   241k|    static_assert(
 5120|   241k|        scannable,
 5121|   241k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   241k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   241k|    return arg_value{arg};
 5125|   241k|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4909|   241k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   241k|    {
 4911|   241k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  83.0k|    {
 7986|  83.0k|        return m_str;
 7987|  83.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   165k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   165k|    {
 5436|   165k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5388|   165k|    {
 5389|   165k|        return m_argptrs;
 5390|   165k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  83.0k|{
 8831|  83.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 68.4k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  68.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.4k|    static_cast<    \
  |  |  929|  68.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.4k|    static_cast<    \
  |  |  929|  68.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  83.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  89.4k|    {
 1177|  89.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|  74.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  74.0k|    static_cast<    \
  |  |  929|  74.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  74.0k|    static_cast<    \
  |  |  929|  74.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  74.0k|    {
 5840|  74.0k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5624|   149k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   149k|    {
 5626|   149k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  74.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  74.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  74.0k|    {
 1430|  74.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  74.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  74.0k|    {
  437|  74.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5383|   165k|    {
 5384|   165k|        return m_args;
 5385|   165k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  83.0k|        : m_str(r.str)
 7981|  83.0k|    {
 7982|  83.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  89.4k|    {
 1598|  89.4k|        return has_value();
 1599|  89.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   163k|    {
  485|   163k|        return m_has_value;
  486|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|  74.0k|    {
 1673|  74.0k|        return &value();
 1674|  74.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  74.0k|    {
 1627|  74.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  74.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  74.0k|        return this->get_value();
 1629|  74.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  74.0k|    {
  451|  74.0k|        return m_value;
  452|  74.0k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  41.5k|{
 8945|  41.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  41.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  41.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  41.5k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.39k|{
 8984|  6.39k|    T value;
 8985|  6.39k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.39k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 5.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  6.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.66k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.66k|    static_cast<    \
  |  |  929|  5.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.66k|    static_cast<    \
  |  |  929|  5.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.39k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.5k|{
 5165|  12.5k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.5k|    basic_scan_arg<Context> arg;
 5168|  12.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.5k|    arg.m_value = make_value<Context>(value);
 5170|  12.5k|    return arg;
 5171|  12.5k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  33.7k|{
 8878|  33.7k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5405|   134k|{
 5406|   134k|    detail::check_scan_arg_types<Args...>();
 5407|   134k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   134k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5144|   207k|{
 5145|   207k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   207k|                  "Scan argument types must be default constructible");
 5147|   207k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   207k|                  "Scan argument types must be Destructible");
 5149|   207k|    static_assert(
 5150|   207k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   207k|        "Scan argument types must not be references");
 5152|   207k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5357|   134k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   134k|    {
 5359|   134k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   134k|    {
 5370|   134k|        return {detail::make_arg<
 5371|   134k|            kind, Context,
 5372|   134k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   134k|                                 typename Context::char_type>::value>(args)...};
 5374|   134k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|   134k|{
 5180|   134k|    return make_value<Context>(value).ref_value;
 5181|   134k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5129|   144k|{
 5130|   144k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   144k|                                  needs_context_tag>) {
 5134|   144k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   144k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4968|   144k|    {                                                                        \
 4969|   144k|        return val;                                                          \
 4970|   144k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5098|   207k|{
 5099|   207k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   207k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   207k|    constexpr bool scannable_char =
 5103|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   207k|    static_assert(scannable_char,
 5105|   207k|                  "Cannot scan an argument of an unsupported character "
 5106|   207k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   207k|    constexpr bool scannable_const =
 5109|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   207k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   207k|    constexpr bool scannable_disabled =
 5113|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   207k|    static_assert(scannable_disabled,
 5115|   207k|                  "Cannot scan an argument that has been disabled by "
 5116|   207k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   207k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   207k|    static_assert(
 5120|   207k|        scannable,
 5121|   207k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   207k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   207k|    return arg_value{arg};
 5125|   207k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4909|   207k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   207k|    {
 4911|   207k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  67.4k|    {
 7986|  67.4k|        return m_str;
 7987|  67.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   134k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   134k|    {
 5436|   134k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5388|   134k|    {
 5389|   134k|        return m_argptrs;
 5390|   134k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  67.4k|{
 8831|  67.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 52.7k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  52.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.7k|    static_cast<    \
  |  |  929|  52.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  67.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  72.4k|    {
 1177|  72.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|  57.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  57.1k|    {
 5840|  57.1k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5624|   115k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   115k|    {
 5626|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  57.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  57.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  57.1k|    {
 1430|  57.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  57.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  57.1k|    {
  437|  57.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5383|   134k|    {
 5384|   134k|        return m_args;
 5385|   134k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  67.4k|        : m_str(r.str)
 7981|  67.4k|    {
 7982|  67.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  72.4k|    {
 1598|  72.4k|        return has_value();
 1599|  72.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   129k|    {
  485|   129k|        return m_has_value;
  486|   129k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|  57.1k|    {
 1673|  57.1k|        return &value();
 1674|  57.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  57.1k|    {
 1627|  57.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  57.1k|        return this->get_value();
 1629|  57.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  57.1k|    {
  451|  57.1k|        return m_value;
  452|  57.1k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  33.7k|{
 8945|  33.7k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.7k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.05k|{
 8984|  5.05k|    T value;
 8985|  5.05k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.05k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  5.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.31k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.31k|    static_cast<    \
  |  |  929|  4.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.31k|    static_cast<    \
  |  |  929|  4.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.05k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.0k|{
 5165|  10.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.0k|    basic_scan_arg<Context> arg;
 5168|  10.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.0k|    arg.m_value = make_value<Context>(value);
 5170|  10.0k|    return arg;
 5171|  10.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  92.2k|    {
 2724|  92.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  92.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  92.2k|    {
 2705|  92.2k|        return decay_copy(t.begin());
 2706|  92.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  9.57M|{
 1949|  9.57M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.57M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   924k|    {
 2781|   924k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   924k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   924k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   924k|    {
 2763|   924k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   924k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   924k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  35.0k|{
 8878|  35.0k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  35.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  35.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  35.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   215k|{
 8665|   215k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   215k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   215k|{
 8602|   215k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   215k|    auto result = vscan_impl(buffer, format, args);
 8605|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.9k, False: 171k]
  |  |  ------------------
  ------------------
 8606|  43.9k|        return unexpected(result.error());
 8607|  43.9k|    }
 8608|   171k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   215k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   462k|{
 4729|   462k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   462k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   462k|                  "\n"
 4733|   462k|                  "Unsupported range type given as input to a scanning "
 4734|   462k|                  "function.\n"
 4735|   462k|                  "A range needs to have a character type (value type) "
 4736|   462k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   462k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   462k|                  "to be included.\n"
 4739|   462k|                  "See the scnlib documentation for more details.");
 4740|   462k|    static_assert(
 4741|   462k|        !std::is_same_v<T, custom_char_traits>,
 4742|   462k|        "\n"
 4743|   462k|        "Unsupported range type given as input to a scanning "
 4744|   462k|        "function.\n"
 4745|   462k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   462k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   462k|        "not supported.");
 4748|   462k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   462k|                  "\n"
 4750|   462k|                  "Unsupported range type given as input to a scanning "
 4751|   462k|                  "function.\n"
 4752|   462k|                  "file_marker_found cannot be used as an "
 4753|   462k|                  "source range type to scn::scan.\n"
 4754|   462k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   462k|                  "and do not provide an explicit source range, "
 4756|   462k|                  "or use scn::scan with a FILE* directly.");
 4757|   462k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   462k|                  "\n"
 4759|   462k|                  "Unsupported range type given as input to a scanning "
 4760|   462k|                  "function.\n"
 4761|   462k|                  "In order to be scannable, a range needs to satisfy "
 4762|   462k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   462k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   462k|                  "\n"
 4765|   462k|                  "Unsupported range type given as input to a scanning "
 4766|   462k|                  "function.\n"
 4767|   462k|                  "A range needs to model forward_range and have a valid "
 4768|   462k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   462k|                  "Examples of scannable ranges are std::string, "
 4770|   462k|                  "std::string_view, "
 4771|   462k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   462k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   462k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   462k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   462k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   462k|    else {
 4714|   462k|        return make_forward_scan_buffer(r);
 4715|   462k|    }
 4716|   462k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   462k|{
 4533|   462k|    return basic_scan_forward_buffer_impl(range);
 4534|   462k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   462k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   462k|          m_cursor(ranges::begin(*m_range))
 4419|   462k|    {
 4420|   462k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   462k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   462k|    {
 4391|   462k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   462k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   462k|    {
 4159|   462k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   462k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   832k|    {
 2724|   832k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   832k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   832k|    {
 2705|   832k|        return decay_copy(t.begin());
 2706|   832k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  1.20M|    {
 3326|  1.20M|        return m_iterator;
 3327|  1.20M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  2.42M|    {
 4424|  2.42M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 148k, False: 2.27M]
  ------------------
 4425|   148k|            return false;
 4426|   148k|        }
 4427|  2.27M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.27M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.27M|        }
 4430|  2.27M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.85M, False: 427k]
  ------------------
 4431|  1.85M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.85M|                                          this->m_current_view.begin(),
 4433|  1.85M|                                          this->m_current_view.end());
 4434|  1.85M|        }
 4435|  2.27M|        m_latest = *m_cursor;
 4436|  2.27M|        ++m_cursor;
 4437|  2.27M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.27M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.27M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.27M|        }
 4441|  2.27M|        return true;
 4442|  2.42M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.98M|    {
 2781|  6.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.98M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.98M|    {
 2763|  6.98M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  7.35M|    {
 3330|  7.35M|        return m_sentinel;
 3331|  7.35M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   462k|    {
 4079|   462k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   462k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   462k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  92.2k|        : base(unexpect, std::move(e.error())),
 1474|  92.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  92.2k|    {
 1476|  92.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  92.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  92.2k|          m_has_value(false)
  446|  92.2k|    {
  447|  92.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   462k|    {
 1177|   462k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   370k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   370k|                      ranges::iterator_t<SourceRange>>) {
 5935|   370k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   370k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   370k|    {
 2724|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   370k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   370k|    {
 2705|   370k|        return decay_copy(t.begin());
 2706|   370k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   370k|{
 5920|   370k|    return ranges::end(source);
 5921|   370k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   370k|    {
 2781|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   370k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   370k|    {
 2763|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   370k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   370k|        : base(std::in_place, std::forward<U>(val)),
 1428|   370k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   370k|    {
 1430|   370k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   370k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   370k|    {
  437|   370k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  70.0k|    {
 7986|  70.0k|        return m_str;
 7987|  70.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  70.0k|{
 8831|  70.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 55.3k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  55.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.3k|    static_cast<    \
  |  |  929|  55.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.3k|    static_cast<    \
  |  |  929|  55.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  70.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   462k|    {
 1598|   462k|        return has_value();
 1599|   462k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   924k|    {
  485|   924k|        return m_has_value;
  486|   924k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  92.2k|    {
 1604|  92.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  92.2k|        return this->get_unexpected().error();
 1606|  92.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  92.2k|    {
  468|  92.2k|        return m_unexpected;
  469|  92.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  75.4k|    {
 1177|  75.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   342k|    {
 1653|   342k|        return value();
 1654|   342k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   370k|    {
 1627|   370k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   370k|        return this->get_value();
 1629|   370k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   370k|    {
  451|   370k|        return m_value;
  452|   370k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|  60.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  60.0k|    {
 5840|  60.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   370k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   370k|    {
 5691|   370k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  60.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  60.0k|    {
 1430|  60.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  60.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  60.0k|    {
  437|  60.0k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   832k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   832k|    static_cast<    \
  |  |  929|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   832k|    static_cast<    \
  |  |  929|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   832k|    {
 3312|   832k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  70.0k|        : m_str(r.str)
 7981|  70.0k|    {
 7982|  70.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  75.4k|    {
 1598|  75.4k|        return has_value();
 1599|  75.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   135k|    {
  485|   135k|        return m_has_value;
  486|   135k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|  60.0k|    {
 1673|  60.0k|        return &value();
 1674|  60.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  60.0k|    {
 1627|  60.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.0k|        return this->get_value();
 1629|  60.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.0k|    {
  451|  60.0k|        return m_value;
  452|  60.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   370k|    {
 5708|   370k|        return ranges::begin(m_range);
 5709|   370k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  35.0k|{
 8945|  35.0k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  35.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  35.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.0k|    static_cast<    \
  |  |  929|  35.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  35.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   215k|{
 8683|   215k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   215k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   215k|{
 8618|   215k|#if !SCN_DISABLE_LOCALE
 8619|   215k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   215k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   215k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   215k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.9k, False: 171k]
  |  |  ------------------
  ------------------
 8626|  43.9k|        return unexpected(result.error());
 8627|  43.9k|    }
 8628|   171k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   215k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.43k|{
 8984|  5.43k|    T value;
 8985|  5.43k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.43k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  5.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.70k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.70k|    static_cast<    \
  |  |  929|  4.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.43k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  32.2k|{
 8696|  32.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  32.2k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  32.2k|{
 8642|  32.2k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  32.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  32.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.39k, False: 27.8k]
  |  |  ------------------
  ------------------
 8646|  4.39k|        return unexpected(result.error());
 8647|  4.39k|    }
 8648|  27.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  32.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  27.8k|    {
 1663|  27.8k|        return std::move(value());
 1664|  27.8k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  30.8k|{
 8878|  30.8k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.8k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  61.6k|    {
 7986|  61.6k|        return m_str;
 7987|  61.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  61.6k|{
 8831|  61.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 47.0k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  47.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  47.0k|    static_cast<    \
  |  |  929|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  47.0k|    static_cast<    \
  |  |  929|  47.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  61.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  66.2k|    {
 1177|  66.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|  50.8k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.8k|    static_cast<    \
  |  |  929|  50.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.8k|    static_cast<    \
  |  |  929|  50.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.8k|    {
 5840|  50.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  50.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.8k|    {
 1430|  50.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  50.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.8k|    {
  437|  50.8k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  61.6k|        : m_str(r.str)
 7981|  61.6k|    {
 7982|  61.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  66.2k|    {
 1598|  66.2k|        return has_value();
 1599|  66.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   117k|    {
  485|   117k|        return m_has_value;
  486|   117k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.8k|    {
 1673|  50.8k|        return &value();
 1674|  50.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  50.8k|    {
 1627|  50.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.8k|        return this->get_value();
 1629|  50.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.8k|    {
  451|  50.8k|        return m_value;
  452|  50.8k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  30.8k|{
 8945|  30.8k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.8k|    static_cast<    \
  |  |  929|  30.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.8k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.53k|{
 8984|  4.53k|    T value;
 8985|  4.53k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.53k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 3.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  4.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.80k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.80k|    static_cast<    \
  |  |  929|  3.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.80k|    static_cast<    \
  |  |  929|  3.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.53k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  40.6k|{
 8878|  40.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.6k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  81.3k|    {
 7986|  81.3k|        return m_str;
 7987|  81.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  81.3k|{
 8831|  81.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 66.7k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  66.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.7k|    static_cast<    \
  |  |  929|  66.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.7k|    static_cast<    \
  |  |  929|  66.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  81.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  87.4k|    {
 1177|  87.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|  72.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.0k|    static_cast<    \
  |  |  929|  72.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  72.0k|    {
 5840|  72.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  72.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.0k|    {
 1430|  72.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  72.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.0k|    {
  437|  72.0k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  81.3k|        : m_str(r.str)
 7981|  81.3k|    {
 7982|  81.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  87.4k|    {
 1598|  87.4k|        return has_value();
 1599|  87.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   159k|    {
  485|   159k|        return m_has_value;
  486|   159k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|  72.0k|    {
 1673|  72.0k|        return &value();
 1674|  72.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  72.0k|    {
 1627|  72.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.0k|        return this->get_value();
 1629|  72.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.0k|    {
  451|  72.0k|        return m_value;
  452|  72.0k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  40.6k|{
 8945|  40.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.6k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.08k|{
 8984|  6.08k|    T value;
 8985|  6.08k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.08k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 5.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  6.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.35k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.35k|    static_cast<    \
  |  |  929|  5.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.35k|    static_cast<    \
  |  |  929|  5.35k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.08k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  33.3k|{
 8878|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.3k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  66.7k|    {
 7986|  66.7k|        return m_str;
 7987|  66.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  66.7k|{
 8831|  66.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 52.1k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  52.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.1k|    static_cast<    \
  |  |  929|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.1k|    static_cast<    \
  |  |  929|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.7k|    {
 1177|  71.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|  56.3k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.3k|    static_cast<    \
  |  |  929|  56.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.3k|    {
 5840|  56.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  56.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.3k|    {
 1430|  56.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  56.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.3k|    {
  437|  56.3k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.7k|        : m_str(r.str)
 7981|  66.7k|    {
 7982|  66.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  71.7k|    {
 1598|  71.7k|        return has_value();
 1599|  71.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.3k|    {
 1673|  56.3k|        return &value();
 1674|  56.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  56.3k|    {
 1627|  56.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.3k|        return this->get_value();
 1629|  56.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.3k|    {
  451|  56.3k|        return m_value;
  452|  56.3k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  33.3k|{
 8945|  33.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.3k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.96k|{
 8984|  4.96k|    T value;
 8985|  4.96k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  4.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.23k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.23k|    static_cast<    \
  |  |  929|  4.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.96k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  41.3k|{
 8878|  41.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  41.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.3k|    static_cast<    \
  |  |  929|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.3k|    static_cast<    \
  |  |  929|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  41.3k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  82.7k|    {
 7986|  82.7k|        return m_str;
 7987|  82.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  82.7k|{
 8831|  82.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 68.1k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  68.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  82.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.9k|    {
 1177|  88.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|  73.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.5k|    static_cast<    \
  |  |  929|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.5k|    static_cast<    \
  |  |  929|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  73.5k|    {
 5840|  73.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  73.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.5k|    {
 1430|  73.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  73.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.5k|    {
  437|  73.5k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  82.7k|        : m_str(r.str)
 7981|  82.7k|    {
 7982|  82.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.9k|    {
 1598|  88.9k|        return has_value();
 1599|  88.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   162k|    {
  485|   162k|        return m_has_value;
  486|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|  73.5k|    {
 1673|  73.5k|        return &value();
 1674|  73.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  73.5k|    {
 1627|  73.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  73.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  73.5k|        return this->get_value();
 1629|  73.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  73.5k|    {
  451|  73.5k|        return m_value;
  452|  73.5k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  41.3k|{
 8945|  41.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  41.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  41.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.3k|    static_cast<    \
  |  |  929|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.3k|    static_cast<    \
  |  |  929|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  41.3k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.18k|{
 8984|  6.18k|    T value;
 8985|  6.18k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.18k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 5.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  6.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.45k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.45k|    static_cast<    \
  |  |  929|  5.45k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.45k|    static_cast<    \
  |  |  929|  5.45k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.18k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  33.7k|{
 8878|  33.7k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.7k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  67.4k|    {
 7986|  67.4k|        return m_str;
 7987|  67.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  67.4k|{
 8831|  67.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 52.8k]
  |  |  ------------------
  ------------------
 8832|  14.6k|        return unexpected(result.error());
 8833|  14.6k|    }
 8834|  52.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  67.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.3k|        : base(unexpect, std::move(e.error())),
 1474|  15.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.3k|    {
 1476|  15.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.3k|          m_has_value(false)
  446|  15.3k|    {
  447|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  72.5k|    {
 1177|  72.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|  57.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  57.1k|    {
 5840|  57.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  57.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  57.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  57.1k|    {
 1430|  57.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  57.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  57.1k|    {
  437|  57.1k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  67.4k|        : m_str(r.str)
 7981|  67.4k|    {
 7982|  67.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  72.5k|    {
 1598|  72.5k|        return has_value();
 1599|  72.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   129k|    {
  485|   129k|        return m_has_value;
  486|   129k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|  57.1k|    {
 1673|  57.1k|        return &value();
 1674|  57.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  57.1k|    {
 1627|  57.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  57.1k|        return this->get_value();
 1629|  57.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  57.1k|    {
  451|  57.1k|        return m_value;
  452|  57.1k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  33.7k|{
 8945|  33.7k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.7k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.02k|{
 8984|  5.02k|    T value;
 8985|  5.02k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.02k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 732, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    732|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    732|    }                                                  \
  |  |  |  | 3667|  5.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.29k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.29k|    static_cast<    \
  |  |  929|  4.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.29k|    static_cast<    \
  |  |  929|  4.29k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.02k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   185k|    {
 2724|   185k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   185k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   185k|    {
 2705|   185k|        return decay_copy(t.begin());
 2706|   185k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   874k|{
 1949|   874k|    return SCN_FWD(t);
  ------------------
  |  |  930|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   874k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   376k|    {
 2781|   376k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   376k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   376k|    {
 2763|   376k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   376k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5405|  59.4k|{
 5406|  59.4k|    detail::check_scan_arg_types<Args...>();
 5407|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5357|  59.4k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.4k|    {
 5359|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.4k|    {
 5370|  59.4k|        return {detail::make_arg<
 5371|  59.4k|            kind, Context,
 5372|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|  59.4k|{
 5180|  59.4k|    return make_value<Context>(value).ref_value;
 5181|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5129|  62.4k|{
 5130|  62.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.4k|                                  needs_context_tag>) {
 5134|  62.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4968|  62.4k|    {                                                                        \
 4969|  62.4k|        return val;                                                          \
 4970|  62.4k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|  89.3k|{
 8602|  89.3k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  89.3k|    auto result = vscan_impl(buffer, format, args);
 8605|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.8k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  87.8k|        return unexpected(result.error());
 8607|  87.8k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  89.3k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   187k|{
 4729|   187k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   187k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   187k|                  "\n"
 4733|   187k|                  "Unsupported range type given as input to a scanning "
 4734|   187k|                  "function.\n"
 4735|   187k|                  "A range needs to have a character type (value type) "
 4736|   187k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   187k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   187k|                  "to be included.\n"
 4739|   187k|                  "See the scnlib documentation for more details.");
 4740|   187k|    static_assert(
 4741|   187k|        !std::is_same_v<T, custom_char_traits>,
 4742|   187k|        "\n"
 4743|   187k|        "Unsupported range type given as input to a scanning "
 4744|   187k|        "function.\n"
 4745|   187k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   187k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   187k|        "not supported.");
 4748|   187k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   187k|                  "\n"
 4750|   187k|                  "Unsupported range type given as input to a scanning "
 4751|   187k|                  "function.\n"
 4752|   187k|                  "file_marker_found cannot be used as an "
 4753|   187k|                  "source range type to scn::scan.\n"
 4754|   187k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   187k|                  "and do not provide an explicit source range, "
 4756|   187k|                  "or use scn::scan with a FILE* directly.");
 4757|   187k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   187k|                  "\n"
 4759|   187k|                  "Unsupported range type given as input to a scanning "
 4760|   187k|                  "function.\n"
 4761|   187k|                  "In order to be scannable, a range needs to satisfy "
 4762|   187k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   187k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   187k|                  "\n"
 4765|   187k|                  "Unsupported range type given as input to a scanning "
 4766|   187k|                  "function.\n"
 4767|   187k|                  "A range needs to model forward_range and have a valid "
 4768|   187k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   187k|                  "Examples of scannable ranges are std::string, "
 4770|   187k|                  "std::string_view, "
 4771|   187k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   187k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   187k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   187k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   187k|{
 4668|   187k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   187k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   187k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   187k|    {
 2855|   187k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   187k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   187k|    {
 2836|   187k|        return t.data();
 2837|   187k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   187k|    {
 3229|   187k|        return detail::to_address(ranges::begin(derived()));
 3230|   187k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   307k|{
  326|   307k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   307k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   307k|{
  304|   307k|    return p;
  305|   307k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   190k|    {
 2724|   190k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   190k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   190k|    {
 2705|   190k|        return decay_copy(t.begin());
 2706|   190k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  38.6M|    {
 3326|  38.6M|        return m_iterator;
 3327|  38.6M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   187k|    {
 3185|   187k|        return static_cast<const D&>(*this);
 3186|   187k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   187k|    {
 2930|   187k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   187k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   187k|    {
 2896|   187k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   187k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   408k|    {
 3342|   408k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   408k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   184k|        : base(unexpect, std::move(e.error())),
 1474|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   184k|    {
 1476|   184k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   184k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   184k|          m_has_value(false)
  446|   184k|    {
  447|   184k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   187k|    {
 1177|   187k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   117k|    {
 2724|   117k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   117k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   117k|    {
 2705|   117k|        return decay_copy(t.begin());
 2706|   117k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  37.7M|    {
 3330|  37.7M|        return m_sentinel;
 3331|  37.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.7k|    {
 7986|  29.7k|        return m_str;
 7987|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.4k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.4k|    {
 5436|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5388|  59.4k|    {
 5389|  59.4k|        return m_argptrs;
 5390|  59.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   357k|        : m_desc(desc), m_builtin_values(data)
 5487|   357k|    {
 5488|   357k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.7k|{
 8831|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 448]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   187k|    {
 1598|   187k|        return has_value();
 1599|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   375k|    {
  485|   375k|        return m_has_value;
  486|   375k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   184k|    {
 1604|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   184k|        return this->get_unexpected().error();
 1606|   184k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   184k|    {
  468|   184k|        return m_unexpected;
  469|   184k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.2k|    {
 1177|  31.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5383|  59.4k|    {
 5384|  59.4k|        return m_args;
 5385|  59.4k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.28M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.28M|    {
 3312|  1.28M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   357k|{
 7707|   357k|    return s;
 7708|   357k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   357k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.7k|        : m_str(r.str)
 7981|  29.7k|    {
 7982|  29.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  31.2k|    {
 1598|  31.2k|        return has_value();
 1599|  31.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.7k|    {
  485|  31.7k|        return m_has_value;
  486|  31.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|  89.3k|{
 8618|  89.3k|#if !SCN_DISABLE_LOCALE
 8619|  89.3k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  89.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  89.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  89.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.8k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  87.8k|        return unexpected(result.error());
 8627|  87.8k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  89.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.00k|{
 5165|  3.00k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.00k|    basic_scan_arg<Context> arg;
 5168|  3.00k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.00k|    arg.m_value = make_value<Context>(value);
 5170|  3.00k|    return arg;
 5171|  3.00k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|   375k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  9.03k|{
 8642|  9.03k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  9.03k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  9.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.78k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.78k|        return unexpected(result.error());
 8647|  8.78k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  9.03k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5405|  59.3k|{
 5406|  59.3k|    detail::check_scan_arg_types<Args...>();
 5407|  59.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5357|  59.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.3k|    {
 5359|  59.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.3k|    {
 5370|  59.3k|        return {detail::make_arg<
 5371|  59.3k|            kind, Context,
 5372|  59.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|  59.3k|{
 5180|  59.3k|    return make_value<Context>(value).ref_value;
 5181|  59.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5129|  62.3k|{
 5130|  62.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.3k|                                  needs_context_tag>) {
 5134|  62.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4968|  62.3k|    {                                                                        \
 4969|  62.3k|        return val;                                                          \
 4970|  62.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.6k|    {
 7986|  29.6k|        return m_str;
 7987|  29.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.3k|    {
 5436|  59.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5388|  59.3k|    {
 5389|  59.3k|        return m_argptrs;
 5390|  59.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.6k|{
 8831|  29.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 382]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.1k|    {
 1177|  31.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5383|  59.3k|    {
 5384|  59.3k|        return m_args;
 5385|  59.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.6k|        : m_str(r.str)
 7981|  29.6k|    {
 7982|  29.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  31.1k|    {
 1598|  31.1k|        return has_value();
 1599|  31.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.98k|{
 5165|  2.98k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.98k|    basic_scan_arg<Context> arg;
 5168|  2.98k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.98k|    arg.m_value = make_value<Context>(value);
 5170|  2.98k|    return arg;
 5171|  2.98k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  59.6k|{
 5406|  59.6k|    detail::check_scan_arg_types<Args...>();
 5407|  59.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  59.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.6k|    {
 5359|  59.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.6k|    {
 5370|  59.6k|        return {detail::make_arg<
 5371|  59.6k|            kind, Context,
 5372|  59.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  59.6k|{
 5180|  59.6k|    return make_value<Context>(value).ref_value;
 5181|  59.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  62.6k|{
 5130|  62.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.6k|                                  needs_context_tag>) {
 5134|  62.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  62.6k|    {                                                                        \
 4969|  62.6k|        return val;                                                          \
 4970|  62.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.8k|    {
 7986|  29.8k|        return m_str;
 7987|  29.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.6k|    {
 5436|  59.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  59.6k|    {
 5389|  59.6k|        return m_argptrs;
 5390|  59.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.8k|{
 8831|  29.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 554]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.3k|    {
 1177|  31.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  59.6k|    {
 5384|  59.6k|        return m_args;
 5385|  59.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.8k|        : m_str(r.str)
 7981|  29.8k|    {
 7982|  29.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  31.3k|    {
 1598|  31.3k|        return has_value();
 1599|  31.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.9k|    {
  485|  31.9k|        return m_has_value;
  486|  31.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.02k|{
 5165|  3.02k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.02k|    basic_scan_arg<Context> arg;
 5168|  3.02k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.02k|    arg.m_value = make_value<Context>(value);
 5170|  3.02k|    return arg;
 5171|  3.02k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  59.4k|{
 5406|  59.4k|    detail::check_scan_arg_types<Args...>();
 5407|  59.4k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  59.4k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.4k|    {
 5359|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.4k|    {
 5370|  59.4k|        return {detail::make_arg<
 5371|  59.4k|            kind, Context,
 5372|  59.4k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.4k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.4k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  59.4k|{
 5180|  59.4k|    return make_value<Context>(value).ref_value;
 5181|  59.4k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  62.4k|{
 5130|  62.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.4k|                                  needs_context_tag>) {
 5134|  62.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  62.4k|    {                                                                        \
 4969|  62.4k|        return val;                                                          \
 4970|  62.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.7k|    {
 7986|  29.7k|        return m_str;
 7987|  29.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.4k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.4k|    {
 5436|  59.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  59.4k|    {
 5389|  59.4k|        return m_argptrs;
 5390|  59.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.7k|{
 8831|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 440]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.2k|    {
 1177|  31.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  59.4k|    {
 5384|  59.4k|        return m_args;
 5385|  59.4k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.7k|        : m_str(r.str)
 7981|  29.7k|    {
 7982|  29.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  31.2k|    {
 1598|  31.2k|        return has_value();
 1599|  31.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.6k|    {
  485|  31.6k|        return m_has_value;
  486|  31.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.99k|{
 5165|  2.99k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.99k|    basic_scan_arg<Context> arg;
 5168|  2.99k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.99k|    arg.m_value = make_value<Context>(value);
 5170|  2.99k|    return arg;
 5171|  2.99k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5405|  59.8k|{
 5406|  59.8k|    detail::check_scan_arg_types<Args...>();
 5407|  59.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5357|  59.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.8k|    {
 5359|  59.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.8k|    {
 5370|  59.8k|        return {detail::make_arg<
 5371|  59.8k|            kind, Context,
 5372|  59.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|  59.8k|{
 5180|  59.8k|    return make_value<Context>(value).ref_value;
 5181|  59.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5129|  62.9k|{
 5130|  62.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.9k|                                  needs_context_tag>) {
 5134|  62.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4968|  62.9k|    {                                                                        \
 4969|  62.9k|        return val;                                                          \
 4970|  62.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.9k|    {
 7986|  29.9k|        return m_str;
 7987|  29.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.8k|    {
 5436|  59.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5388|  59.8k|    {
 5389|  59.8k|        return m_argptrs;
 5390|  59.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.9k|{
 8831|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 660]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.4k|    {
 1177|  31.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5383|  59.8k|    {
 5384|  59.8k|        return m_args;
 5385|  59.8k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.9k|        : m_str(r.str)
 7981|  29.9k|    {
 7982|  29.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  31.4k|    {
 1598|  31.4k|        return has_value();
 1599|  31.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  32.1k|    {
  485|  32.1k|        return m_has_value;
  486|  32.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.04k|{
 5165|  3.04k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.04k|    basic_scan_arg<Context> arg;
 5168|  3.04k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.04k|    arg.m_value = make_value<Context>(value);
 5170|  3.04k|    return arg;
 5171|  3.04k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5405|  59.6k|{
 5406|  59.6k|    detail::check_scan_arg_types<Args...>();
 5407|  59.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  59.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5357|  59.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  59.6k|    {
 5359|  59.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  59.6k|    {
 5370|  59.6k|        return {detail::make_arg<
 5371|  59.6k|            kind, Context,
 5372|  59.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  59.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  59.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|  59.6k|{
 5180|  59.6k|    return make_value<Context>(value).ref_value;
 5181|  59.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5129|  62.6k|{
 5130|  62.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  62.6k|                                  needs_context_tag>) {
 5134|  62.6k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  62.6k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4968|  62.6k|    {                                                                        \
 4969|  62.6k|        return val;                                                          \
 4970|  62.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.8k|    {
 7986|  29.8k|        return m_str;
 7987|  29.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  59.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  59.6k|    {
 5436|  59.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5388|  59.6k|    {
 5389|  59.6k|        return m_argptrs;
 5390|  59.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.8k|{
 8831|  29.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 522]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.3k|    {
 1177|  31.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5383|  59.6k|    {
 5384|  59.6k|        return m_args;
 5385|  59.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.8k|        : m_str(r.str)
 7981|  29.8k|    {
 7982|  29.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  31.3k|    {
 1598|  31.3k|        return has_value();
 1599|  31.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.8k|    {
  485|  31.8k|        return m_has_value;
  486|  31.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.01k|{
 5165|  3.01k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.01k|    basic_scan_arg<Context> arg;
 5168|  3.01k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.01k|    arg.m_value = make_value<Context>(value);
 5170|  3.01k|    return arg;
 5171|  3.01k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   184k|    {
 2724|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   184k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   184k|    {
 2705|   184k|        return decay_copy(t.begin());
 2706|   184k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   109M|{
 1949|   109M|    return SCN_FWD(t);
  ------------------
  |  |  930|   109M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   109M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   375k|    {
 2781|   375k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   375k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   375k|    {
 2763|   375k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   375k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  89.3k|{
 8602|  89.3k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  89.3k|    auto result = vscan_impl(buffer, format, args);
 8605|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.8k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  87.8k|        return unexpected(result.error());
 8607|  87.8k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  89.3k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   187k|{
 4729|   187k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   187k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   187k|                  "\n"
 4733|   187k|                  "Unsupported range type given as input to a scanning "
 4734|   187k|                  "function.\n"
 4735|   187k|                  "A range needs to have a character type (value type) "
 4736|   187k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   187k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   187k|                  "to be included.\n"
 4739|   187k|                  "See the scnlib documentation for more details.");
 4740|   187k|    static_assert(
 4741|   187k|        !std::is_same_v<T, custom_char_traits>,
 4742|   187k|        "\n"
 4743|   187k|        "Unsupported range type given as input to a scanning "
 4744|   187k|        "function.\n"
 4745|   187k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   187k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   187k|        "not supported.");
 4748|   187k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   187k|                  "\n"
 4750|   187k|                  "Unsupported range type given as input to a scanning "
 4751|   187k|                  "function.\n"
 4752|   187k|                  "file_marker_found cannot be used as an "
 4753|   187k|                  "source range type to scn::scan.\n"
 4754|   187k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   187k|                  "and do not provide an explicit source range, "
 4756|   187k|                  "or use scn::scan with a FILE* directly.");
 4757|   187k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   187k|                  "\n"
 4759|   187k|                  "Unsupported range type given as input to a scanning "
 4760|   187k|                  "function.\n"
 4761|   187k|                  "In order to be scannable, a range needs to satisfy "
 4762|   187k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   187k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   187k|                  "\n"
 4765|   187k|                  "Unsupported range type given as input to a scanning "
 4766|   187k|                  "function.\n"
 4767|   187k|                  "A range needs to model forward_range and have a valid "
 4768|   187k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   187k|                  "Examples of scannable ranges are std::string, "
 4770|   187k|                  "std::string_view, "
 4771|   187k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   187k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   187k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   187k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   187k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   187k|    else {
 4714|   187k|        return make_forward_scan_buffer(r);
 4715|   187k|    }
 4716|   187k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   187k|{
 4533|   187k|    return basic_scan_forward_buffer_impl(range);
 4534|   187k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   187k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   187k|          m_cursor(ranges::begin(*m_range))
 4419|   187k|    {
 4420|   187k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   187k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   187k|    {
 4391|   187k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   187k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   187k|    {
 4159|   187k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   187k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   190k|    {
 2724|   190k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   190k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   190k|    {
 2705|   190k|        return decay_copy(t.begin());
 2706|   190k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   194k|    {
 3326|   194k|        return m_iterator;
 3327|   194k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  36.3M|    {
 4424|  36.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 111k, False: 36.2M]
  ------------------
 4425|   111k|            return false;
 4426|   111k|        }
 4427|  36.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  36.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  36.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  36.2M|        }
 4430|  36.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 36.1M, False: 134k]
  ------------------
 4431|  36.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  36.1M|                                          this->m_current_view.begin(),
 4433|  36.1M|                                          this->m_current_view.end());
 4434|  36.1M|        }
 4435|  36.2M|        m_latest = *m_cursor;
 4436|  36.2M|        ++m_cursor;
 4437|  36.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  36.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  36.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  36.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  36.2M|        }
 4441|  36.2M|        return true;
 4442|  36.3M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   108M|    {
 2781|   108M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   108M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   108M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   108M|    {
 2763|   108M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   108M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   108M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   108M|    {
 3330|   108M|        return m_sentinel;
 3331|   108M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   187k|    {
 4079|   187k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   187k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   187k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   184k|        : base(unexpect, std::move(e.error())),
 1474|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   184k|    {
 1476|   184k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   184k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   184k|          m_has_value(false)
  446|   184k|    {
  447|   184k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   187k|    {
 1177|   187k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.25k|    {
 2724|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.25k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.25k|    {
 2705|  3.25k|        return decay_copy(t.begin());
 2706|  3.25k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.7k|    {
 7986|  29.7k|        return m_str;
 7987|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.7k|{
 8831|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 448]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   187k|    {
 1598|   187k|        return has_value();
 1599|   187k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   375k|    {
  485|   375k|        return m_has_value;
  486|   375k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   184k|    {
 1604|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   184k|        return this->get_unexpected().error();
 1606|   184k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   184k|    {
  468|   184k|        return m_unexpected;
  469|   184k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.2k|    {
 1177|  31.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   190k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   190k|    static_cast<    \
  |  |  929|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   190k|    {
 3312|   190k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.7k|        : m_str(r.str)
 7981|  29.7k|    {
 7982|  29.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  31.2k|    {
 1598|  31.2k|        return has_value();
 1599|  31.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.7k|    {
  485|  31.7k|        return m_has_value;
  486|  31.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  89.3k|{
 8618|  89.3k|#if !SCN_DISABLE_LOCALE
 8619|  89.3k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  89.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  89.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  89.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  89.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 87.8k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  87.8k|        return unexpected(result.error());
 8627|  87.8k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  89.3k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  9.03k|{
 8642|  9.03k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  9.03k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  9.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.78k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.78k|        return unexpected(result.error());
 8647|  8.78k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  9.03k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.6k|    {
 7986|  29.6k|        return m_str;
 7987|  29.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.6k|{
 8831|  29.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 382]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.1k|    {
 1177|  31.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.6k|        : m_str(r.str)
 7981|  29.6k|    {
 7982|  29.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  31.1k|    {
 1598|  31.1k|        return has_value();
 1599|  31.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.8k|    {
 7986|  29.8k|        return m_str;
 7987|  29.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.8k|{
 8831|  29.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 554]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.3k|    {
 1177|  31.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.8k|        : m_str(r.str)
 7981|  29.8k|    {
 7982|  29.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  31.3k|    {
 1598|  31.3k|        return has_value();
 1599|  31.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.9k|    {
  485|  31.9k|        return m_has_value;
  486|  31.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.7k|    {
 7986|  29.7k|        return m_str;
 7987|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.7k|{
 8831|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 440]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.2k|    {
 1177|  31.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.7k|        : m_str(r.str)
 7981|  29.7k|    {
 7982|  29.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  31.2k|    {
 1598|  31.2k|        return has_value();
 1599|  31.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.6k|    {
  485|  31.6k|        return m_has_value;
  486|  31.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.9k|    {
 7986|  29.9k|        return m_str;
 7987|  29.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.9k|{
 8831|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 660]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.4k|    {
 1177|  31.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.9k|        : m_str(r.str)
 7981|  29.9k|    {
 7982|  29.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  31.4k|    {
 1598|  31.4k|        return has_value();
 1599|  31.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  32.1k|    {
  485|  32.1k|        return m_has_value;
  486|  32.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.8k|    {
 7986|  29.8k|        return m_str;
 7987|  29.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.8k|{
 8831|  29.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 522]
  |  |  ------------------
  ------------------
 8832|  29.2k|        return unexpected(result.error());
 8833|  29.2k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.7k|        : base(unexpect, std::move(e.error())),
 1474|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.7k|    {
 1476|  30.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.7k|          m_has_value(false)
  446|  30.7k|    {
  447|  30.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  31.3k|    {
 1177|  31.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.8k|        : m_str(r.str)
 7981|  29.8k|    {
 7982|  29.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  31.3k|    {
 1598|  31.3k|        return has_value();
 1599|  31.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.8k|    {
  485|  31.8k|        return m_has_value;
  486|  31.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   764k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   764k|    {
 3564|   764k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   764k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   764k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.43M|    {
 3570|  5.43M|        return m_code == good;
 3571|  5.43M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   316k|    {
 3581|   316k|        return m_code;
 3582|   316k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  10.8M|    {
 3326|  10.8M|        return m_iterator;
 3327|  10.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  38.8M|    {
 3326|  38.8M|        return m_iterator;
 3327|  38.8M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|   872k|    {
 6232|   872k|        SCN_GCC_COMPAT_PUSH
 6233|   872k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|   872k|        switch (type) {
 6235|   162k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 162k, False: 709k]
  ------------------
 6236|   162k|                return 10;
 6237|   180k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 180k, False: 691k]
  ------------------
 6238|   180k|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 872k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|  80.3k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 80.3k, False: 792k]
  ------------------
 6243|  80.3k|                return 2;
 6244|   115k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 115k, False: 756k]
  ------------------
 6245|   115k|                return 8;
 6246|   162k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 162k, False: 709k]
  ------------------
 6247|   162k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 0, False: 872k]
  ------------------
 6248|   162k|                return 10;
 6249|   169k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 169k, False: 702k]
  ------------------
 6250|   169k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 872k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|   872k|        }
 6256|   872k|        SCN_GCC_COMPAT_POP
 6257|   872k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.05M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|   779k|    {
 6314|   779k|        m_specs.type = type;
 6315|   779k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|   105k|    {
 6376|   105k|        SCN_UNLIKELY_ATTR
 6377|   105k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|   105k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|   946k|    {
 6387|   946k|        return static_cast<bool>(m_error);
 6388|   946k|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   316k|{
 3605|   316k|    return a.code() == b;
 3606|   316k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   316k|{
 3609|   316k|    return !(a == b);
 3610|   316k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  1.09M|{
 4043|       |    // Pattern_White_Space property
 4044|  1.09M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 954k, False: 139k]
  |  Branch (4044:27): [True: 384k, False: 569k]
  ------------------
 4045|  1.09M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 9.24k, False: 699k]
  ------------------
 4046|  1.09M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 4.11k, False: 695k]
  ------------------
 4047|  1.09M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.56k, False: 694k]
  ------------------
 4048|  1.09M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 2.08k, False: 692k]
  ------------------
 4049|  1.09M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 2.48k, False: 689k]
  ------------------
 4050|  1.09M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 0, False: 689k]
  ------------------
 4051|  1.09M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   166k|{
 7074|   166k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 166k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|  27.7k|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 27.7k, False: 139k]
  ------------------
 7079|  27.7k|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 166k]
  ------------------
 7080|  58.9k|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 31.1k, False: 135k]
  ------------------
 7081|  58.9k|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 166k]
  ------------------
 7082|  90.5k|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 31.6k, False: 135k]
  ------------------
 7083|  90.5k|            return arg_type_category::integer;
 7084|       |
 7085|  24.1k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 24.1k, False: 142k]
  ------------------
 7086|  24.1k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 166k]
  ------------------
 7087|  50.1k|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 25.9k, False: 140k]
  ------------------
 7088|  50.1k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 166k]
  ------------------
 7089|  76.3k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 26.2k, False: 140k]
  ------------------
 7090|  76.3k|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 166k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 166k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 166k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 166k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 166k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 166k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 166k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 166k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 166k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 166k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 166k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 166k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 166k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 166k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   166k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   166k|            SCN_CLANG_POP
 7121|   166k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   166k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  24.0k|{
 3650|  24.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  24.0k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|   893k|{
 7160|   893k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|   893k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 893k]
  |  |  ------------------
  ------------------
 7161|      0|        return handler.on_error("Invalid type specifier for integer type");
 7162|      0|    }
 7163|   893k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 166k, False: 726k]
  ------------------
 7164|   166k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      0|            return;
 7169|      0|        }
 7170|   166k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|   166k|    }
 7176|   893k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3649|  25.5k|{
 3650|  25.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  25.5k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  65.7M|    {
 4203|  65.7M|        assert(m_begin);
 4204|  65.7M|        return m_end == nullptr;
 4205|  65.7M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   607k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   607k|    else {
 3716|   607k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   607k|    }
 3718|   607k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.44M|    {
 4220|  1.44M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.44M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.44M|        return parent()->get_segment_starting_at(position());
 4226|  1.44M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  36.0M|    {
 4214|  36.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  36.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  36.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  36.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.44M|    {
 4109|  1.44M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 387k, False: 1.06M]
  |  |  ------------------
  ------------------
 4110|  1.44M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   387k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   387k|        }
 4113|  1.06M|        const auto start = pos - m_putback_buffer.size();
 4114|  1.06M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  1.06M|        return m_current_view.substr(start);
 4116|  1.06M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|   346k|    {
 4209|   346k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   346k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   346k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  2.24M|    {
 4198|  2.24M|        return m_position;
 4199|  2.24M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.38M|    {
 4131|  1.38M|        return m_is_contiguous;
 4132|  1.38M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   147G|    {
 4203|   147G|        assert(m_begin);
 4204|   147G|        return m_end == nullptr;
 4205|   147G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  5.75k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  5.75k|    else {
 3716|  5.75k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  5.75k|    }
 3718|  5.75k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|   140k|    {
 4220|   140k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 140k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   140k|        return parent()->get_segment_starting_at(position());
 4226|   140k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  73.9G|    {
 4214|  73.9G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  73.9G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.9G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  73.9G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  73.9G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|   140k|    {
 4109|   140k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 138k]
  |  |  ------------------
  ------------------
 4110|   140k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  2.77k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  2.77k|        }
 4113|   138k|        const auto start = pos - m_putback_buffer.size();
 4114|   138k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   138k|        return m_current_view.substr(start);
 4116|   138k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|   106k|    {
 4209|   106k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   106k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   106k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|   252k|    {
 4198|   252k|        return m_position;
 4199|   252k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|   563k|    {
 4131|   563k|        return m_is_contiguous;
 4132|   563k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.08M|    {
 3180|  1.08M|        return static_cast<D&>(*this);
 3181|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.08M|    {
 3221|  1.08M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   114k|    {
 3180|   114k|        return static_cast<D&>(*this);
 3181|   114k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   114k|    {
 3221|   114k|        return detail::to_address(ranges::begin(derived()));
 3222|   114k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   339k|    {
 8180|   339k|        return ranges::subrange{begin(), end()};
 8181|   339k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   991k|    {
 8164|   991k|        return m_current;
 8165|   991k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   339k|    {
 8172|   339k|        return ranges::default_sentinel;
 8173|   339k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  3.53M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.53M|    static_cast<    \
  |  |  929|  3.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.53M|    static_cast<    \
  |  |  929|  3.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.53M|    {
 3312|  3.53M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   857k|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   435k|    {
 1837|   435k|        return detail::transform_error_impl(std::move(*this),
 1838|   435k|                                            std::forward<F>(f));
 1839|   435k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   435k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   435k|    else {
 1333|   435k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   435k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   435k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 423k, False: 12.1k]
  |  |  ------------------
  ------------------
 1335|   435k|                   ? result(*std::forward<Exp>(exp))
 1336|   435k|                   : result(unexpect,
 1337|  12.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  12.1k|                                           std::forward<Exp>(exp).error()));
 1339|   435k|    }
 1340|   435k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.19M|    {
  485|  2.19M|        return m_has_value;
  486|  2.19M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   757k|    {
 1663|   757k|        return std::move(value());
 1664|   757k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   856k|    {
 1627|   856k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   856k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   856k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   856k|        return this->get_value();
 1629|   856k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   856k|    {
  451|   856k|        return m_value;
  452|   856k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.36M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.36M|    {
 1430|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.36M|    {
  437|  1.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.52M|    {
 1177|  1.52M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  27.1k|{
 1211|  27.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  27.1k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  24.1k|    {
 1614|  24.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  24.1k|        return std::move(this->get_unexpected().error());
 1616|  24.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  24.4k|    {
  468|  24.4k|        return m_unexpected;
  469|  24.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   159k|    {
  361|   159k|        return m_unexpected;
  362|   159k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  42.2k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  42.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  42.2k|    {
 1486|  42.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   151k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   151k|          m_has_value(false)
  446|   151k|    {
  447|   151k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   107k|    {
 8180|   107k|        return ranges::subrange{begin(), end()};
 8181|   107k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|   271k|    {
 8164|   271k|        return m_current;
 8165|   271k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   107k|    {
 8172|   107k|        return ranges::default_sentinel;
 8173|   107k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|   966k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   966k|    static_cast<    \
  |  |  929|   966k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   966k|    static_cast<    \
  |  |  929|   966k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   966k|    {
 3312|   966k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   135k|    {
 1837|   135k|        return detail::transform_error_impl(std::move(*this),
 1838|   135k|                                            std::forward<F>(f));
 1839|   135k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   135k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   135k|    else {
 1333|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 133k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   135k|                   ? result(*std::forward<Exp>(exp))
 1336|   135k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   135k|    }
 1340|   135k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   653k|    {
  485|   653k|        return m_has_value;
  486|   653k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   219k|    {
 1663|   219k|        return std::move(value());
 1664|   219k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   221k|    {
 1627|   221k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   221k|        return this->get_value();
 1629|   221k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   221k|    {
  451|   221k|        return m_value;
  452|   221k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   141k|        : base(std::in_place, std::forward<U>(val)),
 1428|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   141k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   141k|    {
  437|   141k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   490k|    {
 1177|   490k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  21.7k|    {
 1614|  21.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.7k|        return std::move(this->get_unexpected().error());
 1616|  21.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.8k|    {
  468|  21.8k|        return m_unexpected;
  469|  21.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   113k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   113k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   113k|    {
 1486|   113k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   349k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   349k|          m_has_value(false)
  446|   349k|    {
  447|   349k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|   141k|{
 3650|   141k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   141k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   206k|        : m_unexpected(std::forward<Err>(e))
  346|   206k|    {
  347|   206k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   206k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   206k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   170k|        : base(unexpect, std::move(e.error())),
 1474|   170k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   170k|    {
 1476|   170k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   182k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   182k|          m_has_value(false)
  446|   182k|    {
  447|   182k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.74M|    {
 1177|  2.74M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.56M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.56M|    {
 1430|  2.56M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.56M|    {
  437|  2.56M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  2.74M|    {
 1598|  2.74M|        return has_value();
 1599|  2.74M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.49M|    {
  485|  5.49M|        return m_has_value;
  486|  5.49M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   182k|    {
 1604|   182k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   182k|        return this->get_unexpected().error();
 1606|   182k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   182k|    {
  468|   182k|        return m_unexpected;
  469|   182k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.28M|    {
 1663|  2.28M|        return std::move(value());
 1664|  2.28M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.56M|    {
 1627|  2.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.56M|        return this->get_value();
 1629|  2.56M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.56M|    {
  451|  2.56M|        return m_value;
  452|  2.56M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   348k|        : base(unexpect, std::move(e.error())),
 1474|   348k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   348k|    {
 1476|   348k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   350k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   350k|          m_has_value(false)
  446|   350k|    {
  447|   350k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   614k|    {
 1177|   614k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   263k|        : base(std::in_place, std::forward<U>(val)),
 1428|   263k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   263k|    {
 1430|   263k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   263k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   263k|    {
  437|   263k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   614k|    {
 1598|   614k|        return has_value();
 1599|   614k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.22M|    {
  485|  1.22M|        return m_has_value;
  486|  1.22M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   350k|    {
 1604|   350k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   350k|        return this->get_unexpected().error();
 1606|   350k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   350k|    {
  468|   350k|        return m_unexpected;
  469|   350k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   260k|    {
 1663|   260k|        return std::move(value());
 1664|   260k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   263k|    {
 1627|   263k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   263k|        return this->get_value();
 1629|   263k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   263k|    {
  451|   263k|        return m_value;
  452|   263k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   436k|    {
 1837|   436k|        return detail::transform_error_impl(std::move(*this),
 1838|   436k|                                            std::forward<F>(f));
 1839|   436k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   436k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   436k|    else {
 1333|   436k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   436k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   436k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 425k, False: 11.3k]
  |  |  ------------------
  ------------------
 1335|   436k|                   ? result(*std::forward<Exp>(exp))
 1336|   436k|                   : result(unexpect,
 1337|  11.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.3k|                                           std::forward<Exp>(exp).error()));
 1339|   436k|    }
 1340|   436k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.50M|    {
  485|  1.50M|        return m_has_value;
  486|  1.50M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   425k|    {
 1663|   425k|        return std::move(value());
 1664|   425k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   524k|    {
 1627|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   524k|        return this->get_value();
 1629|   524k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   524k|    {
  451|   524k|        return m_value;
  452|   524k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  11.3k|    {
 1614|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  11.3k|        return std::move(this->get_unexpected().error());
 1616|  11.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  11.6k|    {
  468|  11.6k|        return m_unexpected;
  469|  11.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.3k|    {
 1486|  11.3k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  3.57M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   108k|        : base(unexpect, std::move(e.error())),
 1474|   108k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   108k|    {
 1476|   108k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  2.35M|    {
 4289|  2.35M|        return x.is_at_end();
 4290|  2.35M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  5.02M|    {
 4333|  5.02M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 5.02M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  5.02M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 5.02M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  5.02M|        return !read_at_position();
 4340|  5.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  21.0M|    {
 4313|  21.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  21.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  21.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 21.0M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  21.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  21.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.6M, False: 2.42M]
  |  |  ------------------
  ------------------
 4320|  18.6M|            return true;
 4321|  18.6M|        }
 4322|       |
 4323|  4.70M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.42M, False: 2.27M]
  ------------------
 4324|  2.42M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 148k, False: 2.27M]
  ------------------
 4325|   148k|                return false;
 4326|   148k|            }
 4327|  2.42M|        }
 4328|  2.27M|        return true;
 4329|  2.42M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  26.1M|    {
 4089|  26.1M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  26.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  6.40M|    {
 4248|  6.40M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  6.40M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 6.40M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  6.40M|        auto res = read_at_position();
 4257|  6.40M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  6.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  6.40M|        return parent()->get_character_at(m_position);
 4259|  6.40M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  6.40M|    {
 4120|  6.40M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.02M, False: 2.37M]
  |  |  ------------------
  ------------------
 4121|  6.40M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  4.02M|            return m_putback_buffer[pos];
 4123|  4.02M|        }
 4124|  2.37M|        const auto start = pos - m_putback_buffer.size();
 4125|  2.37M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  2.37M|        return m_current_view[start];
 4127|  2.37M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.29M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.29M|    {
 1430|  1.29M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.29M|    {
  437|  1.29M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.31M|    {
 1177|  1.31M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  51.7k|        : m_unexpected(std::forward<Err>(e))
  346|  51.7k|    {
  347|  51.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  24.4k|        : base(unexpect, std::move(e.error())),
 1474|  24.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.4k|    {
 1476|  24.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  24.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.4k|          m_has_value(false)
  446|  24.4k|    {
  447|  24.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  79.8k|        : m_unexpected(std::forward<Args>(args)...)
  355|  79.8k|    {
  356|  79.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  79.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  79.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   534k|    {
 1598|   534k|        return has_value();
 1599|   534k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  98.9k|    {
 1653|  98.9k|        return value();
 1654|  98.9k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  6.30M|    {
 4283|  6.30M|        return !(lhs == rhs);
 4284|  6.30M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  6.62M|    {
 4278|  6.62M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 6.62M, False: 0]
  |  Branch (4278:46): [True: 549k, False: 6.07M]
  ------------------
 4279|  6.62M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  9.65M|    {
 4234|  9.65M|        ++m_position;
 4235|  9.65M|        (void)read_at_position();
 4236|  9.65M|        return *this;
 4237|  9.65M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  28.0k|        : m_unexpected(std::forward<Err>(e))
  346|  28.0k|    {
  347|  28.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  28.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  9.72k|        : base(unexpect, std::move(e.error())),
 1474|  9.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.72k|    {
 1476|  9.72k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  9.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.72k|          m_has_value(false)
  446|  9.72k|    {
  447|  9.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   619k|    {
 1177|   619k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   609k|        : base(std::in_place, std::forward<U>(val)),
 1428|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   609k|    {
 1430|   609k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   609k|    {
  437|   609k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   619k|    {
 1598|   619k|        return has_value();
 1599|   619k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.23M|    {
  485|  1.23M|        return m_has_value;
  486|  1.23M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  9.72k|    {
 1604|  9.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.72k|        return this->get_unexpected().error();
 1606|  9.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.72k|    {
  468|  9.72k|        return m_unexpected;
  469|  9.72k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   609k|    {
 1663|   609k|        return std::move(value());
 1664|   609k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   609k|    {
 1627|   609k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   609k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   609k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   609k|        return this->get_value();
 1629|   609k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   609k|    {
  451|   609k|        return m_value;
  452|   609k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  7.75M|    {
 3330|  7.75M|        return m_sentinel;
 3331|  7.75M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  13.0k|        : m_unexpected(std::forward<Err>(e))
  346|  13.0k|    {
  347|  13.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  13.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  13.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  1.25M|    {
  361|  1.25M|        return m_unexpected;
  362|  1.25M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   116k|        : m_unexpected(std::forward<Args>(args)...)
  355|   116k|    {
  356|   116k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   116k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  2.39M|        : m_unexpected(std::forward<Err>(e))
  346|  2.39M|    {
  347|  2.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.39M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  2.39M|    {
  361|  2.39M|        return m_unexpected;
  362|  2.39M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  2.39M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.39M|    {
  356|  2.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.39M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  51.7k|{
 1211|  51.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  51.7k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  51.7k|        : m_unexpected(std::forward<Err>(e))
  346|  51.7k|    {
  347|  51.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.7k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|   141k|{
 1211|   141k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   141k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  23.0k|{
  392|  23.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  23.0k|        T(std::forward<Args>(args)...);
  394|  23.0k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2961|   114k|    {
 2962|   114k|        return fn::impl(std::forward<T>(t));
 2963|   114k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2952|   114k|    {
 2953|   114k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|   114k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2929|   114k|    {
 2930|   114k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   114k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2895|   114k|    {
 2896|   114k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   114k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  23.0k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  23.0k|    else {
  404|  23.0k|        p->~T();
  405|  23.0k|    }
  406|  23.0k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  12.3k|        : base(unexpect, std::move(e.error())),
 1474|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.3k|    {
 1476|  12.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.3k|          m_has_value(false)
  446|  24.3k|    {
  447|  24.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.65M|    {
 1177|  1.65M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   142k|        : base(std::in_place, std::forward<U>(val)),
 1428|   142k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   142k|    {
 1430|   142k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   142k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   142k|    {
  437|   142k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   865k|        : base(unexpect, std::move(e.error())),
 1474|   865k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   865k|    {
 1476|   865k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   865k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   865k|          m_has_value(false)
  446|   865k|    {
  447|   865k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  1.33M|    {
 1598|  1.33M|        return has_value();
 1599|  1.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  2.83M|    {
  485|  2.83M|        return m_has_value;
  486|  2.83M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   379k|    {
 1604|   379k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   379k|        return this->get_unexpected().error();
 1606|   379k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   409k|    {
  468|   409k|        return m_unexpected;
  469|   409k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   423k|        : base(std::in_place, std::forward<U>(val)),
 1428|   423k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   423k|    {
 1430|   423k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   423k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   423k|    {
  437|   423k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   423k|    {
 1177|   423k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   144k|    {
 1653|   144k|        return value();
 1654|   144k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   767k|    {
 1627|   767k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   767k|        return this->get_value();
 1629|   767k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   767k|    {
  451|   767k|        return m_value;
  452|   767k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   423k|    {
 1598|   423k|        return has_value();
 1599|   423k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   847k|    {
  485|   847k|        return m_has_value;
  486|   847k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   423k|    {
 1177|   423k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   423k|    {
 1663|   423k|        return std::move(value());
 1664|   423k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   423k|    {
 1627|   423k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   423k|        return this->get_value();
 1629|   423k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   423k|    {
  451|   423k|        return m_value;
  452|   423k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   346k|    {
 1837|   346k|        return detail::transform_error_impl(std::move(*this),
 1838|   346k|                                            std::forward<F>(f));
 1839|   346k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   346k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   346k|    else {
 1333|   346k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   346k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   346k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 334k, False: 11.9k]
  |  |  ------------------
  ------------------
 1335|   346k|                   ? result(*std::forward<Exp>(exp))
 1336|   346k|                   : result(unexpect,
 1337|  11.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.9k|                                           std::forward<Exp>(exp).error()));
 1339|   346k|    }
 1340|   346k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|   625k|        : base(std::in_place, std::forward<U>(val)),
 1428|   625k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   625k|    {
 1430|   625k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   625k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   625k|    {
  437|   625k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.9k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.9k|    {
 1486|  11.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   622k|    {
 1663|   622k|        return std::move(value());
 1664|   622k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   423k|        : base(std::in_place, std::forward<U>(val)),
 1428|   423k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   423k|    {
 1430|   423k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   423k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   423k|    {
  437|   423k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   423k|    {
 1837|   423k|        return detail::transform_error_impl(std::move(*this),
 1838|   423k|                                            std::forward<F>(f));
 1839|   423k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   423k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   423k|    else {
 1333|   423k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   423k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   423k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 423k, False: 0]
  |  |  ------------------
  ------------------
 1335|   423k|                   ? result(*std::forward<Exp>(exp))
 1336|   423k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   423k|    }
 1340|   423k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   847k|    {
  485|   847k|        return m_has_value;
  486|   847k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   423k|    {
 1663|   423k|        return std::move(value());
 1664|   423k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   423k|    {
 1627|   423k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   423k|        return this->get_value();
 1629|   423k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   423k|    {
  451|   423k|        return m_value;
  452|   423k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   423k|        : base(std::in_place, std::forward<U>(val)),
 1428|   423k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   423k|    {
 1430|   423k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   423k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   423k|    {
  437|   423k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   423k|    {
 1177|   423k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   423k|    {
 1598|   423k|        return has_value();
 1599|   423k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   847k|    {
  485|   847k|        return m_has_value;
  486|   847k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   423k|    {
 1663|   423k|        return std::move(value());
 1664|   423k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   423k|    {
 1627|   423k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   423k|        return this->get_value();
 1629|   423k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   423k|    {
  451|   423k|        return m_value;
  452|   423k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   318k|    {
 1837|   318k|        return detail::transform_error_impl(std::move(*this),
 1838|   318k|                                            std::forward<F>(f));
 1839|   318k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   318k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   318k|    else {
 1333|   318k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   318k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 288k, False: 30.1k]
  |  |  ------------------
  ------------------
 1335|   318k|                   ? result(*std::forward<Exp>(exp))
 1336|   318k|                   : result(unexpect,
 1337|  30.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  30.1k|                                           std::forward<Exp>(exp).error()));
 1339|   318k|    }
 1340|   318k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|  30.1k|    {
 1614|  30.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  30.1k|        return std::move(this->get_unexpected().error());
 1616|  30.1k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  3.17k|        : base(unexpect, std::move(e.error())),
 1474|  3.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.17k|    {
 1476|  3.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  624|  3.17k|        : m_has_value(false)
  625|  3.17k|    {
  626|  3.17k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  688|  3.17k|    {
  689|  3.17k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.17k|                                  std::forward<Args>(args)...);
  691|  3.17k|        m_has_value = false;
  692|  3.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  9.51k|    {
  718|  9.51k|        return reinterpret_cast<unexpected<E>*>(
  719|  9.51k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  9.51k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  9.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  61.9k|    {
 1177|  61.9k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  58.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.7k|    {
 1430|  58.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  614|  58.7k|        : m_has_value(true)
  615|  58.7k|    {
  616|  58.7k|        construct(std::forward<Args>(args)...);
  617|  58.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  681|  58.7k|    {
  682|  58.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.7k|        m_has_value = true;
  684|  58.7k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  391|  58.7k|{
  392|  58.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.7k|        T(std::forward<Args>(args)...);
  394|  58.7k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   176k|    {
  706|   176k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   176k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   176k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1597|  61.9k|    {
 1598|  61.9k|        return has_value();
 1599|  61.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   185k|    {
  675|   185k|        return m_has_value;
  676|   185k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1603|  3.17k|    {
 1604|  3.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.17k|        return this->get_unexpected().error();
 1606|  3.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.17k|    {
  658|  3.17k|        return *unexpected_ptr();
  659|  3.17k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  58.7k|    {
 1663|  58.7k|        return std::move(value());
 1664|  58.7k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  58.7k|    {
 1627|  58.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.7k|        return this->get_value();
 1629|  58.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.7k|    {
  641|  58.7k|        return *value_ptr();
  642|  58.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   654k|    {
 3326|   654k|        return m_iterator;
 3327|   654k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   654k|    {
 3330|   654k|        return m_sentinel;
 3331|   654k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  630|  61.9k|    {
  631|  61.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.7k, False: 3.17k]
  ------------------
  632|  58.7k|            destroy_value();
  633|  58.7k|        }
  634|  3.17k|        else {
  635|  3.17k|            destroy_unexpected();
  636|  3.17k|        }
  637|  61.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.7k|    {
  696|  58.7k|        scn::detail::destroy_at(value_ptr());
  697|  58.7k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  397|  58.7k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.7k|    else {
  404|  58.7k|        p->~T();
  405|  58.7k|    }
  406|  58.7k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.17k|    {
  700|  3.17k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.17k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.52M|    {
 1598|  1.52M|        return has_value();
 1599|  1.52M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.04M|    {
  485|  3.04M|        return m_has_value;
  486|  3.04M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   151k|    {
 1604|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   151k|        return this->get_unexpected().error();
 1606|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   151k|    {
  468|   151k|        return m_unexpected;
  469|   151k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.36M|    {
 1627|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.36M|        return this->get_value();
 1629|  1.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.36M|    {
  451|  1.36M|        return m_value;
  452|  1.36M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   290k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   290k|    {
 3312|   290k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.67M|    {
 4300|  2.67M|        return !x.is_at_end();
 4301|  2.67M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  11.6k|        : base(unexpect, std::move(e.error())),
 1474|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.6k|    {
 1476|  11.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.6k|          m_has_value(false)
  446|  11.6k|    {
  447|  11.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   973k|    {
 1177|   973k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   961k|        : base(std::in_place, std::forward<U>(val)),
 1428|   961k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   961k|    {
 1430|   961k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   961k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   961k|    {
  437|   961k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|   536k|    {
 1598|   536k|        return has_value();
 1599|   536k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  98.9k|    {
 1653|  98.9k|        return value();
 1654|  98.9k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  8.76k|        : base(unexpect, std::move(e.error())),
 1474|  8.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.76k|    {
 1476|  8.76k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  8.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.76k|          m_has_value(false)
  446|  8.76k|    {
  447|  8.76k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   618k|    {
 1177|   618k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   609k|        : base(std::in_place, std::forward<U>(val)),
 1428|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   609k|    {
 1430|   609k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   609k|    {
  437|   609k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   618k|    {
 1598|   618k|        return has_value();
 1599|   618k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.23M|    {
  485|  1.23M|        return m_has_value;
  486|  1.23M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  8.76k|    {
 1604|  8.76k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.76k|        return this->get_unexpected().error();
 1606|  8.76k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  8.76k|    {
  468|  8.76k|        return m_unexpected;
  469|  8.76k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   609k|    {
 1663|   609k|        return std::move(value());
 1664|   609k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   609k|    {
 1627|   609k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   609k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   609k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   609k|        return this->get_value();
 1629|   609k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   609k|    {
  451|   609k|        return m_value;
  452|   609k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  12.5k|        : base(unexpect, std::move(e.error())),
 1474|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.5k|    {
 1476|  12.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  12.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.5k|          m_has_value(false)
  446|  12.5k|    {
  447|  12.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   995k|    {
 1177|   995k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   142k|        : base(std::in_place, std::forward<U>(val)),
 1428|   142k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   142k|    {
 1430|   142k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   142k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   142k|    {
  437|   142k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   837k|        : base(unexpect, std::move(e.error())),
 1474|   837k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   837k|    {
 1476|   837k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   837k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   837k|          m_has_value(false)
  446|   837k|    {
  447|   837k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|   995k|    {
 1598|   995k|        return has_value();
 1599|   995k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  1.50M|    {
  485|  1.50M|        return m_has_value;
  486|  1.50M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|   369k|    {
 1604|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   369k|        return this->get_unexpected().error();
 1606|   369k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   369k|    {
  468|   369k|        return m_unexpected;
  469|   369k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   425k|        : base(std::in_place, std::forward<U>(val)),
 1428|   425k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   425k|    {
 1430|   425k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   425k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   425k|    {
  437|   425k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   425k|    {
 1177|   425k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   144k|    {
 1653|   144k|        return value();
 1654|   144k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   144k|    {
 1627|   144k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   144k|        return this->get_value();
 1629|   144k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   144k|    {
  451|   144k|        return m_value;
  452|   144k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   425k|    {
 1598|   425k|        return has_value();
 1599|   425k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   851k|    {
  485|   851k|        return m_has_value;
  486|   851k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   425k|    {
 1177|   425k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   425k|    {
 1663|   425k|        return std::move(value());
 1664|   425k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   425k|    {
 1627|   425k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   425k|        return this->get_value();
 1629|   425k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   425k|    {
  451|   425k|        return m_value;
  452|   425k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.62k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.62k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.62k|    {
  437|  2.62k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   425k|        : base(std::in_place, std::forward<U>(val)),
 1428|   425k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   425k|    {
 1430|   425k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   425k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   425k|    {
  437|   425k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   425k|    {
 1837|   425k|        return detail::transform_error_impl(std::move(*this),
 1838|   425k|                                            std::forward<F>(f));
 1839|   425k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   425k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   425k|    else {
 1333|   425k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   425k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 425k, False: 0]
  |  |  ------------------
  ------------------
 1335|   425k|                   ? result(*std::forward<Exp>(exp))
 1336|   425k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   425k|    }
 1340|   425k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|   851k|    {
  485|   851k|        return m_has_value;
  486|   851k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   425k|    {
 1663|   425k|        return std::move(value());
 1664|   425k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   425k|    {
 1627|   425k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   425k|        return this->get_value();
 1629|   425k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|   425k|    {
  451|   425k|        return m_value;
  452|   425k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   425k|        : base(std::in_place, std::forward<U>(val)),
 1428|   425k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   425k|    {
 1430|   425k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   425k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   425k|    {
  437|   425k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   425k|    {
 1177|   425k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|   425k|    {
 1598|   425k|        return has_value();
 1599|   425k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|   851k|    {
  485|   851k|        return m_has_value;
  486|   851k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   425k|    {
 1663|   425k|        return std::move(value());
 1664|   425k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   425k|    {
 1627|   425k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   425k|        return this->get_value();
 1629|   425k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|   425k|    {
  451|   425k|        return m_value;
  452|   425k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|  3.36k|        : base(unexpect, std::move(e.error())),
 1474|  3.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.36k|    {
 1476|  3.36k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|  3.36k|        : m_has_value(false)
  625|  3.36k|    {
  626|  3.36k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.36k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|  3.36k|    {
  689|  3.36k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.36k|                                  std::forward<Args>(args)...);
  691|  3.36k|        m_has_value = false;
  692|  3.36k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  10.0k|    {
  718|  10.0k|        return reinterpret_cast<unexpected<E>*>(
  719|  10.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  10.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  10.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  62.0k|    {
 1177|  62.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1427|  58.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.6k|    {
 1430|  58.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  614|  58.6k|        : m_has_value(true)
  615|  58.6k|    {
  616|  58.6k|        construct(std::forward<Args>(args)...);
  617|  58.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  681|  58.6k|    {
  682|  58.6k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.6k|        m_has_value = true;
  684|  58.6k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  391|  58.6k|{
  392|  58.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.6k|        T(std::forward<Args>(args)...);
  394|  58.6k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   176k|    {
  706|   176k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   176k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   176k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|  62.0k|    {
 1598|  62.0k|        return has_value();
 1599|  62.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   186k|    {
  675|   186k|        return m_has_value;
  676|   186k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|  3.36k|    {
 1604|  3.36k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.36k|        return this->get_unexpected().error();
 1606|  3.36k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.36k|    {
  658|  3.36k|        return *unexpected_ptr();
  659|  3.36k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1662|  58.6k|    {
 1663|  58.6k|        return std::move(value());
 1664|  58.6k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1626|  58.6k|    {
 1627|  58.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.6k|        return this->get_value();
 1629|  58.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.6k|    {
  641|  58.6k|        return *value_ptr();
  642|  58.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|  62.0k|    {
  631|  62.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.6k, False: 3.36k]
  ------------------
  632|  58.6k|            destroy_value();
  633|  58.6k|        }
  634|  3.36k|        else {
  635|  3.36k|            destroy_unexpected();
  636|  3.36k|        }
  637|  62.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.6k|    {
  696|  58.6k|        scn::detail::destroy_at(value_ptr());
  697|  58.6k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  397|  58.6k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.6k|    else {
  404|  58.6k|        p->~T();
  405|  58.6k|    }
  406|  58.6k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.36k|    {
  700|  3.36k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.36k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   754k|    {
 2855|   754k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   754k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   754k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   754k|    {
 2836|   754k|        return t.data();
 2837|   754k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   553k|        : base(unexpect, std::move(e.error())),
 1474|   553k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   553k|    {
 1476|   553k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   553k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   553k|          m_has_value(false)
  446|   553k|    {
  447|   553k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.30M|    {
 1177|  1.30M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|   747k|        : base(std::in_place, std::forward<U>(val)),
 1428|   747k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   747k|    {
 1430|   747k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|   747k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   747k|    {
  437|   747k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   286k|    {
 1653|   286k|        return value();
 1654|   286k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   286k|    {
 1653|   286k|        return value();
 1654|   286k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   318k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   318k|    {
 3644|   318k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   235k|        : base(unexpect, std::move(e.error())),
 1474|   235k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   235k|    {
 1476|   235k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|   640k|    {
 4289|   640k|        return x.is_at_end();
 4290|   640k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  36.9M|    {
 4333|  36.9M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 36.9M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  36.9M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 36.9M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  36.9M|        return !read_at_position();
 4340|  36.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  73.8G|    {
 4313|  73.8G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  73.8G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.8G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  73.8G|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 73.8G]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  73.8G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  73.8G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 73.7G, False: 36.3M]
  |  |  ------------------
  ------------------
 4320|  73.7G|            return true;
 4321|  73.7G|        }
 4322|       |
 4323|  72.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 36.3M, False: 36.2M]
  ------------------
 4324|  36.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 111k, False: 36.2M]
  ------------------
 4325|   111k|                return false;
 4326|   111k|            }
 4327|  36.3M|        }
 4328|  36.2M|        return true;
 4329|  36.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  73.8G|    {
 4089|  73.8G|        return m_putback_buffer.size() + m_current_view.size();
 4090|  73.8G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  36.9M|    {
 4248|  36.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  36.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  36.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 36.9M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  36.9M|        auto res = read_at_position();
 4257|  36.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  36.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  36.9M|        return parent()->get_character_at(m_position);
 4259|  36.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  36.9M|    {
 4120|  36.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  36.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 674k, False: 36.3M]
  |  |  ------------------
  ------------------
 4121|  36.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|   674k|            return m_putback_buffer[pos];
 4123|   674k|        }
 4124|  36.3M|        const auto start = pos - m_putback_buffer.size();
 4125|  36.3M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  36.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  36.3M|        return m_current_view[start];
 4127|  36.3M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   271k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   271k|    else {
 3810|       |        // utf-32
 3811|   271k|        static_assert(sizeof(U) == 4);
 3812|   271k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   271k|        return 1;
 3814|   271k|    }
 3815|   271k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   388k|        : base(std::in_place, std::forward<U>(val)),
 1428|   388k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   388k|    {
 1430|   388k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   388k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   388k|    {
  437|   388k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   410k|    {
 1177|   410k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  21.8k|        : base(unexpect, std::move(e.error())),
 1474|  21.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.8k|    {
 1476|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  21.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.8k|          m_has_value(false)
  446|  21.8k|    {
  447|  21.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   168k|    {
 1598|   168k|        return has_value();
 1599|   168k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  73.7G|    {
 4283|  73.7G|        return !(lhs == rhs);
 4284|  73.7G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  73.7G|    {
 4278|  73.7G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 73.7G, False: 0]
  |  Branch (4278:46): [True: 36.1M, False: 73.7G]
  ------------------
 4279|  73.7G|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  73.7G|    {
 4234|  73.7G|        ++m_position;
 4235|  73.7G|        (void)read_at_position();
 4236|  73.7G|        return *this;
 4237|  73.7G|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   271k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   271k|    else {
 4016|   271k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   271k|        auto cp = static_cast<char32_t>(input.front());
 4018|   271k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 111k, False: 159k]
  |  |  ------------------
  ------------------
 4019|   111k|            return invalid_code_point;
 4020|   111k|        }
 4021|   159k|        return cp;
 4022|   271k|    }
 4023|   271k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   109k|    {
 1177|   109k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   108k|        : base(std::in_place, std::forward<U>(val)),
 1428|   108k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   108k|    {
 1430|   108k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   108k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   108k|    {
  437|   108k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   109k|    {
 1598|   109k|        return has_value();
 1599|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   219k|    {
  485|   219k|        return m_has_value;
  486|   219k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   108k|    {
 1663|   108k|        return std::move(value());
 1664|   108k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   108k|    {
 1627|   108k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   108k|        return this->get_value();
 1629|   108k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   108k|    {
  451|   108k|        return m_value;
  452|   108k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  37.5M|    {
 3330|  37.5M|        return m_sentinel;
 3331|  37.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  19.9k|        : base(unexpect, std::move(e.error())),
 1474|  19.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  39.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  39.8k|          m_has_value(false)
  446|  39.8k|    {
  447|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   531k|    {
 1177|   531k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   399k|        : base(unexpect, std::move(e.error())),
 1474|   399k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   399k|    {
 1476|   399k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   399k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   399k|          m_has_value(false)
  446|   399k|    {
  447|   399k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|   417k|    {
 1598|   417k|        return has_value();
 1599|   417k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   886k|    {
  485|   886k|        return m_has_value;
  486|   886k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   151k|    {
 1604|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   151k|        return this->get_unexpected().error();
 1606|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   262k|    {
  468|   262k|        return m_unexpected;
  469|   262k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  92.1k|    {
 1627|  92.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  92.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  92.1k|        return this->get_value();
 1629|  92.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  92.1k|    {
  451|  92.1k|        return m_value;
  452|  92.1k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   106k|    {
 1837|   106k|        return detail::transform_error_impl(std::move(*this),
 1838|   106k|                                            std::forward<F>(f));
 1839|   106k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   106k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   106k|    else {
 1333|   106k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   106k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   106k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 86.6k, False: 19.8k]
  |  |  ------------------
  ------------------
 1335|   106k|                   ? result(*std::forward<Exp>(exp))
 1336|   106k|                   : result(unexpect,
 1337|  19.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.8k|                                           std::forward<Exp>(exp).error()));
 1339|   106k|    }
 1340|   106k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  89.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  89.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  89.5k|    {
 1430|  89.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  89.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  89.5k|    {
  437|  89.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.8k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.8k|    {
 1486|  19.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  89.5k|    {
 1663|  89.5k|        return std::move(value());
 1664|  89.5k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   133k|    {
 1837|   133k|        return detail::transform_error_impl(std::move(*this),
 1838|   133k|                                            std::forward<F>(f));
 1839|   133k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   133k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   133k|    else {
 1333|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1335|   133k|                   ? result(*std::forward<Exp>(exp))
 1336|   133k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   133k|    }
 1340|   133k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   114k|    {
 1837|   114k|        return detail::transform_error_impl(std::move(*this),
 1838|   114k|                                            std::forward<F>(f));
 1839|   114k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   114k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   114k|    else {
 1333|   114k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   114k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.94k, False: 111k]
  |  |  ------------------
  ------------------
 1335|   114k|                   ? result(*std::forward<Exp>(exp))
 1336|   114k|                   : result(unexpect,
 1337|   111k|                            trivial_invoke(std::forward<F>(f),
 1338|   111k|                                           std::forward<Exp>(exp).error()));
 1339|   114k|    }
 1340|   114k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|   111k|    {
 1614|   111k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|   111k|        return std::move(this->get_unexpected().error());
 1616|   111k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  8.25k|        : base(unexpect, std::move(e.error())),
 1474|  8.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.25k|    {
 1476|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|  8.25k|        : m_has_value(false)
  625|  8.25k|    {
  626|  8.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|  8.25k|    {
  689|  8.25k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.25k|                                  std::forward<Args>(args)...);
  691|  8.25k|        m_has_value = false;
  692|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.7k|    {
  718|  24.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.6k|    {
 1177|  17.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  9.38k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.38k|    {
 1430|  9.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  614|  9.38k|        : m_has_value(true)
  615|  9.38k|    {
  616|  9.38k|        construct(std::forward<Args>(args)...);
  617|  9.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  681|  9.38k|    {
  682|  9.38k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.38k|        m_has_value = true;
  684|  9.38k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  391|  9.38k|{
  392|  9.38k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.38k|        T(std::forward<Args>(args)...);
  394|  9.38k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  28.1k|    {
  706|  28.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  28.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  28.1k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.6k|    {
 1598|  17.6k|        return has_value();
 1599|  17.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  52.9k|    {
  675|  52.9k|        return m_has_value;
  676|  52.9k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  8.25k|    {
 1604|  8.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.25k|        return this->get_unexpected().error();
 1606|  8.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  8.25k|    {
  658|  8.25k|        return *unexpected_ptr();
  659|  8.25k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1662|  9.38k|    {
 1663|  9.38k|        return std::move(value());
 1664|  9.38k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  9.38k|    {
 1627|  9.38k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.38k|        return this->get_value();
 1629|  9.38k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.38k|    {
  641|  9.38k|        return *value_ptr();
  642|  9.38k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  15.9k|    {
 3326|  15.9k|        return m_iterator;
 3327|  15.9k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  15.9k|    {
 3330|  15.9k|        return m_sentinel;
 3331|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.6k|    {
  631|  17.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.38k, False: 8.25k]
  ------------------
  632|  9.38k|            destroy_value();
  633|  9.38k|        }
  634|  8.25k|        else {
  635|  8.25k|            destroy_unexpected();
  636|  8.25k|        }
  637|  17.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.38k|    {
  696|  9.38k|        scn::detail::destroy_at(value_ptr());
  697|  9.38k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  397|  9.38k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  9.38k|    else {
  404|  9.38k|        p->~T();
  405|  9.38k|    }
  406|  9.38k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.25k|    {
  700|  8.25k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.25k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   490k|    {
 1598|   490k|        return has_value();
 1599|   490k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   981k|    {
  485|   981k|        return m_has_value;
  486|   981k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   349k|    {
 1604|   349k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   349k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   349k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   349k|        return this->get_unexpected().error();
 1606|   349k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   349k|    {
  468|   349k|        return m_unexpected;
  469|   349k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   139k|    {
 1663|   139k|        return std::move(value());
 1664|   139k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   141k|    {
 1627|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   141k|        return this->get_value();
 1629|   141k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   141k|    {
  451|   141k|        return m_value;
  452|   141k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  11.8k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.8k|    static_cast<    \
  |  |  929|  11.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.8k|    static_cast<    \
  |  |  929|  11.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  11.8k|    {
 3312|  11.8k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  36.2M|    {
 4300|  36.2M|        return !x.is_at_end();
 4301|  36.2M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  21.8k|        : base(unexpect, std::move(e.error())),
 1474|  21.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.8k|    {
 1476|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  21.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.8k|          m_has_value(false)
  446|  21.8k|    {
  447|  21.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   410k|    {
 1177|   410k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   388k|        : base(std::in_place, std::forward<U>(val)),
 1428|   388k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   388k|    {
 1430|   388k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   388k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   388k|    {
  437|   388k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   168k|    {
 1598|   168k|        return has_value();
 1599|   168k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   653k|    {
  485|   653k|        return m_has_value;
  486|   653k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   221k|    {
 1627|   221k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   221k|        return this->get_value();
 1629|   221k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   221k|    {
  451|   221k|        return m_value;
  452|   221k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   109k|    {
 1177|   109k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   108k|        : base(std::in_place, std::forward<U>(val)),
 1428|   108k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   108k|    {
 1430|   108k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   108k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   108k|    {
  437|   108k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   135k|    {
 1837|   135k|        return detail::transform_error_impl(std::move(*this),
 1838|   135k|                                            std::forward<F>(f));
 1839|   135k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   135k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   135k|    else {
 1333|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 133k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   135k|                   ? result(*std::forward<Exp>(exp))
 1336|   135k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   135k|    }
 1340|   135k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   219k|    {
 1663|   219k|        return std::move(value());
 1664|   219k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  21.7k|    {
 1614|  21.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.7k|        return std::move(this->get_unexpected().error());
 1616|  21.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.8k|    {
  468|  21.8k|        return m_unexpected;
  469|  21.8k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.86k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.86k|    {
 1486|  1.86k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   109k|    {
 1598|   109k|        return has_value();
 1599|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   219k|    {
  485|   219k|        return m_has_value;
  486|   219k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   108k|    {
 1663|   108k|        return std::move(value());
 1664|   108k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   108k|    {
 1627|   108k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   108k|        return this->get_value();
 1629|   108k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   108k|    {
  451|   108k|        return m_value;
  452|   108k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  19.9k|        : base(unexpect, std::move(e.error())),
 1474|  19.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.9k|    {
 1476|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  39.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  39.8k|          m_has_value(false)
  446|  39.8k|    {
  447|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   417k|    {
 1177|   417k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   288k|        : base(unexpect, std::move(e.error())),
 1474|   288k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   288k|    {
 1476|   288k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   288k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   288k|          m_has_value(false)
  446|   288k|    {
  447|   288k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   417k|    {
 1598|   417k|        return has_value();
 1599|   417k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   657k|    {
  485|   657k|        return m_has_value;
  486|   657k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   151k|    {
 1604|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   151k|        return this->get_unexpected().error();
 1606|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   151k|    {
  468|   151k|        return m_unexpected;
  469|   151k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  89.1k|    {
 1627|  89.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  89.1k|        return this->get_value();
 1629|  89.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  89.1k|    {
  451|  89.1k|        return m_value;
  452|  89.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   106k|    {
 1837|   106k|        return detail::transform_error_impl(std::move(*this),
 1838|   106k|                                            std::forward<F>(f));
 1839|   106k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   106k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   106k|    else {
 1333|   106k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   106k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   106k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 86.6k, False: 19.8k]
  |  |  ------------------
  ------------------
 1335|   106k|                   ? result(*std::forward<Exp>(exp))
 1336|   106k|                   : result(unexpect,
 1337|  19.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.8k|                                           std::forward<Exp>(exp).error()));
 1339|   106k|    }
 1340|   106k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  86.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  86.6k|    {
 1430|  86.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  86.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  86.6k|    {
  437|  86.6k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.8k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.8k|    {
 1486|  19.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  86.6k|    {
 1663|  86.6k|        return std::move(value());
 1664|  86.6k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   133k|    {
 1837|   133k|        return detail::transform_error_impl(std::move(*this),
 1838|   133k|                                            std::forward<F>(f));
 1839|   133k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   133k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   133k|    else {
 1333|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1335|   133k|                   ? result(*std::forward<Exp>(exp))
 1336|   133k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   133k|    }
 1340|   133k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   266k|    {
  485|   266k|        return m_has_value;
  486|   266k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   133k|    {
 1663|   133k|        return std::move(value());
 1664|   133k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  8.25k|        : base(unexpect, std::move(e.error())),
 1474|  8.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.25k|    {
 1476|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|  8.25k|        : m_has_value(false)
  625|  8.25k|    {
  626|  8.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|  8.25k|    {
  689|  8.25k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.25k|                                  std::forward<Args>(args)...);
  691|  8.25k|        m_has_value = false;
  692|  8.25k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.7k|    {
  718|  24.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.6k|    {
 1177|  17.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  9.38k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.38k|    {
 1430|  9.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  614|  9.38k|        : m_has_value(true)
  615|  9.38k|    {
  616|  9.38k|        construct(std::forward<Args>(args)...);
  617|  9.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  681|  9.38k|    {
  682|  9.38k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.38k|        m_has_value = true;
  684|  9.38k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  391|  9.38k|{
  392|  9.38k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.38k|        T(std::forward<Args>(args)...);
  394|  9.38k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  28.1k|    {
  706|  28.1k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  28.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  28.1k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.6k|    {
 1598|  17.6k|        return has_value();
 1599|  17.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  52.9k|    {
  675|  52.9k|        return m_has_value;
  676|  52.9k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  8.25k|    {
 1604|  8.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.25k|        return this->get_unexpected().error();
 1606|  8.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  8.25k|    {
  658|  8.25k|        return *unexpected_ptr();
  659|  8.25k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1662|  9.38k|    {
 1663|  9.38k|        return std::move(value());
 1664|  9.38k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  9.38k|    {
 1627|  9.38k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.38k|        return this->get_value();
 1629|  9.38k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.38k|    {
  641|  9.38k|        return *value_ptr();
  642|  9.38k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.6k|    {
  631|  17.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.38k, False: 8.25k]
  ------------------
  632|  9.38k|            destroy_value();
  633|  9.38k|        }
  634|  8.25k|        else {
  635|  8.25k|            destroy_unexpected();
  636|  8.25k|        }
  637|  17.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.38k|    {
  696|  9.38k|        scn::detail::destroy_at(value_ptr());
  697|  9.38k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  397|  9.38k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  9.38k|    else {
  404|  9.38k|        p->~T();
  405|  9.38k|    }
  406|  9.38k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.25k|    {
  700|  8.25k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.25k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   114k|    {
 2855|   114k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   114k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   114k|    {
 2836|   114k|        return t.data();
 2837|   114k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   114k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   114k|    {
 3644|   114k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3649|  16.0k|{
 3650|  16.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  16.0k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   860k|    {
 5476|   860k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   860k|        return static_cast<std::size_t>(m_desc &
 5481|   860k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   860k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.72M|    {
 5501|  1.72M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.72M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   860k|    {
 5444|   860k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   860k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   860k|        const auto t = type(id);
 5456|   860k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   860k|        basic_scan_arg<Context> arg;
 5461|   860k|        arg.m_type = t;
 5462|   860k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 860k, False: 0]
  ------------------
 5463|   860k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   860k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   860k|        return arg;
 5469|   860k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   860k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   860k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   860k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   860k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   860k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   860k|    {
 5505|   860k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   860k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.60M|    {
 5257|  1.60M|        return m_type != detail::arg_type::none_type;
 5258|  1.60M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  98.0k|{
 8428|  98.0k|#define SCN_VISIT(Type)                                         \
 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  98.0k|    }                                                           \
 8432|  98.0k|    else {                                                      \
 8433|  98.0k|        return vis(monostate_val);                              \
 8434|  98.0k|    }
 8435|       |
 8436|  98.0k|    monostate monostate_val{};
 8437|       |
 8438|  98.0k|    switch (arg.m_type) {
 8439|  16.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.3k, False: 81.7k]
  ------------------
 8440|  16.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.3k|    }                                                           \
  |  | 8432|  16.3k|    else {                                                      \
  |  | 8433|  16.3k|        return vis(monostate_val);                              \
  |  | 8434|  16.3k|    }
  ------------------
 8441|  16.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 98.0k]
  ------------------
 8442|  16.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.3k|    }                                                           \
  |  | 8432|  16.3k|    else {                                                      \
  |  | 8433|  16.3k|        return vis(monostate_val);                              \
  |  | 8434|  16.3k|    }
  ------------------
 8443|  35.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.8k, False: 79.2k]
  ------------------
 8444|  35.1k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  35.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.1k|    }                                                           \
  |  | 8432|  35.1k|    else {                                                      \
  |  | 8433|  35.1k|        return vis(monostate_val);                              \
  |  | 8434|  35.1k|    }
  ------------------
 8445|  35.1k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 98.0k]
  ------------------
 8446|  35.1k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  35.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.1k|    }                                                           \
  |  | 8432|  35.1k|    else {                                                      \
  |  | 8433|  35.1k|        return vis(monostate_val);                              \
  |  | 8434|  35.1k|    }
  ------------------
 8447|  54.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 19.1k, False: 78.8k]
  ------------------
 8448|  54.3k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  54.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.3k|    }                                                           \
  |  | 8432|  54.3k|    else {                                                      \
  |  | 8433|  54.3k|        return vis(monostate_val);                              \
  |  | 8434|  54.3k|    }
  ------------------
 8449|  67.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.6k, False: 84.4k]
  ------------------
 8450|  67.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  67.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.9k|    }                                                           \
  |  | 8432|  67.9k|    else {                                                      \
  |  | 8433|  67.9k|        return vis(monostate_val);                              \
  |  | 8434|  67.9k|    }
  ------------------
 8451|  67.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 98.0k]
  ------------------
 8452|  67.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  67.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.9k|    }                                                           \
  |  | 8432|  67.9k|    else {                                                      \
  |  | 8433|  67.9k|        return vis(monostate_val);                              \
  |  | 8434|  67.9k|    }
  ------------------
 8453|  82.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.9k, False: 83.1k]
  ------------------
 8454|  82.9k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  82.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.9k|    }                                                           \
  |  | 8432|  82.9k|    else {                                                      \
  |  | 8433|  82.9k|        return vis(monostate_val);                              \
  |  | 8434|  82.9k|    }
  ------------------
 8455|  82.9k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 98.0k]
  ------------------
 8456|  82.9k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  82.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.9k|    }                                                           \
  |  | 8432|  82.9k|    else {                                                      \
  |  | 8433|  82.9k|        return vis(monostate_val);                              \
  |  | 8434|  82.9k|    }
  ------------------
 8457|  98.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 15.1k, False: 82.9k]
  ------------------
 8458|  98.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8459|  98.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 98.0k]
  ------------------
 8460|  98.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8461|  98.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 98.0k]
  ------------------
 8462|  98.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8463|  98.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 98.0k]
  ------------------
 8464|  98.0k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8465|  98.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 98.0k]
  ------------------
 8466|  98.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8467|  98.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 98.0k]
  ------------------
 8468|  98.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8469|  98.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 98.0k]
  ------------------
 8470|  98.0k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8471|  98.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 98.0k]
  ------------------
 8472|  98.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8473|  98.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 98.0k]
  ------------------
 8474|  98.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8475|  98.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 98.0k]
  ------------------
 8476|  98.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8477|  98.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 98.0k]
  ------------------
 8478|  98.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8479|  98.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 98.0k]
  ------------------
 8480|  98.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8481|  98.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 98.0k]
  ------------------
 8482|  98.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8483|  98.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 98.0k]
  ------------------
 8484|  98.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8485|  98.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 98.0k]
  ------------------
 8486|  98.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  98.0k|    }                                                           \
  |  | 8432|  98.0k|    else {                                                      \
  |  | 8433|  98.0k|        return vis(monostate_val);                              \
  |  | 8434|  98.0k|    }
  ------------------
 8487|       |
 8488|  98.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 98.0k]
  ------------------
 8489|  98.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  98.0k|            return vis(
 8491|  98.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 98.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 98.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  98.0k|            SCN_CLANG_POP
 8506|  98.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   730k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   730k|    {
 5555|   730k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   365k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   365k|    {
 8149|   365k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   730k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   730k|    static_cast<    \
  |  |  929|   730k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   730k|    static_cast<    \
  |  |  929|   730k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   730k|    {
 8067|   730k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   462k|{
 4353|   462k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 462k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   462k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   462k|                            ranges::default_sentinel};
 4359|   462k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   462k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   462k|    {
 4185|   462k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   462k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   462k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   462k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   462k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   462k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   462k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  96.6k|{
 8428|  96.6k|#define SCN_VISIT(Type)                                         \
 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  96.6k|    }                                                           \
 8432|  96.6k|    else {                                                      \
 8433|  96.6k|        return vis(monostate_val);                              \
 8434|  96.6k|    }
 8435|       |
 8436|  96.6k|    monostate monostate_val{};
 8437|       |
 8438|  96.6k|    switch (arg.m_type) {
 8439|  16.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.3k, False: 80.3k]
  ------------------
 8440|  16.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.3k|    }                                                           \
  |  | 8432|  16.3k|    else {                                                      \
  |  | 8433|  16.3k|        return vis(monostate_val);                              \
  |  | 8434|  16.3k|    }
  ------------------
 8441|  16.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 96.6k]
  ------------------
 8442|  16.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.3k|    }                                                           \
  |  | 8432|  16.3k|    else {                                                      \
  |  | 8433|  16.3k|        return vis(monostate_val);                              \
  |  | 8434|  16.3k|    }
  ------------------
 8443|  34.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.2k, False: 78.4k]
  ------------------
 8444|  34.5k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.5k|    }                                                           \
  |  | 8432|  34.5k|    else {                                                      \
  |  | 8433|  34.5k|        return vis(monostate_val);                              \
  |  | 8434|  34.5k|    }
  ------------------
 8445|  34.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 96.6k]
  ------------------
 8446|  34.5k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.5k|    }                                                           \
  |  | 8432|  34.5k|    else {                                                      \
  |  | 8433|  34.5k|        return vis(monostate_val);                              \
  |  | 8434|  34.5k|    }
  ------------------
 8447|  53.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.5k, False: 78.1k]
  ------------------
 8448|  53.1k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  53.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  53.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  53.1k|    }                                                           \
  |  | 8432|  53.1k|    else {                                                      \
  |  | 8433|  53.1k|        return vis(monostate_val);                              \
  |  | 8434|  53.1k|    }
  ------------------
 8449|  66.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.5k, False: 83.0k]
  ------------------
 8450|  66.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  66.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.7k|    }                                                           \
  |  | 8432|  66.7k|    else {                                                      \
  |  | 8433|  66.7k|        return vis(monostate_val);                              \
  |  | 8434|  66.7k|    }
  ------------------
 8451|  66.7k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 96.6k]
  ------------------
 8452|  66.7k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  66.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.7k|    }                                                           \
  |  | 8432|  66.7k|    else {                                                      \
  |  | 8433|  66.7k|        return vis(monostate_val);                              \
  |  | 8434|  66.7k|    }
  ------------------
 8453|  81.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.8k, False: 81.7k]
  ------------------
 8454|  81.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  81.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  81.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  81.6k|    }                                                           \
  |  | 8432|  81.6k|    else {                                                      \
  |  | 8433|  81.6k|        return vis(monostate_val);                              \
  |  | 8434|  81.6k|    }
  ------------------
 8455|  81.6k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 96.6k]
  ------------------
 8456|  81.6k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  81.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  81.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  81.6k|    }                                                           \
  |  | 8432|  81.6k|    else {                                                      \
  |  | 8433|  81.6k|        return vis(monostate_val);                              \
  |  | 8434|  81.6k|    }
  ------------------
 8457|  96.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 15.0k, False: 81.6k]
  ------------------
 8458|  96.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8459|  96.6k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 96.6k]
  ------------------
 8460|  96.6k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8461|  96.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 96.6k]
  ------------------
 8462|  96.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8463|  96.6k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 96.6k]
  ------------------
 8464|  96.6k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8465|  96.6k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 96.6k]
  ------------------
 8466|  96.6k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8467|  96.6k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 96.6k]
  ------------------
 8468|  96.6k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8469|  96.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 96.6k]
  ------------------
 8470|  96.6k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8471|  96.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 96.6k]
  ------------------
 8472|  96.6k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8473|  96.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 96.6k]
  ------------------
 8474|  96.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8475|  96.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 96.6k]
  ------------------
 8476|  96.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8477|  96.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 96.6k]
  ------------------
 8478|  96.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8479|  96.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 96.6k]
  ------------------
 8480|  96.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8481|  96.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 96.6k]
  ------------------
 8482|  96.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8483|  96.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 96.6k]
  ------------------
 8484|  96.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8485|  96.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 96.6k]
  ------------------
 8486|  96.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  96.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.6k|    }                                                           \
  |  | 8432|  96.6k|    else {                                                      \
  |  | 8433|  96.6k|        return vis(monostate_val);                              \
  |  | 8434|  96.6k|    }
  ------------------
 8487|       |
 8488|  96.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 96.6k]
  ------------------
 8489|  96.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  96.6k|            return vis(
 8491|  96.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 96.6k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 96.6k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  96.6k|            SCN_CLANG_POP
 8506|  96.6k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   365k|{
 7055|   365k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   365k|    handler.check_args_exhausted();
 7057|   365k|    return handler.get_error();
 7058|   365k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   365k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   365k|    auto begin = format.data();
 7024|   365k|    auto it = begin;
 7025|   365k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   651k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 365k, False: 286k]
  ------------------
 7028|   365k|        const auto ch = *it++;
 7029|   365k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 365k, False: 0]
  ------------------
 7030|   365k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   365k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   365k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 79.0k, False: 286k]
  ------------------
 7034|  79.0k|                return;
 7035|  79.0k|            }
 7036|   365k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   365k|    }
 7047|       |
 7048|   286k|    handler.on_literal_text(begin, end);
 7049|   286k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   365k|{
 6953|   365k|    struct id_adapter {
 6954|   365k|        constexpr void operator()()
 6955|   365k|        {
 6956|   365k|            arg_id = handler.on_arg_id();
 6957|   365k|        }
 6958|   365k|        constexpr void operator()(std::size_t id)
 6959|   365k|        {
 6960|   365k|            arg_id = handler.on_arg_id(id);
 6961|   365k|        }
 6962|       |
 6963|   365k|        constexpr void on_error(const char* msg)
 6964|   365k|        {
 6965|   365k|            SCN_UNLIKELY_ATTR
 6966|   365k|            handler.on_error(msg);
 6967|   365k|        }
 6968|       |
 6969|   365k|        Handler& handler;
 6970|   365k|        std::size_t arg_id;
 6971|   365k|    };
 6972|       |
 6973|   365k|    ++begin;
 6974|   365k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   365k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 365k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   365k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 365k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   365k|    else {
 6986|   365k|        auto adapter = id_adapter{handler, 0};
 6987|   365k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   365k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   365k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 365k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   365k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 365k, False: 0]
  ------------------
 6998|   365k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   365k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   365k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.3k, False: 338k]
  |  |  |  Branch (859:45): [True: 0, False: 365k]
  |  |  |  Branch (859:45): [True: 26.3k, False: 338k]
  |  |  ------------------
  ------------------
 7004|  26.3k|                handler.on_error("Unknown format specifier");
 7005|  26.3k|                return begin;
 7006|  26.3k|            }
 7007|   365k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   365k|    }
 7014|   338k|    return begin + 1;
 7015|   365k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   730k|    {
 8050|   730k|        return m_args.get(id);
 8051|   730k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   678k|    {
 8060|   678k|        return m_locale;
 8061|   678k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   730k|    {
 5576|   730k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   730k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 730k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   730k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   730k|        do_check_arg_id(id);
 5584|   730k|        return id;
 5585|   730k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   730k|{
 6064|   730k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   730k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   730k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   365k|{
 6454|   365k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   365k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 365k, False: 0]
  |  Branch (6455:26): [True: 0, False: 365k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   365k|    handler();
 6460|   365k|    return begin;
 6461|   365k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   365k|        {
 6956|   365k|            arg_id = handler.on_arg_id();
 6957|   365k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  1.46M|    {
 5262|  1.46M|        return m_type;
 5263|  1.46M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   678k|    {
 5571|   678k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   678k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  1.40M|    {
 5560|  1.40M|        return m_format.data();
 5561|  1.40M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   365k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   365k|    {
 7133|   365k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   365k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   365k|{
 6869|   365k|    auto do_presentation = [&]() -> const CharT* {
 6870|   365k|        if (*begin == CharT{'['}) {
 6871|   365k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   365k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   365k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   365k|                return begin;
 6877|   365k|            }
 6878|   365k|            handler.on_character_set_string(set);
 6879|   365k|            return begin;
 6880|   365k|        }
 6881|   365k|        if (*begin == CharT{'/'}) {
 6882|   365k|            return parse_presentation_regex(begin, end, handler);
 6883|   365k|        }
 6884|   365k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   365k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   365k|            handler.on_error("Invalid type specifier in format string");
 6887|   365k|            return begin;
 6888|   365k|        }
 6889|   365k|        handler.on_type(type);
 6890|   365k|        return begin;
 6891|   365k|    };
 6892|       |
 6893|   365k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 365k, False: 0]
  |  Branch (6893:28): [True: 347k, False: 17.5k]
  ------------------
 6894|   365k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 338k, False: 8.78k]
  |  Branch (6894:36): [True: 273k, False: 65.4k]
  ------------------
 6895|   273k|        return do_presentation();
 6896|   273k|    }
 6897|       |
 6898|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  91.7k|    begin = parse_align(begin, end, handler);
 6904|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  91.7k|    begin = parse_width(begin, end, handler);
 6910|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  91.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 91.7k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  91.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 65.4k, False: 26.3k]
  ------------------
 6929|  65.4k|        handler.on_localized();
 6930|  65.4k|        ++begin;
 6931|  65.4k|    }
 6932|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  91.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 91.7k, False: 0]
  |  Branch (6937:25): [True: 26.3k, False: 65.4k]
  ------------------
 6938|  26.3k|        do_presentation();
 6939|  26.3k|    }
 6940|  91.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  91.7k|    return begin;
 6946|  91.7k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   695k|{
 6518|   695k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 547k, False: 148k]
  |  Branch (6518:33): [True: 547k, False: 0]
  ------------------
 6519|   695k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 130k, False: 17.5k]
  |  Branch (6519:33): [True: 130k, False: 0]
  ------------------
 6520|   695k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   299k|    auto do_presentation = [&]() -> const CharT* {
 6870|   299k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 299k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   299k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 299k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   299k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   299k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 282k]
  |  |  ------------------
  ------------------
 6886|  17.5k|            handler.on_error("Invalid type specifier in format string");
 6887|  17.5k|            return begin;
 6888|  17.5k|        }
 6889|   282k|        handler.on_type(type);
 6890|   282k|        return begin;
 6891|   299k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   599k|{
 6466|   599k|    switch (type) {
 6467|  46.2k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 46.2k, False: 553k]
  ------------------
 6468|  63.8k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 17.5k, False: 582k]
  ------------------
 6469|  63.8k|            return presentation_type::int_binary;
 6470|   130k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 130k, False: 469k]
  ------------------
 6471|   130k|            return presentation_type::int_decimal;
 6472|   148k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 148k, False: 450k]
  ------------------
 6473|   148k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 599k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  82.6k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 82.6k, False: 517k]
  ------------------
 6477|  82.6k|            return presentation_type::int_octal;
 6478|   138k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 138k, False: 461k]
  ------------------
 6479|   138k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 599k]
  ------------------
 6480|   138k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 599k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 599k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 599k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 599k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 599k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 599k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 599k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 599k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 599k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 599k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 599k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 599k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 599k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 599k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 599k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 599k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  35.1k|        default:
  ------------------
  |  Branch (6510:9): [True: 35.1k, False: 564k]
  ------------------
 6511|  35.1k|            return presentation_type::none;
 6512|   599k|    }
 6513|   599k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  91.7k|{
 6543|  91.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  91.7k|    auto check_align = [](wchar_t ch) {
 6546|  91.7k|        switch (ch) {
 6547|  91.7k|            case L'<':
 6548|  91.7k|                return align_type::left;
 6549|  91.7k|            case L'>':
 6550|  91.7k|                return align_type::right;
 6551|  91.7k|            case L'^':
 6552|  91.7k|                return align_type::center;
 6553|  91.7k|            default:
 6554|  91.7k|                return align_type::none;
 6555|  91.7k|        }
 6556|  91.7k|    };
 6557|       |
 6558|  91.7k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  91.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  |  Branch (859:45): [True: 0, False: 91.7k]
  |  |  |  Branch (859:45): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6560|  91.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  91.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  91.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  91.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  91.7k|    const auto begin_before_fill = begin;
 6570|  91.7k|    begin += potential_fill_len;
 6571|       |
 6572|  91.7k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 91.7k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  91.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  91.7k|    const auto begin_after_fill = begin;
 6578|  91.7k|    ++begin;
 6579|       |
 6580|  91.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 91.7k, False: 0]
  ------------------
 6581|  91.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  91.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 91.7k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  91.7k|    }
 6589|       |
 6590|  91.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 91.7k, False: 0]
  ------------------
 6591|  91.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 91.7k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  91.7k|        return begin_before_fill;
 6596|  91.7k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  91.7k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   183k|{
 6525|   183k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   183k|    else {
 6530|   183k|        const auto lengths =
 6531|   183k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   183k|            "\3\4";
 6533|   183k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   183k|        return len;
 6535|   183k|    }
 6536|   183k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   183k|    auto check_align = [](wchar_t ch) {
 6546|   183k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 183k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 183k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 183k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   183k|            default:
  ------------------
  |  Branch (6553:13): [True: 183k, False: 0]
  ------------------
 6554|   183k|                return align_type::none;
 6555|   183k|        }
 6556|   183k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  91.7k|{
 6608|  91.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  91.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 74.2k, False: 17.5k]
  |  Branch (6610:33): [True: 0, False: 74.2k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  91.7k|    return begin;
 6621|  91.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  65.4k|    {
 7138|  65.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  65.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 29.2k, False: 36.2k]
  ------------------
 7140|  65.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 29.2k]
  ------------------
 7141|  65.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  65.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  65.4k|        Handler::on_localized();
 7150|  65.4k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   166k|    {
 6283|   166k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   166k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   166k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   338k|{
 8428|   338k|#define SCN_VISIT(Type)                                         \
 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   338k|    }                                                           \
 8432|   338k|    else {                                                      \
 8433|   338k|        return vis(monostate_val);                              \
 8434|   338k|    }
 8435|       |
 8436|   338k|    monostate monostate_val{};
 8437|       |
 8438|   338k|    switch (arg.m_type) {
 8439|  54.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.7k, False: 284k]
  ------------------
 8440|  54.7k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.7k|    }                                                           \
  |  | 8432|  54.7k|    else {                                                      \
  |  | 8433|  54.7k|        return vis(monostate_val);                              \
  |  | 8434|  54.7k|    }
  ------------------
 8441|  54.7k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 338k]
  ------------------
 8442|  54.7k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.7k|    }                                                           \
  |  | 8432|  54.7k|    else {                                                      \
  |  | 8433|  54.7k|        return vis(monostate_val);                              \
  |  | 8434|  54.7k|    }
  ------------------
 8443|   119k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 64.7k, False: 274k]
  ------------------
 8444|   119k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   119k|    }                                                           \
  |  | 8432|   119k|    else {                                                      \
  |  | 8433|   119k|        return vis(monostate_val);                              \
  |  | 8434|   119k|    }
  ------------------
 8445|   119k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 338k]
  ------------------
 8446|   119k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   119k|    }                                                           \
  |  | 8432|   119k|    else {                                                      \
  |  | 8433|   119k|        return vis(monostate_val);                              \
  |  | 8434|   119k|    }
  ------------------
 8447|   185k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 65.8k, False: 272k]
  ------------------
 8448|   185k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   185k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   185k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   185k|    }                                                           \
  |  | 8432|   185k|    else {                                                      \
  |  | 8433|   185k|        return vis(monostate_val);                              \
  |  | 8434|   185k|    }
  ------------------
 8449|   233k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 48.1k, False: 290k]
  ------------------
 8450|   233k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   233k|    }                                                           \
  |  | 8432|   233k|    else {                                                      \
  |  | 8433|   233k|        return vis(monostate_val);                              \
  |  | 8434|   233k|    }
  ------------------
 8451|   233k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 338k]
  ------------------
 8452|   233k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   233k|    }                                                           \
  |  | 8432|   233k|    else {                                                      \
  |  | 8433|   233k|        return vis(monostate_val);                              \
  |  | 8434|   233k|    }
  ------------------
 8453|   285k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 52.3k, False: 286k]
  ------------------
 8454|   285k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   285k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   285k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   285k|    }                                                           \
  |  | 8432|   285k|    else {                                                      \
  |  | 8433|   285k|        return vis(monostate_val);                              \
  |  | 8434|   285k|    }
  ------------------
 8455|   285k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 338k]
  ------------------
 8456|   285k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   285k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   285k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   285k|    }                                                           \
  |  | 8432|   285k|    else {                                                      \
  |  | 8433|   285k|        return vis(monostate_val);                              \
  |  | 8434|   285k|    }
  ------------------
 8457|   338k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 52.9k, False: 285k]
  ------------------
 8458|   338k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8459|   338k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 338k]
  ------------------
 8460|   338k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8461|   338k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 338k]
  ------------------
 8462|   338k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8463|   338k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 338k]
  ------------------
 8464|   338k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8465|   338k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 338k]
  ------------------
 8466|   338k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8467|   338k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 338k]
  ------------------
 8468|   338k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8469|   338k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 338k]
  ------------------
 8470|   338k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8471|   338k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 338k]
  ------------------
 8472|   338k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8473|   338k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 338k]
  ------------------
 8474|   338k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8475|   338k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 338k]
  ------------------
 8476|   338k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8477|   338k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 338k]
  ------------------
 8478|   338k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8479|   338k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 338k]
  ------------------
 8480|   338k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8481|   338k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 338k]
  ------------------
 8482|   338k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8483|   338k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 338k]
  ------------------
 8484|   338k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8485|   338k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 338k]
  ------------------
 8486|   338k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   338k|    }                                                           \
  |  | 8432|   338k|    else {                                                      \
  |  | 8433|   338k|        return vis(monostate_val);                              \
  |  | 8434|   338k|    }
  ------------------
 8487|       |
 8488|   338k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 338k]
  ------------------
 8489|   338k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   338k|            return vis(
 8491|   338k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 338k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 338k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   338k|            SCN_CLANG_POP
 8506|   338k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   365k|{
 7055|   365k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   365k|    handler.check_args_exhausted();
 7057|   365k|    return handler.get_error();
 7058|   365k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   365k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   365k|    auto begin = format.data();
 7024|   365k|    auto it = begin;
 7025|   365k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   652k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 365k, False: 286k]
  ------------------
 7028|   365k|        const auto ch = *it++;
 7029|   365k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 365k, False: 0]
  ------------------
 7030|   365k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   365k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   365k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 79.0k, False: 286k]
  ------------------
 7034|  79.0k|                return;
 7035|  79.0k|            }
 7036|   365k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   365k|    }
 7047|       |
 7048|   286k|    handler.on_literal_text(begin, end);
 7049|   286k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   286k|    {
 8186|   286k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   286k|    static_cast<    \
  |  |  929|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   286k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   365k|{
 6953|   365k|    struct id_adapter {
 6954|   365k|        constexpr void operator()()
 6955|   365k|        {
 6956|   365k|            arg_id = handler.on_arg_id();
 6957|   365k|        }
 6958|   365k|        constexpr void operator()(std::size_t id)
 6959|   365k|        {
 6960|   365k|            arg_id = handler.on_arg_id(id);
 6961|   365k|        }
 6962|       |
 6963|   365k|        constexpr void on_error(const char* msg)
 6964|   365k|        {
 6965|   365k|            SCN_UNLIKELY_ATTR
 6966|   365k|            handler.on_error(msg);
 6967|   365k|        }
 6968|       |
 6969|   365k|        Handler& handler;
 6970|   365k|        std::size_t arg_id;
 6971|   365k|    };
 6972|       |
 6973|   365k|    ++begin;
 6974|   365k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   365k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 365k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   365k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 365k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   365k|    else {
 6986|   365k|        auto adapter = id_adapter{handler, 0};
 6987|   365k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   365k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   365k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 365k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   365k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 365k, False: 0]
  ------------------
 6998|   365k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   365k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   365k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.3k, False: 339k]
  |  |  |  Branch (859:45): [True: 0, False: 365k]
  |  |  |  Branch (859:45): [True: 26.3k, False: 339k]
  |  |  ------------------
  ------------------
 7004|  26.3k|                handler.on_error("Unknown format specifier");
 7005|  26.3k|                return begin;
 7006|  26.3k|            }
 7007|   365k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   365k|    }
 7014|   339k|    return begin + 1;
 7015|   365k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   365k|{
 6454|   365k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   365k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 365k, False: 0]
  |  Branch (6455:26): [True: 0, False: 365k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   365k|    handler();
 6460|   365k|    return begin;
 6461|   365k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   365k|        {
 6956|   365k|            arg_id = handler.on_arg_id();
 6957|   365k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   365k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   365k|    {
 7133|   365k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   365k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   365k|{
 6869|   365k|    auto do_presentation = [&]() -> const CharT* {
 6870|   365k|        if (*begin == CharT{'['}) {
 6871|   365k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   365k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   365k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   365k|                return begin;
 6877|   365k|            }
 6878|   365k|            handler.on_character_set_string(set);
 6879|   365k|            return begin;
 6880|   365k|        }
 6881|   365k|        if (*begin == CharT{'/'}) {
 6882|   365k|            return parse_presentation_regex(begin, end, handler);
 6883|   365k|        }
 6884|   365k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   365k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   365k|            handler.on_error("Invalid type specifier in format string");
 6887|   365k|            return begin;
 6888|   365k|        }
 6889|   365k|        handler.on_type(type);
 6890|   365k|        return begin;
 6891|   365k|    };
 6892|       |
 6893|   365k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 365k, False: 0]
  |  Branch (6893:28): [True: 348k, False: 17.5k]
  ------------------
 6894|   365k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 339k, False: 8.78k]
  |  Branch (6894:36): [True: 273k, False: 65.4k]
  ------------------
 6895|   273k|        return do_presentation();
 6896|   273k|    }
 6897|       |
 6898|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  91.8k|    begin = parse_align(begin, end, handler);
 6904|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  91.8k|    begin = parse_width(begin, end, handler);
 6910|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  91.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 91.8k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  91.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 65.4k, False: 26.3k]
  ------------------
 6929|  65.4k|        handler.on_localized();
 6930|  65.4k|        ++begin;
 6931|  65.4k|    }
 6932|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  91.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 91.8k, False: 0]
  |  Branch (6937:25): [True: 26.3k, False: 65.4k]
  ------------------
 6938|  26.3k|        do_presentation();
 6939|  26.3k|    }
 6940|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  91.8k|    return begin;
 6946|  91.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   300k|    auto do_presentation = [&]() -> const CharT* {
 6870|   300k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 300k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   300k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 300k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   300k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   300k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 282k]
  |  |  ------------------
  ------------------
 6886|  17.5k|            handler.on_error("Invalid type specifier in format string");
 6887|  17.5k|            return begin;
 6888|  17.5k|        }
 6889|   282k|        handler.on_type(type);
 6890|   282k|        return begin;
 6891|   300k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  91.8k|{
 6543|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  91.8k|    auto check_align = [](wchar_t ch) {
 6546|  91.8k|        switch (ch) {
 6547|  91.8k|            case L'<':
 6548|  91.8k|                return align_type::left;
 6549|  91.8k|            case L'>':
 6550|  91.8k|                return align_type::right;
 6551|  91.8k|            case L'^':
 6552|  91.8k|                return align_type::center;
 6553|  91.8k|            default:
 6554|  91.8k|                return align_type::none;
 6555|  91.8k|        }
 6556|  91.8k|    };
 6557|       |
 6558|  91.8k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  91.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  |  Branch (859:45): [True: 0, False: 91.8k]
  |  |  |  Branch (859:45): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6560|  91.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  91.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  91.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  91.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  91.8k|    const auto begin_before_fill = begin;
 6570|  91.8k|    begin += potential_fill_len;
 6571|       |
 6572|  91.8k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 91.8k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  91.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  91.8k|    const auto begin_after_fill = begin;
 6578|  91.8k|    ++begin;
 6579|       |
 6580|  91.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 91.8k, False: 0]
  ------------------
 6581|  91.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  91.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 91.8k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  91.8k|    }
 6589|       |
 6590|  91.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 91.8k, False: 0]
  ------------------
 6591|  91.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 91.8k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  91.8k|        return begin_before_fill;
 6596|  91.8k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  91.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   183k|    auto check_align = [](wchar_t ch) {
 6546|   183k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 183k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 183k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 183k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   183k|            default:
  ------------------
  |  Branch (6553:13): [True: 183k, False: 0]
  ------------------
 6554|   183k|                return align_type::none;
 6555|   183k|        }
 6556|   183k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  91.8k|{
 6608|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  91.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 74.2k, False: 17.5k]
  |  Branch (6610:33): [True: 0, False: 74.2k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  91.8k|    return begin;
 6621|  91.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  65.4k|    {
 7138|  65.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  65.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 29.2k, False: 36.2k]
  ------------------
 7140|  65.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 29.2k]
  ------------------
 7141|  65.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  65.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  65.4k|        Handler::on_localized();
 7150|  65.4k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   339k|{
 8428|   339k|#define SCN_VISIT(Type)                                         \
 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   339k|    }                                                           \
 8432|   339k|    else {                                                      \
 8433|   339k|        return vis(monostate_val);                              \
 8434|   339k|    }
 8435|       |
 8436|   339k|    monostate monostate_val{};
 8437|       |
 8438|   339k|    switch (arg.m_type) {
 8439|  54.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.7k, False: 284k]
  ------------------
 8440|  54.7k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.7k|    }                                                           \
  |  | 8432|  54.7k|    else {                                                      \
  |  | 8433|  54.7k|        return vis(monostate_val);                              \
  |  | 8434|  54.7k|    }
  ------------------
 8441|  54.7k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 339k]
  ------------------
 8442|  54.7k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.7k|    }                                                           \
  |  | 8432|  54.7k|    else {                                                      \
  |  | 8433|  54.7k|        return vis(monostate_val);                              \
  |  | 8434|  54.7k|    }
  ------------------
 8443|   119k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 64.8k, False: 274k]
  ------------------
 8444|   119k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   119k|    }                                                           \
  |  | 8432|   119k|    else {                                                      \
  |  | 8433|   119k|        return vis(monostate_val);                              \
  |  | 8434|   119k|    }
  ------------------
 8445|   119k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 339k]
  ------------------
 8446|   119k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   119k|    }                                                           \
  |  | 8432|   119k|    else {                                                      \
  |  | 8433|   119k|        return vis(monostate_val);                              \
  |  | 8434|   119k|    }
  ------------------
 8447|   185k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 66.0k, False: 273k]
  ------------------
 8448|   185k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   185k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   185k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   185k|    }                                                           \
  |  | 8432|   185k|    else {                                                      \
  |  | 8433|   185k|        return vis(monostate_val);                              \
  |  | 8434|   185k|    }
  ------------------
 8449|   233k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 48.2k, False: 291k]
  ------------------
 8450|   233k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   233k|    }                                                           \
  |  | 8432|   233k|    else {                                                      \
  |  | 8433|   233k|        return vis(monostate_val);                              \
  |  | 8434|   233k|    }
  ------------------
 8451|   233k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 339k]
  ------------------
 8452|   233k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   233k|    }                                                           \
  |  | 8432|   233k|    else {                                                      \
  |  | 8433|   233k|        return vis(monostate_val);                              \
  |  | 8434|   233k|    }
  ------------------
 8453|   286k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 52.4k, False: 286k]
  ------------------
 8454|   286k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   286k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   286k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   286k|    }                                                           \
  |  | 8432|   286k|    else {                                                      \
  |  | 8433|   286k|        return vis(monostate_val);                              \
  |  | 8434|   286k|    }
  ------------------
 8455|   286k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 339k]
  ------------------
 8456|   286k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   286k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   286k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   286k|    }                                                           \
  |  | 8432|   286k|    else {                                                      \
  |  | 8433|   286k|        return vis(monostate_val);                              \
  |  | 8434|   286k|    }
  ------------------
 8457|   339k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 53.0k, False: 286k]
  ------------------
 8458|   339k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8459|   339k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 339k]
  ------------------
 8460|   339k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8461|   339k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 339k]
  ------------------
 8462|   339k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8463|   339k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 339k]
  ------------------
 8464|   339k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8465|   339k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 339k]
  ------------------
 8466|   339k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8467|   339k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 339k]
  ------------------
 8468|   339k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8469|   339k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 339k]
  ------------------
 8470|   339k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8471|   339k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 339k]
  ------------------
 8472|   339k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8473|   339k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 339k]
  ------------------
 8474|   339k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8475|   339k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 339k]
  ------------------
 8476|   339k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8477|   339k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 339k]
  ------------------
 8478|   339k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8479|   339k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 339k]
  ------------------
 8480|   339k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8481|   339k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 339k]
  ------------------
 8482|   339k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8483|   339k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 339k]
  ------------------
 8484|   339k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8485|   339k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 339k]
  ------------------
 8486|   339k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   339k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   339k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   339k|    }                                                           \
  |  | 8432|   339k|    else {                                                      \
  |  | 8433|   339k|        return vis(monostate_val);                              \
  |  | 8434|   339k|    }
  ------------------
 8487|       |
 8488|   339k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 339k]
  ------------------
 8489|   339k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   339k|            return vis(
 8491|   339k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 339k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 339k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   339k|            SCN_CLANG_POP
 8506|   339k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  92.2k|    {
 4084|  92.2k|        sync(0);
 4085|  92.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   357k|    {
 5476|   357k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   357k|        return static_cast<std::size_t>(m_desc &
 5481|   357k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   357k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   714k|    {
 5501|   714k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   714k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|   357k|    {
 5444|   357k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   357k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   357k|        const auto t = type(id);
 5456|   357k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 357k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   357k|        basic_scan_arg<Context> arg;
 5461|   357k|        arg.m_type = t;
 5462|   357k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 357k, False: 0]
  ------------------
 5463|   357k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   357k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   357k|        return arg;
 5469|   357k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|   357k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   357k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   357k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   357k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   357k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|   357k|    {
 5505|   357k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   357k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   591k|    {
 5257|   591k|        return m_type != detail::arg_type::none_type;
 5258|   591k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  27.0k|{
 8428|  27.0k|#define SCN_VISIT(Type)                                         \
 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  27.0k|    }                                                           \
 8432|  27.0k|    else {                                                      \
 8433|  27.0k|        return vis(monostate_val);                              \
 8434|  27.0k|    }
 8435|       |
 8436|  27.0k|    monostate monostate_val{};
 8437|       |
 8438|  27.0k|    switch (arg.m_type) {
 8439|  4.50k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.50k, False: 22.5k]
  ------------------
 8440|  4.50k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.50k|    }                                                           \
  |  | 8432|  4.50k|    else {                                                      \
  |  | 8433|  4.50k|        return vis(monostate_val);                              \
  |  | 8434|  4.50k|    }
  ------------------
 8441|  4.50k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 27.0k]
  ------------------
 8442|  4.50k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.50k|    }                                                           \
  |  | 8432|  4.50k|    else {                                                      \
  |  | 8433|  4.50k|        return vis(monostate_val);                              \
  |  | 8434|  4.50k|    }
  ------------------
 8443|  9.03k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.53k, False: 22.5k]
  ------------------
 8444|  9.03k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  9.03k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.03k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.03k|    }                                                           \
  |  | 8432|  9.03k|    else {                                                      \
  |  | 8433|  9.03k|        return vis(monostate_val);                              \
  |  | 8434|  9.03k|    }
  ------------------
 8445|  9.03k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 27.0k]
  ------------------
 8446|  9.03k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  9.03k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.03k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.03k|    }                                                           \
  |  | 8432|  9.03k|    else {                                                      \
  |  | 8433|  9.03k|        return vis(monostate_val);                              \
  |  | 8434|  9.03k|    }
  ------------------
 8447|  13.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.56k, False: 22.5k]
  ------------------
 8448|  13.5k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.5k|    }                                                           \
  |  | 8432|  13.5k|    else {                                                      \
  |  | 8433|  13.5k|        return vis(monostate_val);                              \
  |  | 8434|  13.5k|    }
  ------------------
 8449|  18.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.47k, False: 22.6k]
  ------------------
 8450|  18.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  18.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  18.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  18.0k|    }                                                           \
  |  | 8432|  18.0k|    else {                                                      \
  |  | 8433|  18.0k|        return vis(monostate_val);                              \
  |  | 8434|  18.0k|    }
  ------------------
 8451|  18.0k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 27.0k]
  ------------------
 8452|  18.0k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  18.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  18.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  18.0k|    }                                                           \
  |  | 8432|  18.0k|    else {                                                      \
  |  | 8433|  18.0k|        return vis(monostate_val);                              \
  |  | 8434|  18.0k|    }
  ------------------
 8453|  22.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.49k, False: 22.5k]
  ------------------
 8454|  22.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.5k|    }                                                           \
  |  | 8432|  22.5k|    else {                                                      \
  |  | 8433|  22.5k|        return vis(monostate_val);                              \
  |  | 8434|  22.5k|    }
  ------------------
 8455|  22.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 27.0k]
  ------------------
 8456|  22.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.5k|    }                                                           \
  |  | 8432|  22.5k|    else {                                                      \
  |  | 8433|  22.5k|        return vis(monostate_val);                              \
  |  | 8434|  22.5k|    }
  ------------------
 8457|  27.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.52k, False: 22.5k]
  ------------------
 8458|  27.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8459|  27.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 27.0k]
  ------------------
 8460|  27.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8461|  27.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 27.0k]
  ------------------
 8462|  27.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8463|  27.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 27.0k]
  ------------------
 8464|  27.0k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8465|  27.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 27.0k]
  ------------------
 8466|  27.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8467|  27.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 27.0k]
  ------------------
 8468|  27.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8469|  27.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 27.0k]
  ------------------
 8470|  27.0k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8471|  27.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 27.0k]
  ------------------
 8472|  27.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8473|  27.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 27.0k]
  ------------------
 8474|  27.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8475|  27.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 27.0k]
  ------------------
 8476|  27.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8477|  27.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 27.0k]
  ------------------
 8478|  27.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8479|  27.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 27.0k]
  ------------------
 8480|  27.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8481|  27.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 27.0k]
  ------------------
 8482|  27.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8483|  27.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 27.0k]
  ------------------
 8484|  27.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8485|  27.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 27.0k]
  ------------------
 8486|  27.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8487|       |
 8488|  27.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 27.0k]
  ------------------
 8489|  27.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  27.0k|            return vis(
 8491|  27.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 27.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 27.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  27.0k|            SCN_CLANG_POP
 8506|  27.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   321k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   321k|    {
 5555|   321k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   160k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   160k|    {
 8149|   160k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   321k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   321k|    static_cast<    \
  |  |  929|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   321k|    static_cast<    \
  |  |  929|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   321k|    {
 8067|   321k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   160k|{
 7055|   160k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   160k|    handler.check_args_exhausted();
 7057|   160k|    return handler.get_error();
 7058|   160k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   160k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   160k|    auto begin = format.data();
 7024|   160k|    auto it = begin;
 7025|   160k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   163k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 160k, False: 2.51k]
  ------------------
 7028|   160k|        const auto ch = *it++;
 7029|   160k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 160k, False: 0]
  ------------------
 7030|   160k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   160k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   160k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 158k, False: 2.51k]
  ------------------
 7034|   158k|                return;
 7035|   158k|            }
 7036|   160k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   160k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   160k|{
 6953|   160k|    struct id_adapter {
 6954|   160k|        constexpr void operator()()
 6955|   160k|        {
 6956|   160k|            arg_id = handler.on_arg_id();
 6957|   160k|        }
 6958|   160k|        constexpr void operator()(std::size_t id)
 6959|   160k|        {
 6960|   160k|            arg_id = handler.on_arg_id(id);
 6961|   160k|        }
 6962|       |
 6963|   160k|        constexpr void on_error(const char* msg)
 6964|   160k|        {
 6965|   160k|            SCN_UNLIKELY_ATTR
 6966|   160k|            handler.on_error(msg);
 6967|   160k|        }
 6968|       |
 6969|   160k|        Handler& handler;
 6970|   160k|        std::size_t arg_id;
 6971|   160k|    };
 6972|       |
 6973|   160k|    ++begin;
 6974|   160k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   160k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 160k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   160k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 160k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   160k|    else {
 6986|   160k|        auto adapter = id_adapter{handler, 0};
 6987|   160k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   160k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   160k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 160k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   160k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 160k, False: 0]
  ------------------
 6998|   160k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   160k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   160k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.7k, False: 107k]
  |  |  |  Branch (859:45): [True: 0, False: 160k]
  |  |  |  Branch (859:45): [True: 52.7k, False: 107k]
  |  |  ------------------
  ------------------
 7004|  52.7k|                handler.on_error("Unknown format specifier");
 7005|  52.7k|                return begin;
 7006|  52.7k|            }
 7007|   160k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   160k|    }
 7014|   107k|    return begin + 1;
 7015|   160k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   321k|    {
 8050|   321k|        return m_args.get(id);
 8051|   321k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   215k|    {
 8060|   215k|        return m_locale;
 8061|   215k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   321k|    {
 5576|   321k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 321k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   321k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   321k|        do_check_arg_id(id);
 5584|   321k|        return id;
 5585|   321k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   321k|{
 6064|   321k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   321k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   321k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   160k|{
 6454|   160k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   160k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 160k, False: 0]
  |  Branch (6455:26): [True: 0, False: 160k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   160k|    handler();
 6460|   160k|    return begin;
 6461|   160k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   160k|        {
 6956|   160k|            arg_id = handler.on_arg_id();
 6957|   160k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   642k|    {
 5262|   642k|        return m_type;
 5263|   642k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   215k|    {
 5571|   215k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   215k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   187k|{
 4353|   187k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 187k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   187k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   187k|                            ranges::default_sentinel};
 4359|   187k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   187k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   187k|    {
 4185|   187k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   187k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   187k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|   537k|    {
 5560|   537k|        return m_format.data();
 5561|   537k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   160k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   160k|    {
 7133|   160k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   160k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   160k|{
 6869|   160k|    auto do_presentation = [&]() -> const CharT* {
 6870|   160k|        if (*begin == CharT{'['}) {
 6871|   160k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   160k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   160k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   160k|                return begin;
 6877|   160k|            }
 6878|   160k|            handler.on_character_set_string(set);
 6879|   160k|            return begin;
 6880|   160k|        }
 6881|   160k|        if (*begin == CharT{'/'}) {
 6882|   160k|            return parse_presentation_regex(begin, end, handler);
 6883|   160k|        }
 6884|   160k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   160k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   160k|            handler.on_error("Invalid type specifier in format string");
 6887|   160k|            return begin;
 6888|   160k|        }
 6889|   160k|        handler.on_type(type);
 6890|   160k|        return begin;
 6891|   160k|    };
 6892|       |
 6893|   160k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 160k, False: 0]
  |  Branch (6893:28): [True: 125k, False: 35.1k]
  ------------------
 6894|   160k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 107k, False: 17.5k]
  |  Branch (6894:36): [True: 89.9k, False: 18.0k]
  ------------------
 6895|  89.9k|        return do_presentation();
 6896|  89.9k|    }
 6897|       |
 6898|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  70.7k|    begin = parse_align(begin, end, handler);
 6904|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  70.7k|    begin = parse_width(begin, end, handler);
 6910|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  70.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 70.7k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  70.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 18.0k, False: 52.7k]
  ------------------
 6929|  18.0k|        handler.on_localized();
 6930|  18.0k|        ++begin;
 6931|  18.0k|    }
 6932|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  70.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 70.7k, False: 0]
  |  Branch (6937:25): [True: 52.7k, False: 18.0k]
  ------------------
 6938|  52.7k|        do_presentation();
 6939|  52.7k|    }
 6940|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  70.7k|    return begin;
 6946|  70.7k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   250k|{
 6518|   250k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 179k, False: 71.1k]
  |  Branch (6518:33): [True: 179k, False: 0]
  ------------------
 6519|   250k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 36.0k, False: 35.1k]
  |  Branch (6519:33): [True: 36.0k, False: 0]
  ------------------
 6520|   250k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   142k|    auto do_presentation = [&]() -> const CharT* {
 6870|   142k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 142k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   142k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 142k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   142k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   142k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.1k, False: 107k]
  |  |  ------------------
  ------------------
 6886|  35.1k|            handler.on_error("Invalid type specifier in format string");
 6887|  35.1k|            return begin;
 6888|  35.1k|        }
 6889|   107k|        handler.on_type(type);
 6890|   107k|        return begin;
 6891|   142k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   285k|{
 6466|   285k|    switch (type) {
 6467|  35.6k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 35.6k, False: 249k]
  ------------------
 6468|  70.7k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 35.1k, False: 250k]
  ------------------
 6469|  70.7k|            return presentation_type::int_binary;
 6470|  36.1k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 36.1k, False: 249k]
  ------------------
 6471|  36.1k|            return presentation_type::int_decimal;
 6472|  36.1k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 36.1k, False: 249k]
  ------------------
 6473|  36.1k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 285k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  35.7k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 35.7k, False: 249k]
  ------------------
 6477|  35.7k|            return presentation_type::int_octal;
 6478|  36.2k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 36.2k, False: 249k]
  ------------------
 6479|  36.2k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 285k]
  ------------------
 6480|  36.2k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 285k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 285k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 285k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 285k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 285k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 285k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 285k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 285k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 285k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 285k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 285k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 285k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 285k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 285k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 285k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 285k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  70.2k|        default:
  ------------------
  |  Branch (6510:9): [True: 70.2k, False: 214k]
  ------------------
 6511|  70.2k|            return presentation_type::none;
 6512|   285k|    }
 6513|   285k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  70.7k|{
 6543|  70.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  70.7k|    auto check_align = [](wchar_t ch) {
 6546|  70.7k|        switch (ch) {
 6547|  70.7k|            case L'<':
 6548|  70.7k|                return align_type::left;
 6549|  70.7k|            case L'>':
 6550|  70.7k|                return align_type::right;
 6551|  70.7k|            case L'^':
 6552|  70.7k|                return align_type::center;
 6553|  70.7k|            default:
 6554|  70.7k|                return align_type::none;
 6555|  70.7k|        }
 6556|  70.7k|    };
 6557|       |
 6558|  70.7k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  70.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  |  Branch (859:45): [True: 0, False: 70.7k]
  |  |  |  Branch (859:45): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6560|  70.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  70.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  70.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  70.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  70.7k|    const auto begin_before_fill = begin;
 6570|  70.7k|    begin += potential_fill_len;
 6571|       |
 6572|  70.7k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 70.7k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  70.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  70.7k|    const auto begin_after_fill = begin;
 6578|  70.7k|    ++begin;
 6579|       |
 6580|  70.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 70.7k, False: 0]
  ------------------
 6581|  70.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  70.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 70.7k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  70.7k|    }
 6589|       |
 6590|  70.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 70.7k, False: 0]
  ------------------
 6591|  70.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 70.7k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  70.7k|        return begin_before_fill;
 6596|  70.7k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  70.7k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   141k|{
 6525|   141k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   141k|    if constexpr (sizeof(CharT) != 1) {
 6527|   141k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   141k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   141k|    auto check_align = [](wchar_t ch) {
 6546|   141k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 141k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 141k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 141k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   141k|            default:
  ------------------
  |  Branch (6553:13): [True: 141k, False: 0]
  ------------------
 6554|   141k|                return align_type::none;
 6555|   141k|        }
 6556|   141k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  70.7k|{
 6608|  70.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  70.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 35.5k, False: 35.1k]
  |  Branch (6610:33): [True: 0, False: 35.5k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  70.7k|    return begin;
 6621|  70.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  18.0k|    {
 7138|  18.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  18.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.96k, False: 9.03k]
  ------------------
 7140|  18.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.96k]
  ------------------
 7141|  18.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  18.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  18.0k|        Handler::on_localized();
 7150|  18.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   107k|{
 8428|   107k|#define SCN_VISIT(Type)                                         \
 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   107k|    }                                                           \
 8432|   107k|    else {                                                      \
 8433|   107k|        return vis(monostate_val);                              \
 8434|   107k|    }
 8435|       |
 8436|   107k|    monostate monostate_val{};
 8437|       |
 8438|   107k|    switch (arg.m_type) {
 8439|  17.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.9k, False: 89.9k]
  ------------------
 8440|  17.9k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.9k|    }                                                           \
  |  | 8432|  17.9k|    else {                                                      \
  |  | 8433|  17.9k|        return vis(monostate_val);                              \
  |  | 8434|  17.9k|    }
  ------------------
 8441|  17.9k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 107k]
  ------------------
 8442|  17.9k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.9k|    }                                                           \
  |  | 8432|  17.9k|    else {                                                      \
  |  | 8433|  17.9k|        return vis(monostate_val);                              \
  |  | 8434|  17.9k|    }
  ------------------
 8443|  35.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.0k, False: 89.8k]
  ------------------
 8444|  35.9k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.9k|    }                                                           \
  |  | 8432|  35.9k|    else {                                                      \
  |  | 8433|  35.9k|        return vis(monostate_val);                              \
  |  | 8434|  35.9k|    }
  ------------------
 8445|  35.9k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 107k]
  ------------------
 8446|  35.9k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.9k|    }                                                           \
  |  | 8432|  35.9k|    else {                                                      \
  |  | 8433|  35.9k|        return vis(monostate_val);                              \
  |  | 8434|  35.9k|    }
  ------------------
 8447|  54.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.1k, False: 89.8k]
  ------------------
 8448|  54.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8449|  71.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.8k, False: 90.0k]
  ------------------
 8450|  71.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  71.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.9k|    }                                                           \
  |  | 8432|  71.9k|    else {                                                      \
  |  | 8433|  71.9k|        return vis(monostate_val);                              \
  |  | 8434|  71.9k|    }
  ------------------
 8451|  71.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 107k]
  ------------------
 8452|  71.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  71.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.9k|    }                                                           \
  |  | 8432|  71.9k|    else {                                                      \
  |  | 8433|  71.9k|        return vis(monostate_val);                              \
  |  | 8434|  71.9k|    }
  ------------------
 8453|  89.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.9k, False: 89.9k]
  ------------------
 8454|  89.9k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8455|  89.9k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 107k]
  ------------------
 8456|  89.9k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8457|   107k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 18.0k, False: 89.9k]
  ------------------
 8458|   107k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8459|   107k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 107k]
  ------------------
 8460|   107k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8461|   107k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 107k]
  ------------------
 8462|   107k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8463|   107k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 107k]
  ------------------
 8464|   107k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8465|   107k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 107k]
  ------------------
 8466|   107k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8467|   107k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 107k]
  ------------------
 8468|   107k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8469|   107k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 107k]
  ------------------
 8470|   107k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8471|   107k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 107k]
  ------------------
 8472|   107k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8473|   107k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 107k]
  ------------------
 8474|   107k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8475|   107k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 107k]
  ------------------
 8476|   107k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8477|   107k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 107k]
  ------------------
 8478|   107k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8479|   107k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 107k]
  ------------------
 8480|   107k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8481|   107k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 107k]
  ------------------
 8482|   107k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8483|   107k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 107k]
  ------------------
 8484|   107k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8485|   107k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 107k]
  ------------------
 8486|   107k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8487|       |
 8488|   107k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 107k]
  ------------------
 8489|   107k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   107k|            return vis(
 8491|   107k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 107k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 107k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   107k|            SCN_CLANG_POP
 8506|   107k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  27.0k|{
 8428|  27.0k|#define SCN_VISIT(Type)                                         \
 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  27.0k|    }                                                           \
 8432|  27.0k|    else {                                                      \
 8433|  27.0k|        return vis(monostate_val);                              \
 8434|  27.0k|    }
 8435|       |
 8436|  27.0k|    monostate monostate_val{};
 8437|       |
 8438|  27.0k|    switch (arg.m_type) {
 8439|  4.50k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.50k, False: 22.5k]
  ------------------
 8440|  4.50k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.50k|    }                                                           \
  |  | 8432|  4.50k|    else {                                                      \
  |  | 8433|  4.50k|        return vis(monostate_val);                              \
  |  | 8434|  4.50k|    }
  ------------------
 8441|  4.50k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 27.0k]
  ------------------
 8442|  4.50k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.50k|    }                                                           \
  |  | 8432|  4.50k|    else {                                                      \
  |  | 8433|  4.50k|        return vis(monostate_val);                              \
  |  | 8434|  4.50k|    }
  ------------------
 8443|  9.03k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.53k, False: 22.5k]
  ------------------
 8444|  9.03k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  9.03k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.03k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.03k|    }                                                           \
  |  | 8432|  9.03k|    else {                                                      \
  |  | 8433|  9.03k|        return vis(monostate_val);                              \
  |  | 8434|  9.03k|    }
  ------------------
 8445|  9.03k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 27.0k]
  ------------------
 8446|  9.03k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  9.03k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.03k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.03k|    }                                                           \
  |  | 8432|  9.03k|    else {                                                      \
  |  | 8433|  9.03k|        return vis(monostate_val);                              \
  |  | 8434|  9.03k|    }
  ------------------
 8447|  13.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.56k, False: 22.5k]
  ------------------
 8448|  13.5k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.5k|    }                                                           \
  |  | 8432|  13.5k|    else {                                                      \
  |  | 8433|  13.5k|        return vis(monostate_val);                              \
  |  | 8434|  13.5k|    }
  ------------------
 8449|  18.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.47k, False: 22.6k]
  ------------------
 8450|  18.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  18.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  18.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  18.0k|    }                                                           \
  |  | 8432|  18.0k|    else {                                                      \
  |  | 8433|  18.0k|        return vis(monostate_val);                              \
  |  | 8434|  18.0k|    }
  ------------------
 8451|  18.0k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 27.0k]
  ------------------
 8452|  18.0k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  18.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  18.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  18.0k|    }                                                           \
  |  | 8432|  18.0k|    else {                                                      \
  |  | 8433|  18.0k|        return vis(monostate_val);                              \
  |  | 8434|  18.0k|    }
  ------------------
 8453|  22.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.49k, False: 22.5k]
  ------------------
 8454|  22.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.5k|    }                                                           \
  |  | 8432|  22.5k|    else {                                                      \
  |  | 8433|  22.5k|        return vis(monostate_val);                              \
  |  | 8434|  22.5k|    }
  ------------------
 8455|  22.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 27.0k]
  ------------------
 8456|  22.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.5k|    }                                                           \
  |  | 8432|  22.5k|    else {                                                      \
  |  | 8433|  22.5k|        return vis(monostate_val);                              \
  |  | 8434|  22.5k|    }
  ------------------
 8457|  27.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.52k, False: 22.5k]
  ------------------
 8458|  27.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8459|  27.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 27.0k]
  ------------------
 8460|  27.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8461|  27.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 27.0k]
  ------------------
 8462|  27.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8463|  27.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 27.0k]
  ------------------
 8464|  27.0k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8465|  27.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 27.0k]
  ------------------
 8466|  27.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8467|  27.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 27.0k]
  ------------------
 8468|  27.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8469|  27.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 27.0k]
  ------------------
 8470|  27.0k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8471|  27.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 27.0k]
  ------------------
 8472|  27.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8473|  27.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 27.0k]
  ------------------
 8474|  27.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8475|  27.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 27.0k]
  ------------------
 8476|  27.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8477|  27.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 27.0k]
  ------------------
 8478|  27.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8479|  27.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 27.0k]
  ------------------
 8480|  27.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8481|  27.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 27.0k]
  ------------------
 8482|  27.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8483|  27.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 27.0k]
  ------------------
 8484|  27.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8485|  27.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 27.0k]
  ------------------
 8486|  27.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  27.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  27.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  27.0k|    }                                                           \
  |  | 8432|  27.0k|    else {                                                      \
  |  | 8433|  27.0k|        return vis(monostate_val);                              \
  |  | 8434|  27.0k|    }
  ------------------
 8487|       |
 8488|  27.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 27.0k]
  ------------------
 8489|  27.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  27.0k|            return vis(
 8491|  27.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 27.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 27.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  27.0k|            SCN_CLANG_POP
 8506|  27.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   160k|{
 7055|   160k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   160k|    handler.check_args_exhausted();
 7057|   160k|    return handler.get_error();
 7058|   160k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   160k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   160k|    auto begin = format.data();
 7024|   160k|    auto it = begin;
 7025|   160k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   163k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 160k, False: 2.51k]
  ------------------
 7028|   160k|        const auto ch = *it++;
 7029|   160k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 160k, False: 0]
  ------------------
 7030|   160k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   160k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   160k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 158k, False: 2.51k]
  ------------------
 7034|   158k|                return;
 7035|   158k|            }
 7036|   160k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   160k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|  2.51k|    {
 8186|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  2.51k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   160k|{
 6953|   160k|    struct id_adapter {
 6954|   160k|        constexpr void operator()()
 6955|   160k|        {
 6956|   160k|            arg_id = handler.on_arg_id();
 6957|   160k|        }
 6958|   160k|        constexpr void operator()(std::size_t id)
 6959|   160k|        {
 6960|   160k|            arg_id = handler.on_arg_id(id);
 6961|   160k|        }
 6962|       |
 6963|   160k|        constexpr void on_error(const char* msg)
 6964|   160k|        {
 6965|   160k|            SCN_UNLIKELY_ATTR
 6966|   160k|            handler.on_error(msg);
 6967|   160k|        }
 6968|       |
 6969|   160k|        Handler& handler;
 6970|   160k|        std::size_t arg_id;
 6971|   160k|    };
 6972|       |
 6973|   160k|    ++begin;
 6974|   160k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   160k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 160k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   160k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 160k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   160k|    else {
 6986|   160k|        auto adapter = id_adapter{handler, 0};
 6987|   160k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   160k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   160k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 160k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   160k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 160k, False: 0]
  ------------------
 6998|   160k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   160k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   160k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.7k, False: 107k]
  |  |  |  Branch (859:45): [True: 0, False: 160k]
  |  |  |  Branch (859:45): [True: 52.7k, False: 107k]
  |  |  ------------------
  ------------------
 7004|  52.7k|                handler.on_error("Unknown format specifier");
 7005|  52.7k|                return begin;
 7006|  52.7k|            }
 7007|   160k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   160k|    }
 7014|   107k|    return begin + 1;
 7015|   160k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   160k|{
 6454|   160k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   160k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 160k, False: 0]
  |  Branch (6455:26): [True: 0, False: 160k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   160k|    handler();
 6460|   160k|    return begin;
 6461|   160k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   160k|        {
 6956|   160k|            arg_id = handler.on_arg_id();
 6957|   160k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   160k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   160k|    {
 7133|   160k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   160k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   160k|{
 6869|   160k|    auto do_presentation = [&]() -> const CharT* {
 6870|   160k|        if (*begin == CharT{'['}) {
 6871|   160k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   160k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   160k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   160k|                return begin;
 6877|   160k|            }
 6878|   160k|            handler.on_character_set_string(set);
 6879|   160k|            return begin;
 6880|   160k|        }
 6881|   160k|        if (*begin == CharT{'/'}) {
 6882|   160k|            return parse_presentation_regex(begin, end, handler);
 6883|   160k|        }
 6884|   160k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   160k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   160k|            handler.on_error("Invalid type specifier in format string");
 6887|   160k|            return begin;
 6888|   160k|        }
 6889|   160k|        handler.on_type(type);
 6890|   160k|        return begin;
 6891|   160k|    };
 6892|       |
 6893|   160k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 160k, False: 0]
  |  Branch (6893:28): [True: 125k, False: 35.1k]
  ------------------
 6894|   160k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 107k, False: 17.5k]
  |  Branch (6894:36): [True: 89.9k, False: 18.0k]
  ------------------
 6895|  89.9k|        return do_presentation();
 6896|  89.9k|    }
 6897|       |
 6898|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  70.7k|    begin = parse_align(begin, end, handler);
 6904|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  70.7k|    begin = parse_width(begin, end, handler);
 6910|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  70.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 70.7k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  70.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 18.0k, False: 52.7k]
  ------------------
 6929|  18.0k|        handler.on_localized();
 6930|  18.0k|        ++begin;
 6931|  18.0k|    }
 6932|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  70.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 70.7k, False: 0]
  |  Branch (6937:25): [True: 52.7k, False: 18.0k]
  ------------------
 6938|  52.7k|        do_presentation();
 6939|  52.7k|    }
 6940|  70.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  70.7k|    return begin;
 6946|  70.7k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   142k|    auto do_presentation = [&]() -> const CharT* {
 6870|   142k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 142k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   142k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 142k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   142k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   142k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.1k, False: 107k]
  |  |  ------------------
  ------------------
 6886|  35.1k|            handler.on_error("Invalid type specifier in format string");
 6887|  35.1k|            return begin;
 6888|  35.1k|        }
 6889|   107k|        handler.on_type(type);
 6890|   107k|        return begin;
 6891|   142k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  70.7k|{
 6543|  70.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  70.7k|    auto check_align = [](wchar_t ch) {
 6546|  70.7k|        switch (ch) {
 6547|  70.7k|            case L'<':
 6548|  70.7k|                return align_type::left;
 6549|  70.7k|            case L'>':
 6550|  70.7k|                return align_type::right;
 6551|  70.7k|            case L'^':
 6552|  70.7k|                return align_type::center;
 6553|  70.7k|            default:
 6554|  70.7k|                return align_type::none;
 6555|  70.7k|        }
 6556|  70.7k|    };
 6557|       |
 6558|  70.7k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  70.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  |  Branch (859:45): [True: 0, False: 70.7k]
  |  |  |  Branch (859:45): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6560|  70.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  70.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  70.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  70.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  70.7k|    const auto begin_before_fill = begin;
 6570|  70.7k|    begin += potential_fill_len;
 6571|       |
 6572|  70.7k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 70.7k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  70.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  70.7k|    const auto begin_after_fill = begin;
 6578|  70.7k|    ++begin;
 6579|       |
 6580|  70.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 70.7k, False: 0]
  ------------------
 6581|  70.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.7k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  70.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 70.7k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  70.7k|    }
 6589|       |
 6590|  70.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 70.7k, False: 0]
  ------------------
 6591|  70.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 70.7k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  70.7k|        return begin_before_fill;
 6596|  70.7k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  70.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   141k|    auto check_align = [](wchar_t ch) {
 6546|   141k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 141k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 141k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 141k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   141k|            default:
  ------------------
  |  Branch (6553:13): [True: 141k, False: 0]
  ------------------
 6554|   141k|                return align_type::none;
 6555|   141k|        }
 6556|   141k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  70.7k|{
 6608|  70.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  70.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 35.5k, False: 35.1k]
  |  Branch (6610:33): [True: 0, False: 35.5k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  70.7k|    return begin;
 6621|  70.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  18.0k|    {
 7138|  18.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  18.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.96k, False: 9.03k]
  ------------------
 7140|  18.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.96k]
  ------------------
 7141|  18.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  18.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  18.0k|        Handler::on_localized();
 7150|  18.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   107k|{
 8428|   107k|#define SCN_VISIT(Type)                                         \
 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   107k|    }                                                           \
 8432|   107k|    else {                                                      \
 8433|   107k|        return vis(monostate_val);                              \
 8434|   107k|    }
 8435|       |
 8436|   107k|    monostate monostate_val{};
 8437|       |
 8438|   107k|    switch (arg.m_type) {
 8439|  17.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.9k, False: 89.9k]
  ------------------
 8440|  17.9k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.9k|    }                                                           \
  |  | 8432|  17.9k|    else {                                                      \
  |  | 8433|  17.9k|        return vis(monostate_val);                              \
  |  | 8434|  17.9k|    }
  ------------------
 8441|  17.9k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 107k]
  ------------------
 8442|  17.9k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.9k|    }                                                           \
  |  | 8432|  17.9k|    else {                                                      \
  |  | 8433|  17.9k|        return vis(monostate_val);                              \
  |  | 8434|  17.9k|    }
  ------------------
 8443|  35.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.0k, False: 89.8k]
  ------------------
 8444|  35.9k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.9k|    }                                                           \
  |  | 8432|  35.9k|    else {                                                      \
  |  | 8433|  35.9k|        return vis(monostate_val);                              \
  |  | 8434|  35.9k|    }
  ------------------
 8445|  35.9k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 107k]
  ------------------
 8446|  35.9k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  35.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.9k|    }                                                           \
  |  | 8432|  35.9k|    else {                                                      \
  |  | 8433|  35.9k|        return vis(monostate_val);                              \
  |  | 8434|  35.9k|    }
  ------------------
 8447|  54.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.1k, False: 89.8k]
  ------------------
 8448|  54.0k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  54.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.0k|    }                                                           \
  |  | 8432|  54.0k|    else {                                                      \
  |  | 8433|  54.0k|        return vis(monostate_val);                              \
  |  | 8434|  54.0k|    }
  ------------------
 8449|  71.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.8k, False: 90.0k]
  ------------------
 8450|  71.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  71.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.9k|    }                                                           \
  |  | 8432|  71.9k|    else {                                                      \
  |  | 8433|  71.9k|        return vis(monostate_val);                              \
  |  | 8434|  71.9k|    }
  ------------------
 8451|  71.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 107k]
  ------------------
 8452|  71.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  71.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.9k|    }                                                           \
  |  | 8432|  71.9k|    else {                                                      \
  |  | 8433|  71.9k|        return vis(monostate_val);                              \
  |  | 8434|  71.9k|    }
  ------------------
 8453|  89.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.9k, False: 89.9k]
  ------------------
 8454|  89.9k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8455|  89.9k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 107k]
  ------------------
 8456|  89.9k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8457|   107k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 18.0k, False: 89.9k]
  ------------------
 8458|   107k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8459|   107k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 107k]
  ------------------
 8460|   107k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8461|   107k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 107k]
  ------------------
 8462|   107k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8463|   107k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 107k]
  ------------------
 8464|   107k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8465|   107k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 107k]
  ------------------
 8466|   107k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8467|   107k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 107k]
  ------------------
 8468|   107k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8469|   107k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 107k]
  ------------------
 8470|   107k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8471|   107k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 107k]
  ------------------
 8472|   107k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8473|   107k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 107k]
  ------------------
 8474|   107k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8475|   107k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 107k]
  ------------------
 8476|   107k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8477|   107k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 107k]
  ------------------
 8478|   107k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8479|   107k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 107k]
  ------------------
 8480|   107k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8481|   107k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 107k]
  ------------------
 8482|   107k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8483|   107k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 107k]
  ------------------
 8484|   107k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8485|   107k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 107k]
  ------------------
 8486|   107k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   107k|    }                                                           \
  |  | 8432|   107k|    else {                                                      \
  |  | 8433|   107k|        return vis(monostate_val);                              \
  |  | 8434|   107k|    }
  ------------------
 8487|       |
 8488|   107k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 107k]
  ------------------
 8489|   107k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   107k|            return vis(
 8491|   107k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 107k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 107k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   107k|            SCN_CLANG_POP
 8506|   107k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   184k|    {
 4084|   184k|        sync(0);
 4085|   184k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  64.9k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  18.0k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  89.3k|{
   44|  89.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  89.3k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  89.3k|{
   60|  89.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  89.3k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.50k|{
  163|  1.50k|    T value;
  164|  1.50k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.50k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  9.03k|{
   72|  9.03k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  9.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  9.03k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.49k|{
  163|  1.49k|    T value;
  164|  1.49k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.49k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.49k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.51k|{
  163|  1.51k|    T value;
  164|  1.51k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.51k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.51k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.49k|{
  163|  1.49k|    T value;
  164|  1.49k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.49k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.49k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.52k|{
  163|  1.52k|    T value;
  164|  1.52k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.52k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.50k|{
  163|  1.50k|    T value;
  164|  1.50k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.50k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  89.3k|{
   44|  89.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  89.3k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  89.3k|{
   60|  89.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  89.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  89.3k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.50k|{
  163|  1.50k|    T value;
  164|  1.50k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.50k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  9.03k|{
   72|  9.03k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  9.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  9.03k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.49k|{
  163|  1.49k|    T value;
  164|  1.49k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.49k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.49k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.51k|{
  163|  1.51k|    T value;
  164|  1.51k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.51k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.51k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.8k|{
   89|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.8k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.8k|{
  127|  14.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.8k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.49k|{
  163|  1.49k|    T value;
  164|  1.49k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.49k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.49k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.52k|{
  163|  1.52k|    T value;
  164|  1.52k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.52k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.9k|{
   89|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.9k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.9k|{
  127|  14.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.9k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.50k|{
  163|  1.50k|    T value;
  164|  1.50k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.50k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   608k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   608k|{
  653|   608k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   608k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   159k|{
  659|   159k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   159k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 79.6k, False: 79.6k]
  ------------------
  661|   159k|                    : std::locale{};
  662|   159k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   120k|{
 1461|   120k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   120k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   120k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   120k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   120k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 5.41k, False: 115k]
  ------------------
 1467|  5.41k|        SCN_UNLIKELY_ATTR
 1468|  5.41k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  5.41k|                                     "Invalid integer value");
 1470|  5.41k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   115k|    auto start = source.data();
 1474|   115k|    const auto end = source.data() + source.size();
 1475|   115k|    {
 1476|   315k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 296k, False: 18.6k]
  ------------------
 1477|   296k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 96.6k, False: 199k]
  ------------------
 1478|  96.6k|                break;
 1479|  96.6k|            }
 1480|   296k|        }
 1481|   115k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.9k, False: 84.3k]
  |  |  |  Branch (859:45): [True: 18.6k, False: 96.6k]
  |  |  |  Branch (859:45): [True: 12.3k, False: 84.3k]
  |  |  ------------------
  ------------------
 1482|  30.9k|            value = 0;
 1483|  30.9k|            return ranges::next(source.begin(),
 1484|  30.9k|                                ranges::distance(source.data(), start));
 1485|  30.9k|        }
 1486|   115k|    }
 1487|       |
 1488|  84.3k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  84.3k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 62.9k, False: 21.3k]
  ------------------
 1490|  62.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.62k, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.62k|    }                                                  \
  |  |  |  | 3667|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  59.3k|                             detail::make_string_view_from_pointers(start, end),
 1492|  59.3k|                             value, sign == sign_type::minus_sign));
 1493|  59.3k|            return ranges::next(source.begin(),
 1494|  59.3k|                                ranges::distance(source.data(), ptr));
 1495|  62.9k|        }
 1496|  84.3k|    }
 1497|       |
 1498|  82.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  84.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  84.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  84.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 82.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.07k|    }                                                  \
  |  |  |  | 3667|  84.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  82.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  82.2k|                     base, sign == sign_type::minus_sign));
 1501|  82.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  84.3k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.7k|{
 1461|  19.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.5k, False: 1.21k]
  ------------------
 1467|  18.5k|        SCN_UNLIKELY_ATTR
 1468|  18.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.5k|                                     "Invalid integer value");
 1470|  18.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.21k|    auto start = source.data();
 1474|  1.21k|    const auto end = source.data() + source.size();
 1475|  1.21k|    {
 1476|  1.63k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.42k, False: 208]
  ------------------
 1477|  1.42k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.00k, False: 416]
  ------------------
 1478|  1.00k|                break;
 1479|  1.00k|            }
 1480|  1.42k|        }
 1481|  1.21k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 888]
  |  |  |  Branch (859:45): [True: 208, False: 1.00k]
  |  |  |  Branch (859:45): [True: 120, False: 888]
  |  |  ------------------
  ------------------
 1482|    328|            value = 0;
 1483|    328|            return ranges::next(source.begin(),
 1484|    328|                                ranges::distance(source.data(), start));
 1485|    328|        }
 1486|  1.21k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    888|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    556|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    556|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    556|                     base, sign == sign_type::minus_sign));
 1501|    556|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    888|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   142k|{
 1461|   142k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   142k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   142k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   142k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   142k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 6.07k, False: 136k]
  ------------------
 1467|  6.07k|        SCN_UNLIKELY_ATTR
 1468|  6.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  6.07k|                                     "Invalid integer value");
 1470|  6.07k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   136k|    auto start = source.data();
 1474|   136k|    const auto end = source.data() + source.size();
 1475|   136k|    {
 1476|   350k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 329k, False: 20.7k]
  ------------------
 1477|   329k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 115k, False: 213k]
  ------------------
 1478|   115k|                break;
 1479|   115k|            }
 1480|   329k|        }
 1481|   136k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 101k]
  |  |  |  Branch (859:45): [True: 20.7k, False: 115k]
  |  |  |  Branch (859:45): [True: 13.8k, False: 101k]
  |  |  ------------------
  ------------------
 1482|  34.5k|            value = 0;
 1483|  34.5k|            return ranges::next(source.begin(),
 1484|  34.5k|                                ranges::distance(source.data(), start));
 1485|  34.5k|        }
 1486|   136k|    }
 1487|       |
 1488|   101k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   101k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 72.9k, False: 28.7k]
  ------------------
 1490|  72.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  72.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.80k, False: 71.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.80k|    }                                                  \
  |  |  |  | 3667|  72.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  71.1k|                             detail::make_string_view_from_pointers(start, end),
 1492|  71.1k|                             value, sign == sign_type::minus_sign));
 1493|  71.1k|            return ranges::next(source.begin(),
 1494|  71.1k|                                ranges::distance(source.data(), ptr));
 1495|  72.9k|        }
 1496|   101k|    }
 1497|       |
 1498|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 974, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    974|    }                                                  \
  |  |  |  | 3667|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   100k|                     base, sign == sign_type::minus_sign));
 1501|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   101k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.9k|{
 1461|  19.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.6k, False: 1.26k]
  ------------------
 1467|  18.6k|        SCN_UNLIKELY_ATTR
 1468|  18.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.6k|                                     "Invalid integer value");
 1470|  18.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.26k|    auto start = source.data();
 1474|  1.26k|    const auto end = source.data() + source.size();
 1475|  1.26k|    {
 1476|  1.69k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.47k, False: 219]
  ------------------
 1477|  1.47k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.04k, False: 434]
  ------------------
 1478|  1.04k|                break;
 1479|  1.04k|            }
 1480|  1.47k|        }
 1481|  1.26k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 346, False: 914]
  |  |  |  Branch (859:45): [True: 219, False: 1.04k]
  |  |  |  Branch (859:45): [True: 127, False: 914]
  |  |  ------------------
  ------------------
 1482|    346|            value = 0;
 1483|    346|            return ranges::next(source.begin(),
 1484|    346|                                ranges::distance(source.data(), start));
 1485|    346|        }
 1486|  1.26k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    914|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    148|    }                                                  \
  |  |  |  | 3667|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    766|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    766|                     base, sign == sign_type::minus_sign));
 1501|    766|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    914|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   144k|{
 1461|   144k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   144k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   144k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   144k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   144k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 6.37k, False: 138k]
  ------------------
 1467|  6.37k|        SCN_UNLIKELY_ATTR
 1468|  6.37k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  6.37k|                                     "Invalid integer value");
 1470|  6.37k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   138k|    auto start = source.data();
 1474|   138k|    const auto end = source.data() + source.size();
 1475|   138k|    {
 1476|   352k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 331k, False: 20.9k]
  ------------------
 1477|   331k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 117k, False: 214k]
  ------------------
 1478|   117k|                break;
 1479|   117k|            }
 1480|   331k|        }
 1481|   138k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.9k, False: 103k]
  |  |  |  Branch (859:45): [True: 20.9k, False: 117k]
  |  |  |  Branch (859:45): [True: 13.9k, False: 103k]
  |  |  ------------------
  ------------------
 1482|  34.9k|            value = 0;
 1483|  34.9k|            return ranges::next(source.begin(),
 1484|  34.9k|                                ranges::distance(source.data(), start));
 1485|  34.9k|        }
 1486|   138k|    }
 1487|       |
 1488|   103k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   103k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 73.9k, False: 29.1k]
  ------------------
 1490|  73.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  73.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 72.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.00k|    }                                                  \
  |  |  |  | 3667|  73.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  72.9k|                             detail::make_string_view_from_pointers(start, end),
 1492|  72.9k|                             value, sign == sign_type::minus_sign));
 1493|  72.9k|            return ranges::next(source.begin(),
 1494|  72.9k|                                ranges::distance(source.data(), ptr));
 1495|  73.9k|        }
 1496|   103k|    }
 1497|       |
 1498|   102k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 518, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    518|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    518|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    518|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    518|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    518|    }                                                  \
  |  |  |  | 3667|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   102k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   102k|                     base, sign == sign_type::minus_sign));
 1501|   102k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   103k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  20.0k|{
 1461|  20.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  20.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  20.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  20.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  20.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.6k, False: 1.35k]
  ------------------
 1467|  18.6k|        SCN_UNLIKELY_ATTR
 1468|  18.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.6k|                                     "Invalid integer value");
 1470|  18.6k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.35k|    auto start = source.data();
 1474|  1.35k|    const auto end = source.data() + source.size();
 1475|  1.35k|    {
 1476|  1.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.59k, False: 252]
  ------------------
 1477|  1.59k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.10k, False: 488]
  ------------------
 1478|  1.10k|                break;
 1479|  1.10k|            }
 1480|  1.59k|        }
 1481|  1.35k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 400, False: 954]
  |  |  |  Branch (859:45): [True: 252, False: 1.10k]
  |  |  |  Branch (859:45): [True: 148, False: 954]
  |  |  ------------------
  ------------------
 1482|    400|            value = 0;
 1483|    400|            return ranges::next(source.begin(),
 1484|    400|                                ranges::distance(source.data(), start));
 1485|    400|        }
 1486|  1.35k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    954|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    934|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    934|                     base, sign == sign_type::minus_sign));
 1501|    934|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    954|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  98.6k|{
 1461|  98.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  98.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  98.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  98.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  98.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 3.80k, False: 94.8k]
  ------------------
 1467|  3.80k|        SCN_UNLIKELY_ATTR
 1468|  3.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  3.80k|                                     "Invalid integer value");
 1470|  3.80k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  94.8k|    auto start = source.data();
 1474|  94.8k|    const auto end = source.data() + source.size();
 1475|  94.8k|    {
 1476|   286k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 268k, False: 17.5k]
  ------------------
 1477|   268k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 77.2k, False: 191k]
  ------------------
 1478|  77.2k|                break;
 1479|  77.2k|            }
 1480|   268k|        }
 1481|  94.8k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.3k, False: 65.5k]
  |  |  |  Branch (859:45): [True: 17.5k, False: 77.2k]
  |  |  |  Branch (859:45): [True: 11.7k, False: 65.5k]
  |  |  ------------------
  ------------------
 1482|  29.3k|            value = 0;
 1483|  29.3k|            return ranges::next(source.begin(),
 1484|  29.3k|                                ranges::distance(source.data(), start));
 1485|  29.3k|        }
 1486|  94.8k|    }
 1487|       |
 1488|  65.5k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  65.5k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 47.4k, False: 18.0k]
  ------------------
 1490|  47.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.78k|    }                                                  \
  |  |  |  | 3667|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  45.6k|                             detail::make_string_view_from_pointers(start, end),
 1492|  45.6k|                             value, sign == sign_type::minus_sign));
 1493|  45.6k|            return ranges::next(source.begin(),
 1494|  45.6k|                                ranges::distance(source.data(), ptr));
 1495|  47.4k|        }
 1496|  65.5k|    }
 1497|       |
 1498|  64.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 64.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.09k|    }                                                  \
  |  |  |  | 3667|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  64.4k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  64.4k|                     base, sign == sign_type::minus_sign));
 1501|  64.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  65.5k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.4k|{
 1461|  19.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.4k, False: 992]
  ------------------
 1467|  18.4k|        SCN_UNLIKELY_ATTR
 1468|  18.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.4k|                                     "Invalid integer value");
 1470|  18.4k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|    992|    auto start = source.data();
 1474|    992|    const auto end = source.data() + source.size();
 1475|    992|    {
 1476|  1.39k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.19k, False: 197]
  ------------------
 1477|  1.19k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 795, False: 398]
  ------------------
 1478|    795|                break;
 1479|    795|            }
 1480|  1.19k|        }
 1481|    992|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 682]
  |  |  |  Branch (859:45): [True: 197, False: 795]
  |  |  |  Branch (859:45): [True: 113, False: 682]
  |  |  ------------------
  ------------------
 1482|    310|            value = 0;
 1483|    310|            return ranges::next(source.begin(),
 1484|    310|                                ranges::distance(source.data(), start));
 1485|    310|        }
 1486|    992|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    682|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    682|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    682|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    682|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    250|    }                                                  \
  |  |  |  | 3667|    682|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    432|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    432|                     base, sign == sign_type::minus_sign));
 1501|    432|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    682|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   108k|{
 1461|   108k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   108k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   108k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   108k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   108k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 4.05k, False: 104k]
  ------------------
 1467|  4.05k|        SCN_UNLIKELY_ATTR
 1468|  4.05k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  4.05k|                                     "Invalid integer value");
 1470|  4.05k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   104k|    auto start = source.data();
 1474|   104k|    const auto end = source.data() + source.size();
 1475|   104k|    {
 1476|   301k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 282k, False: 18.7k]
  ------------------
 1477|   282k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 85.3k, False: 197k]
  ------------------
 1478|  85.3k|                break;
 1479|  85.3k|            }
 1480|   282k|        }
 1481|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 72.7k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 85.3k]
  |  |  |  Branch (859:45): [True: 12.6k, False: 72.7k]
  |  |  ------------------
  ------------------
 1482|  31.3k|            value = 0;
 1483|  31.3k|            return ranges::next(source.begin(),
 1484|  31.3k|                                ranges::distance(source.data(), start));
 1485|  31.3k|        }
 1486|   104k|    }
 1487|       |
 1488|  72.7k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  72.7k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 52.6k, False: 20.0k]
  ------------------
 1490|  52.6k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 945, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    945|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    945|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    945|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    945|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    945|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  51.7k|                             detail::make_string_view_from_pointers(start, end),
 1492|  51.7k|                             value, sign == sign_type::minus_sign));
 1493|  51.7k|            return ranges::next(source.begin(),
 1494|  51.7k|                                ranges::distance(source.data(), ptr));
 1495|  52.6k|        }
 1496|  72.7k|    }
 1497|       |
 1498|  72.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  72.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 518, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    518|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    518|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    518|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    518|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    518|    }                                                  \
  |  |  |  | 3667|  72.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  72.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  72.2k|                     base, sign == sign_type::minus_sign));
 1501|  72.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  72.7k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.4k|{
 1461|  19.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.4k, False: 1.01k]
  ------------------
 1467|  18.4k|        SCN_UNLIKELY_ATTR
 1468|  18.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.4k|                                     "Invalid integer value");
 1470|  18.4k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.01k|    auto start = source.data();
 1474|  1.01k|    const auto end = source.data() + source.size();
 1475|  1.01k|    {
 1476|  1.41k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.21k, False: 197]
  ------------------
 1477|  1.21k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 817, False: 398]
  ------------------
 1478|    817|                break;
 1479|    817|            }
 1480|  1.21k|        }
 1481|  1.01k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 704]
  |  |  |  Branch (859:45): [True: 197, False: 817]
  |  |  |  Branch (859:45): [True: 113, False: 704]
  |  |  ------------------
  ------------------
 1482|    310|            value = 0;
 1483|    310|            return ranges::next(source.begin(),
 1484|    310|                                ranges::distance(source.data(), start));
 1485|    310|        }
 1486|  1.01k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    704|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    144|    }                                                  \
  |  |  |  | 3667|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    560|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    560|                     base, sign == sign_type::minus_sign));
 1501|    560|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    704|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   109k|{
 1461|   109k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   109k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   109k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   109k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   109k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 4.13k, False: 104k]
  ------------------
 1467|  4.13k|        SCN_UNLIKELY_ATTR
 1468|  4.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  4.13k|                                     "Invalid integer value");
 1470|  4.13k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   104k|    auto start = source.data();
 1474|   104k|    const auto end = source.data() + source.size();
 1475|   104k|    {
 1476|   302k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 283k, False: 18.7k]
  ------------------
 1477|   283k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 86.1k, False: 197k]
  ------------------
 1478|  86.1k|                break;
 1479|  86.1k|            }
 1480|   283k|        }
 1481|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.4k, False: 73.5k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 86.1k]
  |  |  |  Branch (859:45): [True: 12.6k, False: 73.5k]
  |  |  ------------------
  ------------------
 1482|  31.4k|            value = 0;
 1483|  31.4k|            return ranges::next(source.begin(),
 1484|  31.4k|                                ranges::distance(source.data(), start));
 1485|  31.4k|        }
 1486|   104k|    }
 1487|       |
 1488|  73.5k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  73.5k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 53.3k, False: 20.2k]
  ------------------
 1490|  53.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 498, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    498|    }                                                  \
  |  |  |  | 3667|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  52.8k|                             detail::make_string_view_from_pointers(start, end),
 1492|  52.8k|                             value, sign == sign_type::minus_sign));
 1493|  52.8k|            return ranges::next(source.begin(),
 1494|  52.8k|                                ranges::distance(source.data(), ptr));
 1495|  53.3k|        }
 1496|  73.5k|    }
 1497|       |
 1498|  73.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  73.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 286, False: 73.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    286|    }                                                  \
  |  |  |  | 3667|  73.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  73.2k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  73.2k|                     base, sign == sign_type::minus_sign));
 1501|  73.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  73.5k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  19.5k|{
 1461|  19.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  19.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  19.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18.5k, False: 1.05k]
  ------------------
 1467|  18.5k|        SCN_UNLIKELY_ATTR
 1468|  18.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  18.5k|                                     "Invalid integer value");
 1470|  18.5k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.05k|    auto start = source.data();
 1474|  1.05k|    const auto end = source.data() + source.size();
 1475|  1.05k|    {
 1476|  1.45k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.25k, False: 197]
  ------------------
 1477|  1.25k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 861, False: 398]
  ------------------
 1478|    861|                break;
 1479|    861|            }
 1480|  1.25k|        }
 1481|  1.05k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 748]
  |  |  |  Branch (859:45): [True: 197, False: 861]
  |  |  |  Branch (859:45): [True: 113, False: 748]
  |  |  ------------------
  ------------------
 1482|    310|            value = 0;
 1483|    310|            return ranges::next(source.begin(),
 1484|    310|                                ranges::distance(source.data(), start));
 1485|    310|        }
 1486|  1.05k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    748|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    748|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    748|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    748|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|    748|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    740|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    740|                     base, sign == sign_type::minus_sign));
 1501|    740|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    748|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   215k|{
 2184|   215k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   215k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   215k|{
 2192|   215k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   215k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   215k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 171k, False: 43.9k]
  |  |  ------------------
  ------------------
 2194|   171k|        source.sync(*n);
 2195|   171k|    }
 2196|  43.9k|    else {
 2197|  43.9k|        source.sync_all();
 2198|  43.9k|    }
 2199|   215k|    return n;
 2200|   215k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  89.3k|{
 2208|  89.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  89.3k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  89.3k|{
 2216|  89.3k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  89.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  89.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 87.8k]
  |  |  ------------------
  ------------------
 2218|  1.50k|        source.sync(*n);
 2219|  1.50k|    }
 2220|  87.8k|    else {
 2221|  87.8k|        source.sync_all();
 2222|  87.8k|    }
 2223|  89.3k|    return n;
 2224|  89.3k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   868k|{
  202|   868k|    return find_classic_impl(
  203|   868k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   868k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   868k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   215k|{
 2141|   215k|    return vscan_internal(source, format, args);
 2142|   215k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   215k|{
 2147|   215k|    auto n = vscan_internal(source, format, args);
 2148|   215k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   215k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 171k, False: 43.9k]
  |  |  ------------------
  ------------------
 2149|   171k|        source.sync(*n);
 2150|   171k|    }
 2151|  43.9k|    else {
 2152|  43.9k|        source.sync_all();
 2153|  43.9k|    }
 2154|   215k|    return n;
 2155|   215k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  89.3k|{
 2161|  89.3k|    return vscan_internal(source, format, args);
 2162|  89.3k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  89.3k|{
 2167|  89.3k|    auto n = vscan_internal(source, format, args);
 2168|  89.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  89.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 87.8k]
  |  |  ------------------
  ------------------
 2169|  1.50k|        source.sync(*n);
 2170|  1.50k|    }
 2171|  87.8k|    else {
 2172|  87.8k|        source.sync_all();
 2173|  87.8k|    }
 2174|  89.3k|    return n;
 2175|  89.3k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  32.6k|{
 2251|  32.6k|    return vscan_value_internal(source, arg);
 2252|  32.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  32.2k|{
 2256|  32.2k|    auto n = vscan_value_internal(source, arg);
 2257|  32.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  32.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.8k, False: 4.39k]
  |  |  ------------------
  ------------------
 2258|  27.8k|        source.sync(*n);
 2259|  27.8k|    }
 2260|  4.39k|    else {
 2261|  4.39k|        source.sync_all();
 2262|  4.39k|    }
 2263|  32.2k|    return n;
 2264|  32.2k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  9.03k|{
 2270|  9.03k|    return vscan_value_internal(source, arg);
 2271|  9.03k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  9.03k|{
 2276|  9.03k|    auto n = vscan_value_internal(source, arg);
 2277|  9.03k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  9.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 246, False: 8.78k]
  |  |  ------------------
  ------------------
 2278|    246|        source.sync(*n);
 2279|    246|    }
 2280|  8.78k|    else {
 2281|  8.78k|        source.sync_all();
 2282|  8.78k|    }
 2283|  9.03k|    return n;
 2284|  9.03k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1368|  85.2k|{
 1369|  85.2k|    auto max_digits = maxdigits_u64(base);
 1370|  85.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.06k, False: 84.1k]
  ------------------
 1371|  1.06k|        return true;
 1372|  1.06k|    }
 1373|  84.1k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 318, False: 83.8k]
  |  Branch (1373:39): [True: 106, False: 212]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|  84.0k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  84.0k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 4.85k, False: 79.1k]
  ------------------
 1378|  84.0k|                      static_cast<uint64_t>(is_negative)) {
 1379|  4.85k|            SCN_UNLIKELY_ATTR
 1380|  4.85k|            return true;
 1381|  4.85k|        }
 1382|  84.0k|    }
 1383|       |
 1384|  79.1k|    return false;
 1385|  84.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1314|   505k|{
 1315|   505k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1316|   505k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1317|   505k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1358|  1.79k|{
 1359|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1360|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1361|  1.79k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1389|  79.1k|{
 1390|  79.1k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 15.4k, False: 63.7k]
  ------------------
 1391|  15.4k|        SCN_MSVC_PUSH
 1392|  15.4k|        SCN_MSVC_IGNORE(4146)
 1393|  15.4k|        return static_cast<T>(
 1394|  15.4k|            -std::numeric_limits<T>::max() -
 1395|  15.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  15.4k|        SCN_MSVC_POP
 1397|  15.4k|    }
 1398|       |
 1399|  63.7k|    return static_cast<T>(u64val);
 1400|  79.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1368|   102k|{
 1369|   102k|    auto max_digits = maxdigits_u64(base);
 1370|   102k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.13k, False: 101k]
  ------------------
 1371|  1.13k|        return true;
 1372|  1.13k|    }
 1373|   101k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 326, False: 101k]
  |  Branch (1373:39): [True: 106, False: 220]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|   101k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   101k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 1.69k, False: 99.7k]
  ------------------
 1378|   101k|                      static_cast<uint64_t>(is_negative)) {
 1379|  1.69k|            SCN_UNLIKELY_ATTR
 1380|  1.69k|            return true;
 1381|  1.69k|        }
 1382|   101k|    }
 1383|       |
 1384|  99.7k|    return false;
 1385|   101k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1389|  99.7k|{
 1390|  99.7k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 16.9k, False: 82.8k]
  ------------------
 1391|  16.9k|        SCN_MSVC_PUSH
 1392|  16.9k|        SCN_MSVC_IGNORE(4146)
 1393|  16.9k|        return static_cast<T>(
 1394|  16.9k|            -std::numeric_limits<T>::max() -
 1395|  16.9k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  16.9k|        SCN_MSVC_POP
 1397|  16.9k|    }
 1398|       |
 1399|  82.8k|    return static_cast<T>(u64val);
 1400|  99.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1368|   104k|{
 1369|   104k|    auto max_digits = maxdigits_u64(base);
 1370|   104k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.24k, False: 102k]
  ------------------
 1371|  1.24k|        return true;
 1372|  1.24k|    }
 1373|   102k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 362, False: 102k]
  |  Branch (1373:39): [True: 106, False: 256]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|   102k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   102k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 198, False: 102k]
  ------------------
 1378|   102k|                      static_cast<uint64_t>(is_negative)) {
 1379|    198|            SCN_UNLIKELY_ATTR
 1380|    198|            return true;
 1381|    198|        }
 1382|   102k|    }
 1383|       |
 1384|   102k|    return false;
 1385|   102k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1389|   102k|{
 1390|   102k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 17.7k, False: 84.8k]
  ------------------
 1391|  17.7k|        SCN_MSVC_PUSH
 1392|  17.7k|        SCN_MSVC_IGNORE(4146)
 1393|  17.7k|        return static_cast<T>(
 1394|  17.7k|            -std::numeric_limits<T>::max() -
 1395|  17.7k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  17.7k|        SCN_MSVC_POP
 1397|  17.7k|    }
 1398|       |
 1399|  84.8k|    return static_cast<T>(u64val);
 1400|   102k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1368|  66.1k|{
 1369|  66.1k|    auto max_digits = maxdigits_u64(base);
 1370|  66.1k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 720, False: 65.4k]
  ------------------
 1371|    720|        return true;
 1372|    720|    }
 1373|  65.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 224, False: 65.2k]
  |  Branch (1373:39): [True: 58, False: 166]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  65.4k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  65.4k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 2.35k, False: 63.0k]
  ------------------
 1378|  65.4k|                      static_cast<uint64_t>(is_negative)) {
 1379|  2.35k|            SCN_UNLIKELY_ATTR
 1380|  2.35k|            return true;
 1381|  2.35k|        }
 1382|  65.4k|    }
 1383|       |
 1384|  63.0k|    return false;
 1385|  65.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1389|  63.0k|{
 1390|  63.0k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 63.0k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  63.0k|    return static_cast<T>(u64val);
 1400|  63.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1368|  73.4k|{
 1369|  73.4k|    auto max_digits = maxdigits_u64(base);
 1370|  73.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 720, False: 72.7k]
  ------------------
 1371|    720|        return true;
 1372|    720|    }
 1373|  72.7k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 228, False: 72.4k]
  |  Branch (1373:39): [True: 58, False: 170]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  72.6k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  72.6k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 829, False: 71.8k]
  ------------------
 1378|  72.6k|                      static_cast<uint64_t>(is_negative)) {
 1379|    829|            SCN_UNLIKELY_ATTR
 1380|    829|            return true;
 1381|    829|        }
 1382|  72.6k|    }
 1383|       |
 1384|  71.8k|    return false;
 1385|  72.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1389|  71.8k|{
 1390|  71.8k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 71.8k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  71.8k|    return static_cast<T>(u64val);
 1400|  71.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1368|  74.2k|{
 1369|  74.2k|    auto max_digits = maxdigits_u64(base);
 1370|  74.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 734, False: 73.5k]
  ------------------
 1371|    734|        return true;
 1372|    734|    }
 1373|  73.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 336, False: 73.2k]
  |  Branch (1373:39): [True: 58, False: 278]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  73.4k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  73.4k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 0, False: 73.4k]
  ------------------
 1378|  73.4k|                      static_cast<uint64_t>(is_negative)) {
 1379|      0|            SCN_UNLIKELY_ATTR
 1380|      0|            return true;
 1381|      0|        }
 1382|  73.4k|    }
 1383|       |
 1384|  73.4k|    return false;
 1385|  73.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1389|  73.4k|{
 1390|  73.4k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 73.4k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  73.4k|    return static_cast<T>(u64val);
 1400|  73.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1252|   196k|{
 1253|   196k|    uint64_t val{};
 1254|   196k|    std::memcpy(&val, input, sizeof(uint64_t));
 1255|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1256|       |        val = byteswap(val);
 1257|       |    }
 1258|   196k|    return val;
 1259|   196k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1262|  36.8k|{
 1263|  36.8k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1264|  36.8k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1265|  36.8k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1266|  36.8k|    word -= 0x3030303030303030;
 1267|  36.8k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1268|  36.8k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1269|  36.8k|    return static_cast<uint32_t>(word);
 1270|  36.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1273|   159k|{
 1274|   159k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1275|   159k|              0x8080808080808080));
 1276|   159k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   530k|{
  105|   530k|    static_assert(sizeof(*source.data()) == 1);
  106|   530k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   530k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   530k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   530k|    uint64_t word{};
  108|   530k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   530k|    return has_byte_greater(word, 127) != 0;
  111|   530k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   868k|{
  118|   868k|    auto it = source.begin();
  119|       |
  120|   949k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 530k, False: 418k]
  ------------------
  121|   530k|        auto sv =
  122|   530k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   530k|                .substr(0, 8);
  124|       |
  125|   530k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 504k, False: 26.0k]
  ------------------
  126|   504k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   504k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   504k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 426k, False: 78.0k]
  ------------------
  129|   426k|                break;
  130|   426k|            }
  131|  78.0k|            continue;
  132|   504k|        }
  133|       |
  134|  36.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 34.1k, False: 2.14k]
  ------------------
  135|  34.1k|            auto tmp =
  136|  34.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  34.1k|            auto res = get_next_code_point(tmp);
  138|  34.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 23.9k, False: 10.2k]
  ------------------
  139|  23.9k|                return it;
  140|  23.9k|            }
  141|  10.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  10.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  10.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  10.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  10.2k|        }
  145|  26.0k|    }
  146|       |
  147|   845k|    return detail::make_string_view_iterator(source, it);
  148|   868k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   876k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  34.1k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  62.9k|{
 1407|  62.9k|    uint64_t u64val{};
 1408|  62.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  62.9k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  62.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  62.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.62k, False: 59.3k]
  |  |  ------------------
  ------------------
 1413|  62.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  3.62k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  3.62k|                                     "Integer overflow");
 1416|  3.62k|    }
 1417|       |
 1418|  59.3k|    val = store_result<T>(u64val, is_negative);
 1419|  59.3k|    return ptr;
 1420|  62.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1294|   363k|{
 1295|   363k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1296|       |
 1297|   817k|    while (begin != end) {
  ------------------
  |  Branch (1297:12): [True: 592k, False: 225k]
  ------------------
 1298|   592k|        const auto digit = char_to_int(*begin);
 1299|   592k|        if (digit >= 10) {
  ------------------
  |  Branch (1299:13): [True: 137k, False: 454k]
  ------------------
 1300|   137k|            break;
 1301|   137k|        }
 1302|   454k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1303|   454k|        ++begin;
 1304|   454k|    }
 1305|       |
 1306|   363k|    return begin;
 1307|   363k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1281|   363k|{
 1282|   363k|    while (
 1283|   400k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1283:9): [True: 159k, False: 240k]
  ------------------
 1284|   400k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1284:9): [True: 36.8k, False: 122k]
  ------------------
 1285|  36.8k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1286|  36.8k|                                      get_eight_digits_word(p));
 1287|  36.8k|        p += 8;
 1288|  36.8k|    }
 1289|   363k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  21.3k|{
 1428|  21.3k|    uint64_t u64val{};
 1429|  21.3k|    const CharT* begin = input.data();
 1430|  21.3k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  78.4k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 67.2k, False: 11.1k]
  ------------------
 1433|  67.2k|        const auto digit = char_to_int(*begin);
 1434|  67.2k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 10.2k, False: 57.0k]
  ------------------
 1435|  10.2k|            break;
 1436|  10.2k|        }
 1437|  57.0k|        u64val =
 1438|  57.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  57.0k|        ++begin;
 1440|  57.0k|    }
 1441|       |
 1442|  21.3k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  21.3k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 19.3k]
  |  |  ------------------
  ------------------
 1444|  21.3k|                                               is_negative))) {
 1445|  2.07k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  2.07k|                                     "Integer overflow");
 1447|  2.07k|    }
 1448|       |
 1449|  19.3k|    val = store_result<T>(u64val, is_negative);
 1450|  19.3k|    return begin;
 1451|  21.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    888|{
 1428|    888|    uint64_t u64val{};
 1429|    888|    const CharT* begin = input.data();
 1430|    888|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.60k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.99k, False: 611]
  ------------------
 1433|  3.99k|        const auto digit = char_to_int(*begin);
 1434|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 277, False: 3.71k]
  ------------------
 1435|    277|            break;
 1436|    277|        }
 1437|  3.71k|        u64val =
 1438|  3.71k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.71k|        ++begin;
 1440|  3.71k|    }
 1441|       |
 1442|    888|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    888|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  ------------------
  ------------------
 1444|    888|                                               is_negative))) {
 1445|    332|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    332|                                     "Integer overflow");
 1447|    332|    }
 1448|       |
 1449|    556|    val = store_result<T>(u64val, is_negative);
 1450|    556|    return begin;
 1451|    888|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  72.9k|{
 1407|  72.9k|    uint64_t u64val{};
 1408|  72.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  72.9k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  72.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  72.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  72.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 71.1k]
  |  |  ------------------
  ------------------
 1413|  72.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.80k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.80k|                                     "Integer overflow");
 1416|  1.80k|    }
 1417|       |
 1418|  71.1k|    val = store_result<T>(u64val, is_negative);
 1419|  71.1k|    return ptr;
 1420|  72.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  28.7k|{
 1428|  28.7k|    uint64_t u64val{};
 1429|  28.7k|    const CharT* begin = input.data();
 1430|  28.7k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  97.2k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 82.3k, False: 14.9k]
  ------------------
 1433|  82.3k|        const auto digit = char_to_int(*begin);
 1434|  82.3k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 13.8k, False: 68.4k]
  ------------------
 1435|  13.8k|            break;
 1436|  13.8k|        }
 1437|  68.4k|        u64val =
 1438|  68.4k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  68.4k|        ++begin;
 1440|  68.4k|    }
 1441|       |
 1442|  28.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  28.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 974, False: 27.8k]
  |  |  ------------------
  ------------------
 1444|  28.7k|                                               is_negative))) {
 1445|    974|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    974|                                     "Integer overflow");
 1447|    974|    }
 1448|       |
 1449|  27.8k|    val = store_result<T>(u64val, is_negative);
 1450|  27.8k|    return begin;
 1451|  28.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    914|{
 1428|    914|    uint64_t u64val{};
 1429|    914|    const CharT* begin = input.data();
 1430|    914|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.65k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.03k, False: 626]
  ------------------
 1433|  4.03k|        const auto digit = char_to_int(*begin);
 1434|  4.03k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 288, False: 3.74k]
  ------------------
 1435|    288|            break;
 1436|    288|        }
 1437|  3.74k|        u64val =
 1438|  3.74k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.74k|        ++begin;
 1440|  3.74k|    }
 1441|       |
 1442|    914|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    914|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  ------------------
  ------------------
 1444|    914|                                               is_negative))) {
 1445|    148|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    148|                                     "Integer overflow");
 1447|    148|    }
 1448|       |
 1449|    766|    val = store_result<T>(u64val, is_negative);
 1450|    766|    return begin;
 1451|    914|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  73.9k|{
 1407|  73.9k|    uint64_t u64val{};
 1408|  73.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  73.9k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  73.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  73.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  73.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 72.9k]
  |  |  ------------------
  ------------------
 1413|  73.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.00k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.00k|                                     "Integer overflow");
 1416|  1.00k|    }
 1417|       |
 1418|  72.9k|    val = store_result<T>(u64val, is_negative);
 1419|  72.9k|    return ptr;
 1420|  73.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  29.1k|{
 1428|  29.1k|    uint64_t u64val{};
 1429|  29.1k|    const CharT* begin = input.data();
 1430|  29.1k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   100k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 85.2k, False: 15.1k]
  ------------------
 1433|  85.2k|        const auto digit = char_to_int(*begin);
 1434|  85.2k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 14.0k, False: 71.2k]
  ------------------
 1435|  14.0k|            break;
 1436|  14.0k|        }
 1437|  71.2k|        u64val =
 1438|  71.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  71.2k|        ++begin;
 1440|  71.2k|    }
 1441|       |
 1442|  29.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  29.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 518, False: 28.6k]
  |  |  ------------------
  ------------------
 1444|  29.1k|                                               is_negative))) {
 1445|    518|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    518|                                     "Integer overflow");
 1447|    518|    }
 1448|       |
 1449|  28.6k|    val = store_result<T>(u64val, is_negative);
 1450|  28.6k|    return begin;
 1451|  29.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    954|{
 1428|    954|    uint64_t u64val{};
 1429|    954|    const CharT* begin = input.data();
 1430|    954|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.73k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.08k, False: 650]
  ------------------
 1433|  4.08k|        const auto digit = char_to_int(*begin);
 1434|  4.08k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 304, False: 3.78k]
  ------------------
 1435|    304|            break;
 1436|    304|        }
 1437|  3.78k|        u64val =
 1438|  3.78k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.78k|        ++begin;
 1440|  3.78k|    }
 1441|       |
 1442|    954|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    954|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  ------------------
  ------------------
 1444|    954|                                               is_negative))) {
 1445|     20|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     20|                                     "Integer overflow");
 1447|     20|    }
 1448|       |
 1449|    934|    val = store_result<T>(u64val, is_negative);
 1450|    934|    return begin;
 1451|    954|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  47.4k|{
 1407|  47.4k|    uint64_t u64val{};
 1408|  47.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  47.4k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  47.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  47.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.78k, False: 45.6k]
  |  |  ------------------
  ------------------
 1413|  47.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.78k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.78k|                                     "Integer overflow");
 1416|  1.78k|    }
 1417|       |
 1418|  45.6k|    val = store_result<T>(u64val, is_negative);
 1419|  45.6k|    return ptr;
 1420|  47.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  18.0k|{
 1428|  18.0k|    uint64_t u64val{};
 1429|  18.0k|    const CharT* begin = input.data();
 1430|  18.0k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  58.4k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 49.0k, False: 9.36k]
  ------------------
 1433|  49.0k|        const auto digit = char_to_int(*begin);
 1434|  49.0k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 8.66k, False: 40.4k]
  ------------------
 1435|  8.66k|            break;
 1436|  8.66k|        }
 1437|  40.4k|        u64val =
 1438|  40.4k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  40.4k|        ++begin;
 1440|  40.4k|    }
 1441|       |
 1442|  18.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  18.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 16.9k]
  |  |  ------------------
  ------------------
 1444|  18.0k|                                               is_negative))) {
 1445|  1.09k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.09k|                                     "Integer overflow");
 1447|  1.09k|    }
 1448|       |
 1449|  16.9k|    val = store_result<T>(u64val, is_negative);
 1450|  16.9k|    return begin;
 1451|  18.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    682|{
 1428|    682|    uint64_t u64val{};
 1429|    682|    const CharT* begin = input.data();
 1430|    682|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.03k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.58k, False: 450]
  ------------------
 1433|  3.58k|        const auto digit = char_to_int(*begin);
 1434|  3.58k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 232, False: 3.34k]
  ------------------
 1435|    232|            break;
 1436|    232|        }
 1437|  3.34k|        u64val =
 1438|  3.34k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.34k|        ++begin;
 1440|  3.34k|    }
 1441|       |
 1442|    682|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    682|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  ------------------
  ------------------
 1444|    682|                                               is_negative))) {
 1445|    250|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    250|                                     "Integer overflow");
 1447|    250|    }
 1448|       |
 1449|    432|    val = store_result<T>(u64val, is_negative);
 1450|    432|    return begin;
 1451|    682|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  52.6k|{
 1407|  52.6k|    uint64_t u64val{};
 1408|  52.6k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  52.6k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  52.6k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  52.6k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 945, False: 51.7k]
  |  |  ------------------
  ------------------
 1413|  52.6k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|    945|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|    945|                                     "Integer overflow");
 1416|    945|    }
 1417|       |
 1418|  51.7k|    val = store_result<T>(u64val, is_negative);
 1419|  51.7k|    return ptr;
 1420|  52.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  20.0k|{
 1428|  20.0k|    uint64_t u64val{};
 1429|  20.0k|    const CharT* begin = input.data();
 1430|  20.0k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  63.7k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 53.3k, False: 10.4k]
  ------------------
 1433|  53.3k|        const auto digit = char_to_int(*begin);
 1434|  53.3k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 9.64k, False: 43.6k]
  ------------------
 1435|  9.64k|            break;
 1436|  9.64k|        }
 1437|  43.6k|        u64val =
 1438|  43.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  43.6k|        ++begin;
 1440|  43.6k|    }
 1441|       |
 1442|  20.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  20.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 518, False: 19.5k]
  |  |  ------------------
  ------------------
 1444|  20.0k|                                               is_negative))) {
 1445|    518|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    518|                                     "Integer overflow");
 1447|    518|    }
 1448|       |
 1449|  19.5k|    val = store_result<T>(u64val, is_negative);
 1450|  19.5k|    return begin;
 1451|  20.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    704|{
 1428|    704|    uint64_t u64val{};
 1429|    704|    const CharT* begin = input.data();
 1430|    704|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.07k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.61k, False: 463]
  ------------------
 1433|  3.61k|        const auto digit = char_to_int(*begin);
 1434|  3.61k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 241, False: 3.37k]
  ------------------
 1435|    241|            break;
 1436|    241|        }
 1437|  3.37k|        u64val =
 1438|  3.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.37k|        ++begin;
 1440|  3.37k|    }
 1441|       |
 1442|    704|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    704|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  ------------------
  ------------------
 1444|    704|                                               is_negative))) {
 1445|    144|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    144|                                     "Integer overflow");
 1447|    144|    }
 1448|       |
 1449|    560|    val = store_result<T>(u64val, is_negative);
 1450|    560|    return begin;
 1451|    704|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  53.3k|{
 1407|  53.3k|    uint64_t u64val{};
 1408|  53.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  53.3k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  53.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  53.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 498, False: 52.8k]
  |  |  ------------------
  ------------------
 1413|  53.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|    498|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|    498|                                     "Integer overflow");
 1416|    498|    }
 1417|       |
 1418|  52.8k|    val = store_result<T>(u64val, is_negative);
 1419|  52.8k|    return ptr;
 1420|  53.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  20.2k|{
 1428|  20.2k|    uint64_t u64val{};
 1429|  20.2k|    const CharT* begin = input.data();
 1430|  20.2k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  65.1k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 54.6k, False: 10.5k]
  ------------------
 1433|  54.6k|        const auto digit = char_to_int(*begin);
 1434|  54.6k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 9.72k, False: 44.9k]
  ------------------
 1435|  9.72k|            break;
 1436|  9.72k|        }
 1437|  44.9k|        u64val =
 1438|  44.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  44.9k|        ++begin;
 1440|  44.9k|    }
 1441|       |
 1442|  20.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  20.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 286, False: 19.9k]
  |  |  ------------------
  ------------------
 1444|  20.2k|                                               is_negative))) {
 1445|    286|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    286|                                     "Integer overflow");
 1447|    286|    }
 1448|       |
 1449|  19.9k|    val = store_result<T>(u64val, is_negative);
 1450|  19.9k|    return begin;
 1451|  20.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    748|{
 1428|    748|    uint64_t u64val{};
 1429|    748|    const CharT* begin = input.data();
 1430|    748|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.16k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.67k, False: 489]
  ------------------
 1433|  3.67k|        const auto digit = char_to_int(*begin);
 1434|  3.67k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 259, False: 3.41k]
  ------------------
 1435|    259|            break;
 1436|    259|        }
 1437|  3.41k|        u64val =
 1438|  3.41k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.41k|        ++begin;
 1440|  3.41k|    }
 1441|       |
 1442|    748|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    748|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  ------------------
  ------------------
 1444|    748|                                               is_negative))) {
 1445|      8|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|      8|                                     "Integer overflow");
 1447|      8|    }
 1448|       |
 1449|    740|    val = store_result<T>(u64val, is_negative);
 1450|    740|    return begin;
 1451|    748|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   430k|{
 2073|   430k|    const auto argcount = args.size();
 2074|   430k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 64.4k, False: 365k]
  |  Branch (2074:60): [True: 64.4k, False: 0]
  ------------------
 2075|  64.4k|        auto arg = args.get(0);
 2076|  64.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  64.4k|    }
 2078|       |
 2079|   365k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 365k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   365k|    SCN_UNLIKELY_ATTR
 2087|   365k|    {
 2088|   365k|        auto handler = format_handler<false, CharT>{
 2089|   365k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   365k|        return vscan_parse_format_string(format, handler);
 2091|   365k|    }
 2092|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   860k|{
 1625|   860k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 730k, False: 129k]
  ------------------
 1626|   730k|        return false;
 1627|   730k|    }
 1628|   129k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 129k, False: 0]
  |  Branch (1628:39): [True: 129k, False: 0]
  ------------------
 1629|   860k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  96.6k|{
 1658|  96.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  96.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  96.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 96.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  96.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  96.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  96.6k|    static_cast<    \
  |  |  929|  96.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  96.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  96.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.1k, False: 83.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.1k|    }                                                  \
  |  |  |  | 3667|  96.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  83.5k|    return it.position();
 1675|  96.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   365k|        : format_handler_base{argcount},
 1900|   365k|          parse_ctx{format},
 1901|   365k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   365k|    {
 1903|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  1.05M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  1.05M|    {
 1722|  1.05M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   365k|        : contiguous_ctx(source, args, loc)
 1852|   365k|    {
 1853|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   365k|{
 2038|   365k|    const auto beg = handler.get_ctx().begin();
 2039|   365k|    detail::parse_format_string<false>(format, handler);
 2040|   365k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.0k, False: 286k]
  |  |  ------------------
  ------------------
 2041|  79.0k|        return unexpected(handler.error);
 2042|  79.0k|    }
 2043|   286k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  2.34M|    {
 2022|  2.34M|        return ctx.get();
 2023|  2.34M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  2.34M|    {
 1857|  2.34M|        return contiguous_ctx;
 1858|  2.34M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   651k|    {
 1907|   651k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 651k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   651k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   365k|{
 1681|   365k|    auto arg = ctx.arg(id);
 1682|   365k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   365k|    return arg;
 1686|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.05M|    {
 1797|  1.05M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.05M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.05M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.05M|            visited_args_lower64 |= (1ull << id);
 1808|  1.05M|            return;
 1809|  1.05M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.05M|    {
 1782|  1.05M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.05M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.05M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.05M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.05M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   316k|    {
 1766|   316k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 316k, False: 0]
  |  |  ------------------
  ------------------
 1767|   316k|            error = err;
 1768|   316k|        }
 1769|   316k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   365k|    {
 1944|   365k|        return parse_ctx.next_arg_id();
 1945|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   365k|    {
 1985|   365k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   365k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   365k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 365k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   365k|        auto specs = detail::format_specs{};
 1998|   365k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   365k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   365k|            arg.type()};
 2001|       |
 2002|   365k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   365k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 365k]
  |  Branch (2003:29): [True: 17.5k, False: 347k]
  ------------------
 2004|  17.5k|            SCN_UNLIKELY_ATTR
 2005|  17.5k|            on_error("Missing '}' in format string");
 2006|  17.5k|            return parse_ctx.begin();
 2007|  17.5k|        }
 2008|   347k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.78k, False: 338k]
  |  |  ------------------
  ------------------
 2009|  8.78k|            return parse_ctx.begin();
 2010|  8.78k|        }
 2011|   338k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   338k|        on_visit_scan_arg(
 2014|   338k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   338k|                                           get_ctx().locale()},
 2016|   338k|            arg);
 2017|   338k|        return parse_ctx.begin();
 2018|   347k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   365k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   365k|    {
 1701|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   338k|    {
 1956|   338k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 338k]
  |  Branch (1956:23): [True: 0, False: 338k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   338k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   338k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.7k, False: 286k]
  |  |  ------------------
  ------------------
 1963|  52.7k|            on_error(r.error());
 1964|  52.7k|        }
 1965|   286k|        else {
 1966|   286k|            get_ctx().advance_to(*r);
 1967|   286k|        }
 1968|   338k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   263k|    {
 1761|   263k|        SCN_UNLIKELY_ATTR
 1762|   263k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.05M|    {
 1729|  1.05M|        {
 1730|  1.05M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.05M]
  ------------------
 1731|  1.05M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.05M]
  ------------------
 1732|  1.05M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.05M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.05M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.05M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.05M|        }
 1739|       |
 1740|  1.05M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.05M, False: 0]
  ------------------
 1741|  1.05M|            return;
 1742|  1.05M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.05M|    {
 1777|  1.05M|        return error;
 1778|  1.05M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  2.99M|    {
 1773|  2.99M|        return static_cast<bool>(error);
 1774|  2.99M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   365k|        : format_handler_base{argcount},
 1900|   365k|          parse_ctx{format},
 1901|   365k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   365k|    {
 1903|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   365k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   365k|    {
 1830|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   365k|{
 2038|   365k|    const auto beg = handler.get_ctx().begin();
 2039|   365k|    detail::parse_format_string<false>(format, handler);
 2040|   365k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.0k, False: 286k]
  |  |  ------------------
  ------------------
 2041|  79.0k|        return unexpected(handler.error);
 2042|  79.0k|    }
 2043|   286k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  2.34M|    {
 2022|  2.34M|        return ctx.get();
 2023|  2.34M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  2.34M|    {
 1834|  2.34M|        return ctx;
 1835|  2.34M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   652k|    {
 1907|   652k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 652k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   652k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   365k|{
 1681|   365k|    auto arg = ctx.arg(id);
 1682|   365k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   365k|    return arg;
 1686|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   365k|    {
 1944|   365k|        return parse_ctx.next_arg_id();
 1945|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   365k|    {
 1985|   365k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   365k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   365k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 365k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   365k|        auto specs = detail::format_specs{};
 1998|   365k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   365k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   365k|            arg.type()};
 2001|       |
 2002|   365k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   365k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 365k]
  |  Branch (2003:29): [True: 17.5k, False: 348k]
  ------------------
 2004|  17.5k|            SCN_UNLIKELY_ATTR
 2005|  17.5k|            on_error("Missing '}' in format string");
 2006|  17.5k|            return parse_ctx.begin();
 2007|  17.5k|        }
 2008|   348k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.78k, False: 339k]
  |  |  ------------------
  ------------------
 2009|  8.78k|            return parse_ctx.begin();
 2010|  8.78k|        }
 2011|   339k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   339k|        on_visit_scan_arg(
 2014|   339k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   339k|                                           get_ctx().locale()},
 2016|   339k|            arg);
 2017|   339k|        return parse_ctx.begin();
 2018|   348k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   365k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   365k|    {
 1701|   365k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   339k|    {
 1956|   339k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 339k]
  |  Branch (1956:23): [True: 0, False: 339k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   339k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   339k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.7k, False: 286k]
  |  |  ------------------
  ------------------
 1963|  52.7k|            on_error(r.error());
 1964|  52.7k|        }
 1965|   286k|        else {
 1966|   286k|            get_ctx().advance_to(*r);
 1967|   286k|        }
 1968|   339k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   430k|{
 2053|   430k|    const auto argcount = args.size();
 2054|   430k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 65.3k, False: 365k]
  |  Branch (2054:60): [True: 65.3k, False: 0]
  ------------------
 2055|  65.3k|        auto arg = args.get(0);
 2056|  65.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  65.3k|    static_cast<    \
  |  |  929|  65.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  65.3k|    }
 2058|       |
 2059|   365k|    auto handler = format_handler<true, CharT>{
 2060|   365k|        ranges::subrange<const CharT*>{source.data(),
 2061|   365k|                                       source.data() + source.size()},
 2062|   365k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   365k|    return vscan_parse_format_string(format, handler);
 2064|   430k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  98.0k|{
 1638|  98.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.0k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  98.0k|    auto reader =
 1644|  98.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  98.0k|            ranges::subrange<const CharT*>{source.data(),
 1646|  98.0k|                                           source.data() + source.size()},
 1647|  98.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  98.0k|    static_cast<    \
  |  |  929|  98.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  98.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.1k, False: 84.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.1k|    }                                                  \
  |  |  |  | 3667|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  84.8k|    return ranges::distance(source.data(), it);
 1650|  98.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   178k|{
 2053|   178k|    const auto argcount = args.size();
 2054|   178k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18.0k, False: 160k]
  |  Branch (2054:60): [True: 18.0k, False: 0]
  ------------------
 2055|  18.0k|        auto arg = args.get(0);
 2056|  18.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  18.0k|    static_cast<    \
  |  |  929|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  18.0k|    }
 2058|       |
 2059|   160k|    auto handler = format_handler<true, CharT>{
 2060|   160k|        ranges::subrange<const CharT*>{source.data(),
 2061|   160k|                                       source.data() + source.size()},
 2062|   160k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   160k|    return vscan_parse_format_string(format, handler);
 2064|   178k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   357k|{
 1625|   357k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 321k, False: 36.1k]
  ------------------
 1626|   321k|        return false;
 1627|   321k|    }
 1628|  36.1k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 36.1k, False: 0]
  |  Branch (1628:39): [True: 36.1k, False: 0]
  ------------------
 1629|   357k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  27.0k|{
 1638|  27.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  27.0k|    auto reader =
 1644|  27.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  27.0k|            ranges::subrange<const CharT*>{source.data(),
 1646|  27.0k|                                           source.data() + source.size()},
 1647|  27.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  27.0k|    static_cast<    \
  |  |  929|  27.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  27.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.3k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  26.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  26.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  26.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  26.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  26.3k|    }                                                  \
  |  |  |  | 3667|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|    738|    return ranges::distance(source.data(), it);
 1650|  27.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   160k|        : format_handler_base{argcount},
 1900|   160k|          parse_ctx{format},
 1901|   160k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   160k|    {
 1903|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   160k|        : contiguous_ctx(source, args, loc)
 1852|   160k|    {
 1853|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   160k|{
 2038|   160k|    const auto beg = handler.get_ctx().begin();
 2039|   160k|    detail::parse_format_string<false>(format, handler);
 2040|   160k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 2.51k]
  |  |  ------------------
  ------------------
 2041|   158k|        return unexpected(handler.error);
 2042|   158k|    }
 2043|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|   702k|    {
 2022|   702k|        return ctx.get();
 2023|   702k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   702k|    {
 1857|   702k|        return contiguous_ctx;
 1858|   702k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   163k|    {
 1907|   163k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 163k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   163k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   160k|{
 1681|   160k|    auto arg = ctx.arg(id);
 1682|   160k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   160k|    return arg;
 1686|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   160k|    {
 1944|   160k|        return parse_ctx.next_arg_id();
 1945|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   160k|    {
 1985|   160k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   160k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   160k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 160k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   160k|        auto specs = detail::format_specs{};
 1998|   160k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   160k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   160k|            arg.type()};
 2001|       |
 2002|   160k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   160k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 160k]
  |  Branch (2003:29): [True: 35.1k, False: 125k]
  ------------------
 2004|  35.1k|            SCN_UNLIKELY_ATTR
 2005|  35.1k|            on_error("Missing '}' in format string");
 2006|  35.1k|            return parse_ctx.begin();
 2007|  35.1k|        }
 2008|   125k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 107k]
  |  |  ------------------
  ------------------
 2009|  17.5k|            return parse_ctx.begin();
 2010|  17.5k|        }
 2011|   107k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   107k|        on_visit_scan_arg(
 2014|   107k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   107k|                                           get_ctx().locale()},
 2016|   107k|            arg);
 2017|   107k|        return parse_ctx.begin();
 2018|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   160k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   160k|    {
 1701|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   107k|    {
 1956|   107k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 107k]
  |  Branch (1956:23): [True: 0, False: 107k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   107k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   107k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 2.51k]
  |  |  ------------------
  ------------------
 1963|   105k|            on_error(r.error());
 1964|   105k|        }
 1965|  2.51k|        else {
 1966|  2.51k|            get_ctx().advance_to(*r);
 1967|  2.51k|        }
 1968|   107k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   178k|{
 2073|   178k|    const auto argcount = args.size();
 2074|   178k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 18.0k, False: 160k]
  |  Branch (2074:60): [True: 18.0k, False: 0]
  ------------------
 2075|  18.0k|        auto arg = args.get(0);
 2076|  18.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  18.0k|    static_cast<    \
  |  |  929|  18.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  18.0k|    }
 2078|       |
 2079|   160k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 160k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   160k|    SCN_UNLIKELY_ATTR
 2087|   160k|    {
 2088|   160k|        auto handler = format_handler<false, CharT>{
 2089|   160k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   160k|        return vscan_parse_format_string(format, handler);
 2091|   160k|    }
 2092|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  27.0k|{
 1658|  27.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  27.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  27.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 27.0k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  27.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  27.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  27.0k|    static_cast<    \
  |  |  929|  27.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  27.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  27.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26.3k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  26.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  26.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  26.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  26.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  26.3k|    }                                                  \
  |  |  |  | 3667|  27.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|    738|    return it.position();
 1675|  27.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   160k|        : format_handler_base{argcount},
 1900|   160k|          parse_ctx{format},
 1901|   160k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   160k|    {
 1903|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   160k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   160k|    {
 1830|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   160k|{
 2038|   160k|    const auto beg = handler.get_ctx().begin();
 2039|   160k|    detail::parse_format_string<false>(format, handler);
 2040|   160k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158k, False: 2.51k]
  |  |  ------------------
  ------------------
 2041|   158k|        return unexpected(handler.error);
 2042|   158k|    }
 2043|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|   702k|    {
 2022|   702k|        return ctx.get();
 2023|   702k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|   702k|    {
 1834|   702k|        return ctx;
 1835|   702k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   163k|    {
 1907|   163k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 163k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   163k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   160k|{
 1681|   160k|    auto arg = ctx.arg(id);
 1682|   160k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   160k|    return arg;
 1686|   160k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   160k|    {
 1944|   160k|        return parse_ctx.next_arg_id();
 1945|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   160k|    {
 1985|   160k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   160k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   160k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 160k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   160k|        auto specs = detail::format_specs{};
 1998|   160k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   160k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   160k|            arg.type()};
 2001|       |
 2002|   160k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   160k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 160k]
  |  Branch (2003:29): [True: 35.1k, False: 125k]
  ------------------
 2004|  35.1k|            SCN_UNLIKELY_ATTR
 2005|  35.1k|            on_error("Missing '}' in format string");
 2006|  35.1k|            return parse_ctx.begin();
 2007|  35.1k|        }
 2008|   125k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 107k]
  |  |  ------------------
  ------------------
 2009|  17.5k|            return parse_ctx.begin();
 2010|  17.5k|        }
 2011|   107k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   107k|        on_visit_scan_arg(
 2014|   107k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   107k|                                           get_ctx().locale()},
 2016|   107k|            arg);
 2017|   107k|        return parse_ctx.begin();
 2018|   125k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   160k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   160k|    {
 1701|   160k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   107k|    {
 1956|   107k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 107k]
  |  Branch (1956:23): [True: 0, False: 107k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   107k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   107k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 2.51k]
  |  |  ------------------
  ------------------
 1963|   105k|            on_error(r.error());
 1964|   105k|        }
 1965|  2.51k|        else {
 1966|  2.51k|            get_ctx().advance_to(*r);
 1967|  2.51k|        }
 1968|   107k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  32.6k|{
 2099|  32.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  32.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  32.2k|{
 2099|  32.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  32.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  9.03k|{
 2099|  9.03k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  9.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  9.03k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  9.03k|{
 2099|  9.03k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  9.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  9.03k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    732|{
 1351|    732|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    732|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    732|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    732|            return transcode_to_string_impl_to32(src, dest);
 1362|    732|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    732|    SCN_EXPECT(false);
  ------------------
  |  |  924|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    732|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    732|{
 1244|    732|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    732|    auto it = src.begin();
 1247|  50.4k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 49.7k, False: 732]
  ------------------
 1248|  49.7k|        auto res = get_next_code_point(
 1249|  49.7k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  49.7k|                                                                 src.end()));
 1251|  49.7k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 496, False: 49.2k]
  |  |  ------------------
  ------------------
 1252|    496|            dest.push_back(DestCharT{0xfffd});
 1253|    496|        }
 1254|  49.2k|        else {
 1255|  49.2k|            dest.push_back(res.value);
 1256|  49.2k|        }
 1257|  49.7k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  49.7k|    }
 1259|    732|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  83.8k|{
 1169|  83.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  83.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  83.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  83.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.72k, False: 81.1k]
  |  |  ------------------
  ------------------
 1173|  2.72k|        return {get_start_for_next_code_point(input),
 1174|  2.72k|                detail::invalid_code_point};
 1175|  2.72k|    }
 1176|  81.1k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  81.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.21k, False: 78.9k]
  |  |  ------------------
  ------------------
 1177|  2.21k|        return {input.end(), detail::invalid_code_point};
 1178|  2.21k|    }
 1179|       |
 1180|  78.9k|    return {input.begin() + len,
 1181|  78.9k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  81.1k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  2.72k|{
 1155|  2.72k|    auto it = input.begin();
 1156|  10.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 9.61k, False: 1.22k]
  ------------------
 1157|  9.61k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.49k, False: 8.12k]
  ------------------
 1158|  1.49k|            break;
 1159|  1.49k|        }
 1160|  9.61k|    }
 1161|  2.72k|    return it;
 1162|  2.72k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  3.73M|    constexpr parse_error(code c) : m_code(c)
  808|  3.73M|    {
  809|  3.73M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.73M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.73M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  1.28M|    {
  823|  1.28M|        return a.m_code == b.m_code;
  824|  1.28M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   893k|    {
 2925|   893k|        return m_msg == nullptr;
 2926|   893k|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   876k|{
  458|   876k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   876k|        static_cast<unsigned char>(ch))];
  460|   876k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   530k|{
  539|   530k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   530k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  3.23M|{
  784|  3.23M|    return e != eof_error::good;
  785|  3.23M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  27.1k|{
  798|  27.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  27.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  27.1k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  27.1k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  64.8k|{
  845|  64.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  64.8k|    return parse_error::eof;
  847|  64.8k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   141k|{
  854|   141k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 141k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   141k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 141k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   141k|    return scan_error{code, msg};
  863|   141k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   433k|{
  868|   433k|    return [code, msg](parse_error err) {
  869|   433k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   433k|    };
  871|   433k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|   334k|{
 2209|   334k|    unsigned char running_diff{0};
 2210|  1.00M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 668k, False: 334k]
  ------------------
 2211|   668k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|   668k|    }
 2213|   334k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 2.16k, False: 332k]
  |  Branch (2213:33): [True: 462, False: 331k]
  ------------------
 2214|   334k|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  5.31M|{
 3112|  5.31M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  5.31M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|   592k|{
 3116|   592k|#if WCHAR_MIN < 0
 3117|   592k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 566k, False: 26.2k]
  |  Branch (3117:20): [True: 350k, False: 216k]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|   350k|        return char_to_int(static_cast<char>(ch));
 3122|   350k|    }
 3123|   242k|    return 255;
 3124|   592k|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3147|  21.2k|{
 3148|  72.0M|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3148:44): [True: 72.0M, False: 21.2k]
  ------------------
 3149|  72.0M|         ++thsep_it) {
 3150|  72.0M|        const auto tmp = *thsep_it;
 3151|  72.0M|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3152|  72.0M|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3153|  72.0M|    }
 3154|  21.2k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3155|  21.2k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|   577k|{
 5997|   577k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 577k]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|   577k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 577k]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|   577k|    return {};
 6012|   577k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.45M|    {
  304|  1.45M|        ranges::advance(x, n);
  305|  1.45M|        return x;
  306|  1.45M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.45M|    {
  268|  1.45M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.45M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.45M|    {
  151|  1.45M|        i += n;
  152|  1.45M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.23M|    {
  108|  2.23M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.23M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.23M|    {
   87|  2.23M|        return s - i;
   88|  2.23M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  95.6k|    {
  304|  95.6k|        ranges::advance(x, n);
  305|  95.6k|        return x;
  306|  95.6k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  95.6k|    {
  268|  95.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  95.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  95.6k|    {
  151|  95.6k|        i += n;
  152|  95.6k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  36.0M|    {
  108|  36.0M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  36.0M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  36.0M|    {
   87|  36.0M|        return s - i;
   88|  36.0M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   435k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   435k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   435k|        auto beg = r.begin();
  990|   435k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 435k, False: 0]
  ------------------
  991|   435k|            return false;
  992|   435k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   435k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  2.40M|    {
  763|  2.40M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.40M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   346k|{
 1845|   346k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   346k|    else {
 1856|   346k|        auto it = range.begin();
 1857|   346k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 308k, False: 37.2k]
  ------------------
 1858|   308k|            return ranges::next(it, count);
 1859|   308k|        }
 1860|       |
 1861|  98.6k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 73.3k, False: 25.2k]
  ------------------
 1862|  73.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 11.9k, False: 61.4k]
  ------------------
 1863|  11.9k|                return unexpected(eof_error::eof);
 1864|  11.9k|            }
 1865|  73.3k|        }
 1866|       |
 1867|  25.2k|        return it;
 1868|  37.2k|    }
 1869|   346k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   346k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   346k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   346k|        else {
 1106|   346k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 346k, False: 0]
  ------------------
 1107|   346k|                return static_cast<size_t>(
 1108|   346k|                    r.begin().parent()->chars_available() -
 1109|   346k|                    r.begin().position());
 1110|   346k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   346k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   346k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   318k|        : m_fptr([](storage fn,
  743|   318k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   318k|              cvref<T> obj = *get<T>(fn);
  745|   318k|              if constexpr (std::is_void_v<R>) {
  746|   318k|                  obj(static_cast<decltype(args)>(args)...);
  747|   318k|              }
  748|   318k|              else {
  749|   318k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   318k|              }
  751|   318k|          }),
  752|   318k|          m_storage(std::addressof(f))
  753|   318k|    {
  754|   318k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.20M|              else {
  749|  1.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20M|              }
  751|  1.20M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.20M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.20M|        else if constexpr (std::is_object_v<T>) {
  688|  1.20M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.20M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   318k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   318k|        {
  662|   318k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  2.11M|    {
  763|  2.11M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.11M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   679k|        : m_fptr([](storage fn,
  743|   679k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   679k|              cvref<T> obj = *get<T>(fn);
  745|   679k|              if constexpr (std::is_void_v<R>) {
  746|   679k|                  obj(static_cast<decltype(args)>(args)...);
  747|   679k|              }
  748|   679k|              else {
  749|   679k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   679k|              }
  751|   679k|          }),
  752|   679k|          m_storage(std::addressof(f))
  753|   679k|    {
  754|   679k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   679k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   679k|        {
  662|   679k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   339k|    {
 6026|   339k|        const bool need_skipped_width =
 6027|   339k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 339k]
  |  Branch (6027:33): [True: 0, False: 339k]
  ------------------
 6028|   339k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   339k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 339k]
  ------------------
 6032|   339k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 339k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   339k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 339k, False: 0]
  |  Branch (6036:56): [True: 339k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   339k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 339k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   668k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.72k, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.72k|    }                                                  \
  |  |  |  | 3667|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   668k|                            make_eof_scan_error));
 6047|       |
 6048|   668k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 329k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   329k|            return result_type{it, 0};
 6056|   668k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   339k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   318k|{
 1964|   318k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   318k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   318k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   318k|    else {
 1949|   318k|        auto first = range.begin();
 1950|  1.21M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.20M, False: 9.40k]
  ------------------
 1951|  1.20M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 309k, False: 893k]
  ------------------
 1952|   309k|                return first;
 1953|   309k|            }
 1954|  1.20M|        }
 1955|  9.40k|        return first;
 1956|   318k|    }
 1957|   318k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   324k|    {
  108|   324k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   324k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   324k|    {
   94|   324k|        iter_difference_t<I> counter{0};
   95|  4.82M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 4.50M, False: 324k]
  ------------------
   96|  4.50M|            ++i;
   97|  4.50M|            ++counter;
   98|  4.50M|        }
   99|   324k|        return counter;
  100|   324k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   141k|    return [code, msg](parse_error err) {
  869|   141k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   141k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   123k|    {
 1768|   123k|        auto stdloc = loc.get<std::locale>();
 1769|   123k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   123k|        grouping = numpunct.grouping();
 1771|   123k|        thousands_sep =
 1772|   123k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 123k]
  ------------------
 1773|   123k|        decimal_point = numpunct.decimal_point();
 1774|   123k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   123k|{
 1705|   123k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 123k, False: 0]
  ------------------
 1706|   123k|        return std::use_facet<Facet>(stdloc);
 1707|   123k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   123k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   534k|{
 1834|   534k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 534k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   534k|    return ranges::next(range.begin());
 1839|   534k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.06M|{
  950|  1.06M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 1.05M]
  |  |  ------------------
  ------------------
  951|  12.5k|        return eof_error::eof;
  952|  12.5k|    }
  953|  1.05M|    return eof_error::good;
  954|  1.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.85M|{
  944|  1.85M|    return is_range_eof(r.begin(), r.end());
  945|  1.85M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.85M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.85M|    {
  937|  1.85M|        return begin == end;
  938|  1.85M|    }
  939|  1.85M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   534k|    {
  296|   534k|        ++x;
  297|   534k|        return x;
  298|   534k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  53.2k|    {
 3528|  53.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 53.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  53.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  53.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.96k, False: 45.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.96k|            else {
 3539|  7.96k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.96k]
  ------------------
 3540|  7.96k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.96k|            }
 3546|  7.96k|        }
 3547|       |
 3548|  53.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.25k, False: 47.9k]
  ------------------
 3549|  5.25k|            value = T{0};
 3550|  5.25k|            return std::next(prefix_result.iterator);
 3551|  5.25k|        }
 3552|       |
 3553|  47.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  47.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.3k, False: 10.6k]
  |  |  ------------------
  ------------------
 3554|  37.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  37.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.30k|    }                                                  \
  |  |  |  | 3667|  37.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.0k|                    parse_integer_digits_without_thsep(
 3556|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.0k|            auto buf = make_contiguous_buffer(
 3560|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.81k, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.81k|    }                                                  \
  |  |  |  | 3667|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.2k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.2k|            return ranges::next(
 3566|  31.2k|                prefix_result.iterator,
 3567|  31.2k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.0k|        }
 3569|       |
 3570|  10.6k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.6k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.6k|#endif
 3576|       |
 3577|  10.6k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 576, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    576|    }                                                  \
  |  |  |  | 3667|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.0k|                parse_integer_digits_with_thsep(
 3579|  10.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.0k|                    prefix_result.parsed_base, locale_options));
 3581|  10.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.0k|            parse_digits_result;
 3583|       |
 3584|  10.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 312, False: 9.71k]
  ------------------
 3585|    312|            if (auto e = check_thsep_grouping(
 3586|    312|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    312|                    thsep_indices, locale_options.grouping);
 3588|    312|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 134]
  |  |  ------------------
  ------------------
 3589|    178|                return unexpected(e);
 3590|    178|            }
 3591|    312|        }
 3592|       |
 3593|  9.84k|        auto nothsep_source_view =
 3594|  9.84k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.84k|        SCN_TRY(
  ------------------
  |  | 3668|  9.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 406, False: 9.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    406|    }                                                  \
  |  |  |  | 3667|  9.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.44k|            nothsep_source_it,
 3597|  9.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.44k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.44k|        return ranges::next(
 3601|  9.44k|            prefix_result.iterator,
 3602|  9.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.44k|                ranges::ssize(thsep_indices));
 3604|  9.84k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   423k|{
 3315|   423k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   423k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   423k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   423k|        parse_integer_base_prefix(
 3320|   423k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   423k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.4k, False: 381k]
  ------------------
 3323|  42.4k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.9k]
  ------------------
 3324|  42.4k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 31.0k, False: 10.9k]
  ------------------
 3325|  31.5k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.5k|        }
 3327|  10.9k|        else {
 3328|  10.9k|            parsed_zero = false;
 3329|  10.9k|        }
 3330|  42.4k|    }
 3331|   381k|    else {
 3332|   381k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 379k]
  ------------------
 3333|   381k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 35.6k, False: 343k]
  ------------------
 3334|  37.8k|            digits_begin_it = base_prefix_begin_it;
 3335|  37.8k|        }
 3336|   381k|    }
 3337|       |
 3338|   423k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 367k, False: 56.4k]
  ------------------
 3339|   367k|        sign = sign_type::plus_sign;
 3340|   367k|    }
 3341|   423k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   423k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   423k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   423k|{
 3130|   423k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   423k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 367k, False: 56.4k]
  ------------------
 3132|   367k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 367k, False: 0]
  ------------------
 3133|   367k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   367k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   367k|    }
 3137|       |
 3138|  56.4k|    auto& it = *r;
 3139|  56.4k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 43.9k, False: 12.4k]
  ------------------
 3140|  43.9k|        return std::pair{it, sign_type::minus_sign};
 3141|  43.9k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  56.4k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   423k|{
 2261|   423k|    auto it = read_code_unit(range);
 2262|   423k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   835k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 835k, False: 367k]
  ------------------
 2267|   835k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 56.4k, False: 778k]
  ------------------
 2268|  56.4k|            return *it;
 2269|  56.4k|        }
 2270|   835k|    }
 2271|       |
 2272|   367k|    return unexpected(parse_error::error);
 2273|   423k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   423k|{
 3282|   423k|    switch (base) {
 3283|  22.5k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.5k, False: 401k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.5k|                    false};
 3287|       |
 3288|  40.2k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 40.2k, False: 383k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  40.2k|            bool zero_parsed = false;
 3291|  40.2k|            auto it = apply_opt(
 3292|  40.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  40.2k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.9k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.9k, False: 356k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.9k|                    false};
 3300|       |
 3301|  72.5k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 72.5k, False: 351k]
  ------------------
 3302|       |            // detect base
 3303|  72.5k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   221k|        default:
  ------------------
  |  Branch (3305:9): [True: 221k, False: 202k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   221k|            return {range.begin(), base, false};
 3308|   423k|    }
 3309|   423k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|   129k|{
 2280|   129k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 112k, False: 17.7k]
  ------------------
 2281|   112k|        return range.begin();
 2282|   112k|    }
 2283|  17.7k|    return *result;
 2284|   129k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  94.5k|{
 3233|  94.5k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  94.5k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   346k|{
 2220|   346k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   346k|    else {
 2233|   346k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   346k|            if (ch < 'A' || ch > 'Z') {
 2235|   346k|                return ch;
 2236|   346k|            }
 2237|   346k|            return static_cast<char_type>(ch +
 2238|   346k|                                          static_cast<char_type>('a' - 'A'));
 2239|   346k|        };
 2240|       |
 2241|   346k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.9k, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.9k|    }                                                  \
  |  |  |  | 3667|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|   334k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|   334k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|   334k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 331k, False: 2.62k]
  |  |  ------------------
  ------------------
 2246|   334k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|   334k|                    return ascii_tolower(a) ==
 2248|   334k|                           static_cast<detail::char_t<Range>>(b);
 2249|   334k|                }))) {
 2250|   331k|            return unexpected(parse_error::error);
 2251|   331k|        }
 2252|       |
 2253|  2.62k|        return it;
 2254|   334k|    }
 2255|   346k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|   471k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   471k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 457k, False: 14.0k]
  |  Branch (2234:29): [True: 7.74k, False: 6.25k]
  ------------------
 2235|   465k|                return ch;
 2236|   465k|            }
 2237|  6.25k|            return static_cast<char_type>(ch +
 2238|  6.25k|                                          static_cast<char_type>('a' - 'A'));
 2239|   471k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|   111k|{
 3247|   111k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 111k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   111k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.4k, False: 68.5k]
  ------------------
 3252|  42.4k|        zero_parsed = true;
 3253|  42.4k|        return *r;
 3254|  42.4k|    }
 3255|       |
 3256|  68.5k|    return unexpected(parse_error::error);
 3257|   111k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   111k|{
 2135|   111k|    auto it = read_code_unit(range);
 2136|   111k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 110k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   110k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.1k, False: 42.4k]
  |  |  ------------------
  ------------------
 2141|   110k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  68.1k|        return unexpected(parse_error::error);
 2143|  68.1k|    }
 2144|       |
 2145|  42.4k|    return *it;
 2146|   110k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|   139k|{
 3240|   139k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   139k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  72.5k|{
 3263|  72.5k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 544, False: 72.0k]
  ------------------
 3264|    544|        return {*r, 16, false};
 3265|    544|    }
 3266|  72.0k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.6k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.6k|    {
 3270|  71.6k|        bool zero_parsed{false};
 3271|  71.6k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.5k, False: 45.1k]
  ------------------
 3272|  26.5k|            return {*r, 8, zero_parsed};
 3273|  26.5k|        }
 3274|  71.6k|    }
 3275|  45.1k|    return {range.begin(), 10, false};
 3276|  71.6k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   318k|{
 3349|   318k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   318k|    else {
 3360|   318k|        return read_while1_code_unit(range,
 3361|   318k|                                     [&](char_type ch) noexcept {
 3362|   318k|                                         return char_to_int(ch) < base;
 3363|   318k|                                     })
 3364|   318k|            .transform_error(map_parse_error_to_scan_error(
 3365|   318k|                scan_error::invalid_scanned_value,
 3366|   318k|                "Failed to parse integer: No digits found"));
 3367|   318k|    }
 3368|   318k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   318k|{
 1984|   318k|    auto it = read_while_code_unit(range, pred);
 1985|   318k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 30.1k, False: 288k]
  ------------------
 1986|  30.1k|        return unexpected(parse_error::error);
 1987|  30.1k|    }
 1988|   288k|    return it;
 1989|   318k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   318k|        : m_fptr([](storage fn,
  743|   318k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   318k|              cvref<T> obj = *get<T>(fn);
  745|   318k|              if constexpr (std::is_void_v<R>) {
  746|   318k|                  obj(static_cast<decltype(args)>(args)...);
  747|   318k|              }
  748|   318k|              else {
  749|   318k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   318k|              }
  751|   318k|          }),
  752|   318k|          m_storage(std::addressof(f))
  753|   318k|    {
  754|   318k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.20M|              else {
  749|  1.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20M|              }
  751|  1.20M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.20M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.20M|        else if constexpr (std::is_object_v<T>) {
  688|  1.20M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.20M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3361|  1.20M|                                     [&](char_type ch) noexcept {
 3362|  1.20M|                                         return char_to_int(ch) < base;
 3363|  1.20M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   318k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   318k|        {
  662|   318k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  61.9k|{
 3379|  61.9k|    std::basic_string<CharT> output;
 3380|  61.9k|    std::string thsep_indices;
 3381|  61.9k|    auto it = range.begin();
 3382|  61.9k|    bool digit_matched = false;
 3383|   356k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 354k, False: 2.30k]
  ------------------
 3384|   354k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 36.1k, False: 318k]
  ------------------
 3385|  36.1k|            thsep_indices.push_back(
 3386|  36.1k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  36.1k|        }
 3388|   318k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.6k, False: 258k]
  ------------------
 3389|  59.6k|            break;
 3390|  59.6k|        }
 3391|   258k|        else {
 3392|   258k|            output.push_back(*it);
 3393|   258k|            digit_matched = true;
 3394|   258k|        }
 3395|   354k|    }
 3396|  61.9k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.17k, False: 58.7k]
  |  |  ------------------
  ------------------
 3397|  3.17k|        return unexpected_scan_error(
 3398|  3.17k|            scan_error::invalid_scanned_value,
 3399|  3.17k|            "Failed to parse integer: No digits found");
 3400|  3.17k|    }
 3401|  58.7k|    return std::tuple{it, output, thsep_indices};
 3402|  61.9k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  1.73k|{
 3200|  1.73k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.73k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 938, False: 792]
  ------------------
 3203|    938|        SCN_UNLIKELY_ATTR
 3204|    938|        return {scan_error::invalid_scanned_value,
 3205|    938|                "Invalid thousands separator grouping"};
 3206|    938|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.73k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  1.73k|{
 3162|  1.73k|    transform_thsep_indices(thsep_indices,
 3163|  1.73k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.73k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.73k|    for (auto grouping_it = grouping.begin();
 3167|  1.73k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.73k]
  |  Branch (3167:10): [True: 0, False: 1.73k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.73k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.73k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.73k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.7k, False: 1.27k]
  ------------------
 3179|  25.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 454, False: 25.2k]
  ------------------
 3180|    454|            return false;
 3181|    454|        }
 3182|  25.7k|    }
 3183|       |
 3184|  1.27k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.27k, False: 0]
  ------------------
 3185|  1.27k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 484, False: 792]
  ------------------
 3186|    484|            return false;
 3187|    484|        }
 3188|  1.27k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.27k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   288k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   288k|    else {
 1677|   288k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   288k|    }
 1679|   288k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   288k|    {
 1525|   288k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   288k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   288k|    {
 1609|   288k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   288k|                           ranges::common_range<Range>) {
 1626|   288k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   288k|            auto end_seg = range.end().contiguous_segment();
 1628|   288k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182k, False: 106k]
  |  |  ------------------
  ------------------
 1629|   288k|                             detail::to_address(end_seg.end()))) {
 1630|   182k|                auto& str = m_storage.emplace();
 1631|   182k|                str.reserve(range.end().position() - range.begin().position());
 1632|   182k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   182k|                m_view = string_view_type{str};
 1634|   182k|                return;
 1635|   182k|            }
 1636|       |
 1637|   106k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   106k|                                                            end_seg.data());
 1639|   106k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   288k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   570k|    {
 1570|   570k|        return m_view;
 1571|   570k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   288k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   279k|    {
 6068|   279k|        const bool need_skipped_width =
 6069|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 279k]
  |  Branch (6069:33): [True: 0, False: 279k]
  ------------------
 6070|   279k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   279k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 279k]
  ------------------
 6073|   279k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 279k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   279k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 279k, False: 0]
  ------------------
 6082|   279k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 279k]
  ------------------
 6083|   279k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   279k|        return result_type{rng.begin(), 0};
 6107|   279k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   536k|{
 1834|   536k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 536k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   536k|    return ranges::next(range.begin());
 1839|   536k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  1.39M|{
  950|  1.39M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 1.37M]
  |  |  ------------------
  ------------------
  951|  12.5k|        return eof_error::eof;
  952|  12.5k|    }
  953|  1.37M|    return eof_error::good;
  954|  1.39M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.39M|{
  944|  1.39M|    return is_range_eof(r.begin(), r.end());
  945|  1.39M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.39M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.39M|    {
  937|  1.39M|        return begin == end;
  938|  1.39M|    }
  939|  1.39M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   536k|    {
  296|   536k|        ++x;
  297|   536k|        return x;
  298|   536k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  53.3k|    {
 3528|  53.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 53.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  53.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  53.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.95k, False: 45.4k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.95k|            else {
 3539|  7.95k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.95k]
  ------------------
 3540|  7.95k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.95k|            }
 3546|  7.95k|        }
 3547|       |
 3548|  53.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.25k, False: 48.0k]
  ------------------
 3549|  5.25k|            value = T{0};
 3550|  5.25k|            return std::next(prefix_result.iterator);
 3551|  5.25k|        }
 3552|       |
 3553|  48.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  48.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.4k, False: 10.6k]
  |  |  ------------------
  ------------------
 3554|  37.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  37.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 37.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  37.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  37.3k|                    parse_integer_digits_without_thsep(
 3556|  37.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  37.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  37.3k|            auto buf = make_contiguous_buffer(
 3560|  37.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  37.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  37.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.11k, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.11k|    }                                                  \
  |  |  |  | 3667|  37.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.2k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.2k|            return ranges::next(
 3566|  31.2k|                prefix_result.iterator,
 3567|  31.2k|                ranges::distance(buf.view().begin(), result_it));
 3568|  37.3k|        }
 3569|       |
 3570|  10.6k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.6k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.6k|#endif
 3576|       |
 3577|  10.6k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 608, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    608|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    608|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    608|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    608|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    608|    }                                                  \
  |  |  |  | 3667|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.0k|                parse_integer_digits_with_thsep(
 3579|  10.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.0k|                    prefix_result.parsed_base, locale_options));
 3581|  10.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.0k|            parse_digits_result;
 3583|       |
 3584|  10.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 312, False: 9.70k]
  ------------------
 3585|    312|            if (auto e = check_thsep_grouping(
 3586|    312|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    312|                    thsep_indices, locale_options.grouping);
 3588|    312|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 134]
  |  |  ------------------
  ------------------
 3589|    178|                return unexpected(e);
 3590|    178|            }
 3591|    312|        }
 3592|       |
 3593|  9.83k|        auto nothsep_source_view =
 3594|  9.83k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.83k|        SCN_TRY(
  ------------------
  |  | 3668|  9.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 402, False: 9.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    402|    }                                                  \
  |  |  |  | 3667|  9.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.43k|            nothsep_source_it,
 3597|  9.43k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.43k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.43k|        return ranges::next(
 3601|  9.43k|            prefix_result.iterator,
 3602|  9.43k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.43k|                ranges::ssize(thsep_indices));
 3604|  9.83k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   425k|{
 3315|   425k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   425k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   425k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   425k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 425k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   425k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   425k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   425k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   425k|        parse_integer_base_prefix(
 3320|   425k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   425k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.4k, False: 383k]
  ------------------
 3323|  42.4k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.9k]
  ------------------
 3324|  42.4k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 31.0k, False: 10.9k]
  ------------------
 3325|  31.5k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.5k|        }
 3327|  10.9k|        else {
 3328|  10.9k|            parsed_zero = false;
 3329|  10.9k|        }
 3330|  42.4k|    }
 3331|   383k|    else {
 3332|   383k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 380k]
  ------------------
 3333|   383k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 36.5k, False: 344k]
  ------------------
 3334|  38.6k|            digits_begin_it = base_prefix_begin_it;
 3335|  38.6k|        }
 3336|   383k|    }
 3337|       |
 3338|   425k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 369k, False: 56.4k]
  ------------------
 3339|   369k|        sign = sign_type::plus_sign;
 3340|   369k|    }
 3341|   425k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   425k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   425k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   425k|{
 3130|   425k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   425k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 369k, False: 56.4k]
  ------------------
 3132|   369k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 369k, False: 0]
  ------------------
 3133|   369k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   369k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   369k|    }
 3137|       |
 3138|  56.4k|    auto& it = *r;
 3139|  56.4k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 44.0k, False: 12.4k]
  ------------------
 3140|  44.0k|        return std::pair{it, sign_type::minus_sign};
 3141|  44.0k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  56.4k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   425k|{
 2261|   425k|    auto it = read_code_unit(range);
 2262|   425k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 425k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   838k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 838k, False: 369k]
  ------------------
 2267|   838k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 56.4k, False: 782k]
  ------------------
 2268|  56.4k|            return *it;
 2269|  56.4k|        }
 2270|   838k|    }
 2271|       |
 2272|   369k|    return unexpected(parse_error::error);
 2273|   425k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   425k|{
 3282|   425k|    switch (base) {
 3283|  22.6k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.6k, False: 402k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.6k|                    false};
 3287|       |
 3288|  40.3k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 40.3k, False: 385k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  40.3k|            bool zero_parsed = false;
 3291|  40.3k|            auto it = apply_opt(
 3292|  40.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  40.3k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.9k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.9k, False: 358k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.9k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.9k|                    false};
 3300|       |
 3301|  72.6k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 72.6k, False: 352k]
  ------------------
 3302|       |            // detect base
 3303|  72.6k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   222k|        default:
  ------------------
  |  Branch (3305:9): [True: 222k, False: 202k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   222k|            return {range.begin(), base, false};
 3308|   425k|    }
 3309|   425k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|   129k|{
 2280|   129k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 112k, False: 17.7k]
  ------------------
 2281|   112k|        return range.begin();
 2282|   112k|    }
 2283|  17.7k|    return *result;
 2284|   129k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  94.7k|{
 3233|  94.7k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  94.7k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   346k|{
 2220|   346k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|   346k|                  std::is_same_v<char_type, char>) {
 2224|   346k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 12.1k, False: 334k]
  ------------------
 2225|  12.1k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  12.1k|        }
 2227|   334k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 331k, False: 2.62k]
  ------------------
 2228|   331k|            return unexpected(parse_error::error);
 2229|   331k|        }
 2230|  2.62k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|   346k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|   112k|{
 3247|   112k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 111k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   111k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.4k, False: 68.7k]
  ------------------
 3252|  42.4k|        zero_parsed = true;
 3253|  42.4k|        return *r;
 3254|  42.4k|    }
 3255|       |
 3256|  68.7k|    return unexpected(parse_error::error);
 3257|   111k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   111k|{
 2135|   111k|    auto it = read_code_unit(range);
 2136|   111k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 110k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   110k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.4k, False: 42.4k]
  |  |  ------------------
  ------------------
 2141|   110k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  68.4k|        return unexpected(parse_error::error);
 2143|  68.4k|    }
 2144|       |
 2145|  42.4k|    return *it;
 2146|   110k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|   139k|{
 3240|   139k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   139k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  72.6k|{
 3263|  72.6k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 544, False: 72.1k]
  ------------------
 3264|    544|        return {*r, 16, false};
 3265|    544|    }
 3266|  72.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.7k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.7k|    {
 3270|  71.7k|        bool zero_parsed{false};
 3271|  71.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.5k, False: 45.2k]
  ------------------
 3272|  26.5k|            return {*r, 8, zero_parsed};
 3273|  26.5k|        }
 3274|  71.7k|    }
 3275|  45.2k|    return {range.begin(), 10, false};
 3276|  71.7k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   320k|{
 3349|   320k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   320k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   320k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 891, False: 319k]
  |  |  ------------------
  ------------------
 3353|    891|            return unexpected_scan_error(
 3354|    891|                scan_error::invalid_scanned_value,
 3355|    891|                "Failed to parse integer: No digits found");
 3356|    891|        }
 3357|   319k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   320k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  62.0k|{
 3379|  62.0k|    std::basic_string<CharT> output;
 3380|  62.0k|    std::string thsep_indices;
 3381|  62.0k|    auto it = range.begin();
 3382|  62.0k|    bool digit_matched = false;
 3383|   356k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 353k, False: 2.28k]
  ------------------
 3384|   353k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 36.0k, False: 317k]
  ------------------
 3385|  36.0k|            thsep_indices.push_back(
 3386|  36.0k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  36.0k|        }
 3388|   317k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.7k, False: 258k]
  ------------------
 3389|  59.7k|            break;
 3390|  59.7k|        }
 3391|   258k|        else {
 3392|   258k|            output.push_back(*it);
 3393|   258k|            digit_matched = true;
 3394|   258k|        }
 3395|   353k|    }
 3396|  62.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.36k, False: 58.6k]
  |  |  ------------------
  ------------------
 3397|  3.36k|        return unexpected_scan_error(
 3398|  3.36k|            scan_error::invalid_scanned_value,
 3399|  3.36k|            "Failed to parse integer: No digits found");
 3400|  3.36k|    }
 3401|  58.6k|    return std::tuple{it, output, thsep_indices};
 3402|  62.0k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  1.72k|{
 3200|  1.72k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.72k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 930, False: 792]
  ------------------
 3203|    930|        SCN_UNLIKELY_ATTR
 3204|    930|        return {scan_error::invalid_scanned_value,
 3205|    930|                "Invalid thousands separator grouping"};
 3206|    930|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.72k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  1.72k|{
 3162|  1.72k|    transform_thsep_indices(thsep_indices,
 3163|  1.72k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.72k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.72k|    for (auto grouping_it = grouping.begin();
 3167|  1.72k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.72k]
  |  Branch (3167:10): [True: 0, False: 1.72k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.72k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.72k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.72k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.7k, False: 1.27k]
  ------------------
 3179|  25.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 446, False: 25.2k]
  ------------------
 3180|    446|            return false;
 3181|    446|        }
 3182|  25.7k|    }
 3183|       |
 3184|  1.27k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.27k, False: 0]
  ------------------
 3185|  1.27k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 484, False: 792]
  ------------------
 3186|    484|            return false;
 3187|    484|        }
 3188|  1.27k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.27k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   319k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   319k|                  ranges::sized_range<Range>) {
 1674|   319k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   319k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   319k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   319k|    {
 1478|   319k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.47M|    {
 1491|  1.47M|        return sv;
 1492|  1.47M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   434k|{
 2940|   434k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 434k, False: 0]
  ------------------
 2941|   434k|        auto it = read_while_classic_space(range);
 2942|   434k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   434k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.36k, False: 425k]
  |  |  ------------------
  ------------------
 2944|  9.36k|            return unexpected(e);
 2945|  9.36k|        }
 2946|       |
 2947|   425k|        return it;
 2948|   434k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   434k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   434k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   434k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   434k|        auto buf = make_contiguous_buffer(range);
 2109|   434k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   434k|        return ranges::next(range.begin(),
 2111|   434k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   434k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   434k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   434k|                  ranges::sized_range<Range>) {
 1674|   434k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   434k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   434k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   434k|    {
 1478|   434k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   672k|    {
  304|   672k|        ranges::advance(x, n);
  305|   672k|        return x;
  306|   672k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.08M|    {
  268|  1.08M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.08M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.08M|    {
  181|  2.67M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.58M, False: 1.08M]
  ------------------
  182|  1.58M|            ++i;
  183|  1.58M|        }
  184|  1.08M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  54.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  54.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  54.7k|            auto rd = make_reader<T, char_type>();
 6195|  54.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.7k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  54.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 54.7k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  54.7k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  54.7k|                return impl(rd, range, value);
 6202|  54.7k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   678k|    {
 3029|   678k|        reader_error_handler eh{};
 3030|   678k|        get_derived().check_specs_impl(specs, eh);
 3031|   678k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 678k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   678k|        return {};
 3035|   678k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|   678k|    {
 3040|   678k|        return static_cast<Derived&>(*this);
 3041|   678k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   678k|    {
 3474|   678k|        detail::check_int_type_specs(specs, eh);
 3475|   678k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  54.7k|    {
 6113|  54.7k|        const bool need_skipped_width =
 6114|  54.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.7k]
  |  Branch (6114:33): [True: 0, False: 54.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.7k|        auto it = rng.begin();
 6118|  54.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.7k|        else {
 6127|  54.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 53.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  53.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  53.2k|        }
 6130|  53.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  53.2k|        std::ptrdiff_t value_width = 0;
 6134|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 53.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  53.2k|        else {
 6150|  53.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.27k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.27k|    }                                                  \
  |  | 3667|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.9k|                                             specs, value, loc));
 6152|       |
 6153|  45.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.9k, False: 1.01k]
  ------------------
 6163|  44.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.9k|                                 value_width));
 6167|  44.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.9k|        }
 6169|       |
 6170|  45.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.9k|                                                 value_width, postfix_width);
 6172|  45.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.9k|        return it;
 6177|  45.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  1.43M|    {
 3024|  1.43M|        return true;
 3025|  1.43M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  64.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  64.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  64.8k|            auto rd = make_reader<T, char_type>();
 6195|  64.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.8k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  64.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 64.8k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  64.8k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  64.8k|                return impl(rd, range, value);
 6202|  64.8k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.8k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  64.8k|    {
 6113|  64.8k|        const bool need_skipped_width =
 6114|  64.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.8k]
  |  Branch (6114:33): [True: 0, False: 64.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.8k|        auto it = rng.begin();
 6118|  64.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.8k|        else {
 6127|  64.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.99k, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.99k|    }                                                  \
  |  |  |  | 3667|  64.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.8k|        }
 6130|  62.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.8k|        std::ptrdiff_t value_width = 0;
 6134|  62.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.8k|        else {
 6150|  62.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.78k|    }                                                  \
  |  | 3667|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  56.0k|                                             specs, value, loc));
 6152|       |
 6153|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 56.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  56.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.6k, False: 1.38k]
  ------------------
 6163|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.6k|                                 value_width));
 6167|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.6k|        }
 6169|       |
 6170|  56.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  56.0k|                                                 value_width, postfix_width);
 6172|  56.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 56.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  56.0k|        return it;
 6177|  56.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  62.8k|    {
 3528|  62.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.32k, False: 54.4k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.32k|            else {
 3539|  8.32k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.32k]
  ------------------
 3540|  8.32k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.32k|            }
 3546|  8.32k|        }
 3547|       |
 3548|  62.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.54k, False: 57.2k]
  ------------------
 3549|  5.54k|            value = T{0};
 3550|  5.54k|            return std::next(prefix_result.iterator);
 3551|  5.54k|        }
 3552|       |
 3553|  57.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.1k, False: 12.1k]
  |  |  ------------------
  ------------------
 3554|  45.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.84k, False: 40.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.84k|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  40.2k|                    parse_integer_digits_without_thsep(
 3556|  40.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  40.2k|                        prefix_result.parsed_base));
 3558|       |
 3559|  40.2k|            auto buf = make_contiguous_buffer(
 3560|  40.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  40.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  40.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 866, False: 39.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    866|    }                                                  \
  |  |  |  | 3667|  40.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.4k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.4k|            return ranges::next(
 3566|  39.4k|                prefix_result.iterator,
 3567|  39.4k|                ranges::distance(buf.view().begin(), result_it));
 3568|  40.2k|        }
 3569|       |
 3570|  12.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.1k|#endif
 3576|       |
 3577|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 682, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    682|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    682|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    682|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    682|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    682|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.4k|                parse_integer_digits_with_thsep(
 3579|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.4k|                    prefix_result.parsed_base, locale_options));
 3581|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.4k|            parse_digits_result;
 3583|       |
 3584|  11.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 320, False: 11.1k]
  ------------------
 3585|    320|            if (auto e = check_thsep_grouping(
 3586|    320|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    320|                    thsep_indices, locale_options.grouping);
 3588|    320|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186, False: 134]
  |  |  ------------------
  ------------------
 3589|    186|                return unexpected(e);
 3590|    186|            }
 3591|    320|        }
 3592|       |
 3593|  11.3k|        auto nothsep_source_view =
 3594|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.3k|        SCN_TRY(
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 206, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    206|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  62.8k|    {
 3528|  62.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.31k, False: 54.5k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.31k|            else {
 3539|  8.31k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.31k]
  ------------------
 3540|  8.31k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.31k|            }
 3546|  8.31k|        }
 3547|       |
 3548|  62.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.54k, False: 57.3k]
  ------------------
 3549|  5.54k|            value = T{0};
 3550|  5.54k|            return std::next(prefix_result.iterator);
 3551|  5.54k|        }
 3552|       |
 3553|  57.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.1k, False: 12.1k]
  |  |  ------------------
  ------------------
 3554|  45.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  44.9k|                    parse_integer_digits_without_thsep(
 3556|  44.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  44.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  44.9k|            auto buf = make_contiguous_buffer(
 3560|  44.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  44.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.67k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.67k|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.2k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.2k|            return ranges::next(
 3566|  39.2k|                prefix_result.iterator,
 3567|  39.2k|                ranges::distance(buf.view().begin(), result_it));
 3568|  44.9k|        }
 3569|       |
 3570|  12.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.1k|#endif
 3576|       |
 3577|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.4k|                parse_integer_digits_with_thsep(
 3579|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.4k|                    prefix_result.parsed_base, locale_options));
 3581|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.4k|            parse_digits_result;
 3583|       |
 3584|  11.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 318, False: 11.1k]
  ------------------
 3585|    318|            if (auto e = check_thsep_grouping(
 3586|    318|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    318|                    thsep_indices, locale_options.grouping);
 3588|    318|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 184, False: 134]
  |  |  ------------------
  ------------------
 3589|    184|                return unexpected(e);
 3590|    184|            }
 3591|    318|        }
 3592|       |
 3593|  11.2k|        auto nothsep_source_view =
 3594|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.2k|        SCN_TRY(
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 204, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    204|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    204|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    204|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    204|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    204|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  66.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  66.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  66.0k|            auto rd = make_reader<T, char_type>();
 6195|  66.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  66.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 66.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  66.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  66.0k|                return impl(rd, range, value);
 6202|  66.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  66.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  66.0k|    {
 6113|  66.0k|        const bool need_skipped_width =
 6114|  66.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 66.0k]
  |  Branch (6114:33): [True: 0, False: 66.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  66.0k|        auto it = rng.begin();
 6118|  66.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  66.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 66.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  66.0k|        else {
 6127|  66.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  66.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.19k, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.19k|    }                                                  \
  |  |  |  | 3667|  66.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.8k|        }
 6130|  63.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.8k|        std::ptrdiff_t value_width = 0;
 6134|  63.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.8k|        else {
 6150|  63.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 57.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.59k|    }                                                  \
  |  | 3667|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  57.2k|                                             specs, value, loc));
 6152|       |
 6153|  57.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 57.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  57.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  57.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  57.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.6k, False: 1.53k]
  ------------------
 6163|  55.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.6k|                                 value_width));
 6167|  55.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.6k|        }
 6169|       |
 6170|  57.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  57.2k|                                                 value_width, postfix_width);
 6172|  57.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 57.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  57.2k|        return it;
 6177|  57.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  63.8k|    {
 3528|  63.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.52k, False: 55.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.52k|            else {
 3539|  8.52k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.52k]
  ------------------
 3540|  8.52k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.52k|            }
 3546|  8.52k|        }
 3547|       |
 3548|  63.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.58k, False: 58.2k]
  ------------------
 3549|  5.58k|            value = T{0};
 3550|  5.58k|            return std::next(prefix_result.iterator);
 3551|  5.58k|        }
 3552|       |
 3553|  58.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  58.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.8k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  45.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.09k, False: 40.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.09k|    }                                                  \
  |  |  |  | 3667|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  40.7k|                    parse_integer_digits_without_thsep(
 3556|  40.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  40.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  40.7k|            auto buf = make_contiguous_buffer(
 3560|  40.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  40.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 458, False: 40.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    458|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    458|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    458|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    458|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    458|    }                                                  \
  |  |  |  | 3667|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  40.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  40.3k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  40.3k|            return ranges::next(
 3566|  40.3k|                prefix_result.iterator,
 3567|  40.3k|                ranges::distance(buf.view().begin(), result_it));
 3568|  40.7k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 724, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    724|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    724|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    724|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    724|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    724|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.6k|                parse_integer_digits_with_thsep(
 3579|  11.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.6k|                    prefix_result.parsed_base, locale_options));
 3581|  11.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.6k|            parse_digits_result;
 3583|       |
 3584|  11.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 336, False: 11.3k]
  ------------------
 3585|    336|            if (auto e = check_thsep_grouping(
 3586|    336|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    336|                    thsep_indices, locale_options.grouping);
 3588|    336|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 202, False: 134]
  |  |  ------------------
  ------------------
 3589|    202|                return unexpected(e);
 3590|    202|            }
 3591|    336|        }
 3592|       |
 3593|  11.4k|        auto nothsep_source_view =
 3594|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.4k|        SCN_TRY(
  ------------------
  |  | 3668|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 116, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    116|    }                                                  \
  |  |  |  | 3667|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.3k|            nothsep_source_it,
 3597|  11.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.3k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.3k|        return ranges::next(
 3601|  11.3k|            prefix_result.iterator,
 3602|  11.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.3k|                ranges::ssize(thsep_indices));
 3604|  11.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  63.8k|    {
 3528|  63.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.52k, False: 55.3k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.52k|            else {
 3539|  8.52k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.52k]
  ------------------
 3540|  8.52k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.52k|            }
 3546|  8.52k|        }
 3547|       |
 3548|  63.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.58k, False: 58.3k]
  ------------------
 3549|  5.58k|            value = T{0};
 3550|  5.58k|            return std::next(prefix_result.iterator);
 3551|  5.58k|        }
 3552|       |
 3553|  58.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  58.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.9k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  45.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|  45.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  45.6k|                    parse_integer_digits_without_thsep(
 3556|  45.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  45.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  45.6k|            auto buf = make_contiguous_buffer(
 3560|  45.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  45.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  45.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.48k, False: 40.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.48k|    }                                                  \
  |  |  |  | 3667|  45.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  40.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  40.2k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  40.2k|            return ranges::next(
 3566|  40.2k|                prefix_result.iterator,
 3567|  40.2k|                ranges::distance(buf.view().begin(), result_it));
 3568|  45.6k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 758, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    758|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    758|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    758|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    758|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    758|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.6k|                parse_integer_digits_with_thsep(
 3579|  11.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.6k|                    prefix_result.parsed_base, locale_options));
 3581|  11.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.6k|            parse_digits_result;
 3583|       |
 3584|  11.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 334, False: 11.2k]
  ------------------
 3585|    334|            if (auto e = check_thsep_grouping(
 3586|    334|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    334|                    thsep_indices, locale_options.grouping);
 3588|    334|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200, False: 134]
  |  |  ------------------
  ------------------
 3589|    200|                return unexpected(e);
 3590|    200|            }
 3591|    334|        }
 3592|       |
 3593|  11.4k|        auto nothsep_source_view =
 3594|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.4k|        SCN_TRY(
  ------------------
  |  | 3668|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 114, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    114|    }                                                  \
  |  |  |  | 3667|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.3k|            nothsep_source_it,
 3597|  11.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.3k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.3k|        return ranges::next(
 3601|  11.3k|            prefix_result.iterator,
 3602|  11.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.3k|                ranges::ssize(thsep_indices));
 3604|  11.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  48.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  48.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  48.2k|            auto rd = make_reader<T, char_type>();
 6195|  48.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 48.2k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  48.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 48.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  48.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  48.2k|                return impl(rd, range, value);
 6202|  48.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  48.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  48.2k|    {
 6113|  48.2k|        const bool need_skipped_width =
 6114|  48.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 48.2k]
  |  Branch (6114:33): [True: 0, False: 48.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  48.2k|        auto it = rng.begin();
 6118|  48.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  48.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 48.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  48.2k|        else {
 6127|  48.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.13k, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.13k|    }                                                  \
  |  |  |  | 3667|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  47.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  47.0k|        }
 6130|  47.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  47.0k|        std::ptrdiff_t value_width = 0;
 6134|  47.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 47.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  47.0k|        else {
 6150|  47.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.65k, False: 39.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.65k|    }                                                  \
  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.4k|                                             specs, value, loc));
 6152|       |
 6153|  39.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.6k, False: 742]
  ------------------
 6163|  38.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.6k|                                 value_width));
 6167|  38.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.6k|        }
 6169|       |
 6170|  39.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.4k|                                                 value_width, postfix_width);
 6172|  39.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.4k|        return it;
 6177|  39.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  47.0k|    {
 3528|  47.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  47.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  47.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  47.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.07k, False: 44.0k]
  ------------------
 3532|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.07k|                return unexpected_scan_error(
 3534|  3.07k|                    scan_error::invalid_scanned_value,
 3535|  3.07k|                    "Unexpected '-' sign when parsing an "
 3536|  3.07k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.07k|        }
 3547|       |
 3548|  47.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.84k, False: 42.2k]
  ------------------
 3549|  4.84k|            value = T{0};
 3550|  4.84k|            return std::next(prefix_result.iterator);
 3551|  4.84k|        }
 3552|       |
 3553|  42.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  42.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.8k, False: 11.4k]
  |  |  ------------------
  ------------------
 3554|  30.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.94k, False: 27.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.94k|    }                                                  \
  |  |  |  | 3667|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  27.8k|                    parse_integer_digits_without_thsep(
 3556|  27.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  27.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  27.8k|            auto buf = make_contiguous_buffer(
 3560|  27.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  27.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  27.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 930, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    930|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    930|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    930|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    930|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    930|    }                                                  \
  |  |  |  | 3667|  27.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.9k|            return ranges::next(
 3566|  26.9k|                prefix_result.iterator,
 3567|  26.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  27.8k|        }
 3569|       |
 3570|  11.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.4k|#endif
 3576|       |
 3577|  11.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    380|    }                                                  \
  |  |  |  | 3667|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.0k|                parse_integer_digits_with_thsep(
 3579|  11.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.0k|                    prefix_result.parsed_base, locale_options));
 3581|  11.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.0k|            parse_digits_result;
 3583|       |
 3584|  11.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 250, False: 10.8k]
  ------------------
 3585|    250|            if (auto e = check_thsep_grouping(
 3586|    250|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    250|                    thsep_indices, locale_options.grouping);
 3588|    250|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 130]
  |  |  ------------------
  ------------------
 3589|    120|                return unexpected(e);
 3590|    120|            }
 3591|    250|        }
 3592|       |
 3593|  10.9k|        auto nothsep_source_view =
 3594|  10.9k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.9k|        SCN_TRY(
  ------------------
  |  | 3668|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 206, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    206|    }                                                  \
  |  |  |  | 3667|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.7k|            nothsep_source_it,
 3597|  10.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.7k|        return ranges::next(
 3601|  10.7k|            prefix_result.iterator,
 3602|  10.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.7k|                ranges::ssize(thsep_indices));
 3604|  10.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  47.1k|    {
 3528|  47.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  47.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  47.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  47.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.06k, False: 44.1k]
  ------------------
 3532|  3.06k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.06k|                return unexpected_scan_error(
 3534|  3.06k|                    scan_error::invalid_scanned_value,
 3535|  3.06k|                    "Unexpected '-' sign when parsing an "
 3536|  3.06k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.06k|        }
 3547|       |
 3548|  47.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.84k, False: 42.3k]
  ------------------
 3549|  4.84k|            value = T{0};
 3550|  4.84k|            return std::next(prefix_result.iterator);
 3551|  4.84k|        }
 3552|       |
 3553|  42.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  42.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.9k, False: 11.4k]
  |  |  ------------------
  ------------------
 3554|  30.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     38|    }                                                  \
  |  |  |  | 3667|  30.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.8k|                    parse_integer_digits_without_thsep(
 3556|  30.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.8k|            auto buf = make_contiguous_buffer(
 3560|  30.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.95k, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.95k|    }                                                  \
  |  |  |  | 3667|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.9k|            return ranges::next(
 3566|  26.9k|                prefix_result.iterator,
 3567|  26.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.8k|        }
 3569|       |
 3570|  11.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.4k|#endif
 3576|       |
 3577|  11.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 410, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    410|    }                                                  \
  |  |  |  | 3667|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.0k|                parse_integer_digits_with_thsep(
 3579|  11.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.0k|                    prefix_result.parsed_base, locale_options));
 3581|  11.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.0k|            parse_digits_result;
 3583|       |
 3584|  11.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 250, False: 10.7k]
  ------------------
 3585|    250|            if (auto e = check_thsep_grouping(
 3586|    250|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    250|                    thsep_indices, locale_options.grouping);
 3588|    250|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 130]
  |  |  ------------------
  ------------------
 3589|    120|                return unexpected(e);
 3590|    120|            }
 3591|    250|        }
 3592|       |
 3593|  10.9k|        auto nothsep_source_view =
 3594|  10.9k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.9k|        SCN_TRY(
  ------------------
  |  | 3668|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 200, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    200|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    200|    }                                                  \
  |  |  |  | 3667|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.7k|            nothsep_source_it,
 3597|  10.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.7k|        return ranges::next(
 3601|  10.7k|            prefix_result.iterator,
 3602|  10.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.7k|                ranges::ssize(thsep_indices));
 3604|  10.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  52.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  52.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  52.4k|            auto rd = make_reader<T, char_type>();
 6195|  52.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  52.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 52.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  52.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  52.4k|                return impl(rd, range, value);
 6202|  52.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  52.4k|    {
 6113|  52.4k|        const bool need_skipped_width =
 6114|  52.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.4k]
  |  Branch (6114:33): [True: 0, False: 52.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.4k|        auto it = rng.begin();
 6118|  52.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.4k|        else {
 6127|  52.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.39k, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.39k|    }                                                  \
  |  |  |  | 3667|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.0k|        }
 6130|  51.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.0k|        std::ptrdiff_t value_width = 0;
 6134|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.0k|        else {
 6150|  51.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.39k, False: 43.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.39k|    }                                                  \
  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.6k|                                             specs, value, loc));
 6152|       |
 6153|  43.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.7k, False: 926]
  ------------------
 6163|  42.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.7k|                                 value_width));
 6167|  42.7k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.7k|        }
 6169|       |
 6170|  43.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.6k|                                                 value_width, postfix_width);
 6172|  43.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.6k|        return it;
 6177|  43.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  51.0k|    {
 3528|  51.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.16k, False: 47.9k]
  ------------------
 3532|  3.16k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.16k|                return unexpected_scan_error(
 3534|  3.16k|                    scan_error::invalid_scanned_value,
 3535|  3.16k|                    "Unexpected '-' sign when parsing an "
 3536|  3.16k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.16k|        }
 3547|       |
 3548|  51.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.02k, False: 46.0k]
  ------------------
 3549|  5.02k|            value = T{0};
 3550|  5.02k|            return std::next(prefix_result.iterator);
 3551|  5.02k|        }
 3552|       |
 3553|  46.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.7k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  33.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.13k, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.13k|    }                                                  \
  |  |  |  | 3667|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.5k|                    parse_integer_digits_without_thsep(
 3556|  30.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.5k|            auto buf = make_contiguous_buffer(
 3560|  30.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 454, False: 30.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    454|    }                                                  \
  |  |  |  | 3667|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.1k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.1k|            return ranges::next(
 3566|  30.1k|                prefix_result.iterator,
 3567|  30.1k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.5k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 400, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    400|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    400|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    400|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    400|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    400|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.9k|                parse_integer_digits_with_thsep(
 3579|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.9k|                    prefix_result.parsed_base, locale_options));
 3581|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.9k|            parse_digits_result;
 3583|       |
 3584|  11.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 256, False: 11.6k]
  ------------------
 3585|    256|            if (auto e = check_thsep_grouping(
 3586|    256|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    256|                    thsep_indices, locale_options.grouping);
 3588|    256|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 130]
  |  |  ------------------
  ------------------
 3589|    126|                return unexpected(e);
 3590|    126|            }
 3591|    256|        }
 3592|       |
 3593|  11.8k|        auto nothsep_source_view =
 3594|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.8k|        SCN_TRY(
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    112|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.6k|            nothsep_source_it,
 3597|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.6k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.6k|        return ranges::next(
 3601|  11.6k|            prefix_result.iterator,
 3602|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.6k|                ranges::ssize(thsep_indices));
 3604|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  51.1k|    {
 3528|  51.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.15k, False: 47.9k]
  ------------------
 3532|  3.15k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.15k|                return unexpected_scan_error(
 3534|  3.15k|                    scan_error::invalid_scanned_value,
 3535|  3.15k|                    "Unexpected '-' sign when parsing an "
 3536|  3.15k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.15k|        }
 3547|       |
 3548|  51.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.02k, False: 46.0k]
  ------------------
 3549|  5.02k|            value = T{0};
 3550|  5.02k|            return std::next(prefix_result.iterator);
 3551|  5.02k|        }
 3552|       |
 3553|  46.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.7k, False: 12.3k]
  |  |  ------------------
  ------------------
 3554|  33.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.7k|                    parse_integer_digits_without_thsep(
 3556|  33.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.7k|            auto buf = make_contiguous_buffer(
 3560|  33.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.68k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.68k|    }                                                  \
  |  |  |  | 3667|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.0k|            return ranges::next(
 3566|  30.0k|                prefix_result.iterator,
 3567|  30.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.7k|        }
 3569|       |
 3570|  12.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.3k|#endif
 3576|       |
 3577|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 430, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    430|    }                                                  \
  |  |  |  | 3667|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.9k|                parse_integer_digits_with_thsep(
 3579|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.9k|                    prefix_result.parsed_base, locale_options));
 3581|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.9k|            parse_digits_result;
 3583|       |
 3584|  11.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.6k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.7k|        auto nothsep_source_view =
 3594|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.7k|        SCN_TRY(
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 110, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    110|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.6k|            nothsep_source_it,
 3597|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.6k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.6k|        return ranges::next(
 3601|  11.6k|            prefix_result.iterator,
 3602|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.6k|                ranges::ssize(thsep_indices));
 3604|  11.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  53.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  53.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  53.0k|            auto rd = make_reader<T, char_type>();
 6195|  53.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  53.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 53.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  53.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  53.0k|                return impl(rd, range, value);
 6202|  53.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  53.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  53.0k|    {
 6113|  53.0k|        const bool need_skipped_width =
 6114|  53.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 53.0k]
  |  Branch (6114:33): [True: 0, False: 53.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  53.0k|        auto it = rng.begin();
 6118|  53.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  53.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 53.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  53.0k|        else {
 6127|  53.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.5k|        }
 6130|  51.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.5k|        std::ptrdiff_t value_width = 0;
 6134|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.5k|        else {
 6150|  51.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.28k, False: 44.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.28k|    }                                                  \
  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  44.2k|                                             specs, value, loc));
 6152|       |
 6153|  44.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 44.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  44.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  44.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  44.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 43.2k, False: 1.03k]
  ------------------
 6163|  43.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  43.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 43.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  43.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  43.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  43.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  43.2k|                                 value_width));
 6167|  43.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  43.2k|        }
 6169|       |
 6170|  44.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  44.2k|                                                 value_width, postfix_width);
 6172|  44.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 44.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  44.2k|        return it;
 6177|  44.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  51.5k|    {
 3528|  51.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.5k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.25k, False: 48.2k]
  ------------------
 3532|  3.25k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.25k|                return unexpected_scan_error(
 3534|  3.25k|                    scan_error::invalid_scanned_value,
 3535|  3.25k|                    "Unexpected '-' sign when parsing an "
 3536|  3.25k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.25k|        }
 3547|       |
 3548|  51.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.02k, False: 46.5k]
  ------------------
 3549|  5.02k|            value = T{0};
 3550|  5.02k|            return std::next(prefix_result.iterator);
 3551|  5.02k|        }
 3552|       |
 3553|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.9k, False: 12.5k]
  |  |  ------------------
  ------------------
 3554|  33.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.19k, False: 30.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.19k|    }                                                  \
  |  |  |  | 3667|  33.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.8k|                    parse_integer_digits_without_thsep(
 3556|  30.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.8k|            auto buf = make_contiguous_buffer(
 3560|  30.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    238|    }                                                  \
  |  |  |  | 3667|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.5k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.5k|            return ranges::next(
 3566|  30.5k|                prefix_result.iterator,
 3567|  30.5k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.8k|        }
 3569|       |
 3570|  12.5k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.5k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.5k|#endif
 3576|       |
 3577|  12.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 410, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    410|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    410|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    410|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    410|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    410|    }                                                  \
  |  |  |  | 3667|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.1k|                parse_integer_digits_with_thsep(
 3579|  12.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.1k|                    prefix_result.parsed_base, locale_options));
 3581|  12.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.1k|            parse_digits_result;
 3583|       |
 3584|  12.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 256, False: 11.8k]
  ------------------
 3585|    256|            if (auto e = check_thsep_grouping(
 3586|    256|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    256|                    thsep_indices, locale_options.grouping);
 3588|    256|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 130]
  |  |  ------------------
  ------------------
 3589|    126|                return unexpected(e);
 3590|    126|            }
 3591|    256|        }
 3592|       |
 3593|  11.9k|        auto nothsep_source_view =
 3594|  11.9k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.9k|        SCN_TRY(
  ------------------
  |  | 3668|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 62, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     62|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     62|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     62|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     62|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     62|    }                                                  \
  |  |  |  | 3667|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.9k|            nothsep_source_it,
 3597|  11.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.9k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.9k|        return ranges::next(
 3601|  11.9k|            prefix_result.iterator,
 3602|  11.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.9k|                ranges::ssize(thsep_indices));
 3604|  11.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  51.5k|    {
 3528|  51.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.5k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.24k, False: 48.3k]
  ------------------
 3532|  3.24k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.24k|                return unexpected_scan_error(
 3534|  3.24k|                    scan_error::invalid_scanned_value,
 3535|  3.24k|                    "Unexpected '-' sign when parsing an "
 3536|  3.24k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.24k|        }
 3547|       |
 3548|  51.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.02k, False: 46.5k]
  ------------------
 3549|  5.02k|            value = T{0};
 3550|  5.02k|            return std::next(prefix_result.iterator);
 3551|  5.02k|        }
 3552|       |
 3553|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.0k, False: 12.5k]
  |  |  ------------------
  ------------------
 3554|  34.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 34.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  34.0k|                    parse_integer_digits_without_thsep(
 3556|  34.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  34.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  34.0k|            auto buf = make_contiguous_buffer(
 3560|  34.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  34.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.52k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.52k|    }                                                  \
  |  |  |  | 3667|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.4k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.4k|            return ranges::next(
 3566|  30.4k|                prefix_result.iterator,
 3567|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3568|  34.0k|        }
 3569|       |
 3570|  12.5k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.5k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.5k|#endif
 3576|       |
 3577|  12.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 440, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    440|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    440|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    440|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    440|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    440|    }                                                  \
  |  |  |  | 3667|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.0k|                parse_integer_digits_with_thsep(
 3579|  12.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.0k|                    prefix_result.parsed_base, locale_options));
 3581|  12.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.0k|            parse_digits_result;
 3583|       |
 3584|  12.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.8k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.9k|        auto nothsep_source_view =
 3594|  11.9k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.9k|        SCN_TRY(
  ------------------
  |  | 3668|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.8k|            nothsep_source_it,
 3597|  11.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.8k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.8k|        return ranges::next(
 3601|  11.8k|            prefix_result.iterator,
 3602|  11.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.8k|                ranges::ssize(thsep_indices));
 3604|  11.9k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   434k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   434k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   434k|        else {
 1054|   434k|            return r.begin().contiguous_segment();
 1055|   434k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   434k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   409k|{
 2049|   409k|    auto it = range.begin();
 2050|   800k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 790k, False: 10.1k]
  ------------------
 2051|   790k|        const auto val =
 2052|   790k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   790k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   790k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 788k, False: 1.81k]
  |  |  ------------------
  ------------------
 2054|   788k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   788k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   788k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 399k, False: 389k]
  ------------------
 2057|   399k|                return it;
 2058|   399k|            }
 2059|   788k|        }
 2060|   391k|        it = val.iterator;
 2061|   391k|    }
 2062|       |
 2063|  10.1k|    return it;
 2064|   409k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   790k|{
 1887|   790k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   790k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   790k|    auto it = range.begin();
 1891|   790k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   790k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 788k]
  |  |  ------------------
  ------------------
 1894|  1.81k|        ++it;
 1895|  1.81k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.81k|        return {it, {}};
 1897|  1.81k|    }
 1898|       |
 1899|   788k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 783k, False: 5.30k]
  ------------------
 1900|   783k|        ++it;
 1901|   783k|        return {it, string_type(1, *range.begin())};
 1902|   783k|    }
 1903|       |
 1904|  5.30k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  5.30k|    return {it, string_type{range.begin(), it}};
 1906|   788k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  1.81k|{
 1155|  1.81k|    auto it = input.begin();
 1156|  3.04k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.27k, False: 767]
  ------------------
 1157|  2.27k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.05k, False: 1.22k]
  ------------------
 1158|  1.05k|            break;
 1159|  1.05k|        }
 1160|  2.27k|    }
 1161|  1.81k|    return it;
 1162|  1.81k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.30k|    {
  283|  5.30k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.30k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.30k|    {
  252|  5.30k|        constexpr iter_difference_t<I> zero{0};
  253|  5.30k|        iter_difference_t<I> counter{0};
  254|       |
  255|  17.5k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 13.4k, False: 4.12k]
  |  Branch (255:30): [True: 12.2k, False: 1.17k]
  ------------------
  256|  12.2k|            ++i;
  257|  12.2k|            ++counter;
  258|  12.2k|        }
  259|       |
  260|  5.30k|        return counter;
  261|  5.30k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|   790k|    {
 1878|   790k|        return !codepoint.empty();
 1879|   790k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   409k|{
 2070|   409k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   409k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   434k|{
 2940|   434k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 434k, False: 0]
  ------------------
 2941|   434k|        auto it = read_while_classic_space(range);
 2942|   434k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   434k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 423k]
  |  |  ------------------
  ------------------
 2944|  10.1k|            return unexpected(e);
 2945|  10.1k|        }
 2946|       |
 2947|   423k|        return it;
 2948|   434k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   434k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   434k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   434k|    else {
 2114|   434k|        auto it = range.begin();
 2115|       |
 2116|   434k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   434k|            auto seg = get_contiguous_beginning(range);
 2118|   434k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   434k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 24.5k, False: 409k]
  ------------------
 2120|  24.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  24.5k|            }
 2122|   409k|            ranges::advance(it, seg.size());
 2123|   409k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   434k|            return detail::is_cp_space(cp);
 2127|   434k|        });
 2128|   434k|    }
 2129|   434k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   409k|        : m_fptr([](storage fn,
  743|   409k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   409k|              cvref<T> obj = *get<T>(fn);
  745|   409k|              if constexpr (std::is_void_v<R>) {
  746|   409k|                  obj(static_cast<decltype(args)>(args)...);
  747|   409k|              }
  748|   409k|              else {
  749|   409k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   409k|              }
  751|   409k|          }),
  752|   409k|          m_storage(std::addressof(f))
  753|   409k|    {
  754|   409k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   788k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   788k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   788k|              else {
  749|   788k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   788k|              }
  751|   788k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   788k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   788k|        else if constexpr (std::is_object_v<T>) {
  688|   788k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   788k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   788k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   788k|            return detail::is_cp_space(cp);
 2127|   788k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   409k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   409k|        {
  662|   409k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   135k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   135k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   135k|        auto beg = r.begin();
  990|   135k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 135k, False: 0]
  ------------------
  991|   135k|            return false;
  992|   135k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   135k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   247k|    {
  763|   247k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   247k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   106k|{
 1845|   106k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   106k|    else {
 1856|   106k|        auto it = range.begin();
 1857|   106k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 85.9k, False: 20.6k]
  ------------------
 1858|  85.9k|            return ranges::next(it, count);
 1859|  85.9k|        }
 1860|       |
 1861|  41.7k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 40.9k, False: 708]
  ------------------
 1862|  40.9k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 19.8k, False: 21.0k]
  ------------------
 1863|  19.8k|                return unexpected(eof_error::eof);
 1864|  19.8k|            }
 1865|  40.9k|        }
 1866|       |
 1867|    708|        return it;
 1868|  20.6k|    }
 1869|   106k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   106k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   106k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   106k|        else {
 1106|   106k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 106k, False: 0]
  ------------------
 1107|   106k|                return static_cast<size_t>(
 1108|   106k|                    r.begin().parent()->chars_available() -
 1109|   106k|                    r.begin().position());
 1110|   106k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   106k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   106k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   123k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   123k|        else if constexpr (std::is_object_v<T>) {
  688|   123k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   123k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   107k|    {
 6026|   107k|        const bool need_skipped_width =
 6027|   107k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 107k]
  |  Branch (6027:33): [True: 0, False: 107k]
  ------------------
 6028|   107k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   107k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 107k]
  ------------------
 6032|   107k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 107k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   107k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 107k, False: 0]
  |  Branch (6036:56): [True: 107k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   107k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 107k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   214k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   214k|                            make_eof_scan_error));
 6047|       |
 6048|   214k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 106k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   106k|            return result_type{it, 0};
 6056|   214k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   107k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   114k|{
 1964|   114k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   114k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   114k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   114k|    else {
 1949|   114k|        auto first = range.begin();
 1950|   124k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 123k, False: 762]
  ------------------
 1951|   123k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 113k, False: 9.92k]
  ------------------
 1952|   113k|                return first;
 1953|   113k|            }
 1954|   123k|        }
 1955|    762|        return first;
 1956|   114k|    }
 1957|   114k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  35.9M|    {
  108|  35.9M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  35.9M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  35.9M|    {
   94|  35.9M|        iter_difference_t<I> counter{0};
   95|  73.7G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 73.7G, False: 35.9M]
  ------------------
   96|  73.7G|            ++i;
   97|  73.7G|            ++counter;
   98|  73.7G|        }
   99|  35.9M|        return counter;
  100|  35.9M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|  35.2k|    {
 1768|  35.2k|        auto stdloc = loc.get<std::locale>();
 1769|  35.2k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|  35.2k|        grouping = numpunct.grouping();
 1771|  35.2k|        thousands_sep =
 1772|  35.2k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 35.2k]
  ------------------
 1773|  35.2k|        decimal_point = numpunct.decimal_point();
 1774|  35.2k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|  35.2k|{
 1705|  35.2k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 35.2k, False: 0]
  ------------------
 1706|  35.2k|        return std::use_facet<Facet>(stdloc);
 1707|  35.2k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|  35.2k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   168k|{
 1834|   168k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 168k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   168k|    return ranges::next(range.begin());
 1839|   168k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   330k|{
  950|   330k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 328k]
  |  |  ------------------
  ------------------
  951|  1.93k|        return eof_error::eof;
  952|  1.93k|    }
  953|   328k|    return eof_error::good;
  954|   330k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   466k|{
  944|   466k|    return is_range_eof(r.begin(), r.end());
  945|   466k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   466k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   466k|    {
  937|   466k|        return begin == end;
  938|   466k|    }
  939|   466k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   168k|    {
  296|   168k|        ++x;
  297|   168k|        return x;
  298|   168k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.5k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.7k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.7k, False: 2.96k]
  |  |  ------------------
  ------------------
 3554|  14.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    380|                    parse_integer_digits_without_thsep(
 3556|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    380|                        prefix_result.parsed_base));
 3558|       |
 3559|    380|            auto buf = make_contiguous_buffer(
 3560|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     44|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|    380|        }
 3569|       |
 3570|  2.96k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.96k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.96k|#endif
 3576|       |
 3577|  2.96k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.39k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.39k|    }                                                  \
  |  |  |  | 3667|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.57k|                parse_integer_digits_with_thsep(
 3579|  1.57k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.57k|                    prefix_result.parsed_base, locale_options));
 3581|  1.57k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.57k|            parse_digits_result;
 3583|       |
 3584|  1.57k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 94]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   133k|{
 3315|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   133k|        parse_integer_base_prefix(
 3320|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 132k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   132k|    else {
 3332|   132k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 132k]
  ------------------
 3333|   132k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 128k, False: 3.74k]
  ------------------
 3334|   129k|            digits_begin_it = base_prefix_begin_it;
 3335|   129k|        }
 3336|   132k|    }
 3337|       |
 3338|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 131k, False: 1.87k]
  ------------------
 3339|   131k|        sign = sign_type::plus_sign;
 3340|   131k|    }
 3341|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   133k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   133k|{
 3130|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   133k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 131k, False: 1.87k]
  ------------------
 3132|   131k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 131k, False: 0]
  ------------------
 3133|   131k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   131k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   131k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   133k|{
 2261|   133k|    auto it = read_code_unit(range);
 2262|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 266k, False: 131k]
  ------------------
 2267|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 264k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   266k|    }
 2271|       |
 2272|   131k|    return unexpected(parse_error::error);
 2273|   133k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   133k|{
 3282|   133k|    switch (base) {
 3283|  17.6k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 17.6k, False: 115k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  17.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  17.6k|                    false};
 3287|       |
 3288|  17.6k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.6k, False: 115k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.6k|            bool zero_parsed = false;
 3291|  17.6k|            auto it = apply_opt(
 3292|  17.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.6k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.7k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.7k, False: 115k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.7k|                    false};
 3300|       |
 3301|  17.8k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.8k, False: 115k]
  ------------------
 3302|       |            // detect base
 3303|  17.8k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  62.2k|        default:
  ------------------
  |  Branch (3305:9): [True: 62.2k, False: 70.8k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  62.2k|            return {range.begin(), base, false};
 3308|   133k|    }
 3309|   133k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|  53.0k|{
 2280|  53.0k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 52.8k, False: 168]
  ------------------
 2281|  52.8k|        return range.begin();
 2282|  52.8k|    }
 2283|    168|    return *result;
 2284|  53.0k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  35.4k|{
 3233|  35.4k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  35.4k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   106k|{
 2220|   106k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   106k|    else {
 2233|   106k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   106k|            if (ch < 'A' || ch > 'Z') {
 2235|   106k|                return ch;
 2236|   106k|            }
 2237|   106k|            return static_cast<char_type>(ch +
 2238|   106k|                                          static_cast<char_type>('a' - 'A'));
 2239|   106k|        };
 2240|       |
 2241|   106k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 86.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.8k|    }                                                  \
  |  |  |  | 3667|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  86.6k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  86.6k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  86.6k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.6k, False: 0]
  |  |  ------------------
  ------------------
 2246|  86.6k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  86.6k|                    return ascii_tolower(a) ==
 2248|  86.6k|                           static_cast<detail::char_t<Range>>(b);
 2249|  86.6k|                }))) {
 2250|  86.6k|            return unexpected(parse_error::error);
 2251|  86.6k|        }
 2252|       |
 2253|      0|        return it;
 2254|  86.6k|    }
 2255|   106k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  87.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  87.5k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 58.3k, False: 29.2k]
  |  Branch (2234:29): [True: 28.8k, False: 360]
  ------------------
 2235|  87.2k|                return ch;
 2236|  87.2k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  87.5k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|  35.4k|{
 3247|  35.4k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 35.4k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  35.4k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 35.1k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  35.1k|    return unexpected(parse_error::error);
 3257|  35.4k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  35.4k|{
 2135|  35.4k|    auto it = read_code_unit(range);
 2136|  35.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 35.3k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  35.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 356]
  |  |  ------------------
  ------------------
 2141|  35.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  35.0k|        return unexpected(parse_error::error);
 2143|  35.0k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  35.3k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|  35.6k|{
 3240|  35.6k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  35.6k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  17.8k|{
 3263|  17.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.8k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.8k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.8k|    {
 3270|  17.8k|        bool zero_parsed{false};
 3271|  17.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.6k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.8k|    }
 3275|  17.6k|    return {range.begin(), 10, false};
 3276|  17.8k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   114k|{
 3349|   114k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   114k|    else {
 3360|   114k|        return read_while1_code_unit(range,
 3361|   114k|                                     [&](char_type ch) noexcept {
 3362|   114k|                                         return char_to_int(ch) < base;
 3363|   114k|                                     })
 3364|   114k|            .transform_error(map_parse_error_to_scan_error(
 3365|   114k|                scan_error::invalid_scanned_value,
 3366|   114k|                "Failed to parse integer: No digits found"));
 3367|   114k|    }
 3368|   114k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   114k|{
 1984|   114k|    auto it = read_while_code_unit(range, pred);
 1985|   114k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 111k, False: 2.94k]
  ------------------
 1986|   111k|        return unexpected(parse_error::error);
 1987|   111k|    }
 1988|  2.94k|    return it;
 1989|   114k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   123k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   123k|        else if constexpr (std::is_object_v<T>) {
  688|   123k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   123k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3361|   123k|                                     [&](char_type ch) noexcept {
 3362|   123k|                                         return char_to_int(ch) < base;
 3363|   123k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  17.6k|{
 3379|  17.6k|    std::basic_string<CharT> output;
 3380|  17.6k|    std::string thsep_indices;
 3381|  17.6k|    auto it = range.begin();
 3382|  17.6k|    bool digit_matched = false;
 3383|  36.0M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 36.0M, False: 336]
  ------------------
 3384|  36.0M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 35.9M, False: 28.2k]
  ------------------
 3385|  35.9M|            thsep_indices.push_back(
 3386|  35.9M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  35.9M|        }
 3388|  28.2k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 17.3k, False: 10.8k]
  ------------------
 3389|  17.3k|            break;
 3390|  17.3k|        }
 3391|  10.8k|        else {
 3392|  10.8k|            output.push_back(*it);
 3393|  10.8k|            digit_matched = true;
 3394|  10.8k|        }
 3395|  36.0M|    }
 3396|  17.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.25k, False: 9.38k]
  |  |  ------------------
  ------------------
 3397|  8.25k|        return unexpected_scan_error(
 3398|  8.25k|            scan_error::invalid_scanned_value,
 3399|  8.25k|            "Failed to parse integer: No digits found");
 3400|  8.25k|    }
 3401|  9.38k|    return std::tuple{it, output, thsep_indices};
 3402|  17.6k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  8.87k|{
 3200|  8.87k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  8.87k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 8.87k, False: 0]
  ------------------
 3203|  8.87k|        SCN_UNLIKELY_ATTR
 3204|  8.87k|        return {scan_error::invalid_scanned_value,
 3205|  8.87k|                "Invalid thousands separator grouping"};
 3206|  8.87k|    }
 3207|       |
 3208|      0|    return {};
 3209|  8.87k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  8.87k|{
 3162|  8.87k|    transform_thsep_indices(thsep_indices,
 3163|  8.87k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  8.87k|    auto thsep_it = thsep_indices.rbegin();
 3166|  8.87k|    for (auto grouping_it = grouping.begin();
 3167|  8.87k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 8.87k]
  |  Branch (3167:10): [True: 0, False: 8.87k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  8.87k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  8.87k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  8.87k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  9.33k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 9.27k, False: 60]
  ------------------
 3179|  9.27k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 8.81k, False: 462]
  ------------------
 3180|  8.81k|            return false;
 3181|  8.81k|        }
 3182|  9.27k|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  2.94k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  2.94k|    else {
 1677|  2.94k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  2.94k|    }
 1679|  2.94k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  2.94k|    {
 1525|  2.94k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  2.94k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  2.94k|    {
 1609|  2.94k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  2.94k|                           ranges::common_range<Range>) {
 1626|  2.94k|            auto beg_seg = range.begin().contiguous_segment();
 1627|  2.94k|            auto end_seg = range.end().contiguous_segment();
 1628|  2.94k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 863]
  |  |  ------------------
  ------------------
 1629|  2.94k|                             detail::to_address(end_seg.end()))) {
 1630|  2.07k|                auto& str = m_storage.emplace();
 1631|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1632|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  2.07k|                m_view = string_view_type{str};
 1634|  2.07k|                return;
 1635|  2.07k|            }
 1636|       |
 1637|    863|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|    863|                                                            end_seg.data());
 1639|    863|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  2.94k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.50k|    {
 1570|  5.50k|        return m_view;
 1571|  5.50k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.94k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|   106k|{
 1845|   106k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|   106k|    if constexpr (ranges::sized_range<Range>) {
 1848|   106k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|   106k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 19.8k, False: 86.6k]
  ------------------
 1850|  19.8k|            return unexpected(eof_error::eof);
 1851|  19.8k|        }
 1852|       |
 1853|  86.6k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|   106k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   135k|{
 1887|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   135k|    auto it = range.begin();
 1891|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   135k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 135k, False: 0]
  ------------------
 1900|   135k|        ++it;
 1901|   135k|        return {it, string_type(1, *range.begin())};
 1902|   135k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   135k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   580k|{
  944|   580k|    return is_range_eof(r.begin(), r.end());
  945|   580k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   580k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   580k|    {
  937|   580k|        return begin == end;
  938|   580k|    }
  939|   580k|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   135k|    {
 1878|   135k|        return !codepoint.empty();
 1879|   135k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   444k|{
  950|   444k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 442k]
  |  |  ------------------
  ------------------
  951|  2.09k|        return eof_error::eof;
  952|  2.09k|    }
  953|   442k|    return eof_error::good;
  954|   444k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   168k|{
 1834|   168k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 168k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   168k|    return ranges::next(range.begin());
 1839|   168k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   168k|    {
  296|   168k|        ++x;
  297|   168k|        return x;
  298|   168k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.5k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.7k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.7k, False: 2.96k]
  |  |  ------------------
  ------------------
 3554|  14.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.7k|                    parse_integer_digits_without_thsep(
 3556|  14.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.7k|            auto buf = make_contiguous_buffer(
 3560|  14.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.7k|        }
 3569|       |
 3570|  2.96k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.96k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.96k|#endif
 3576|       |
 3577|  2.96k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.39k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.39k|    }                                                  \
  |  |  |  | 3667|  2.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.57k|                parse_integer_digits_with_thsep(
 3579|  1.57k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.57k|                    prefix_result.parsed_base, locale_options));
 3581|  1.57k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.57k|            parse_digits_result;
 3583|       |
 3584|  1.57k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 94]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   133k|{
 3315|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   133k|        parse_integer_base_prefix(
 3320|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 132k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   132k|    else {
 3332|   132k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 132k]
  ------------------
 3333|   132k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 128k, False: 3.74k]
  ------------------
 3334|   129k|            digits_begin_it = base_prefix_begin_it;
 3335|   129k|        }
 3336|   132k|    }
 3337|       |
 3338|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 131k, False: 1.87k]
  ------------------
 3339|   131k|        sign = sign_type::plus_sign;
 3340|   131k|    }
 3341|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   133k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   133k|{
 3130|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   133k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 131k, False: 1.87k]
  ------------------
 3132|   131k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 131k, False: 0]
  ------------------
 3133|   131k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   131k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   131k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   133k|{
 2261|   133k|    auto it = read_code_unit(range);
 2262|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 266k, False: 131k]
  ------------------
 2267|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 264k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   266k|    }
 2271|       |
 2272|   131k|    return unexpected(parse_error::error);
 2273|   133k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   133k|{
 3282|   133k|    switch (base) {
 3283|  17.6k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 17.6k, False: 115k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  17.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  17.6k|                    false};
 3287|       |
 3288|  17.6k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.6k, False: 115k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.6k|            bool zero_parsed = false;
 3291|  17.6k|            auto it = apply_opt(
 3292|  17.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.6k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.7k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.7k, False: 115k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.7k|                    false};
 3300|       |
 3301|  17.8k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.8k, False: 115k]
  ------------------
 3302|       |            // detect base
 3303|  17.8k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  62.2k|        default:
  ------------------
  |  Branch (3305:9): [True: 62.2k, False: 70.8k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  62.2k|            return {range.begin(), base, false};
 3308|   133k|    }
 3309|   133k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  53.0k|{
 2280|  53.0k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 52.8k, False: 168]
  ------------------
 2281|  52.8k|        return range.begin();
 2282|  52.8k|    }
 2283|    168|    return *result;
 2284|  53.0k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  35.4k|{
 3233|  35.4k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  35.4k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   106k|{
 2220|   106k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   106k|    else {
 2233|   106k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   106k|            if (ch < 'A' || ch > 'Z') {
 2235|   106k|                return ch;
 2236|   106k|            }
 2237|   106k|            return static_cast<char_type>(ch +
 2238|   106k|                                          static_cast<char_type>('a' - 'A'));
 2239|   106k|        };
 2240|       |
 2241|   106k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 86.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.8k|    }                                                  \
  |  |  |  | 3667|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  86.6k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  86.6k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  86.6k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.6k, False: 0]
  |  |  ------------------
  ------------------
 2246|  86.6k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  86.6k|                    return ascii_tolower(a) ==
 2248|  86.6k|                           static_cast<detail::char_t<Range>>(b);
 2249|  86.6k|                }))) {
 2250|  86.6k|            return unexpected(parse_error::error);
 2251|  86.6k|        }
 2252|       |
 2253|      0|        return it;
 2254|  86.6k|    }
 2255|   106k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  87.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  87.5k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 58.3k, False: 29.2k]
  |  Branch (2234:29): [True: 28.8k, False: 360]
  ------------------
 2235|  87.2k|                return ch;
 2236|  87.2k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  87.5k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|  35.4k|{
 3247|  35.4k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 35.4k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  35.4k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 35.1k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  35.1k|    return unexpected(parse_error::error);
 3257|  35.4k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  35.4k|{
 2135|  35.4k|    auto it = read_code_unit(range);
 2136|  35.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 35.3k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  35.3k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.0k, False: 356]
  |  |  ------------------
  ------------------
 2141|  35.3k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  35.0k|        return unexpected(parse_error::error);
 2143|  35.0k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  35.3k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|  35.6k|{
 3240|  35.6k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  35.6k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  17.8k|{
 3263|  17.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.8k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.8k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.8k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.8k|    {
 3270|  17.8k|        bool zero_parsed{false};
 3271|  17.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.6k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.8k|    }
 3275|  17.6k|    return {range.begin(), 10, false};
 3276|  17.8k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   114k|{
 3349|   114k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   114k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   114k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 114k]
  |  |  ------------------
  ------------------
 3353|    156|            return unexpected_scan_error(
 3354|    156|                scan_error::invalid_scanned_value,
 3355|    156|                "Failed to parse integer: No digits found");
 3356|    156|        }
 3357|   114k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   114k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  17.6k|{
 3379|  17.6k|    std::basic_string<CharT> output;
 3380|  17.6k|    std::string thsep_indices;
 3381|  17.6k|    auto it = range.begin();
 3382|  17.6k|    bool digit_matched = false;
 3383|  36.0M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 36.0M, False: 336]
  ------------------
 3384|  36.0M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 35.9M, False: 28.2k]
  ------------------
 3385|  35.9M|            thsep_indices.push_back(
 3386|  35.9M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  35.9M|        }
 3388|  28.2k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 17.3k, False: 10.8k]
  ------------------
 3389|  17.3k|            break;
 3390|  17.3k|        }
 3391|  10.8k|        else {
 3392|  10.8k|            output.push_back(*it);
 3393|  10.8k|            digit_matched = true;
 3394|  10.8k|        }
 3395|  36.0M|    }
 3396|  17.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.25k, False: 9.38k]
  |  |  ------------------
  ------------------
 3397|  8.25k|        return unexpected_scan_error(
 3398|  8.25k|            scan_error::invalid_scanned_value,
 3399|  8.25k|            "Failed to parse integer: No digits found");
 3400|  8.25k|    }
 3401|  9.38k|    return std::tuple{it, output, thsep_indices};
 3402|  17.6k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  8.87k|{
 3200|  8.87k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  8.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  8.87k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 8.87k, False: 0]
  ------------------
 3203|  8.87k|        SCN_UNLIKELY_ATTR
 3204|  8.87k|        return {scan_error::invalid_scanned_value,
 3205|  8.87k|                "Invalid thousands separator grouping"};
 3206|  8.87k|    }
 3207|       |
 3208|      0|    return {};
 3209|  8.87k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  8.87k|{
 3162|  8.87k|    transform_thsep_indices(thsep_indices,
 3163|  8.87k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  8.87k|    auto thsep_it = thsep_indices.rbegin();
 3166|  8.87k|    for (auto grouping_it = grouping.begin();
 3167|  8.87k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 8.87k]
  |  Branch (3167:10): [True: 0, False: 8.87k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  8.87k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  8.87k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  8.87k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  9.33k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 9.27k, False: 60]
  ------------------
 3179|  9.27k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 8.81k, False: 462]
  ------------------
 3180|  8.81k|            return false;
 3181|  8.81k|        }
 3182|  9.27k|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|   114k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   114k|                  ranges::sized_range<Range>) {
 1674|   114k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   114k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   114k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   114k|    {
 1478|   114k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|   116k|    {
 1491|   116k|        return sv;
 1492|   116k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   134k|{
 2940|   134k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 134k, False: 0]
  ------------------
 2941|   134k|        auto it = read_while_classic_space(range);
 2942|   134k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   134k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 133k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   133k|        return it;
 2948|   134k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   134k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   134k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   134k|    else {
 2114|   134k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   134k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   134k|            return detail::is_cp_space(cp);
 2127|   134k|        });
 2128|   134k|    }
 2129|   134k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   134k|{
 2070|   134k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   134k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   134k|{
 2049|   134k|    auto it = range.begin();
 2050|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 135k, False: 1.70k]
  ------------------
 2051|   135k|        const auto val =
 2052|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2054|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 133k, False: 2.41k]
  ------------------
 2057|   133k|                return it;
 2058|   133k|            }
 2059|   135k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   134k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   134k|        : m_fptr([](storage fn,
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|   134k|              if constexpr (std::is_void_v<R>) {
  746|   134k|                  obj(static_cast<decltype(args)>(args)...);
  747|   134k|              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
  752|   134k|          m_storage(std::addressof(f))
  753|   134k|    {
  754|   134k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   135k|            return detail::is_cp_space(cp);
 2127|   135k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   134k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   134k|        {
  662|   134k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  88.9k|    {
  304|  88.9k|        ranges::advance(x, n);
  305|  88.9k|        return x;
  306|  88.9k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  88.9k|    {
  268|  88.9k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  88.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  88.9k|    {
  181|   267k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 178k, False: 88.9k]
  ------------------
  182|   178k|            ++i;
  183|   178k|        }
  184|  88.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.9k|            auto rd = make_reader<T, char_type>();
 6195|  17.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.9k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.9k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.9k|                return impl(rd, range, value);
 6202|  17.9k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.9k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   215k|    {
 3029|   215k|        reader_error_handler eh{};
 3030|   215k|        get_derived().check_specs_impl(specs, eh);
 3031|   215k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   215k|        return {};
 3035|   215k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|   215k|    {
 3040|   215k|        return static_cast<Derived&>(*this);
 3041|   215k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   215k|    {
 3474|   215k|        detail::check_int_type_specs(specs, eh);
 3475|   215k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.9k|    {
 6113|  17.9k|        const bool need_skipped_width =
 6114|  17.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.9k]
  |  Branch (6114:33): [True: 0, False: 17.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.9k|        auto it = rng.begin();
 6118|  17.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.9k|        else {
 6127|  17.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.6k|        }
 6130|  17.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.6k|        std::ptrdiff_t value_width = 0;
 6134|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.6k|        else {
 6150|  17.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|   273k|    {
 3024|   273k|        return true;
 3025|   273k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.6k|    {
 3528|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 17.4k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.6k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.7k, False: 2.94k]
  |  |  ------------------
  ------------------
 3554|  14.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    368|                    parse_integer_digits_without_thsep(
 3556|    368|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    368|                        prefix_result.parsed_base));
 3558|       |
 3559|    368|            auto buf = make_contiguous_buffer(
 3560|    368|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    368|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|    368|        }
 3569|       |
 3570|  2.94k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.94k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.94k|#endif
 3576|       |
 3577|  2.94k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  2.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.57k|                parse_integer_digits_with_thsep(
 3579|  1.57k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.57k|                    prefix_result.parsed_base, locale_options));
 3581|  1.57k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.57k|            parse_digits_result;
 3583|       |
 3584|  1.57k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 90]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.6k|    {
 3528|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 17.4k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.6k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.7k, False: 2.94k]
  |  |  ------------------
  ------------------
 3554|  14.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.6k|                    parse_integer_digits_without_thsep(
 3556|  14.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.6k|            auto buf = make_contiguous_buffer(
 3560|  14.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.6k|        }
 3569|       |
 3570|  2.94k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.94k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.94k|#endif
 3576|       |
 3577|  2.94k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  2.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.57k|                parse_integer_digits_with_thsep(
 3579|  1.57k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.57k|                    prefix_result.parsed_base, locale_options));
 3581|  1.57k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.57k|            parse_digits_result;
 3583|       |
 3584|  1.57k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 90]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  18.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  18.0k|            auto rd = make_reader<T, char_type>();
 6195|  18.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  18.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 18.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  18.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  18.0k|                return impl(rd, range, value);
 6202|  18.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  18.0k|    {
 6113|  18.0k|        const bool need_skipped_width =
 6114|  18.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.0k]
  |  Branch (6114:33): [True: 0, False: 18.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.0k|        auto it = rng.begin();
 6118|  18.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.0k|        else {
 6127|  18.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  18.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  18.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  18.1k|            auto rd = make_reader<T, char_type>();
 6195|  18.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  18.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 18.1k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  18.1k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  18.1k|                return impl(rd, range, value);
 6202|  18.1k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  18.1k|    {
 6113|  18.1k|        const bool need_skipped_width =
 6114|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.1k]
  |  Branch (6114:33): [True: 0, False: 18.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.1k|        auto it = rng.begin();
 6118|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.1k|        else {
 6127|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.8k|        }
 6130|  17.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.8k|        std::ptrdiff_t value_width = 0;
 6134|  17.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.8k|        else {
 6150|  17.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.8k|    {
 3528|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 17.6k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.7k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.8k, False: 2.98k]
  |  |  ------------------
  ------------------
 3554|  14.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.4k|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    402|                    parse_integer_digits_without_thsep(
 3556|    402|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    402|                        prefix_result.parsed_base));
 3558|       |
 3559|    402|            auto buf = make_contiguous_buffer(
 3560|    402|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    402|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|    402|        }
 3569|       |
 3570|  2.98k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.98k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.98k|#endif
 3576|       |
 3577|  2.98k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.40k|    }                                                  \
  |  |  |  | 3667|  2.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.58k|                parse_integer_digits_with_thsep(
 3579|  1.58k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.58k|                    prefix_result.parsed_base, locale_options));
 3581|  1.58k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.58k|            parse_digits_result;
 3583|       |
 3584|  1.58k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 104]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.8k|    {
 3528|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 17.6k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.7k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.8k, False: 2.98k]
  |  |  ------------------
  ------------------
 3554|  14.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.7k|                    parse_integer_digits_without_thsep(
 3556|  14.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.7k|            auto buf = make_contiguous_buffer(
 3560|  14.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.7k|        }
 3569|       |
 3570|  2.98k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.98k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.98k|#endif
 3576|       |
 3577|  2.98k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.40k, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.40k|    }                                                  \
  |  |  |  | 3667|  2.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.58k|                parse_integer_digits_with_thsep(
 3579|  1.58k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.58k|                    prefix_result.parsed_base, locale_options));
 3581|  1.58k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.58k|            parse_digits_result;
 3583|       |
 3584|  1.58k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.48k, False: 104]
  ------------------
 3585|  1.48k|            if (auto e = check_thsep_grouping(
 3586|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.48k|                    thsep_indices, locale_options.grouping);
 3588|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.48k|                return unexpected(e);
 3590|  1.48k|            }
 3591|  1.48k|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.8k|            auto rd = make_reader<T, char_type>();
 6195|  17.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.8k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.8k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.8k|                return impl(rd, range, value);
 6202|  17.8k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.8k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.8k|    {
 6113|  17.8k|        const bool need_skipped_width =
 6114|  17.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.8k]
  |  Branch (6114:33): [True: 0, False: 17.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.8k|        auto it = rng.begin();
 6118|  17.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.8k|        else {
 6127|  17.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.6k|        }
 6130|  17.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.6k|        std::ptrdiff_t value_width = 0;
 6134|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.6k|        else {
 6150|  17.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.6k|    {
 3528|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.4k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.6k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.11k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    306|                    parse_integer_digits_without_thsep(
 3556|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    306|                        prefix_result.parsed_base));
 3558|       |
 3559|    306|            auto buf = make_contiguous_buffer(
 3560|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     70|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|    306|        }
 3569|       |
 3570|  3.11k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.11k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.11k|#endif
 3576|       |
 3577|  3.11k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  3.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.76k|                parse_integer_digits_with_thsep(
 3579|  1.76k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.76k|                    prefix_result.parsed_base, locale_options));
 3581|  1.76k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.76k|            parse_digits_result;
 3583|       |
 3584|  1.76k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 282]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.6k|    {
 3528|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.6k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.4k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.6k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.11k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.4k|                    parse_integer_digits_without_thsep(
 3556|  14.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.4k|            auto buf = make_contiguous_buffer(
 3560|  14.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.4k|        }
 3569|       |
 3570|  3.11k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.11k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.11k|#endif
 3576|       |
 3577|  3.11k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  3.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.76k|                parse_integer_digits_with_thsep(
 3579|  1.76k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.76k|                    prefix_result.parsed_base, locale_options));
 3581|  1.76k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.76k|            parse_digits_result;
 3583|       |
 3584|  1.76k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 282]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.9k|            auto rd = make_reader<T, char_type>();
 6195|  17.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.9k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.9k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.9k|                return impl(rd, range, value);
 6202|  17.9k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.9k|    {
 6113|  17.9k|        const bool need_skipped_width =
 6114|  17.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.9k]
  |  Branch (6114:33): [True: 0, False: 17.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.9k|        auto it = rng.begin();
 6118|  17.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.9k|        else {
 6127|  17.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.4k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.6k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.12k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    312|                    parse_integer_digits_without_thsep(
 3556|    312|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    312|                        prefix_result.parsed_base));
 3558|       |
 3559|    312|            auto buf = make_contiguous_buffer(
 3560|    312|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    312|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|    312|        }
 3569|       |
 3570|  3.12k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.12k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.12k|#endif
 3576|       |
 3577|  3.12k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.36k|    }                                                  \
  |  |  |  | 3667|  3.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.76k|                parse_integer_digits_with_thsep(
 3579|  1.76k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.76k|                    prefix_result.parsed_base, locale_options));
 3581|  1.76k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.76k|            parse_digits_result;
 3583|       |
 3584|  1.76k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 284]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.4k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.6k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.12k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.5k|                    parse_integer_digits_without_thsep(
 3556|  14.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.5k|            auto buf = make_contiguous_buffer(
 3560|  14.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.5k|        }
 3569|       |
 3570|  3.12k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.12k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.12k|#endif
 3576|       |
 3577|  3.12k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.36k, False: 1.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.36k|    }                                                  \
  |  |  |  | 3667|  3.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.76k|                parse_integer_digits_with_thsep(
 3579|  1.76k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.76k|                    prefix_result.parsed_base, locale_options));
 3581|  1.76k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.76k|            parse_digits_result;
 3583|       |
 3584|  1.76k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 284]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  18.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  18.0k|            auto rd = make_reader<T, char_type>();
 6195|  18.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  18.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 18.0k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  18.0k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  18.0k|                return impl(rd, range, value);
 6202|  18.0k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  18.0k|    {
 6113|  18.0k|        const bool need_skipped_width =
 6114|  18.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.0k]
  |  Branch (6114:33): [True: 0, False: 18.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.0k|        auto it = rng.begin();
 6118|  18.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.0k|        else {
 6127|  18.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.5k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.7k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.15k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    324|                    parse_integer_digits_without_thsep(
 3556|    324|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    324|                        prefix_result.parsed_base));
 3558|       |
 3559|    324|            auto buf = make_contiguous_buffer(
 3560|    324|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    324|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|    324|        }
 3569|       |
 3570|  3.15k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.15k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.15k|#endif
 3576|       |
 3577|  3.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  3.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.78k|                parse_integer_digits_with_thsep(
 3579|  1.78k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.78k|                    prefix_result.parsed_base, locale_options));
 3581|  1.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.78k|            parse_digits_result;
 3583|       |
 3584|  1.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 304]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.7k|    {
 3528|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.5k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.7k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.5k, False: 3.15k]
  |  |  ------------------
  ------------------
 3554|  14.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.5k|                    parse_integer_digits_without_thsep(
 3556|  14.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.5k|            auto buf = make_contiguous_buffer(
 3560|  14.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.5k|        }
 3569|       |
 3570|  3.15k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.15k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.15k|#endif
 3576|       |
 3577|  3.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  3.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.78k|                parse_integer_digits_with_thsep(
 3579|  1.78k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.78k|                    prefix_result.parsed_base, locale_options));
 3581|  1.78k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.78k|            parse_digits_result;
 3583|       |
 3584|  1.78k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.47k, False: 304]
  ------------------
 3585|  1.47k|            if (auto e = check_thsep_grouping(
 3586|  1.47k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.47k|                    thsep_indices, locale_options.grouping);
 3588|  1.47k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.47k|                return unexpected(e);
 3590|  1.47k|            }
 3591|  1.47k|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   134k|{
 2049|   134k|    auto it = range.begin();
 2050|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 135k, False: 1.70k]
  ------------------
 2051|   135k|        const auto val =
 2052|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2054|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 133k, False: 2.41k]
  ------------------
 2057|   133k|                return it;
 2058|   133k|            }
 2059|   135k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   134k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   135k|{
 1887|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   135k|    auto it = range.begin();
 1891|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   135k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 135k, False: 0]
  ------------------
 1900|   135k|        ++it;
 1901|   135k|        return {it, string_type(1, *range.begin())};
 1902|   135k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   135k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   135k|    {
 1878|   135k|        return !codepoint.empty();
 1879|   135k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   134k|{
 2070|   134k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   134k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   134k|{
 2940|   134k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 134k, False: 0]
  ------------------
 2941|   134k|        auto it = read_while_classic_space(range);
 2942|   134k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   134k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 133k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   133k|        return it;
 2948|   134k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   134k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   134k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   134k|    else {
 2114|   134k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   134k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   134k|            return detail::is_cp_space(cp);
 2127|   134k|        });
 2128|   134k|    }
 2129|   134k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   134k|        : m_fptr([](storage fn,
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|   134k|              if constexpr (std::is_void_v<R>) {
  746|   134k|                  obj(static_cast<decltype(args)>(args)...);
  747|   134k|              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
  752|   134k|          m_storage(std::addressof(f))
  753|   134k|    {
  754|   134k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   135k|            return detail::is_cp_space(cp);
 2127|   135k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   134k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   134k|        {
  662|   134k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5859|  16.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  16.3k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  16.3k|            auto rd = make_reader<T, char_type>();
 5865|  16.3k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  16.3k|    {
 5852|  16.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 408, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    408|    }                                                  \
  |  |  |  | 3667|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.9k|                        .transform_error(make_eof_scan_error));
 5854|  15.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  98.0k|{
 5784|  98.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 96.1k]
  |  |  ------------------
  ------------------
 5785|  1.94k|        return unexpected(e);
 5786|  1.94k|    }
 5787|       |
 5788|  96.1k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 96.1k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  96.1k|    return skip_classic_whitespace(range);
 5793|  96.1k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  15.9k|    {
 3517|  15.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.9k|        return read_default_with_base(range, value, 10);
 3519|  15.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|  18.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  18.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  18.8k|            auto rd = make_reader<T, char_type>();
 5865|  18.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  18.8k|    {
 5852|  18.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    534|    }                                                  \
  |  |  |  | 3667|  18.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.2k|                        .transform_error(make_eof_scan_error));
 5854|  18.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.2k|    {
 3517|  18.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.2k|        return read_default_with_base(range, value, 10);
 3519|  18.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5859|  19.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  19.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  19.1k|            auto rd = make_reader<T, char_type>();
 5865|  19.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  19.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  19.1k|    {
 5852|  19.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 18.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    582|    }                                                  \
  |  |  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.6k|                        .transform_error(make_eof_scan_error));
 5854|  18.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  19.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.6k|    {
 3517|  18.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.6k|        return read_default_with_base(range, value, 10);
 3519|  18.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5859|  13.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  13.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  13.6k|            auto rd = make_reader<T, char_type>();
 5865|  13.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  13.6k|    {
 5852|  13.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 282, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    282|    }                                                  \
  |  |  |  | 3667|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.3k|                        .transform_error(make_eof_scan_error));
 5854|  13.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  13.3k|    {
 3517|  13.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.3k|        return read_default_with_base(range, value, 10);
 3519|  13.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|  14.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  14.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  14.9k|            auto rd = make_reader<T, char_type>();
 5865|  14.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  14.9k|    {
 5852|  14.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 354, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    354|    }                                                  \
  |  |  |  | 3667|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.6k|                        .transform_error(make_eof_scan_error));
 5854|  14.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.6k|    {
 3517|  14.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.6k|        return read_default_with_base(range, value, 10);
 3519|  14.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5859|  15.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  15.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  15.1k|            auto rd = make_reader<T, char_type>();
 5865|  15.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  15.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  15.1k|    {
 5852|  15.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  15.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 381, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    381|    }                                                  \
  |  |  |  | 3667|  15.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.7k|                        .transform_error(make_eof_scan_error));
 5854|  14.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  15.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.7k|    {
 3517|  14.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.7k|        return read_default_with_base(range, value, 10);
 3519|  14.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  16.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  16.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  16.3k|            auto rd = make_reader<T, char_type>();
 5869|  16.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 16.3k, False: 0]
  ------------------
 5870|  16.3k|                return impl(rd, range, value);
 5871|  16.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  16.3k|    {
 5852|  16.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    390|    }                                                  \
  |  |  |  | 3667|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.9k|                        .transform_error(make_eof_scan_error));
 5854|  15.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  96.6k|{
 5784|  96.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 94.7k]
  |  |  ------------------
  ------------------
 5785|  1.94k|        return unexpected(e);
 5786|  1.94k|    }
 5787|       |
 5788|  94.7k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 94.7k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  94.7k|    return skip_classic_whitespace(range);
 5793|  94.7k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  15.9k|    {
 3517|  15.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.9k|        return read_default_with_base(range, value, 10);
 3519|  15.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  15.9k|    {
 3481|  15.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.9k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.9k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  30.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  30.6k|                parse_integer_digits_without_thsep(
 3500|  30.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  30.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  30.6k|        auto buf = make_contiguous_buffer(
 3504|  30.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  30.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 627, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    627|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    627|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    627|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    627|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    627|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.1k|        return ranges::next(prefix_result.iterator,
 3510|  14.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  30.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.2k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.2k|            auto rd = make_reader<T, char_type>();
 5869|  18.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.2k, False: 0]
  ------------------
 5870|  18.2k|                return impl(rd, range, value);
 5871|  18.2k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.2k|    {
 5852|  18.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 507, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    507|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    507|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    507|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    507|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    507|    }                                                  \
  |  |  |  | 3667|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  17.7k|                        .transform_error(make_eof_scan_error));
 5854|  17.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  17.7k|    {
 3517|  17.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  17.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  17.7k|        return read_default_with_base(range, value, 10);
 3519|  17.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  17.7k|    {
 3481|  17.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  17.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  17.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 17.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  34.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  34.1k|                parse_integer_digits_without_thsep(
 3500|  34.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  34.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  34.1k|        auto buf = make_contiguous_buffer(
 3504|  34.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  34.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 16.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    315|    }                                                  \
  |  |  |  | 3667|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.0k|        return ranges::next(prefix_result.iterator,
 3510|  16.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  34.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.5k|            auto rd = make_reader<T, char_type>();
 5869|  18.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.5k, False: 0]
  ------------------
 5870|  18.5k|                return impl(rd, range, value);
 5871|  18.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.5k|    {
 5852|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 552, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    552|    }                                                  \
  |  |  |  | 3667|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.0k|                        .transform_error(make_eof_scan_error));
 5854|  18.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  18.0k|    {
 3517|  18.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.0k|        return read_default_with_base(range, value, 10);
 3519|  18.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  18.0k|    {
 3481|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.0k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.0k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  34.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.45k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.45k|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  34.5k|                parse_integer_digits_without_thsep(
 3500|  34.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  34.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  34.5k|        auto buf = make_contiguous_buffer(
 3504|  34.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  34.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  16.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.3k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.3k|        return ranges::next(prefix_result.iterator,
 3510|  16.3k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  34.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  13.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  13.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  13.5k|            auto rd = make_reader<T, char_type>();
 5869|  13.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 13.5k, False: 0]
  ------------------
 5870|  13.5k|                return impl(rd, range, value);
 5871|  13.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  13.5k|    {
 5852|  13.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    270|    }                                                  \
  |  |  |  | 3667|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.3k|                        .transform_error(make_eof_scan_error));
 5854|  13.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  13.3k|    {
 3517|  13.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.3k|        return read_default_with_base(range, value, 10);
 3519|  13.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  13.3k|    {
 3481|  13.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.3k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.3k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 804, False: 12.5k]
  ------------------
 3486|    804|                return unexpected_scan_error(
 3487|    804|                    scan_error::invalid_scanned_value,
 3488|    804|                    "Unexpected '-' sign when parsing an "
 3489|    804|                    "unsigned value");
 3490|    804|            }
 3491|  13.3k|        }
 3492|       |
 3493|  13.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.3k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  25.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 816, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    816|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  25.8k|                parse_integer_digits_without_thsep(
 3500|  25.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  25.8k|                    prefix_result.parsed_base));
 3502|       |
 3503|  25.8k|        auto buf = make_contiguous_buffer(
 3504|  25.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  25.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  12.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|  12.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.2k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.2k|        return ranges::next(prefix_result.iterator,
 3510|  12.2k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  25.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.8k|            auto rd = make_reader<T, char_type>();
 5869|  14.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.8k, False: 0]
  ------------------
 5870|  14.8k|                return impl(rd, range, value);
 5871|  14.8k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.8k|    {
 5852|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    336|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.5k|                        .transform_error(make_eof_scan_error));
 5854|  14.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.5k|    {
 3517|  14.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.5k|        return read_default_with_base(range, value, 10);
 3519|  14.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.5k|    {
 3481|  14.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.5k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.5k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 822, False: 13.7k]
  ------------------
 3486|    822|                return unexpected_scan_error(
 3487|    822|                    scan_error::invalid_scanned_value,
 3488|    822|                    "Unexpected '-' sign when parsing an "
 3489|    822|                    "unsigned value");
 3490|    822|            }
 3491|  14.5k|        }
 3492|       |
 3493|  14.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.5k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 873, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    873|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    873|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    873|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    873|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    873|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.2k|                parse_integer_digits_without_thsep(
 3500|  28.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.2k|        auto buf = make_contiguous_buffer(
 3504|  28.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    165|    }                                                  \
  |  |  |  | 3667|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.5k|        return ranges::next(prefix_result.iterator,
 3510|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  15.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  15.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  15.0k|            auto rd = make_reader<T, char_type>();
 5869|  15.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 15.0k, False: 0]
  ------------------
 5870|  15.0k|                return impl(rd, range, value);
 5871|  15.0k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  15.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  15.0k|    {
 5852|  15.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  15.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    363|    }                                                  \
  |  |  |  | 3667|  15.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.7k|                        .transform_error(make_eof_scan_error));
 5854|  14.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  15.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.7k|    {
 3517|  14.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.7k|        return read_default_with_base(range, value, 10);
 3519|  14.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.7k|    {
 3481|  14.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.7k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 846, False: 13.8k]
  ------------------
 3486|    846|                return unexpected_scan_error(
 3487|    846|                    scan_error::invalid_scanned_value,
 3488|    846|                    "Unexpected '-' sign when parsing an "
 3489|    846|                    "unsigned value");
 3490|    846|            }
 3491|  14.7k|        }
 3492|       |
 3493|  14.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 891, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    891|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    891|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    891|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    891|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    891|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.5k|                parse_integer_digits_without_thsep(
 3500|  28.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.5k|        auto buf = make_contiguous_buffer(
 3504|  28.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.7k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.7k|        return ranges::next(prefix_result.iterator,
 3510|  13.7k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.5k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   365k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   365k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   365k|          m_current(m_range.begin())
 2867|   365k|    {
 2868|   365k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   990k|    {
 2872|   990k|        return m_current;
 2873|   990k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   624k|    {
 2877|   624k|        return m_range.end();
 2878|   624k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   286k|    {
 2892|   286k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   286k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   286k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 286k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   286k|        }
 2898|   286k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   286k|    static_cast<    \
  |  |  929|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   286k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   338k|    {
 2882|   338k|        return ranges::subrange{begin(), end()};
 2883|   338k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6181|  54.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  54.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  54.7k|            auto rd = make_reader<T, char_type>();
 6187|  54.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.7k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  54.7k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  54.7k|    {
 6113|  54.7k|        const bool need_skipped_width =
 6114|  54.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.7k]
  |  Branch (6114:33): [True: 0, False: 54.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.7k|        auto it = rng.begin();
 6118|  54.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.7k|        else {
 6127|  54.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 53.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  53.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  53.3k|        }
 6130|  53.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  53.3k|        std::ptrdiff_t value_width = 0;
 6134|  53.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 53.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  53.3k|        else {
 6150|  53.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.43k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.43k|    }                                                  \
  |  | 3667|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.9k|                                             specs, value, loc));
 6152|       |
 6153|  45.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.9k, False: 1.00k]
  ------------------
 6163|  44.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.9k|                                 value_width));
 6167|  44.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.9k|        }
 6169|       |
 6170|  45.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.9k|                                                 value_width, postfix_width);
 6172|  45.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.9k|        return it;
 6177|  45.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   338k|    {
 6026|   338k|        const bool need_skipped_width =
 6027|   338k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 338k]
  |  Branch (6027:33): [True: 0, False: 338k]
  ------------------
 6028|   338k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   338k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 338k]
  ------------------
 6032|   338k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 338k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   338k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 338k, False: 0]
  |  Branch (6036:56): [True: 338k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   338k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 338k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   668k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.76k, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.76k|    }                                                  \
  |  |  |  | 3667|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   668k|                            make_eof_scan_error));
 6047|       |
 6048|   668k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 330k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   330k|            return result_type{it, 0};
 6056|   668k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   338k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   279k|    {
 6068|   279k|        const bool need_skipped_width =
 6069|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 279k]
  |  Branch (6069:33): [True: 0, False: 279k]
  ------------------
 6070|   279k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   279k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 279k]
  ------------------
 6073|   279k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 279k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   279k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 279k, False: 0]
  ------------------
 6082|   279k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 279k]
  ------------------
 6083|   279k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   279k|        return result_type{rng.begin(), 0};
 6107|   279k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  64.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  64.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  64.7k|            auto rd = make_reader<T, char_type>();
 6187|  64.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.7k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  64.7k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  64.7k|    {
 6113|  64.7k|        const bool need_skipped_width =
 6114|  64.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.7k]
  |  Branch (6114:33): [True: 0, False: 64.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.7k|        auto it = rng.begin();
 6118|  64.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.7k|        else {
 6127|  64.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.81k, False: 62.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.81k|    }                                                  \
  |  |  |  | 3667|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.8k|        }
 6130|  62.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.8k|        std::ptrdiff_t value_width = 0;
 6134|  62.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.8k|        else {
 6150|  62.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.97k, False: 55.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.97k|    }                                                  \
  |  | 3667|  62.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  55.9k|                                             specs, value, loc));
 6152|       |
 6153|  55.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 55.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  55.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  55.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  55.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.5k, False: 1.35k]
  ------------------
 6163|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.5k|                                 value_width));
 6167|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.5k|        }
 6169|       |
 6170|  55.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  55.9k|                                                 value_width, postfix_width);
 6172|  55.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 55.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  55.9k|        return it;
 6177|  55.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6181|  65.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  65.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  65.8k|            auto rd = make_reader<T, char_type>();
 6187|  65.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.8k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  65.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  65.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  65.8k|    {
 6113|  65.8k|        const bool need_skipped_width =
 6114|  65.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 65.8k]
  |  Branch (6114:33): [True: 0, False: 65.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  65.8k|        auto it = rng.begin();
 6118|  65.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  65.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 65.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  65.8k|        else {
 6127|  65.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.00k, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.00k|    }                                                  \
  |  |  |  | 3667|  65.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.8k|        }
 6130|  63.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.8k|        std::ptrdiff_t value_width = 0;
 6134|  63.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.8k|        else {
 6150|  63.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.78k, False: 57.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.78k|    }                                                  \
  |  | 3667|  63.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  57.1k|                                             specs, value, loc));
 6152|       |
 6153|  57.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 57.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  57.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  57.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  57.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.5k, False: 1.51k]
  ------------------
 6163|  55.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.5k|                                 value_width));
 6167|  55.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.5k|        }
 6169|       |
 6170|  57.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  57.1k|                                                 value_width, postfix_width);
 6172|  57.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 57.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  57.1k|        return it;
 6177|  57.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6181|  48.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  48.1k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  48.1k|            auto rd = make_reader<T, char_type>();
 6187|  48.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 48.1k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  48.1k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  48.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  48.1k|    {
 6113|  48.1k|        const bool need_skipped_width =
 6114|  48.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 48.1k]
  |  Branch (6114:33): [True: 0, False: 48.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  48.1k|        auto it = rng.begin();
 6118|  48.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  48.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 48.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  48.1k|        else {
 6127|  48.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  48.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 47.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.00k|    }                                                  \
  |  |  |  | 3667|  48.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  47.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  47.1k|        }
 6130|  47.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  47.1k|        std::ptrdiff_t value_width = 0;
 6134|  47.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 47.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  47.1k|        else {
 6150|  47.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  47.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  47.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  47.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.78k, False: 39.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.78k|    }                                                  \
  |  | 3667|  47.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.4k|                                             specs, value, loc));
 6152|       |
 6153|  39.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.6k, False: 732]
  ------------------
 6163|  38.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.6k|                                 value_width));
 6167|  38.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.6k|        }
 6169|       |
 6170|  39.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.4k|                                                 value_width, postfix_width);
 6172|  39.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.4k|        return it;
 6177|  39.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  52.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.3k|            auto rd = make_reader<T, char_type>();
 6187|  52.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  52.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  52.3k|    {
 6113|  52.3k|        const bool need_skipped_width =
 6114|  52.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.3k]
  |  Branch (6114:33): [True: 0, False: 52.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.3k|        auto it = rng.begin();
 6118|  52.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.3k|        else {
 6127|  52.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.24k, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.24k|    }                                                  \
  |  |  |  | 3667|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.1k|        }
 6130|  51.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.1k|        std::ptrdiff_t value_width = 0;
 6134|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.1k|        else {
 6150|  51.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.54k, False: 43.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.54k|    }                                                  \
  |  | 3667|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.5k|                                             specs, value, loc));
 6152|       |
 6153|  43.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.6k, False: 910]
  ------------------
 6163|  42.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.6k|                                 value_width));
 6167|  42.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.6k|        }
 6169|       |
 6170|  43.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.5k|                                                 value_width, postfix_width);
 6172|  43.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.5k|        return it;
 6177|  43.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6181|  52.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.9k|            auto rd = make_reader<T, char_type>();
 6187|  52.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.9k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  52.9k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  52.9k|    {
 6113|  52.9k|        const bool need_skipped_width =
 6114|  52.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.9k]
  |  Branch (6114:33): [True: 0, False: 52.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.9k|        auto it = rng.begin();
 6118|  52.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.9k|        else {
 6127|  52.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.5k|        }
 6130|  51.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.5k|        std::ptrdiff_t value_width = 0;
 6134|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.5k|        else {
 6150|  51.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.43k, False: 44.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.43k|    }                                                  \
  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  44.1k|                                             specs, value, loc));
 6152|       |
 6153|  44.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 44.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  44.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  44.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  44.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 43.1k, False: 1.01k]
  ------------------
 6163|  43.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  43.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 43.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  43.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  43.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  43.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  43.1k|                                 value_width));
 6167|  43.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  43.1k|        }
 6169|       |
 6170|  44.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  44.1k|                                                 value_width, postfix_width);
 6172|  44.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 44.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  44.1k|        return it;
 6177|  44.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5859|  4.50k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.50k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.50k|            auto rd = make_reader<T, char_type>();
 5865|  4.50k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.50k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.50k|    {
 5852|  4.50k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.43k|                        .transform_error(make_eof_scan_error));
 5854|  4.43k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.50k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  27.0k|{
 5784|  27.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 26.9k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  26.9k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 26.9k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  26.9k|    return skip_classic_whitespace(range);
 5793|  26.9k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.43k|    {
 3517|  4.43k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.43k|        return read_default_with_base(range, value, 10);
 3519|  4.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.43k|    {
 3481|  4.43k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.43k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.43k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.43k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.85k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.85k|                parse_integer_digits_without_thsep(
 3500|  8.85k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.85k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.85k|        auto buf = make_contiguous_buffer(
 3504|  8.85k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.85k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.31k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.31k|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.85k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|  4.53k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.53k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.53k|            auto rd = make_reader<T, char_type>();
 5865|  4.53k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.53k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.53k|    {
 5852|  4.53k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.46k|                        .transform_error(make_eof_scan_error));
 5854|  4.46k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.53k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.46k|    {
 3517|  4.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.46k|        return read_default_with_base(range, value, 10);
 3519|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.46k|    {
 3481|  4.46k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.46k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.46k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.46k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.91k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.91k|                parse_integer_digits_without_thsep(
 3500|  8.91k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.91k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.91k|        auto buf = make_contiguous_buffer(
 3504|  8.91k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.91k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.31k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.31k|    }                                                  \
  |  |  |  | 3667|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.91k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5859|  4.56k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.56k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.56k|            auto rd = make_reader<T, char_type>();
 5865|  4.56k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.56k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.56k|    {
 5852|  4.56k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.49k|                        .transform_error(make_eof_scan_error));
 5854|  4.49k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.56k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.49k|    {
 3517|  4.49k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.49k|        return read_default_with_base(range, value, 10);
 3519|  4.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.49k|    {
 3481|  4.49k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.49k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.49k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.49k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.97k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.97k|                parse_integer_digits_without_thsep(
 3500|  8.97k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.97k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.97k|        auto buf = make_contiguous_buffer(
 3504|  8.97k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.97k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.31k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.31k|    }                                                  \
  |  |  |  | 3667|  4.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.97k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5859|  4.47k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.47k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.47k|            auto rd = make_reader<T, char_type>();
 5865|  4.47k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.47k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.47k|    {
 5852|  4.47k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.42k|                        .transform_error(make_eof_scan_error));
 5854|  4.42k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.47k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.42k|    {
 3517|  4.42k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.42k|        return read_default_with_base(range, value, 10);
 3519|  4.42k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.42k|    {
 3481|  4.42k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.42k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.42k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.42k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.36k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.42k|        }
 3492|       |
 3493|  4.42k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.42k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.84k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.84k|                parse_integer_digits_without_thsep(
 3500|  8.84k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.84k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.84k|        auto buf = make_contiguous_buffer(
 3504|  8.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.84k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.27k|    }                                                  \
  |  |  |  | 3667|  4.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.84k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|  4.49k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.49k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.49k|            auto rd = make_reader<T, char_type>();
 5865|  4.49k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.49k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.49k|    {
 5852|  4.49k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.44k|                        .transform_error(make_eof_scan_error));
 5854|  4.44k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.44k|    {
 3517|  4.44k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.44k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.44k|        return read_default_with_base(range, value, 10);
 3519|  4.44k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.44k|    {
 3481|  4.44k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.44k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.44k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.44k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.38k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.44k|        }
 3492|       |
 3493|  4.44k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.44k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.87k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.87k|                parse_integer_digits_without_thsep(
 3500|  8.87k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.87k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.87k|        auto buf = make_contiguous_buffer(
 3504|  8.87k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.87k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.27k|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.87k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5859|  4.52k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.52k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.52k|            auto rd = make_reader<T, char_type>();
 5865|  4.52k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.52k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.52k|    {
 5852|  4.52k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.46k|                        .transform_error(make_eof_scan_error));
 5854|  4.46k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.52k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.46k|    {
 3517|  4.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.46k|        return read_default_with_base(range, value, 10);
 3519|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.46k|    {
 3481|  4.46k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.46k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.46k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.46k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.40k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.46k|        }
 3492|       |
 3493|  4.46k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.46k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.92k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.92k|                parse_integer_digits_without_thsep(
 3500|  8.92k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.92k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.92k|        auto buf = make_contiguous_buffer(
 3504|  8.92k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.92k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.27k|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.92k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   160k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   160k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   160k|          m_current(m_range.begin())
 2867|   160k|    {
 2868|   160k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   271k|    {
 2872|   271k|        return m_current;
 2873|   271k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   110k|    {
 2877|   110k|        return m_range.end();
 2878|   110k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  2.51k|    {
 2892|  2.51k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  2.51k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  2.51k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 2.51k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  2.51k|        }
 2898|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  2.51k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   107k|    {
 2882|   107k|        return ranges::subrange{begin(), end()};
 2883|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6181|  17.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.9k|            auto rd = make_reader<T, char_type>();
 6187|  17.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.9k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.9k|    {
 6113|  17.9k|        const bool need_skipped_width =
 6114|  17.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.9k]
  |  Branch (6114:33): [True: 0, False: 17.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.9k|        auto it = rng.begin();
 6118|  17.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.9k|        else {
 6127|  17.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.6k|        }
 6130|  17.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.6k|        std::ptrdiff_t value_width = 0;
 6134|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.6k|        else {
 6150|  17.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   107k|    {
 6026|   107k|        const bool need_skipped_width =
 6027|   107k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 107k]
  |  Branch (6027:33): [True: 0, False: 107k]
  ------------------
 6028|   107k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   107k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 107k]
  ------------------
 6032|   107k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 107k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   107k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 107k, False: 0]
  |  Branch (6036:56): [True: 107k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   107k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 107k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   214k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   214k|                            make_eof_scan_error));
 6047|       |
 6048|   214k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 106k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   106k|            return result_type{it, 0};
 6056|   214k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  18.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  18.0k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  18.0k|            auto rd = make_reader<T, char_type>();
 6187|  18.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  18.0k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  18.0k|    {
 6113|  18.0k|        const bool need_skipped_width =
 6114|  18.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.0k]
  |  Branch (6114:33): [True: 0, False: 18.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.0k|        auto it = rng.begin();
 6118|  18.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.0k|        else {
 6127|  18.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6181|  18.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  18.1k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  18.1k|            auto rd = make_reader<T, char_type>();
 6187|  18.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  18.1k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  18.1k|    {
 6113|  18.1k|        const bool need_skipped_width =
 6114|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.1k]
  |  Branch (6114:33): [True: 0, False: 18.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.1k|        auto it = rng.begin();
 6118|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.1k|        else {
 6127|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.8k|        }
 6130|  17.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.8k|        std::ptrdiff_t value_width = 0;
 6134|  17.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.8k|        else {
 6150|  17.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6181|  17.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.8k|            auto rd = make_reader<T, char_type>();
 6187|  17.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.8k|    {
 6113|  17.8k|        const bool need_skipped_width =
 6114|  17.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.8k]
  |  Branch (6114:33): [True: 0, False: 17.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.8k|        auto it = rng.begin();
 6118|  17.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.8k|        else {
 6127|  17.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.6k|        }
 6130|  17.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.6k|        std::ptrdiff_t value_width = 0;
 6134|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.6k|        else {
 6150|  17.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  17.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.9k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.9k|            auto rd = make_reader<T, char_type>();
 6187|  17.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.9k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.9k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.9k|    {
 6113|  17.9k|        const bool need_skipped_width =
 6114|  17.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.9k]
  |  Branch (6114:33): [True: 0, False: 17.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.9k|        auto it = rng.begin();
 6118|  17.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.9k|        else {
 6127|  17.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6181|  18.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  18.0k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  18.0k|            auto rd = make_reader<T, char_type>();
 6187|  18.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  18.0k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  18.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  18.0k|    {
 6113|  18.0k|        const bool need_skipped_width =
 6114|  18.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 18.0k]
  |  Branch (6114:33): [True: 0, False: 18.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  18.0k|        auto it = rng.begin();
 6118|  18.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 18.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  18.0k|        else {
 6127|  18.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.7k|        }
 6130|  17.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.7k|        std::ptrdiff_t value_width = 0;
 6134|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.7k|        else {
 6150|  17.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.50k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.50k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.50k|            auto rd = make_reader<T, char_type>();
 5869|  4.50k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.50k, False: 0]
  ------------------
 5870|  4.50k|                return impl(rd, range, value);
 5871|  4.50k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.50k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.50k|    {
 5852|  4.50k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.43k|                        .transform_error(make_eof_scan_error));
 5854|  4.43k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.50k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  27.0k|{
 5784|  27.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  27.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 26.9k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  26.9k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 26.9k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  26.9k|    return skip_classic_whitespace(range);
 5793|  26.9k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.43k|    {
 3517|  4.43k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.43k|        return read_default_with_base(range, value, 10);
 3519|  4.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.43k|    {
 3481|  4.43k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.43k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.43k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.43k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.58k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.28k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.28k|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.58k|                parse_integer_digits_without_thsep(
 3500|  4.58k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.58k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.58k|        auto buf = make_contiguous_buffer(
 3504|  4.58k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.58k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.58k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.53k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.53k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.53k|            auto rd = make_reader<T, char_type>();
 5869|  4.53k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.53k, False: 0]
  ------------------
 5870|  4.53k|                return impl(rd, range, value);
 5871|  4.53k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.53k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.53k|    {
 5852|  4.53k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.46k|                        .transform_error(make_eof_scan_error));
 5854|  4.46k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.53k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.46k|    {
 3517|  4.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.46k|        return read_default_with_base(range, value, 10);
 3519|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.46k|    {
 3481|  4.46k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.46k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.46k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.46k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.61k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.30k, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.30k|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.61k|                parse_integer_digits_without_thsep(
 3500|  4.61k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.61k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.61k|        auto buf = make_contiguous_buffer(
 3504|  4.61k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.61k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.61k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.56k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.56k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.56k|            auto rd = make_reader<T, char_type>();
 5869|  4.56k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.56k, False: 0]
  ------------------
 5870|  4.56k|                return impl(rd, range, value);
 5871|  4.56k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.56k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.56k|    {
 5852|  4.56k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.49k|                        .transform_error(make_eof_scan_error));
 5854|  4.49k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.56k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.49k|    {
 3517|  4.49k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.49k|        return read_default_with_base(range, value, 10);
 3519|  4.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.49k|    {
 3481|  4.49k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.49k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.49k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.49k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.66k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.32k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.32k|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.66k|                parse_integer_digits_without_thsep(
 3500|  4.66k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.66k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.66k|        auto buf = make_contiguous_buffer(
 3504|  4.66k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.66k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.66k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.47k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.47k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.47k|            auto rd = make_reader<T, char_type>();
 5869|  4.47k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.47k, False: 0]
  ------------------
 5870|  4.47k|                return impl(rd, range, value);
 5871|  4.47k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.47k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.47k|    {
 5852|  4.47k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.42k|                        .transform_error(make_eof_scan_error));
 5854|  4.42k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.47k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.42k|    {
 3517|  4.42k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.42k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.42k|        return read_default_with_base(range, value, 10);
 3519|  4.42k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.42k|    {
 3481|  4.42k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.42k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.42k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.42k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.36k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.42k|        }
 3492|       |
 3493|  4.42k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.42k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.59k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.24k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.24k|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.59k|                parse_integer_digits_without_thsep(
 3500|  4.59k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.59k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.59k|        auto buf = make_contiguous_buffer(
 3504|  4.59k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.59k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 33, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     33|    }                                                  \
  |  |  |  | 3667|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.59k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.49k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.49k|            auto rd = make_reader<T, char_type>();
 5869|  4.49k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.49k, False: 0]
  ------------------
 5870|  4.49k|                return impl(rd, range, value);
 5871|  4.49k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.49k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.49k|    {
 5852|  4.49k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.44k|                        .transform_error(make_eof_scan_error));
 5854|  4.44k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.49k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.44k|    {
 3517|  4.44k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.44k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.44k|        return read_default_with_base(range, value, 10);
 3519|  4.44k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.44k|    {
 3481|  4.44k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.44k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.44k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.44k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.38k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.44k|        }
 3492|       |
 3493|  4.44k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.44k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.61k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 177]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.26k|    }                                                  \
  |  |  |  | 3667|  4.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    177|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.61k|                parse_integer_digits_without_thsep(
 3500|  4.61k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.61k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.61k|        auto buf = make_contiguous_buffer(
 3504|  4.61k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.61k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    177|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    177|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    177|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    177|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    177|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.61k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.52k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.52k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.52k|            auto rd = make_reader<T, char_type>();
 5869|  4.52k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.52k, False: 0]
  ------------------
 5870|  4.52k|                return impl(rd, range, value);
 5871|  4.52k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.52k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.52k|    {
 5852|  4.52k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.46k|                        .transform_error(make_eof_scan_error));
 5854|  4.46k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.52k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.46k|    {
 3517|  4.46k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.46k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.46k|        return read_default_with_base(range, value, 10);
 3519|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.46k|    {
 3481|  4.46k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.46k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.46k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.46k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.40k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.46k|        }
 3492|       |
 3493|  4.46k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.46k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.65k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.27k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.27k|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.65k|                parse_integer_digits_without_thsep(
 3500|  4.65k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.65k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.65k|        auto buf = make_contiguous_buffer(
 3504|  4.65k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.65k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    189|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    189|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    189|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    189|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    189|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.65k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  15.9k|    {
 3481|  15.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.9k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.9k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  31.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     45|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  31.7k|                parse_integer_digits_without_thsep(
 3500|  31.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  31.7k|                    prefix_result.parsed_base));
 3502|       |
 3503|  31.7k|        auto buf = make_contiguous_buffer(
 3504|  31.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  31.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.74k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.74k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.1k|        return ranges::next(prefix_result.iterator,
 3510|  14.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  31.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.2k|    {
 3481|  18.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.2k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.2k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.5k|                parse_integer_digits_without_thsep(
 3500|  36.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.5k|        auto buf = make_contiguous_buffer(
 3504|  36.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.6k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.6k|        return ranges::next(prefix_result.iterator,
 3510|  16.6k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.6k|    {
 3481|  18.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  37.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 81, False: 18.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     81|    }                                                  \
  |  |  |  | 3667|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  37.1k|                parse_integer_digits_without_thsep(
 3500|  37.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  37.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  37.1k|        auto buf = make_contiguous_buffer(
 3504|  37.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  37.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.53k|    }                                                  \
  |  |  |  | 3667|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.9k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.9k|        return ranges::next(prefix_result.iterator,
 3510|  16.9k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  37.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  13.3k|    {
 3481|  13.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.3k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.3k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 807, False: 12.5k]
  ------------------
 3486|    807|                return unexpected_scan_error(
 3487|    807|                    scan_error::invalid_scanned_value,
 3488|    807|                    "Unexpected '-' sign when parsing an "
 3489|    807|                    "unsigned value");
 3490|    807|            }
 3491|  13.3k|        }
 3492|       |
 3493|  13.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.3k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  26.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  26.6k|                parse_integer_digits_without_thsep(
 3500|  26.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  26.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  26.6k|        auto buf = make_contiguous_buffer(
 3504|  26.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  26.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 12.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.09k|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.2k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.2k|        return ranges::next(prefix_result.iterator,
 3510|  12.2k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  26.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.6k|    {
 3481|  14.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.6k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 834, False: 13.7k]
  ------------------
 3486|    834|                return unexpected_scan_error(
 3487|    834|                    scan_error::invalid_scanned_value,
 3488|    834|                    "Unexpected '-' sign when parsing an "
 3489|    834|                    "unsigned value");
 3490|    834|            }
 3491|  14.6k|        }
 3492|       |
 3493|  14.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  29.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  29.1k|                parse_integer_digits_without_thsep(
 3500|  29.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  29.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  29.1k|        auto buf = make_contiguous_buffer(
 3504|  29.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  29.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 996, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    996|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.5k|        return ranges::next(prefix_result.iterator,
 3510|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  29.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.7k|    {
 3481|  14.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.7k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 867, False: 13.9k]
  ------------------
 3486|    867|                return unexpected_scan_error(
 3487|    867|                    scan_error::invalid_scanned_value,
 3488|    867|                    "Unexpected '-' sign when parsing an "
 3489|    867|                    "unsigned value");
 3490|    867|            }
 3491|  14.7k|        }
 3492|       |
 3493|  14.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  29.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  29.5k|                parse_integer_digits_without_thsep(
 3500|  29.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  29.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  29.5k|        auto buf = make_contiguous_buffer(
 3504|  29.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  29.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 936, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    936|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    936|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    936|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    936|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    936|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.8k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.8k|        return ranges::next(prefix_result.iterator,
 3510|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  29.5k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    732|{
   52|    732|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    732|    string_buffer.resize(size);
   56|    732|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    732|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    732|    const auto wsv_reinterpret_size =
   61|    732|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 112, False: 620]
  ------------------
   62|    732|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    732|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    732|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    732|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    732|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    732|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    732|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    732|{
  122|    732|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    732|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    732|    buf.resize(sizeof...(Args));
  125|    732|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    732|    return buf;
  127|    732|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    732|{
  108|    732|    if constexpr (std::is_same_v<CharT, char>) {
  109|    732|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    732|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    732|{
  185|    732|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    732|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    732|                                   format_strings);
  188|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  34.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.9k|            auto result = scn::scan<T>(
  139|  34.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.9k|                scn::runtime_format(f));
  141|  34.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 27.6k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  27.6k|            it = result->begin();
  145|  27.6k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  34.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.9k|            auto result = scn::scan<T>(
  154|  34.9k|                global_locale,
  155|  34.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.9k|                scn::runtime_format(f));
  157|  34.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 27.6k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  27.6k|            it = result->begin();
  161|  27.6k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  5.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.44k|            auto result = scn::scan_value<T>(
  170|  5.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.70k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.70k|            it = result->begin();
  175|  4.70k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  30.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.8k|            auto result = scn::scan<T>(
  139|  30.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.8k|                scn::runtime_format(f));
  141|  30.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 23.5k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  23.5k|            it = result->begin();
  145|  23.5k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  30.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.8k|            auto result = scn::scan<T>(
  154|  30.8k|                global_locale,
  155|  30.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.8k|                scn::runtime_format(f));
  157|  30.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 23.5k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  23.5k|            it = result->begin();
  161|  23.5k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  4.54k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.54k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.54k|            auto result = scn::scan_value<T>(
  170|  4.54k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.54k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 3.80k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  3.80k|            it = result->begin();
  175|  3.80k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  40.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.8k|            auto result = scn::scan<T>(
  139|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.8k|                scn::runtime_format(f));
  141|  40.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 33.5k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  33.5k|            it = result->begin();
  145|  33.5k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  40.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.8k|            auto result = scn::scan<T>(
  154|  40.8k|                global_locale,
  155|  40.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.8k|                scn::runtime_format(f));
  157|  40.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 33.5k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  33.5k|            it = result->begin();
  161|  33.5k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  6.27k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.27k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.27k|            auto result = scn::scan_value<T>(
  170|  6.27k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.27k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 5.54k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  5.54k|            it = result->begin();
  175|  5.54k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  33.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.3k|            auto result = scn::scan<T>(
  139|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.3k|                scn::runtime_format(f));
  141|  33.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 26.0k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  26.0k|            it = result->begin();
  145|  26.0k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  33.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.3k|            auto result = scn::scan<T>(
  154|  33.3k|                global_locale,
  155|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.3k|                scn::runtime_format(f));
  157|  33.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 26.0k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  26.0k|            it = result->begin();
  161|  26.0k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  4.98k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.98k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.98k|            auto result = scn::scan_value<T>(
  170|  4.98k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.98k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.25k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.25k|            it = result->begin();
  175|  4.25k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  41.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.5k|            auto result = scn::scan<T>(
  139|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.5k|                scn::runtime_format(f));
  141|  41.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 34.2k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  34.2k|            it = result->begin();
  145|  34.2k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  41.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.5k|            auto result = scn::scan<T>(
  154|  41.5k|                global_locale,
  155|  41.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.5k|                scn::runtime_format(f));
  157|  41.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 34.2k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  34.2k|            it = result->begin();
  161|  34.2k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  6.39k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.39k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.39k|            auto result = scn::scan_value<T>(
  170|  6.39k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.39k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 5.66k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  5.66k|            it = result->begin();
  175|  5.66k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  33.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.7k|            auto result = scn::scan<T>(
  139|  33.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.7k|                scn::runtime_format(f));
  141|  33.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 26.3k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  33.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.7k|            auto result = scn::scan<T>(
  154|  33.7k|                global_locale,
  155|  33.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.7k|                scn::runtime_format(f));
  157|  33.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 26.3k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  5.05k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.05k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.05k|            auto result = scn::scan_value<T>(
  170|  5.05k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.05k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.31k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.31k|            it = result->begin();
  175|  4.31k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  35.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  35.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  35.0k|            auto result = scn::scan<T>(
  139|  35.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  35.0k|                scn::runtime_format(f));
  141|  35.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 27.6k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  27.6k|            it = result->begin();
  145|  27.6k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  35.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  35.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  35.0k|            auto result = scn::scan<T>(
  154|  35.0k|                global_locale,
  155|  35.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  35.0k|                scn::runtime_format(f));
  157|  35.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 27.6k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  27.6k|            it = result->begin();
  161|  27.6k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  5.43k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.43k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.43k|            auto result = scn::scan_value<T>(
  170|  5.43k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.43k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.70k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.70k|            it = result->begin();
  175|  4.70k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  30.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.8k|            auto result = scn::scan<T>(
  139|  30.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.8k|                scn::runtime_format(f));
  141|  30.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 23.5k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  23.5k|            it = result->begin();
  145|  23.5k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  30.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.8k|            auto result = scn::scan<T>(
  154|  30.8k|                global_locale,
  155|  30.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.8k|                scn::runtime_format(f));
  157|  30.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 23.5k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  23.5k|            it = result->begin();
  161|  23.5k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  4.53k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.53k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.53k|            auto result = scn::scan_value<T>(
  170|  4.53k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.53k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 3.80k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  3.80k|            it = result->begin();
  175|  3.80k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  40.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.6k|            auto result = scn::scan<T>(
  139|  40.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.6k|                scn::runtime_format(f));
  141|  40.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 33.3k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  33.3k|            it = result->begin();
  145|  33.3k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  40.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.6k|            auto result = scn::scan<T>(
  154|  40.6k|                global_locale,
  155|  40.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.6k|                scn::runtime_format(f));
  157|  40.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 33.3k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  33.3k|            it = result->begin();
  161|  33.3k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  6.08k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.08k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.08k|            auto result = scn::scan_value<T>(
  170|  6.08k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.08k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 5.35k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  5.35k|            it = result->begin();
  175|  5.35k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  33.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.3k|            auto result = scn::scan<T>(
  139|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.3k|                scn::runtime_format(f));
  141|  33.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 26.0k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  26.0k|            it = result->begin();
  145|  26.0k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  33.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.3k|            auto result = scn::scan<T>(
  154|  33.3k|                global_locale,
  155|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.3k|                scn::runtime_format(f));
  157|  33.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 26.0k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  26.0k|            it = result->begin();
  161|  26.0k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  4.96k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.96k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.96k|            auto result = scn::scan_value<T>(
  170|  4.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.96k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.23k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.23k|            it = result->begin();
  175|  4.23k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  41.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.3k|            auto result = scn::scan<T>(
  139|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.3k|                scn::runtime_format(f));
  141|  41.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 34.0k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  34.0k|            it = result->begin();
  145|  34.0k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  41.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.3k|            auto result = scn::scan<T>(
  154|  41.3k|                global_locale,
  155|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.3k|                scn::runtime_format(f));
  157|  41.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 34.0k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  34.0k|            it = result->begin();
  161|  34.0k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  6.18k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.18k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.18k|            auto result = scn::scan_value<T>(
  170|  6.18k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.18k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 5.45k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  5.45k|            it = result->begin();
  175|  5.45k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    732|{
  133|       |    // Regular scan
  134|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.32k, False: 732]
  ------------------
  135|  7.32k|        auto it = scn::ranges::begin(source);
  136|  33.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.7k|            auto result = scn::scan<T>(
  139|  33.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.7k|                scn::runtime_format(f));
  141|  33.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.32k, False: 26.4k]
  ------------------
  142|  7.32k|                break;
  143|  7.32k|            }
  144|  26.4k|            it = result->begin();
  145|  26.4k|        }
  146|  7.32k|    }
  147|       |
  148|       |    // scan localized
  149|  7.32k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.32k, False: 732]
  ------------------
  150|  7.32k|        auto it = scn::ranges::begin(source);
  151|  33.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.7k|            auto result = scn::scan<T>(
  154|  33.7k|                global_locale,
  155|  33.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.7k|                scn::runtime_format(f));
  157|  33.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.32k, False: 26.4k]
  ------------------
  158|  7.32k|                break;
  159|  7.32k|            }
  160|  26.4k|            it = result->begin();
  161|  26.4k|        }
  162|  7.32k|    }
  163|       |
  164|       |    // scan_value
  165|    732|    {
  166|    732|        auto it = scn::ranges::begin(source);
  167|  5.02k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.02k|            auto result = scn::scan_value<T>(
  170|  5.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.02k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 732, False: 4.29k]
  ------------------
  172|    732|                break;
  173|    732|            }
  174|  4.29k|            it = result->begin();
  175|  4.29k|        }
  176|    732|    }
  177|    732|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    732|{
   90|    732|    using char_type = ranges::range_value_t<Source>;
   91|    732|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    732|    deque.clear();
   93|    732|    std::copy(ranges::begin(source), ranges::end(source),
   94|    732|              std::back_inserter(deque));
   95|    732|    return deque;
   96|    732|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    732|{
   79|    732|    if constexpr (std::is_same_v<CharT, char>) {
   80|    732|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    732|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    732|{
  122|    732|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    732|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    732|    buf.resize(sizeof...(Args));
  125|    732|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    732|    return buf;
  127|    732|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    732|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    732|    else {
  112|    732|        return wformat_string_view_buffer;
  113|    732|    }
  114|    732|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.46k|{
  185|  1.46k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.46k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.46k|                                   format_strings);
  188|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 224]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 224]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.50k|            auto result = scn::scan_value<T>(
  170|  1.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 36]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 191]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 191]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.49k|            auto result = scn::scan_value<T>(
  170|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 29]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 277]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 277]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.51k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.51k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.51k|            auto result = scn::scan_value<T>(
  170|  1.51k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.51k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 46]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 220]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 220]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.49k|            auto result = scn::scan_value<T>(
  170|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 35]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 330]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 330]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.52k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.52k|            auto result = scn::scan_value<T>(
  170|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.52k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 57]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 261]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 261]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.50k|            auto result = scn::scan_value<T>(
  170|  1.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 43]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 224]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 224]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.50k|            auto result = scn::scan_value<T>(
  170|  1.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 36]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 191]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 191]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.49k|            auto result = scn::scan_value<T>(
  170|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 29]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 277]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 277]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.51k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.51k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.51k|            auto result = scn::scan_value<T>(
  170|  1.51k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.51k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 46]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.8k|            auto result = scn::scan<T>(
  139|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.8k|                scn::runtime_format(f));
  141|  14.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 220]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.8k|            auto result = scn::scan<T>(
  154|  14.8k|                global_locale,
  155|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.8k|                scn::runtime_format(f));
  157|  14.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 220]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.49k|            auto result = scn::scan_value<T>(
  170|  1.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 35]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 330]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 330]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.52k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.52k|            auto result = scn::scan_value<T>(
  170|  1.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.52k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 57]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.46k|{
  133|       |    // Regular scan
  134|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.6k, False: 1.46k]
  ------------------
  135|  14.6k|        auto it = scn::ranges::begin(source);
  136|  14.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.9k|            auto result = scn::scan<T>(
  139|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.9k|                scn::runtime_format(f));
  141|  14.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.6k, False: 261]
  ------------------
  142|  14.6k|                break;
  143|  14.6k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.6k|    }
  147|       |
  148|       |    // scan localized
  149|  14.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.6k, False: 1.46k]
  ------------------
  150|  14.6k|        auto it = scn::ranges::begin(source);
  151|  14.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.9k|            auto result = scn::scan<T>(
  154|  14.9k|                global_locale,
  155|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.9k|                scn::runtime_format(f));
  157|  14.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.6k, False: 261]
  ------------------
  158|  14.6k|                break;
  159|  14.6k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.6k|    }
  163|       |
  164|       |    // scan_value
  165|  1.46k|    {
  166|  1.46k|        auto it = scn::ranges::begin(source);
  167|  1.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.50k|            auto result = scn::scan_value<T>(
  170|  1.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.46k, False: 43]
  ------------------
  172|  1.46k|                break;
  173|  1.46k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.46k|    }
  177|  1.46k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.46k|{
   90|  1.46k|    using char_type = ranges::range_value_t<Source>;
   91|  1.46k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.46k|    deque.clear();
   93|  1.46k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.46k|              std::back_inserter(deque));
   95|  1.46k|    return deque;
   96|  1.46k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.46k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.46k|    else {
   83|  1.46k|        return wnoncontiguous_buffer;
   84|  1.46k|    }
   85|  1.46k|}

LLVMFuzzerTestOneInput:
   59|    732|{
   60|    732|    scn::fuzz::run(data, size);
   61|    732|    return 0;
   62|    732|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    732|{
   36|    732|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 732]
  |  Branch (36:35): [True: 0, False: 732]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    732|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    732|    const auto& f =
   43|    732|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    732|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    732|    do_basic_run(sv, f);
   46|       |
   47|    732|    const auto& wf = get_format_strings<wchar_t>(
   48|    732|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    732|        L"{:'}", L"{:'L}");
   50|    732|    do_basic_run(wsv_reinterpret, wf);
   51|    732|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 732, False: 0]
  ------------------
   52|    732|        do_basic_run(wsv_transcode, wf);
   53|    732|    }
   54|    732|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    732|{
   25|    732|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    732|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    732|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    732|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    732|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    732|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    732|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    732|{
   25|    732|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    732|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    732|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    732|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    732|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    732|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    732|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.46k|{
   25|  1.46k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.46k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.46k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.46k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.46k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.46k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.46k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.46k|{
   25|  1.46k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.46k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.46k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.46k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.46k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.46k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.46k|}

