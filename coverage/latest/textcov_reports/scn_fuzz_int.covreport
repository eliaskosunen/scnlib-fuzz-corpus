_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  84.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  84.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|   878k|{
 4068|   878k|    if constexpr (sizeof(U) == 1) {
 4069|   878k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|   878k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|   878k|{
 4032|   878k|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|   878k|    SCN_GCC_COMPAT_PUSH
 4035|   878k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|   878k|    constexpr char lengths[] =
 4037|   878k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|   878k|        "\1\1\1\1\1\1\1\1"
 4039|   878k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|   878k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|   878k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|   878k|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|   878k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|   878k|    SCN_GCC_COMPAT_POP
 4046|   878k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   860k|{
 4274|   860k|    if constexpr (sizeof(CharT) == 1) {
 4275|   860k|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|   860k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|   860k|{
 4087|   860k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|   860k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   860k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|   860k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   860k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   860k|    };
 4092|       |
 4093|   860k|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 851k, False: 9.43k]
  ------------------
 4094|   851k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 1.09k, False: 850k]
  ------------------
 4095|  1.09k|            SCN_UNLIKELY_ATTR
 4096|  1.09k|            return invalid_code_point;
 4097|  1.09k|        }
 4098|   850k|        return static_cast<char32_t>(input[0]);
 4099|   851k|    }
 4100|       |
 4101|  9.43k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 4.11k, False: 5.31k]
  ------------------
 4102|  4.11k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 44, False: 4.07k]
  ------------------
 4103|     44|            SCN_UNLIKELY_ATTR
 4104|     44|            return invalid_code_point;
 4105|     44|        }
 4106|  4.07k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 830, False: 3.24k]
  ------------------
 4107|    830|            SCN_UNLIKELY_ATTR
 4108|    830|            return invalid_code_point;
 4109|    830|        }
 4110|       |
 4111|  3.24k|        char32_t cp{};
 4112|  3.24k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  3.24k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  3.24k|        return cp;
 4115|  4.07k|    }
 4116|       |
 4117|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 4.14k, False: 1.17k]
  ------------------
 4118|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 53, False: 4.08k]
  ------------------
 4119|     53|            SCN_UNLIKELY_ATTR
 4120|     53|            return invalid_code_point;
 4121|     53|        }
 4122|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 613, False: 3.47k]
  ------------------
 4123|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 260, False: 3.21k]
  ------------------
 4124|    873|            SCN_UNLIKELY_ATTR
 4125|    873|            return invalid_code_point;
 4126|    873|        }
 4127|       |
 4128|  3.21k|        char32_t cp{};
 4129|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|  3.21k|        return cp;
 4133|  4.08k|    }
 4134|       |
 4135|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 1.17k, False: 0]
  ------------------
 4136|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 1.17k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 275, False: 901]
  ------------------
 4141|    275|            SCN_UNLIKELY_ATTR
 4142|    275|            return invalid_code_point;
 4143|    275|        }
 4144|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 391, False: 510]
  ------------------
 4145|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 13, False: 497]
  ------------------
 4146|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 10, False: 487]
  ------------------
 4147|    414|            SCN_UNLIKELY_ATTR
 4148|    414|            return invalid_code_point;
 4149|    414|        }
 4150|       |
 4151|    487|        char32_t cp{};
 4152|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    487|        return cp;
 4157|    901|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  13.5k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  13.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  13.5k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|   606k|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|   606k|    else {
 3966|   606k|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|   606k|                                       to_address(first), to_address(last)))};
 3968|   606k|    }
 3969|   606k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  1.82M|{
  316|  1.82M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  1.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  1.82M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  4.66M|{
  294|  4.66M|    return p;
  295|  4.66M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.39M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.39M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.39M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.39M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.39M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  89.6k|    {
 2869|  89.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  89.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  89.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  89.6k|    {
 2850|  89.6k|        return decay_copy(t.begin());
 2851|  89.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  4.37M|{
 2094|  4.37M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.37M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   917k|    {
 2926|   917k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   917k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   917k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   917k|    {
 2908|   917k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   917k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   917k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  34.6k|{
 9681|  34.6k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.6k|                                   make_scan_args(result->values())));
 9684|  34.6k|    return result;
 9685|  34.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9636|  74.5k|{
 9637|  74.5k|    return scan_result_type<Source, Args...>();
 9638|  74.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  74.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  74.5k|        : m_value(T{}), m_has_value(true)
  427|  74.5k|    {
  428|  74.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6570|  74.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   458k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   458k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6344|   209k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  74.5k|{
 9622|  74.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  74.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 59.7k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  59.7k|    else {
 9626|  59.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.7k|    static_cast<    \
  |  |  935|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.7k|    }
 9628|  74.5k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   458k|    {
 1740|   458k|        return has_value();
 1741|   458k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   916k|    {
  490|   916k|        return m_has_value;
  491|   916k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  88.9k|    {
 1746|  88.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  88.9k|        return this->get_unexpected().error();
 1748|  88.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  88.9k|    {
  473|  88.9k|        return m_unexpected;
  474|  88.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  6.01M|    {
  365|  6.01M|        return m_unexpected;
  366|  6.01M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  2.68M|        : m_unexpected(std::forward<Err>(e))
  350|  2.68M|    {
  351|  2.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.68M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  3.45M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.45M|    {
  360|  3.45M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.45M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.45M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   298k|    {
  490|   298k|        return m_has_value;
  491|   298k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   194k|    {
  456|   194k|        return m_value;
  457|   194k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   533k|{
  396|   533k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   533k|        T(std::forward<Args>(args)...);
  398|   533k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   369k|    {
 6445|   369k|        m_range = std::forward<Other>(r);
 6446|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   369k|    {
 1795|   369k|        return value();
 1796|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   369k|    {
 1769|   369k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   369k|        return this->get_value();
 1771|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   369k|    {
  456|   369k|        return m_value;
  457|   369k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|   213k|{
 9461|   213k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   213k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   213k|{
 9398|   213k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   213k|    auto result = vscan_impl(buffer, format, args);
 9401|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 9402|  42.3k|        return unexpected(result.error());
 9403|  42.3k|    }
 9404|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   213k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   458k|{
 5381|   458k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   458k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   458k|                  "\n"
 5385|   458k|                  "Unsupported range type given as input to a scanning "
 5386|   458k|                  "function.\n"
 5387|   458k|                  "A range needs to have a character type (value type) "
 5388|   458k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   458k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   458k|                  "to be included.\n"
 5391|   458k|                  "See the scnlib documentation for more details.");
 5392|   458k|    static_assert(
 5393|   458k|        !std::is_same_v<T, custom_char_traits>,
 5394|   458k|        "\n"
 5395|   458k|        "Unsupported range type given as input to a scanning "
 5396|   458k|        "function.\n"
 5397|   458k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   458k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   458k|        "not supported.");
 5400|   458k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   458k|                  "\n"
 5402|   458k|                  "Unsupported range type given as input to a scanning "
 5403|   458k|                  "function.\n"
 5404|   458k|                  "file_marker_found cannot be used as an "
 5405|   458k|                  "source range type to scn::scan.\n"
 5406|   458k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   458k|                  "and do not provide an explicit source range, "
 5408|   458k|                  "or use scn::scan with a FILE* directly.");
 5409|   458k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   458k|                  "\n"
 5411|   458k|                  "Unsupported range type given as input to a scanning "
 5412|   458k|                  "function.\n"
 5413|   458k|                  "In order to be scannable, a range needs to satisfy "
 5414|   458k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   458k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   458k|                  "\n"
 5417|   458k|                  "Unsupported range type given as input to a scanning "
 5418|   458k|                  "function.\n"
 5419|   458k|                  "A range needs to model forward_range and have a valid "
 5420|   458k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   458k|                  "Examples of scannable ranges are std::string, "
 5422|   458k|                  "std::string_view, "
 5423|   458k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   458k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   458k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   458k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   458k|{
 5320|   458k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   458k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   458k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   458k|    {
 3000|   458k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   458k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   458k|    {
 2981|   458k|        return t.data();
 2982|   458k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   458k|    {
 3383|   458k|        return detail::to_address(ranges::begin(derived()));
 3384|   458k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.83M|{
  316|  2.83M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.83M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   827k|    {
 2869|   827k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   827k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   827k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   827k|    {
 2850|   827k|        return decay_copy(t.begin());
 2851|   827k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  8.15M|    {
 3480|  8.15M|        return m_iterator;
 3481|  8.15M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   458k|    {
 3339|   458k|        return static_cast<const D&>(*this);
 3340|   458k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   458k|    {
 3075|   458k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   458k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   458k|    {
 3041|   458k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   458k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  1.27M|{
 2094|  1.27M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.27M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  1.90M|    {
 3496|  1.90M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  1.90M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  1.91M|    {
 1740|  1.91M|        return has_value();
 1741|  1.91M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  3.56M|    {
  490|  3.56M|        return m_has_value;
  491|  3.56M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|   533k|    {
 1746|   533k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   533k|        return this->get_unexpected().error();
 1748|   533k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   533k|    {
  473|   533k|        return m_unexpected;
  474|   533k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  88.9k|        : base(unexpect, std::move(e.error())),
 1616|  88.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  88.9k|    {
 1618|  88.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  88.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  88.9k|          m_has_value(false)
  451|  88.9k|    {
  452|  88.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   458k|    {
 1316|   458k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   369k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   369k|                      ranges::iterator_t<SourceRange>>) {
 6677|   369k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   369k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.17M|    {
 2869|  2.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.17M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.17M|    {
 2850|  2.17M|        return decay_copy(t.begin());
 2851|  2.17M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   369k|{
 6662|   369k|    return ranges::end(source);
 6663|   369k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   369k|    {
 2926|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   369k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   369k|    {
 2908|   369k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   369k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  5.68M|    {
 3484|  5.68M|        return m_sentinel;
 3485|  5.68M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  1.11M|    {
 1795|  1.11M|        return value();
 1796|  1.11M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  1.11M|    {
 1769|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.11M|        return this->get_value();
 1771|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.11M|    {
  456|  1.11M|        return m_value;
  457|  1.11M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   369k|        : base(std::in_place, std::forward<U>(val)),
 1570|   369k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   369k|    {
 1572|   369k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   369k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   369k|    {
  442|   369k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  69.2k|    {
 8768|  69.2k|        return m_str;
 8769|  69.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   138k|{
 6110|   138k|    detail::check_scan_arg_types<Args...>();
 6111|   138k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   138k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5824|   209k|{
 5825|   209k|    constexpr bool default_constructible_constraint =
 5826|   209k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   209k|    static_assert(default_constructible_constraint,
 5828|   209k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   209k|    constexpr bool destructible_constraint =
 5831|   209k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   209k|    static_assert(destructible_constraint,
 5833|   209k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   209k|    constexpr bool non_reference_constraint =
 5836|   209k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   209k|    static_assert(non_reference_constraint,
 5838|   209k|                  "Scan argument types must not be references");
 5839|       |
 5840|   209k|    constexpr bool movable_constraint =
 5841|   209k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   209k|    static_assert(movable_constraint,
 5843|   209k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   209k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   209k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   209k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|   138k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   138k|    {
 6087|   138k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   138k|    {
 6095|   138k|        return {detail::make_arg<
 6096|   138k|            kind, Context,
 6097|   138k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   138k|                                 typename Context::char_type>::value>(args)...};
 6099|   138k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|   138k|{
 5875|   138k|    return make_value<Context>(value).ref_value;
 5876|   138k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5809|   149k|{
 5810|   149k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   149k|                                  needs_context_tag>) {
 5814|   149k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   149k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5648|   149k|    {                                                                        \
 5649|   149k|        return val;                                                          \
 5650|   149k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5778|   209k|{
 5779|   209k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   209k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   209k|    constexpr bool scannable_char =
 5783|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   209k|    static_assert(scannable_char,
 5785|   209k|                  "Cannot scan an argument of an unsupported character "
 5786|   209k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   209k|    constexpr bool scannable_const =
 5789|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   209k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   209k|    constexpr bool scannable_disabled =
 5793|   209k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   209k|    static_assert(scannable_disabled,
 5795|   209k|                  "Cannot scan an argument that has been disabled by "
 5796|   209k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   209k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   209k|    static_assert(
 5800|   209k|        scannable,
 5801|   209k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   209k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   209k|    return arg_value{arg};
 5805|   209k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5562|   209k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   209k|    {
 5564|   209k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6353|   195k|    {
 6354|   195k|        return m_values;
 6355|   195k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   138k|        : basic_scan_args(store.desc, store.args.data())
 6136|   138k|    {
 6137|   138k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|   851k|        : m_desc(desc), m_builtin_values(data)
 6188|   851k|    {
 6189|   851k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  4.23M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.23M|    static_cast<    \
  |  |  935|  4.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  4.23M|    static_cast<    \
  |  |  935|  4.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  4.23M|    {
 3466|  4.23M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|   851k|{
 8441|   851k|    return s;
 8442|   851k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|   851k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  69.2k|        : m_str(r.str)
 8763|  69.2k|    {
 8764|  69.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  74.5k|    {
 1740|  74.5k|        return has_value();
 1741|  74.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|   194k|    {
 1815|   194k|        return &value();
 1816|   194k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   194k|    {
 1769|   194k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   194k|        return this->get_value();
 1771|   194k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   369k|    {
 6434|   369k|        return ranges::begin(m_range);
 6435|   369k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  34.6k|{
 9750|  34.6k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.6k|                                   make_scan_args(result->values())));
 9753|  34.6k|    return result;
 9754|  34.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|   213k|{
 9479|   213k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   213k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   213k|{
 9414|   213k|#if !SCN_DISABLE_LOCALE
 9415|   213k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   213k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   213k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   213k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 9422|  42.3k|        return unexpected(result.error());
 9423|  42.3k|    }
 9424|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   213k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  5.38k|{
 9791|  5.38k|    auto result = make_scan_result<Source, T>();
 9792|  5.38k|    fill_scan_result(
 9793|  5.38k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.38k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.38k|    return result;
 9796|  5.38k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  32.3k|{
 9492|  32.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  32.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  32.3k|{
 9438|  32.3k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  32.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  32.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.23k, False: 28.1k]
  |  |  ------------------
  ------------------
 9442|  4.23k|        return unexpected(result.error());
 9443|  4.23k|    }
 9444|  28.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  32.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  10.7k|{
 5860|  10.7k|    check_scan_arg_types<T>();
 5861|       |
 5862|  10.7k|    basic_scan_arg<Context> arg;
 5863|  10.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  10.7k|    arg.m_value = make_value<Context>(value);
 5865|  10.7k|    return arg;
 5866|  10.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|   915k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  1.27M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  13.6k|    {
 6376|  13.6k|        return std::get<0>(m_values);
 6377|  13.6k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  30.4k|{
 9681|  30.4k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.4k|                                   make_scan_args(result->values())));
 9684|  30.4k|    return result;
 9685|  30.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9636|  65.4k|{
 9637|  65.4k|    return scan_result_type<Source, Args...>();
 9638|  65.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  65.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  65.4k|        : m_value(T{}), m_has_value(true)
  427|  65.4k|    {
  428|  65.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6570|  65.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6344|   191k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  65.4k|{
 9622|  65.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 50.6k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  50.6k|    else {
 9626|  50.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.6k|    static_cast<    \
  |  |  935|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.6k|    }
 9628|  65.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   166k|    {
  456|   166k|        return m_value;
  457|   166k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  60.9k|    {
 8768|  60.9k|        return m_str;
 8769|  60.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   122k|{
 6110|   122k|    detail::check_scan_arg_types<Args...>();
 6111|   122k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   122k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5824|   191k|{
 5825|   191k|    constexpr bool default_constructible_constraint =
 5826|   191k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   191k|    static_assert(default_constructible_constraint,
 5828|   191k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   191k|    constexpr bool destructible_constraint =
 5831|   191k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   191k|    static_assert(destructible_constraint,
 5833|   191k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   191k|    constexpr bool non_reference_constraint =
 5836|   191k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   191k|    static_assert(non_reference_constraint,
 5838|   191k|                  "Scan argument types must not be references");
 5839|       |
 5840|   191k|    constexpr bool movable_constraint =
 5841|   191k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   191k|    static_assert(movable_constraint,
 5843|   191k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   191k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   191k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   191k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|   122k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   122k|    {
 6087|   122k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   122k|    {
 6095|   122k|        return {detail::make_arg<
 6096|   122k|            kind, Context,
 6097|   122k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   122k|                                 typename Context::char_type>::value>(args)...};
 6099|   122k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|   122k|{
 5875|   122k|    return make_value<Context>(value).ref_value;
 5876|   122k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5809|   130k|{
 5810|   130k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   130k|                                  needs_context_tag>) {
 5814|   130k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   130k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5648|   130k|    {                                                                        \
 5649|   130k|        return val;                                                          \
 5650|   130k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5778|   191k|{
 5779|   191k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   191k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   191k|    constexpr bool scannable_char =
 5783|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   191k|    static_assert(scannable_char,
 5785|   191k|                  "Cannot scan an argument of an unsupported character "
 5786|   191k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   191k|    constexpr bool scannable_const =
 5789|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   191k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   191k|    constexpr bool scannable_disabled =
 5793|   191k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   191k|    static_assert(scannable_disabled,
 5795|   191k|                  "Cannot scan an argument that has been disabled by "
 5796|   191k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   191k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   191k|    static_assert(
 5800|   191k|        scannable,
 5801|   191k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   191k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   191k|    return arg_value{arg};
 5805|   191k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5562|   191k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   191k|    {
 5564|   191k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6353|   179k|    {
 6354|   179k|        return m_values;
 6355|   179k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   122k|        : basic_scan_args(store.desc, store.args.data())
 6136|   122k|    {
 6137|   122k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  60.9k|        : m_str(r.str)
 8763|  60.9k|    {
 8764|  60.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  65.4k|    {
 1740|  65.4k|        return has_value();
 1741|  65.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|   166k|    {
 1815|   166k|        return &value();
 1816|   166k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   166k|    {
 1769|   166k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   166k|        return this->get_value();
 1771|   166k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  30.4k|{
 9750|  30.4k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.4k|                                   make_scan_args(result->values())));
 9753|  30.4k|    return result;
 9754|  30.4k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.49k|{
 9791|  4.49k|    auto result = make_scan_result<Source, T>();
 9792|  4.49k|    fill_scan_result(
 9793|  4.49k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.49k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.49k|    return result;
 9796|  4.49k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  8.98k|{
 5860|  8.98k|    check_scan_arg_types<T>();
 5861|       |
 5862|  8.98k|    basic_scan_arg<Context> arg;
 5863|  8.98k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  8.98k|    arg.m_value = make_value<Context>(value);
 5865|  8.98k|    return arg;
 5866|  8.98k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  11.8k|    {
 6376|  11.8k|        return std::get<0>(m_values);
 6377|  11.8k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  40.4k|{
 9681|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.4k|                                   make_scan_args(result->values())));
 9684|  40.4k|    return result;
 9685|  40.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9636|  87.0k|{
 9637|  87.0k|    return scan_result_type<Source, Args...>();
 9638|  87.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  87.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  87.0k|        : m_value(T{}), m_has_value(true)
  427|  87.0k|    {
  428|  87.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6570|  87.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6344|   234k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  87.0k|{
 9622|  87.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 72.2k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  72.2k|    else {
 9626|  72.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  72.2k|    static_cast<    \
  |  |  935|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  72.2k|    }
 9628|  87.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   348k|    {
  490|   348k|        return m_has_value;
  491|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   231k|    {
  456|   231k|        return m_value;
  457|   231k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  80.8k|    {
 8768|  80.8k|        return m_str;
 8769|  80.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   161k|{
 6110|   161k|    detail::check_scan_arg_types<Args...>();
 6111|   161k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   161k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5824|   234k|{
 5825|   234k|    constexpr bool default_constructible_constraint =
 5826|   234k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   234k|    static_assert(default_constructible_constraint,
 5828|   234k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   234k|    constexpr bool destructible_constraint =
 5831|   234k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   234k|    static_assert(destructible_constraint,
 5833|   234k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   234k|    constexpr bool non_reference_constraint =
 5836|   234k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   234k|    static_assert(non_reference_constraint,
 5838|   234k|                  "Scan argument types must not be references");
 5839|       |
 5840|   234k|    constexpr bool movable_constraint =
 5841|   234k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   234k|    static_assert(movable_constraint,
 5843|   234k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   234k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   234k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   234k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|   161k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   161k|    {
 6087|   161k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   161k|    {
 6095|   161k|        return {detail::make_arg<
 6096|   161k|            kind, Context,
 6097|   161k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   161k|                                 typename Context::char_type>::value>(args)...};
 6099|   161k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|   161k|{
 5875|   161k|    return make_value<Context>(value).ref_value;
 5876|   161k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5809|   173k|{
 5810|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   173k|                                  needs_context_tag>) {
 5814|   173k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   173k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5648|   173k|    {                                                                        \
 5649|   173k|        return val;                                                          \
 5650|   173k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5778|   234k|{
 5779|   234k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   234k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   234k|    constexpr bool scannable_char =
 5783|   234k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   234k|    static_assert(scannable_char,
 5785|   234k|                  "Cannot scan an argument of an unsupported character "
 5786|   234k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   234k|    constexpr bool scannable_const =
 5789|   234k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   234k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   234k|    constexpr bool scannable_disabled =
 5793|   234k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   234k|    static_assert(scannable_disabled,
 5795|   234k|                  "Cannot scan an argument that has been disabled by "
 5796|   234k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   234k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   234k|    static_assert(
 5800|   234k|        scannable,
 5801|   234k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   234k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   234k|    return arg_value{arg};
 5805|   234k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5562|   234k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   234k|    {
 5564|   234k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6353|   219k|    {
 6354|   219k|        return m_values;
 6355|   219k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   161k|        : basic_scan_args(store.desc, store.args.data())
 6136|   161k|    {
 6137|   161k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  80.8k|        : m_str(r.str)
 8763|  80.8k|    {
 8764|  80.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  87.0k|    {
 1740|  87.0k|        return has_value();
 1741|  87.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|   231k|    {
 1815|   231k|        return &value();
 1816|   231k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   231k|    {
 1769|   231k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   231k|        return this->get_value();
 1771|   231k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  40.4k|{
 9750|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.4k|                                   make_scan_args(result->values())));
 9753|  40.4k|    return result;
 9754|  40.4k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.21k|{
 9791|  6.21k|    auto result = make_scan_result<Source, T>();
 9792|  6.21k|    fill_scan_result(
 9793|  6.21k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.21k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.21k|    return result;
 9796|  6.21k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.2k|{
 5860|  12.2k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.2k|    basic_scan_arg<Context> arg;
 5863|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.2k|    arg.m_value = make_value<Context>(value);
 5865|  12.2k|    return arg;
 5866|  12.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  15.1k|    {
 6376|  15.1k|        return std::get<0>(m_values);
 6377|  15.1k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  33.0k|{
 9681|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.0k|                                   make_scan_args(result->values())));
 9684|  33.0k|    return result;
 9685|  33.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9636|  70.9k|{
 9637|  70.9k|    return scan_result_type<Source, Args...>();
 9638|  70.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  70.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  70.9k|        : m_value(T{}), m_has_value(true)
  427|  70.9k|    {
  428|  70.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6570|  70.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6344|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  70.9k|{
 9622|  70.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 56.1k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  56.1k|    else {
 9626|  56.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.1k|    static_cast<    \
  |  |  935|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.1k|    }
 9628|  70.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   283k|    {
  490|   283k|        return m_has_value;
  491|   283k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   183k|    {
  456|   183k|        return m_value;
  457|   183k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  66.0k|    {
 8768|  66.0k|        return m_str;
 8769|  66.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   132k|{
 6110|   132k|    detail::check_scan_arg_types<Args...>();
 6111|   132k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   132k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5824|   202k|{
 5825|   202k|    constexpr bool default_constructible_constraint =
 5826|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   202k|    static_assert(default_constructible_constraint,
 5828|   202k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   202k|    constexpr bool destructible_constraint =
 5831|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   202k|    static_assert(destructible_constraint,
 5833|   202k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   202k|    constexpr bool non_reference_constraint =
 5836|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   202k|    static_assert(non_reference_constraint,
 5838|   202k|                  "Scan argument types must not be references");
 5839|       |
 5840|   202k|    constexpr bool movable_constraint =
 5841|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   202k|    static_assert(movable_constraint,
 5843|   202k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|   132k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   132k|    {
 6087|   132k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   132k|    {
 6095|   132k|        return {detail::make_arg<
 6096|   132k|            kind, Context,
 6097|   132k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   132k|                                 typename Context::char_type>::value>(args)...};
 6099|   132k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|   132k|{
 5875|   132k|    return make_value<Context>(value).ref_value;
 5876|   132k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5809|   142k|{
 5810|   142k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   142k|                                  needs_context_tag>) {
 5814|   142k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   142k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5648|   142k|    {                                                                        \
 5649|   142k|        return val;                                                          \
 5650|   142k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5778|   202k|{
 5779|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   202k|    constexpr bool scannable_char =
 5783|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   202k|    static_assert(scannable_char,
 5785|   202k|                  "Cannot scan an argument of an unsupported character "
 5786|   202k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   202k|    constexpr bool scannable_const =
 5789|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   202k|    constexpr bool scannable_disabled =
 5793|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   202k|    static_assert(scannable_disabled,
 5795|   202k|                  "Cannot scan an argument that has been disabled by "
 5796|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   202k|    static_assert(
 5800|   202k|        scannable,
 5801|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   202k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   202k|    return arg_value{arg};
 5805|   202k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5562|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   202k|    {
 5564|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6353|   189k|    {
 6354|   189k|        return m_values;
 6355|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   132k|        : basic_scan_args(store.desc, store.args.data())
 6136|   132k|    {
 6137|   132k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.0k|        : m_str(r.str)
 8763|  66.0k|    {
 8764|  66.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  70.9k|    {
 1740|  70.9k|        return has_value();
 1741|  70.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|   183k|    {
 1815|   183k|        return &value();
 1816|   183k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   183k|    {
 1769|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   183k|        return this->get_value();
 1771|   183k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  33.0k|{
 9750|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.0k|                                   make_scan_args(result->values())));
 9753|  33.0k|    return result;
 9754|  33.0k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  4.93k|{
 9791|  4.93k|    auto result = make_scan_result<Source, T>();
 9792|  4.93k|    fill_scan_result(
 9793|  4.93k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.93k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.93k|    return result;
 9796|  4.93k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.85k|{
 5860|  9.85k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.85k|    basic_scan_arg<Context> arg;
 5863|  9.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.85k|    arg.m_value = make_value<Context>(value);
 5865|  9.85k|    return arg;
 5866|  9.85k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.7k|    {
 6376|  12.7k|        return std::get<0>(m_values);
 6377|  12.7k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  41.1k|{
 9681|  41.1k|    auto result = make_scan_result<Source, Args...>();
 9682|  41.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  41.1k|                                   make_scan_args(result->values())));
 9684|  41.1k|    return result;
 9685|  41.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9636|  88.5k|{
 9637|  88.5k|    return scan_result_type<Source, Args...>();
 9638|  88.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  88.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.5k|        : m_value(T{}), m_has_value(true)
  427|  88.5k|    {
  428|  88.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6570|  88.5k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6344|   237k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  88.5k|{
 9622|  88.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 73.7k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  73.7k|    else {
 9626|  73.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  73.7k|    static_cast<    \
  |  |  935|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  73.7k|    }
 9628|  88.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   354k|    {
  490|   354k|        return m_has_value;
  491|   354k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   236k|    {
  456|   236k|        return m_value;
  457|   236k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  82.2k|    {
 8768|  82.2k|        return m_str;
 8769|  82.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   164k|{
 6110|   164k|    detail::check_scan_arg_types<Args...>();
 6111|   164k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   164k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5824|   237k|{
 5825|   237k|    constexpr bool default_constructible_constraint =
 5826|   237k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   237k|    static_assert(default_constructible_constraint,
 5828|   237k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   237k|    constexpr bool destructible_constraint =
 5831|   237k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   237k|    static_assert(destructible_constraint,
 5833|   237k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   237k|    constexpr bool non_reference_constraint =
 5836|   237k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   237k|    static_assert(non_reference_constraint,
 5838|   237k|                  "Scan argument types must not be references");
 5839|       |
 5840|   237k|    constexpr bool movable_constraint =
 5841|   237k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   237k|    static_assert(movable_constraint,
 5843|   237k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   237k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   237k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   237k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|   164k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   164k|    {
 6087|   164k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   164k|    {
 6095|   164k|        return {detail::make_arg<
 6096|   164k|            kind, Context,
 6097|   164k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   164k|                                 typename Context::char_type>::value>(args)...};
 6099|   164k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|   164k|{
 5875|   164k|    return make_value<Context>(value).ref_value;
 5876|   164k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5809|   176k|{
 5810|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   176k|                                  needs_context_tag>) {
 5814|   176k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   176k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5648|   176k|    {                                                                        \
 5649|   176k|        return val;                                                          \
 5650|   176k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5778|   237k|{
 5779|   237k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   237k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   237k|    constexpr bool scannable_char =
 5783|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   237k|    static_assert(scannable_char,
 5785|   237k|                  "Cannot scan an argument of an unsupported character "
 5786|   237k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   237k|    constexpr bool scannable_const =
 5789|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   237k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   237k|    constexpr bool scannable_disabled =
 5793|   237k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   237k|    static_assert(scannable_disabled,
 5795|   237k|                  "Cannot scan an argument that has been disabled by "
 5796|   237k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   237k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   237k|    static_assert(
 5800|   237k|        scannable,
 5801|   237k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   237k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   237k|    return arg_value{arg};
 5805|   237k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5562|   237k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   237k|    {
 5564|   237k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6353|   222k|    {
 6354|   222k|        return m_values;
 6355|   222k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   164k|        : basic_scan_args(store.desc, store.args.data())
 6136|   164k|    {
 6137|   164k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  82.2k|        : m_str(r.str)
 8763|  82.2k|    {
 8764|  82.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  88.5k|    {
 1740|  88.5k|        return has_value();
 1741|  88.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|   236k|    {
 1815|   236k|        return &value();
 1816|   236k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   236k|    {
 1769|   236k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   236k|        return this->get_value();
 1771|   236k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  41.1k|{
 9750|  41.1k|    auto result = make_scan_result<Source, Args...>();
 9751|  41.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  41.1k|                                   make_scan_args(result->values())));
 9753|  41.1k|    return result;
 9754|  41.1k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  6.32k|{
 9791|  6.32k|    auto result = make_scan_result<Source, T>();
 9792|  6.32k|    fill_scan_result(
 9793|  6.32k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.32k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.32k|    return result;
 9796|  6.32k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  12.4k|{
 5860|  12.4k|    check_scan_arg_types<T>();
 5861|       |
 5862|  12.4k|    basic_scan_arg<Context> arg;
 5863|  12.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  12.4k|    arg.m_value = make_value<Context>(value);
 5865|  12.4k|    return arg;
 5866|  12.4k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  15.3k|    {
 6376|  15.3k|        return std::get<0>(m_values);
 6377|  15.3k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|  33.3k|{
 9681|  33.3k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.3k|                                   make_scan_args(result->values())));
 9684|  33.3k|    return result;
 9685|  33.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9636|  71.7k|{
 9637|  71.7k|    return scan_result_type<Source, Args...>();
 9638|  71.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.7k|        : m_value(T{}), m_has_value(true)
  427|  71.7k|    {
  428|  71.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6570|  71.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6344|   204k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  71.7k|{
 9622|  71.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 56.9k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  56.9k|    else {
 9626|  56.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.9k|    static_cast<    \
  |  |  935|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.9k|    }
 9628|  71.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   287k|    {
  490|   287k|        return m_has_value;
  491|   287k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   185k|    {
  456|   185k|        return m_value;
  457|   185k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|  66.7k|    {
 8768|  66.7k|        return m_str;
 8769|  66.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   133k|{
 6110|   133k|    detail::check_scan_arg_types<Args...>();
 6111|   133k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   133k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5824|   204k|{
 5825|   204k|    constexpr bool default_constructible_constraint =
 5826|   204k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|   204k|    static_assert(default_constructible_constraint,
 5828|   204k|                  "Scan argument types must be default constructible");
 5829|       |
 5830|   204k|    constexpr bool destructible_constraint =
 5831|   204k|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|   204k|    static_assert(destructible_constraint,
 5833|   204k|                  "Scan argument types must be Destructible");
 5834|       |
 5835|   204k|    constexpr bool non_reference_constraint =
 5836|   204k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|   204k|    static_assert(non_reference_constraint,
 5838|   204k|                  "Scan argument types must not be references");
 5839|       |
 5840|   204k|    constexpr bool movable_constraint =
 5841|   204k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|   204k|    static_assert(movable_constraint,
 5843|   204k|                  "Scan argument types must be move constructible");
 5844|       |
 5845|   204k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|   204k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|   204k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|   133k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   133k|    {
 6087|   133k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   133k|    {
 6095|   133k|        return {detail::make_arg<
 6096|   133k|            kind, Context,
 6097|   133k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   133k|                                 typename Context::char_type>::value>(args)...};
 6099|   133k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|   133k|{
 5875|   133k|    return make_value<Context>(value).ref_value;
 5876|   133k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5809|   143k|{
 5810|   143k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   143k|                                  needs_context_tag>) {
 5814|   143k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   143k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5648|   143k|    {                                                                        \
 5649|   143k|        return val;                                                          \
 5650|   143k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5778|   204k|{
 5779|   204k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|   204k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|   204k|    constexpr bool scannable_char =
 5783|   204k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|   204k|    static_assert(scannable_char,
 5785|   204k|                  "Cannot scan an argument of an unsupported character "
 5786|   204k|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|   204k|    constexpr bool scannable_const =
 5789|   204k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|   204k|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|   204k|    constexpr bool scannable_disabled =
 5793|   204k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|   204k|    static_assert(scannable_disabled,
 5795|   204k|                  "Cannot scan an argument that has been disabled by "
 5796|   204k|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|   204k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|   204k|    static_assert(
 5800|   204k|        scannable,
 5801|   204k|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|   204k|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|   204k|    return arg_value{arg};
 5805|   204k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5562|   204k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|   204k|    {
 5564|   204k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6353|   191k|    {
 6354|   191k|        return m_values;
 6355|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   133k|        : basic_scan_args(store.desc, store.args.data())
 6136|   133k|    {
 6137|   133k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.7k|        : m_str(r.str)
 8763|  66.7k|    {
 8764|  66.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.7k|    {
 1740|  71.7k|        return has_value();
 1741|  71.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|   185k|    {
 1815|   185k|        return &value();
 1816|   185k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   185k|    {
 1769|   185k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   185k|        return this->get_value();
 1771|   185k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|  33.3k|{
 9750|  33.3k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.3k|                                   make_scan_args(result->values())));
 9753|  33.3k|    return result;
 9754|  33.3k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  5.00k|{
 9791|  5.00k|    auto result = make_scan_result<Source, T>();
 9792|  5.00k|    fill_scan_result(
 9793|  5.00k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.00k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.00k|    return result;
 9796|  5.00k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  9.97k|{
 5860|  9.97k|    check_scan_arg_types<T>();
 5861|       |
 5862|  9.97k|    basic_scan_arg<Context> arg;
 5863|  9.97k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  9.97k|    arg.m_value = make_value<Context>(value);
 5865|  9.97k|    return arg;
 5866|  9.97k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  12.8k|    {
 6376|  12.8k|        return std::get<0>(m_values);
 6377|  12.8k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  88.9k|    {
 2869|  88.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  88.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  88.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  88.9k|    {
 2850|  88.9k|        return decay_copy(t.begin());
 2851|  88.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  9.47M|{
 2094|  9.47M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.47M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   915k|    {
 2926|   915k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   915k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   915k|    {
 2908|   915k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   915k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   915k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  34.6k|{
 9681|  34.6k|    auto result = make_scan_result<Source, Args...>();
 9682|  34.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  34.6k|                                   make_scan_args(result->values())));
 9684|  34.6k|    return result;
 9685|  34.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9636|  74.6k|{
 9637|  74.6k|    return scan_result_type<Source, Args...>();
 9638|  74.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  74.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  74.6k|        : m_value(T{}), m_has_value(true)
  427|  74.6k|    {
  428|  74.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6570|  74.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|   457k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   457k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  74.6k|{
 9622|  74.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  74.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 59.7k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  59.7k|    else {
 9626|  59.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  59.7k|    static_cast<    \
  |  |  935|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  59.7k|    }
 9628|  74.6k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   457k|    {
 1740|   457k|        return has_value();
 1741|   457k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   915k|    {
  490|   915k|        return m_has_value;
  491|   915k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  88.9k|    {
 1746|  88.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  88.9k|        return this->get_unexpected().error();
 1748|  88.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  88.9k|    {
  473|  88.9k|        return m_unexpected;
  474|  88.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   298k|    {
  490|   298k|        return m_has_value;
  491|   298k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   194k|    {
  456|   194k|        return m_value;
  457|   194k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   368k|    {
 6445|   368k|        m_range = std::forward<Other>(r);
 6446|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   368k|    {
 1795|   368k|        return value();
 1796|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   368k|    {
 1769|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   368k|        return this->get_value();
 1771|   368k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   368k|    {
  456|   368k|        return m_value;
  457|   368k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|   212k|{
 9461|   212k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   212k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   212k|{
 9398|   212k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   212k|    auto result = vscan_impl(buffer, format, args);
 9401|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 9402|  42.3k|        return unexpected(result.error());
 9403|  42.3k|    }
 9404|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   212k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   457k|{
 5381|   457k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   457k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   457k|                  "\n"
 5385|   457k|                  "Unsupported range type given as input to a scanning "
 5386|   457k|                  "function.\n"
 5387|   457k|                  "A range needs to have a character type (value type) "
 5388|   457k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   457k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   457k|                  "to be included.\n"
 5391|   457k|                  "See the scnlib documentation for more details.");
 5392|   457k|    static_assert(
 5393|   457k|        !std::is_same_v<T, custom_char_traits>,
 5394|   457k|        "\n"
 5395|   457k|        "Unsupported range type given as input to a scanning "
 5396|   457k|        "function.\n"
 5397|   457k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   457k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   457k|        "not supported.");
 5400|   457k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   457k|                  "\n"
 5402|   457k|                  "Unsupported range type given as input to a scanning "
 5403|   457k|                  "function.\n"
 5404|   457k|                  "file_marker_found cannot be used as an "
 5405|   457k|                  "source range type to scn::scan.\n"
 5406|   457k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   457k|                  "and do not provide an explicit source range, "
 5408|   457k|                  "or use scn::scan with a FILE* directly.");
 5409|   457k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   457k|                  "\n"
 5411|   457k|                  "Unsupported range type given as input to a scanning "
 5412|   457k|                  "function.\n"
 5413|   457k|                  "In order to be scannable, a range needs to satisfy "
 5414|   457k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   457k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   457k|                  "\n"
 5417|   457k|                  "Unsupported range type given as input to a scanning "
 5418|   457k|                  "function.\n"
 5419|   457k|                  "A range needs to model forward_range and have a valid "
 5420|   457k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   457k|                  "Examples of scannable ranges are std::string, "
 5422|   457k|                  "std::string_view, "
 5423|   457k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   457k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   457k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   457k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   457k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   457k|    else {
 5366|   457k|        return make_forward_scan_buffer(r);
 5367|   457k|    }
 5368|   457k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   457k|{
 5185|   457k|    return basic_scan_forward_buffer_impl(range);
 5186|   457k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   457k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   457k|          m_cursor(ranges::begin(*m_range))
 4766|   457k|    {
 4767|   457k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   457k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   457k|    {
 4738|   457k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   457k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   457k|    {
 4429|   457k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   457k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   826k|    {
 2869|   826k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   826k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   826k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   826k|    {
 2850|   826k|        return decay_copy(t.begin());
 2851|   826k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  1.19M|    {
 3480|  1.19M|        return m_iterator;
 3481|  1.19M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  2.39M|    {
 4771|  2.39M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 146k, False: 2.25M]
  ------------------
 4772|   146k|            return false;
 4773|   146k|        }
 4774|  2.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.25M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.25M|        }
 4777|  2.25M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 1.82M, False: 423k]
  ------------------
 4778|  1.82M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  1.82M|                                          this->m_current_view.begin(),
 4780|  1.82M|                                          this->m_current_view.end());
 4781|  1.82M|        }
 4782|  2.25M|        m_latest = *m_cursor;
 4783|  2.25M|        ++m_cursor;
 4784|  2.25M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.25M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.25M|        }
 4788|  2.25M|        return true;
 4789|  2.39M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  6.90M|    {
 2926|  6.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  6.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  6.90M|    {
 2908|  6.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  6.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  6.90M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  7.27M|    {
 3484|  7.27M|        return m_sentinel;
 3485|  7.27M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   457k|    {
 4346|   457k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   457k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   457k|        return true;
 4348|   457k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  88.9k|        : base(unexpect, std::move(e.error())),
 1616|  88.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  88.9k|    {
 1618|  88.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  88.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  88.9k|          m_has_value(false)
  451|  88.9k|    {
  452|  88.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   457k|    {
 1316|   457k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   368k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   368k|                      ranges::iterator_t<SourceRange>>) {
 6677|   368k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   368k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   368k|    {
 2869|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   368k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   368k|    {
 2850|   368k|        return decay_copy(t.begin());
 2851|   368k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|   368k|{
 6662|   368k|    return ranges::end(source);
 6663|   368k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   368k|    {
 2926|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   368k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   368k|    {
 2908|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   368k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   368k|        : base(std::in_place, std::forward<U>(val)),
 1570|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   368k|    {
 1572|   368k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   368k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   368k|    {
  442|   368k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  69.2k|    {
 8768|  69.2k|        return m_str;
 8769|  69.2k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   826k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   826k|    static_cast<    \
  |  |  935|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   826k|    static_cast<    \
  |  |  935|   826k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   826k|    {
 3466|   826k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  69.2k|        : m_str(r.str)
 8763|  69.2k|    {
 8764|  69.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  74.6k|    {
 1740|  74.6k|        return has_value();
 1741|  74.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|   194k|    {
 1815|   194k|        return &value();
 1816|   194k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   194k|    {
 1769|   194k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   194k|        return this->get_value();
 1771|   194k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|   368k|    {
 6434|   368k|        return ranges::begin(m_range);
 6435|   368k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  34.6k|{
 9750|  34.6k|    auto result = make_scan_result<Source, Args...>();
 9751|  34.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  34.6k|                                   make_scan_args(result->values())));
 9753|  34.6k|    return result;
 9754|  34.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|   212k|{
 9479|   212k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   212k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   212k|{
 9414|   212k|#if !SCN_DISABLE_LOCALE
 9415|   212k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   212k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   212k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   212k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 42.3k, False: 170k]
  |  |  ------------------
  ------------------
 9422|  42.3k|        return unexpected(result.error());
 9423|  42.3k|    }
 9424|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   212k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  5.37k|{
 9791|  5.37k|    auto result = make_scan_result<Source, T>();
 9792|  5.37k|    fill_scan_result(
 9793|  5.37k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  5.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  5.37k|                            detail::make_arg<scan_context>(result->value())));
 9795|  5.37k|    return result;
 9796|  5.37k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|  31.8k|{
 9492|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  31.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  31.8k|{
 9438|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.23k, False: 27.6k]
  |  |  ------------------
  ------------------
 9442|  4.23k|        return unexpected(result.error());
 9443|  4.23k|    }
 9444|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  31.8k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  30.5k|{
 9681|  30.5k|    auto result = make_scan_result<Source, Args...>();
 9682|  30.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  30.5k|                                   make_scan_args(result->values())));
 9684|  30.5k|    return result;
 9685|  30.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9636|  65.4k|{
 9637|  65.4k|    return scan_result_type<Source, Args...>();
 9638|  65.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  65.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  65.4k|        : m_value(T{}), m_has_value(true)
  427|  65.4k|    {
  428|  65.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6570|  65.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  65.4k|{
 9622|  65.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 50.6k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  50.6k|    else {
 9626|  50.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  50.6k|    static_cast<    \
  |  |  935|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  50.6k|    }
 9628|  65.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   261k|    {
  490|   261k|        return m_has_value;
  491|   261k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   166k|    {
  456|   166k|        return m_value;
  457|   166k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  61.0k|    {
 8768|  61.0k|        return m_str;
 8769|  61.0k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  61.0k|        : m_str(r.str)
 8763|  61.0k|    {
 8764|  61.0k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  65.4k|    {
 1740|  65.4k|        return has_value();
 1741|  65.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|   166k|    {
 1815|   166k|        return &value();
 1816|   166k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   166k|    {
 1769|   166k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   166k|        return this->get_value();
 1771|   166k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  30.5k|{
 9750|  30.5k|    auto result = make_scan_result<Source, Args...>();
 9751|  30.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  30.5k|                                   make_scan_args(result->values())));
 9753|  30.5k|    return result;
 9754|  30.5k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.48k|{
 9791|  4.48k|    auto result = make_scan_result<Source, T>();
 9792|  4.48k|    fill_scan_result(
 9793|  4.48k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.48k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.48k|    return result;
 9796|  4.48k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  40.2k|{
 9681|  40.2k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.2k|                                   make_scan_args(result->values())));
 9684|  40.2k|    return result;
 9685|  40.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9636|  86.5k|{
 9637|  86.5k|    return scan_result_type<Source, Args...>();
 9638|  86.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  86.5k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  86.5k|        : m_value(T{}), m_has_value(true)
  427|  86.5k|    {
  428|  86.5k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6570|  86.5k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  86.5k|{
 9622|  86.5k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  86.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 71.7k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  71.7k|    else {
 9626|  71.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  71.7k|    static_cast<    \
  |  |  935|  71.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  71.7k|    }
 9628|  86.5k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   346k|    {
  490|   346k|        return m_has_value;
  491|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   230k|    {
  456|   230k|        return m_value;
  457|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  80.5k|    {
 8768|  80.5k|        return m_str;
 8769|  80.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  80.5k|        : m_str(r.str)
 8763|  80.5k|    {
 8764|  80.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  86.5k|    {
 1740|  86.5k|        return has_value();
 1741|  86.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|   230k|    {
 1815|   230k|        return &value();
 1816|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   230k|    {
 1769|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   230k|        return this->get_value();
 1771|   230k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  40.2k|{
 9750|  40.2k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.2k|                                   make_scan_args(result->values())));
 9753|  40.2k|    return result;
 9754|  40.2k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  6.01k|{
 9791|  6.01k|    auto result = make_scan_result<Source, T>();
 9792|  6.01k|    fill_scan_result(
 9793|  6.01k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.01k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.01k|    return result;
 9796|  6.01k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  33.0k|{
 9681|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.0k|                                   make_scan_args(result->values())));
 9684|  33.0k|    return result;
 9685|  33.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9636|  71.0k|{
 9637|  71.0k|    return scan_result_type<Source, Args...>();
 9638|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  71.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.0k|        : m_value(T{}), m_has_value(true)
  427|  71.0k|    {
  428|  71.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6570|  71.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  71.0k|{
 9622|  71.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 56.1k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  56.1k|    else {
 9626|  56.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.1k|    static_cast<    \
  |  |  935|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.1k|    }
 9628|  71.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   284k|    {
  490|   284k|        return m_has_value;
  491|   284k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   183k|    {
  456|   183k|        return m_value;
  457|   183k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  66.1k|    {
 8768|  66.1k|        return m_str;
 8769|  66.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.1k|        : m_str(r.str)
 8763|  66.1k|    {
 8764|  66.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  71.0k|    {
 1740|  71.0k|        return has_value();
 1741|  71.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|   183k|    {
 1815|   183k|        return &value();
 1816|   183k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   183k|    {
 1769|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   183k|        return this->get_value();
 1771|   183k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  33.0k|{
 9750|  33.0k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.0k|                                   make_scan_args(result->values())));
 9753|  33.0k|    return result;
 9754|  33.0k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.91k|{
 9791|  4.91k|    auto result = make_scan_result<Source, T>();
 9792|  4.91k|    fill_scan_result(
 9793|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.91k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.91k|    return result;
 9796|  4.91k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  40.9k|{
 9681|  40.9k|    auto result = make_scan_result<Source, Args...>();
 9682|  40.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  40.9k|                                   make_scan_args(result->values())));
 9684|  40.9k|    return result;
 9685|  40.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9636|  88.0k|{
 9637|  88.0k|    return scan_result_type<Source, Args...>();
 9638|  88.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  88.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  88.0k|        : m_value(T{}), m_has_value(true)
  427|  88.0k|    {
  428|  88.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6570|  88.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  88.0k|{
 9622|  88.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 73.2k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  73.2k|    else {
 9626|  73.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  73.2k|    static_cast<    \
  |  |  935|  73.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  73.2k|    }
 9628|  88.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   352k|    {
  490|   352k|        return m_has_value;
  491|   352k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   234k|    {
  456|   234k|        return m_value;
  457|   234k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  81.9k|    {
 8768|  81.9k|        return m_str;
 8769|  81.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  81.9k|        : m_str(r.str)
 8763|  81.9k|    {
 8764|  81.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  88.0k|    {
 1740|  88.0k|        return has_value();
 1741|  88.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|   234k|    {
 1815|   234k|        return &value();
 1816|   234k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   234k|    {
 1769|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   234k|        return this->get_value();
 1771|   234k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  40.9k|{
 9750|  40.9k|    auto result = make_scan_result<Source, Args...>();
 9751|  40.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  40.9k|                                   make_scan_args(result->values())));
 9753|  40.9k|    return result;
 9754|  40.9k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  6.11k|{
 9791|  6.11k|    auto result = make_scan_result<Source, T>();
 9792|  6.11k|    fill_scan_result(
 9793|  6.11k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  6.11k|                            detail::make_arg<scan_context>(result->value())));
 9795|  6.11k|    return result;
 9796|  6.11k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|  33.4k|{
 9681|  33.4k|    auto result = make_scan_result<Source, Args...>();
 9682|  33.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|  33.4k|                                   make_scan_args(result->values())));
 9684|  33.4k|    return result;
 9685|  33.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9636|  71.7k|{
 9637|  71.7k|    return scan_result_type<Source, Args...>();
 9638|  71.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  71.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  71.7k|        : m_value(T{}), m_has_value(true)
  427|  71.7k|    {
  428|  71.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6570|  71.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  71.7k|{
 9622|  71.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.8k, False: 56.9k]
  |  |  ------------------
  ------------------
 9623|  14.8k|        out = unexpected(in.error());
 9624|  14.8k|    }
 9625|  56.9k|    else {
 9626|  56.9k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  56.9k|    static_cast<    \
  |  |  935|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|  56.9k|    }
 9628|  71.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  14.8k|    {
 1316|  14.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  14.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  14.8k|    {
  903|  14.8k|        assign_common(std::move(other));
  904|  14.8k|        return *this;
  905|  14.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  14.8k|    {
  950|  14.8k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 14.8k, False: 0]
  ------------------
  951|  14.8k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 14.8k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  14.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  14.8k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   287k|    {
  490|   287k|        return m_has_value;
  491|   287k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   185k|    {
  456|   185k|        return m_value;
  457|   185k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  14.8k|    {
 1046|  14.8k|        this->destroy_value();
 1047|  14.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  14.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  14.8k|    {
  504|  14.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  14.8k|                                  std::forward<Args>(args)...);
  506|  14.8k|        m_has_value = false;
  507|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  14.8k|    {
  481|  14.8k|        return std::move(m_unexpected);
  482|  14.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|  66.8k|    {
 8768|  66.8k|        return m_str;
 8769|  66.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|  66.8k|        : m_str(r.str)
 8763|  66.8k|    {
 8764|  66.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  71.7k|    {
 1740|  71.7k|        return has_value();
 1741|  71.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|   185k|    {
 1815|   185k|        return &value();
 1816|   185k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   185k|    {
 1769|   185k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   185k|        return this->get_value();
 1771|   185k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|  33.4k|{
 9750|  33.4k|    auto result = make_scan_result<Source, Args...>();
 9751|  33.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|  33.4k|                                   make_scan_args(result->values())));
 9753|  33.4k|    return result;
 9754|  33.4k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  4.97k|{
 9791|  4.97k|    auto result = make_scan_result<Source, T>();
 9792|  4.97k|    fill_scan_result(
 9793|  4.97k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  4.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  4.97k|                            detail::make_arg<scan_context>(result->value())));
 9795|  4.97k|    return result;
 9796|  4.97k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   179k|    {
 2869|   179k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   179k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   179k|    {
 2850|   179k|        return decay_copy(t.begin());
 2851|   179k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  1.15M|{
 2094|  1.15M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.15M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   363k|    {
 2926|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   363k|    {
 2908|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   363k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9636|  30.1k|{
 9637|  30.1k|    return scan_result_type<Source, Args...>();
 9638|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  30.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.1k|        : m_value(T{}), m_has_value(true)
  427|  30.1k|    {
  428|  30.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6570|  30.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   181k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   181k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.1k|{
 9622|  30.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 500]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    500|    else {
 9626|    500|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    500|    static_cast<    \
  |  |  935|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    500|    }
 9628|  30.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   181k|    {
 1740|   181k|        return has_value();
 1741|   181k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   362k|    {
  490|   362k|        return m_has_value;
  491|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   177k|    {
 1746|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   177k|        return this->get_unexpected().error();
 1748|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   177k|    {
  473|   177k|        return m_unexpected;
  474|   177k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|  3.34k|    {
 6445|  3.34k|        m_range = std::forward<Other>(r);
 6446|  3.34k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  3.34k|    {
 1795|  3.34k|        return value();
 1796|  3.34k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  3.34k|    {
 1769|  3.34k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.34k|        return this->get_value();
 1771|  3.34k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.34k|    {
  456|  3.34k|        return m_value;
  457|  3.34k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|  86.2k|{
 9398|  86.2k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  86.2k|    auto result = vscan_impl(buffer, format, args);
 9401|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.7k, False: 1.54k]
  |  |  ------------------
  ------------------
 9402|  84.7k|        return unexpected(result.error());
 9403|  84.7k|    }
 9404|  1.54k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  86.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   181k|{
 5381|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   181k|                  "\n"
 5385|   181k|                  "Unsupported range type given as input to a scanning "
 5386|   181k|                  "function.\n"
 5387|   181k|                  "A range needs to have a character type (value type) "
 5388|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   181k|                  "to be included.\n"
 5391|   181k|                  "See the scnlib documentation for more details.");
 5392|   181k|    static_assert(
 5393|   181k|        !std::is_same_v<T, custom_char_traits>,
 5394|   181k|        "\n"
 5395|   181k|        "Unsupported range type given as input to a scanning "
 5396|   181k|        "function.\n"
 5397|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   181k|        "not supported.");
 5400|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   181k|                  "\n"
 5402|   181k|                  "Unsupported range type given as input to a scanning "
 5403|   181k|                  "function.\n"
 5404|   181k|                  "file_marker_found cannot be used as an "
 5405|   181k|                  "source range type to scn::scan.\n"
 5406|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   181k|                  "and do not provide an explicit source range, "
 5408|   181k|                  "or use scn::scan with a FILE* directly.");
 5409|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   181k|                  "\n"
 5411|   181k|                  "Unsupported range type given as input to a scanning "
 5412|   181k|                  "function.\n"
 5413|   181k|                  "In order to be scannable, a range needs to satisfy "
 5414|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   181k|                  "\n"
 5417|   181k|                  "Unsupported range type given as input to a scanning "
 5418|   181k|                  "function.\n"
 5419|   181k|                  "A range needs to model forward_range and have a valid "
 5420|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   181k|                  "Examples of scannable ranges are std::string, "
 5422|   181k|                  "std::string_view, "
 5423|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   181k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   181k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   181k|{
 5320|   181k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   181k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   181k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   181k|    {
 3000|   181k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   181k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   181k|    {
 2981|   181k|        return t.data();
 2982|   181k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   181k|    {
 3383|   181k|        return detail::to_address(ranges::begin(derived()));
 3384|   181k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   607k|{
  316|   607k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   607k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   607k|{
  294|   607k|    return p;
  295|   607k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   184k|    {
 2869|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   184k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   184k|    {
 2850|   184k|        return decay_copy(t.begin());
 2851|   184k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  37.5M|    {
 3480|  37.5M|        return m_iterator;
 3481|  37.5M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   181k|    {
 3339|   181k|        return static_cast<const D&>(*this);
 3340|   181k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   181k|    {
 3075|   181k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   181k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   181k|    {
 3041|   181k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   181k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   549k|    {
 3496|   549k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   549k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   177k|        : base(unexpect, std::move(e.error())),
 1616|   177k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   177k|    {
 1618|   177k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   177k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   177k|          m_has_value(false)
  451|   177k|    {
  452|   177k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   181k|    {
 1316|   181k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|  3.34k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  3.34k|                      ranges::iterator_t<SourceRange>>) {
 6677|  3.34k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  3.34k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   423k|    {
 2869|   423k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   423k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   423k|    {
 2850|   423k|        return decay_copy(t.begin());
 2851|   423k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|  3.34k|{
 6662|  3.34k|    return ranges::end(source);
 6663|  3.34k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.34k|    {
 2926|  3.34k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.34k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.34k|    {
 2908|  3.34k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.34k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  36.4M|    {
 3484|  36.4M|        return m_sentinel;
 3485|  36.4M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  3.34k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.34k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.34k|    {
 1572|  3.34k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  3.34k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.34k|    {
  442|  3.34k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.7k|    {
 8768|  28.7k|        return m_str;
 8769|  28.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.4k|{
 6110|  57.4k|    detail::check_scan_arg_types<Args...>();
 6111|  57.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.4k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6085|  57.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.4k|    {
 6087|  57.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.4k|    {
 6095|  57.4k|        return {detail::make_arg<
 6096|  57.4k|            kind, Context,
 6097|  57.4k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.4k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5874|  57.4k|{
 5875|  57.4k|    return make_value<Context>(value).ref_value;
 5876|  57.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5809|  60.3k|{
 5810|  60.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.3k|                                  needs_context_tag>) {
 5814|  60.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5648|  60.3k|    {                                                                        \
 5649|  60.3k|        return val;                                                          \
 5650|  60.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.4k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.4k|    {
 6137|  57.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|   345k|        : m_desc(desc), m_builtin_values(data)
 6188|   345k|    {
 6189|   345k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.38M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.38M|    static_cast<    \
  |  |  935|  1.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.38M|    static_cast<    \
  |  |  935|  1.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.38M|    {
 3466|  1.38M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|   345k|{
 8446|   345k|    return s;
 8447|   345k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|   345k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.7k|        : m_str(r.str)
 8763|  28.7k|    {
 8764|  28.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  30.1k|    {
 1740|  30.1k|        return has_value();
 1741|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|  3.34k|    {
 6434|  3.34k|        return ranges::begin(m_range);
 6435|  3.34k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|  86.2k|{
 9414|  86.2k|#if !SCN_DISABLE_LOCALE
 9415|  86.2k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  86.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  86.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  86.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.7k, False: 1.54k]
  |  |  ------------------
  ------------------
 9422|  84.7k|        return unexpected(result.error());
 9423|  84.7k|    }
 9424|  1.54k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  86.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.71k|{
 9438|  8.71k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.71k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.71k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.47k, False: 246]
  |  |  ------------------
  ------------------
 9442|  8.47k|        return unexpected(result.error());
 9443|  8.47k|    }
 9444|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.71k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.89k|{
 5860|  2.89k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.89k|    basic_scan_arg<Context> arg;
 5863|  2.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.89k|    arg.m_value = make_value<Context>(value);
 5865|  2.89k|    return arg;
 5866|  2.89k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|   362k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9636|  30.0k|{
 9637|  30.0k|    return scan_result_type<Source, Args...>();
 9638|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.0k|        : m_value(T{}), m_has_value(true)
  427|  30.0k|    {
  428|  30.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6570|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.0k|{
 9622|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 425]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    425|    else {
 9626|    425|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    425|    static_cast<    \
  |  |  935|    425|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    425|    }
 9628|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.9k|    {
  456|  30.9k|        return m_value;
  457|  30.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.6k|    {
 8768|  28.6k|        return m_str;
 8769|  28.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.2k|{
 6110|  57.2k|    detail::check_scan_arg_types<Args...>();
 6111|  57.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6085|  57.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.2k|    {
 6087|  57.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.2k|    {
 6095|  57.2k|        return {detail::make_arg<
 6096|  57.2k|            kind, Context,
 6097|  57.2k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.2k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5874|  57.2k|{
 5875|  57.2k|    return make_value<Context>(value).ref_value;
 5876|  57.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5809|  60.1k|{
 5810|  60.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.1k|                                  needs_context_tag>) {
 5814|  60.1k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.1k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5648|  60.1k|    {                                                                        \
 5649|  60.1k|        return val;                                                          \
 5650|  60.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.2k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.2k|    {
 6137|  57.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.6k|        : m_str(r.str)
 8763|  28.6k|    {
 8764|  28.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  30.0k|    {
 1740|  30.0k|        return has_value();
 1741|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.9k|    {
 1815|  30.9k|        return &value();
 1816|  30.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  30.9k|    {
 1769|  30.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.9k|        return this->get_value();
 1771|  30.9k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.88k|{
 5860|  2.88k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.88k|    basic_scan_arg<Context> arg;
 5863|  2.88k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.88k|    arg.m_value = make_value<Context>(value);
 5865|  2.88k|    return arg;
 5866|  2.88k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9636|  30.2k|{
 9637|  30.2k|    return scan_result_type<Source, Args...>();
 9638|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.2k|        : m_value(T{}), m_has_value(true)
  427|  30.2k|    {
  428|  30.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6570|  30.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.2k|{
 9622|  30.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 616]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    616|    else {
 9626|    616|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    616|    static_cast<    \
  |  |  935|    616|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    616|    }
 9628|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   121k|    {
  490|   121k|        return m_has_value;
  491|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.5k|    {
  456|  31.5k|        return m_value;
  457|  31.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.8k|    {
 8768|  28.8k|        return m_str;
 8769|  28.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.6k|{
 6110|  57.6k|    detail::check_scan_arg_types<Args...>();
 6111|  57.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6085|  57.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.6k|    {
 6087|  57.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.6k|    {
 6095|  57.6k|        return {detail::make_arg<
 6096|  57.6k|            kind, Context,
 6097|  57.6k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.6k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5874|  57.6k|{
 5875|  57.6k|    return make_value<Context>(value).ref_value;
 5876|  57.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5809|  60.5k|{
 5810|  60.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.5k|                                  needs_context_tag>) {
 5814|  60.5k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.5k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5648|  60.5k|    {                                                                        \
 5649|  60.5k|        return val;                                                          \
 5650|  60.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.6k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.6k|    {
 6137|  57.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.8k|        : m_str(r.str)
 8763|  28.8k|    {
 8764|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.2k|    {
 1740|  30.2k|        return has_value();
 1741|  30.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1814|  31.5k|    {
 1815|  31.5k|        return &value();
 1816|  31.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.5k|    {
 1769|  31.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.5k|        return this->get_value();
 1771|  31.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.91k|{
 5860|  2.91k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.91k|    basic_scan_arg<Context> arg;
 5863|  2.91k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.91k|    arg.m_value = make_value<Context>(value);
 5865|  2.91k|    return arg;
 5866|  2.91k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9636|  30.1k|{
 9637|  30.1k|    return scan_result_type<Source, Args...>();
 9638|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.1k|        : m_value(T{}), m_has_value(true)
  427|  30.1k|    {
  428|  30.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6570|  30.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.1k|{
 9622|  30.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 489]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    489|    else {
 9626|    489|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    489|    static_cast<    \
  |  |  935|    489|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    489|    }
 9628|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.6k|    {
 8768|  28.6k|        return m_str;
 8769|  28.6k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.3k|{
 6110|  57.3k|    detail::check_scan_arg_types<Args...>();
 6111|  57.3k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.3k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6085|  57.3k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.3k|    {
 6087|  57.3k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.3k|    {
 6095|  57.3k|        return {detail::make_arg<
 6096|  57.3k|            kind, Context,
 6097|  57.3k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.3k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.3k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5874|  57.3k|{
 5875|  57.3k|    return make_value<Context>(value).ref_value;
 5876|  57.3k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5809|  60.2k|{
 5810|  60.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.2k|                                  needs_context_tag>) {
 5814|  60.2k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.2k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5648|  60.2k|    {                                                                        \
 5649|  60.2k|        return val;                                                          \
 5650|  60.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.3k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.3k|    {
 6137|  57.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.6k|        : m_str(r.str)
 8763|  28.6k|    {
 8764|  28.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.1k|    {
 1740|  30.1k|        return has_value();
 1741|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.89k|{
 5860|  2.89k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.89k|    basic_scan_arg<Context> arg;
 5863|  2.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.89k|    arg.m_value = make_value<Context>(value);
 5865|  2.89k|    return arg;
 5866|  2.89k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9636|  30.3k|{
 9637|  30.3k|    return scan_result_type<Source, Args...>();
 9638|  30.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.3k|        : m_value(T{}), m_has_value(true)
  427|  30.3k|    {
  428|  30.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6570|  30.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.3k|{
 9622|  30.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 733]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    733|    else {
 9626|    733|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    733|    static_cast<    \
  |  |  935|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    733|    }
 9628|  30.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   121k|    {
  490|   121k|        return m_has_value;
  491|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.8k|    {
  456|  31.8k|        return m_value;
  457|  31.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.9k|    {
 8768|  28.9k|        return m_str;
 8769|  28.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.8k|{
 6110|  57.8k|    detail::check_scan_arg_types<Args...>();
 6111|  57.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6085|  57.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.8k|    {
 6087|  57.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.8k|    {
 6095|  57.8k|        return {detail::make_arg<
 6096|  57.8k|            kind, Context,
 6097|  57.8k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.8k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5874|  57.8k|{
 5875|  57.8k|    return make_value<Context>(value).ref_value;
 5876|  57.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5809|  60.7k|{
 5810|  60.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.7k|                                  needs_context_tag>) {
 5814|  60.7k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.7k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5648|  60.7k|    {                                                                        \
 5649|  60.7k|        return val;                                                          \
 5650|  60.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.8k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.8k|    {
 6137|  57.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.9k|        : m_str(r.str)
 8763|  28.9k|    {
 8764|  28.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.3k|    {
 1740|  30.3k|        return has_value();
 1741|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1814|  31.8k|    {
 1815|  31.8k|        return &value();
 1816|  31.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.8k|    {
 1769|  31.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.8k|        return this->get_value();
 1771|  31.8k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.93k|{
 5860|  2.93k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.93k|    basic_scan_arg<Context> arg;
 5863|  2.93k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.93k|    arg.m_value = make_value<Context>(value);
 5865|  2.93k|    return arg;
 5866|  2.93k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9636|  30.2k|{
 9637|  30.2k|    return scan_result_type<Source, Args...>();
 9638|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.2k|        : m_value(T{}), m_has_value(true)
  427|  30.2k|    {
  428|  30.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6570|  30.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|  30.2k|{
 9622|  30.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 579]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    579|    else {
 9626|    579|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    579|    static_cast<    \
  |  |  935|    579|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    579|    }
 9628|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.3k|    {
  456|  31.3k|        return m_value;
  457|  31.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|  28.7k|    {
 8768|  28.7k|        return m_str;
 8769|  28.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|  57.5k|{
 6110|  57.5k|    detail::check_scan_arg_types<Args...>();
 6111|  57.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|  57.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6085|  57.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|  57.5k|    {
 6087|  57.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|  57.5k|    {
 6095|  57.5k|        return {detail::make_arg<
 6096|  57.5k|            kind, Context,
 6097|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 6098|  57.5k|                                 typename Context::char_type>::value>(args)...};
 6099|  57.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5874|  57.5k|{
 5875|  57.5k|    return make_value<Context>(value).ref_value;
 5876|  57.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5809|  60.4k|{
 5810|  60.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|  60.4k|                                  needs_context_tag>) {
 5814|  60.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|  60.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5648|  60.4k|    {                                                                        \
 5649|  60.4k|        return val;                                                          \
 5650|  60.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|  57.5k|        : basic_scan_args(store.desc, store.args.data())
 6136|  57.5k|    {
 6137|  57.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.7k|        : m_str(r.str)
 8763|  28.7k|    {
 8764|  28.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.2k|    {
 1740|  30.2k|        return has_value();
 1741|  30.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1814|  31.3k|    {
 1815|  31.3k|        return &value();
 1816|  31.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  31.3k|    {
 1769|  31.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.3k|        return this->get_value();
 1771|  31.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5859|  2.91k|{
 5860|  2.91k|    check_scan_arg_types<T>();
 5861|       |
 5862|  2.91k|    basic_scan_arg<Context> arg;
 5863|  2.91k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  2.91k|    arg.m_value = make_value<Context>(value);
 5865|  2.91k|    return arg;
 5866|  2.91k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   177k|    {
 2869|   177k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   177k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   177k|    {
 2850|   177k|        return decay_copy(t.begin());
 2851|   177k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|   105M|{
 2094|   105M|    return SCN_FWD(t);
  ------------------
  |  |  936|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   105M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   362k|    {
 2926|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   362k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   362k|    {
 2908|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   362k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9636|  30.1k|{
 9637|  30.1k|    return scan_result_type<Source, Args...>();
 9638|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1551|  30.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.1k|        : m_value(T{}), m_has_value(true)
  427|  30.1k|    {
  428|  30.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6570|  30.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   181k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   181k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.1k|{
 9622|  30.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 500]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    500|    else {
 9626|    500|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    500|    static_cast<    \
  |  |  935|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    500|    }
 9628|  30.1k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   181k|    {
 1740|   181k|        return has_value();
 1741|   181k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   362k|    {
  490|   362k|        return m_has_value;
  491|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   177k|    {
 1746|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   177k|        return this->get_unexpected().error();
 1748|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   177k|    {
  473|   177k|        return m_unexpected;
  474|   177k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  3.34k|    {
 6445|  3.34k|        m_range = std::forward<Other>(r);
 6446|  3.34k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  3.34k|    {
 1795|  3.34k|        return value();
 1796|  3.34k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  3.34k|    {
 1769|  3.34k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.34k|        return this->get_value();
 1771|  3.34k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.34k|    {
  456|  3.34k|        return m_value;
  457|  3.34k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|  86.2k|{
 9398|  86.2k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|  86.2k|    auto result = vscan_impl(buffer, format, args);
 9401|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.7k, False: 1.54k]
  |  |  ------------------
  ------------------
 9402|  84.7k|        return unexpected(result.error());
 9403|  84.7k|    }
 9404|  1.54k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|  86.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   181k|{
 5381|   181k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   181k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   181k|                  "\n"
 5385|   181k|                  "Unsupported range type given as input to a scanning "
 5386|   181k|                  "function.\n"
 5387|   181k|                  "A range needs to have a character type (value type) "
 5388|   181k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   181k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   181k|                  "to be included.\n"
 5391|   181k|                  "See the scnlib documentation for more details.");
 5392|   181k|    static_assert(
 5393|   181k|        !std::is_same_v<T, custom_char_traits>,
 5394|   181k|        "\n"
 5395|   181k|        "Unsupported range type given as input to a scanning "
 5396|   181k|        "function.\n"
 5397|   181k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   181k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   181k|        "not supported.");
 5400|   181k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   181k|                  "\n"
 5402|   181k|                  "Unsupported range type given as input to a scanning "
 5403|   181k|                  "function.\n"
 5404|   181k|                  "file_marker_found cannot be used as an "
 5405|   181k|                  "source range type to scn::scan.\n"
 5406|   181k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   181k|                  "and do not provide an explicit source range, "
 5408|   181k|                  "or use scn::scan with a FILE* directly.");
 5409|   181k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   181k|                  "\n"
 5411|   181k|                  "Unsupported range type given as input to a scanning "
 5412|   181k|                  "function.\n"
 5413|   181k|                  "In order to be scannable, a range needs to satisfy "
 5414|   181k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   181k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   181k|                  "\n"
 5417|   181k|                  "Unsupported range type given as input to a scanning "
 5418|   181k|                  "function.\n"
 5419|   181k|                  "A range needs to model forward_range and have a valid "
 5420|   181k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   181k|                  "Examples of scannable ranges are std::string, "
 5422|   181k|                  "std::string_view, "
 5423|   181k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   181k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   181k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   181k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   181k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   181k|    else {
 5366|   181k|        return make_forward_scan_buffer(r);
 5367|   181k|    }
 5368|   181k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   181k|{
 5185|   181k|    return basic_scan_forward_buffer_impl(range);
 5186|   181k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   181k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   181k|          m_cursor(ranges::begin(*m_range))
 4766|   181k|    {
 4767|   181k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   181k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   181k|    {
 4738|   181k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   181k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   181k|    {
 4429|   181k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   181k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   184k|    {
 2869|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   184k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   184k|    {
 2850|   184k|        return decay_copy(t.begin());
 2851|   184k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|   187k|    {
 3480|   187k|        return m_iterator;
 3481|   187k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  35.0M|    {
 4771|  35.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 108k, False: 34.9M]
  ------------------
 4772|   108k|            return false;
 4773|   108k|        }
 4774|  34.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  34.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  34.9M|        }
 4777|  34.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 34.8M, False: 129k]
  ------------------
 4778|  34.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  34.8M|                                          this->m_current_view.begin(),
 4780|  34.8M|                                          this->m_current_view.end());
 4781|  34.8M|        }
 4782|  34.9M|        m_latest = *m_cursor;
 4783|  34.9M|        ++m_cursor;
 4784|  34.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  34.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  34.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  34.9M|        }
 4788|  34.9M|        return true;
 4789|  35.0M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   105M|    {
 2926|   105M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   105M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   105M|    {
 2908|   105M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   105M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|   105M|    {
 3484|   105M|        return m_sentinel;
 3485|   105M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   181k|    {
 4346|   181k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   181k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   181k|        return true;
 4348|   181k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   177k|        : base(unexpect, std::move(e.error())),
 1616|   177k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   177k|    {
 1618|   177k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   177k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   177k|          m_has_value(false)
  451|   177k|    {
  452|   177k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   181k|    {
 1316|   181k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  3.34k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  3.34k|                      ranges::iterator_t<SourceRange>>) {
 6677|  3.34k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  3.34k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.34k|    {
 2869|  3.34k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.34k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.34k|    {
 2850|  3.34k|        return decay_copy(t.begin());
 2851|  3.34k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|  3.34k|{
 6662|  3.34k|    return ranges::end(source);
 6663|  3.34k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.34k|    {
 2926|  3.34k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.34k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.34k|    {
 2908|  3.34k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.34k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  3.34k|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.34k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.34k|    {
 1572|  3.34k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  3.34k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.34k|    {
  442|  3.34k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.7k|    {
 8768|  28.7k|        return m_str;
 8769|  28.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   184k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   184k|    static_cast<    \
  |  |  935|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   184k|    static_cast<    \
  |  |  935|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   184k|    {
 3466|   184k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.7k|        : m_str(r.str)
 8763|  28.7k|    {
 8764|  28.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1739|  30.1k|    {
 1740|  30.1k|        return has_value();
 1741|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|  3.34k|    {
 6434|  3.34k|        return ranges::begin(m_range);
 6435|  3.34k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|  86.2k|{
 9414|  86.2k|#if !SCN_DISABLE_LOCALE
 9415|  86.2k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|  86.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|  86.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|  86.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|  86.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 84.7k, False: 1.54k]
  |  |  ------------------
  ------------------
 9422|  84.7k|        return unexpected(result.error());
 9423|  84.7k|    }
 9424|  1.54k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|  86.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  8.71k|{
 9438|  8.71k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  8.71k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  8.71k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  8.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.47k, False: 246]
  |  |  ------------------
  ------------------
 9442|  8.47k|        return unexpected(result.error());
 9443|  8.47k|    }
 9444|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  8.71k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9636|  30.0k|{
 9637|  30.0k|    return scan_result_type<Source, Args...>();
 9638|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1551|  30.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.0k|        : m_value(T{}), m_has_value(true)
  427|  30.0k|    {
  428|  30.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6570|  30.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.0k|{
 9622|  30.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 425]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    425|    else {
 9626|    425|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    425|    static_cast<    \
  |  |  935|    425|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    425|    }
 9628|  30.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  30.9k|    {
  456|  30.9k|        return m_value;
  457|  30.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.6k|    {
 8768|  28.6k|        return m_str;
 8769|  28.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.6k|        : m_str(r.str)
 8763|  28.6k|    {
 8764|  28.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1739|  30.0k|    {
 1740|  30.0k|        return has_value();
 1741|  30.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1814|  30.9k|    {
 1815|  30.9k|        return &value();
 1816|  30.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  30.9k|    {
 1769|  30.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  30.9k|        return this->get_value();
 1771|  30.9k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9636|  30.2k|{
 9637|  30.2k|    return scan_result_type<Source, Args...>();
 9638|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1551|  30.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.2k|        : m_value(T{}), m_has_value(true)
  427|  30.2k|    {
  428|  30.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6570|  30.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.2k|{
 9622|  30.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 616]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    616|    else {
 9626|    616|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    616|    static_cast<    \
  |  |  935|    616|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    616|    }
 9628|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   121k|    {
  490|   121k|        return m_has_value;
  491|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.5k|    {
  456|  31.5k|        return m_value;
  457|  31.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.8k|    {
 8768|  28.8k|        return m_str;
 8769|  28.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.8k|        : m_str(r.str)
 8763|  28.8k|    {
 8764|  28.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1739|  30.2k|    {
 1740|  30.2k|        return has_value();
 1741|  30.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1814|  31.5k|    {
 1815|  31.5k|        return &value();
 1816|  31.5k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.5k|    {
 1769|  31.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.5k|        return this->get_value();
 1771|  31.5k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9636|  30.1k|{
 9637|  30.1k|    return scan_result_type<Source, Args...>();
 9638|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1551|  30.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.1k|        : m_value(T{}), m_has_value(true)
  427|  30.1k|    {
  428|  30.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6570|  30.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.1k|{
 9622|  30.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 489]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    489|    else {
 9626|    489|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    489|    static_cast<    \
  |  |  935|    489|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    489|    }
 9628|  30.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.1k|    {
  456|  31.1k|        return m_value;
  457|  31.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.6k|    {
 8768|  28.6k|        return m_str;
 8769|  28.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.6k|        : m_str(r.str)
 8763|  28.6k|    {
 8764|  28.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1739|  30.1k|    {
 1740|  30.1k|        return has_value();
 1741|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1814|  31.1k|    {
 1815|  31.1k|        return &value();
 1816|  31.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.1k|    {
 1769|  31.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.1k|        return this->get_value();
 1771|  31.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9636|  30.3k|{
 9637|  30.3k|    return scan_result_type<Source, Args...>();
 9638|  30.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1551|  30.3k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.3k|        : m_value(T{}), m_has_value(true)
  427|  30.3k|    {
  428|  30.3k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6570|  30.3k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.3k|{
 9622|  30.3k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 733]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    733|    else {
 9626|    733|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    733|    static_cast<    \
  |  |  935|    733|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    733|    }
 9628|  30.3k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   121k|    {
  490|   121k|        return m_has_value;
  491|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.8k|    {
  456|  31.8k|        return m_value;
  457|  31.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.9k|    {
 8768|  28.9k|        return m_str;
 8769|  28.9k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.9k|        : m_str(r.str)
 8763|  28.9k|    {
 8764|  28.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1739|  30.3k|    {
 1740|  30.3k|        return has_value();
 1741|  30.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1814|  31.8k|    {
 1815|  31.8k|        return &value();
 1816|  31.8k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.8k|    {
 1769|  31.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.8k|        return this->get_value();
 1771|  31.8k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9636|  30.2k|{
 9637|  30.2k|    return scan_result_type<Source, Args...>();
 9638|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1551|  30.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  426|  30.2k|        : m_value(T{}), m_has_value(true)
  427|  30.2k|    {
  428|  30.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6570|  30.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|  30.2k|{
 9622|  30.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.6k, False: 579]
  |  |  ------------------
  ------------------
 9623|  29.6k|        out = unexpected(in.error());
 9624|  29.6k|    }
 9625|    579|    else {
 9626|    579|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|    579|    static_cast<    \
  |  |  935|    579|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|    579|    }
 9628|  30.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.6k|        : base(unexpect, std::move(e.error())),
 1616|  29.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.6k|    {
 1618|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.6k|          m_has_value(false)
  451|  29.6k|    {
  452|  29.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.6k|    {
 1316|  29.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.6k|    {
  903|  29.6k|        assign_common(std::move(other));
  904|  29.6k|        return *this;
  905|  29.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.6k|    {
  950|  29.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.6k, False: 0]
  ------------------
  951|  29.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   120k|    {
  490|   120k|        return m_has_value;
  491|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  31.3k|    {
  456|  31.3k|        return m_value;
  457|  31.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.6k|    {
 1046|  29.6k|        this->destroy_value();
 1047|  29.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.6k|    {
  504|  29.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.6k|                                  std::forward<Args>(args)...);
  506|  29.6k|        m_has_value = false;
  507|  29.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.6k|    {
  473|  29.6k|        return m_unexpected;
  474|  29.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.6k|    {
  481|  29.6k|        return std::move(m_unexpected);
  482|  29.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|  28.7k|    {
 8768|  28.7k|        return m_str;
 8769|  28.7k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|  28.7k|        : m_str(r.str)
 8763|  28.7k|    {
 8764|  28.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1739|  30.2k|    {
 1740|  30.2k|        return has_value();
 1741|  30.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1814|  31.3k|    {
 1815|  31.3k|        return &value();
 1816|  31.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  31.3k|    {
 1769|  31.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  31.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  31.3k|        return this->get_value();
 1771|  31.3k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   737k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   737k|    {
 3742|   737k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   737k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   737k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   603k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   603k|    else {
 3981|   603k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   603k|    }
 3983|   603k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  10.7M|    {
 3480|  10.7M|        return m_iterator;
 3481|  10.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  37.5M|    {
 3480|  37.5M|        return m_iterator;
 3481|  37.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  5.93M|    {
  572|  5.93M|        return m_has_value;
  573|  5.93M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|   594k|    {
  555|   594k|        return m_unexpected;
  556|   594k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   457k|    {
 1746|   457k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   457k|        return this->get_unexpected().error();
 1748|   457k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 6973|   858k|    {
 6974|   858k|        SCN_GCC_COMPAT_PUSH
 6975|   858k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6976|   858k|        switch (type) {
 6977|   161k|            case presentation_type::none:
  ------------------
  |  Branch (6977:13): [True: 161k, False: 697k]
  ------------------
 6978|   161k|                return 10;
 6979|   178k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6979:13): [True: 178k, False: 680k]
  ------------------
 6980|   178k|                return 0;
 6981|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6981:13): [True: 0, False: 858k]
  ------------------
 6982|      0|                return arbitrary_base;
 6983|       |
 6984|  78.3k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6984:13): [True: 78.3k, False: 780k]
  ------------------
 6985|  78.3k|                return 2;
 6986|   113k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6986:13): [True: 113k, False: 745k]
  ------------------
 6987|   113k|                return 8;
 6988|   160k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6988:13): [True: 160k, False: 698k]
  ------------------
 6989|   160k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6989:13): [True: 0, False: 858k]
  ------------------
 6990|   160k|                return 10;
 6991|   167k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6991:13): [True: 167k, False: 691k]
  ------------------
 6992|   167k|                return 16;
 6993|       |
 6994|      0|            default:
  ------------------
  |  Branch (6994:13): [True: 0, False: 858k]
  ------------------
 6995|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6996|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6997|   858k|        }
 6998|   858k|        SCN_GCC_COMPAT_POP
 6999|   858k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  1.03M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|   765k|    {
 7056|   765k|        m_specs.type = type;
 7057|   765k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7117|   101k|    {
 7118|   101k|        SCN_UNLIKELY_ATTR
 7119|   101k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7120|   101k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|   931k|    {
 7129|   931k|        return m_error;
 7130|   931k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   607k|{
 3918|   607k|    return unexpected(scan_error{c, m});
 3919|   607k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  1.07M|{
 4308|       |    // Pattern_White_Space property
 4309|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 944k, False: 134k]
  |  Branch (4309:27): [True: 383k, False: 560k]
  ------------------
 4310|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 9.25k, False: 686k]
  ------------------
 4311|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 3.93k, False: 682k]
  ------------------
 4312|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 1.56k, False: 680k]
  ------------------
 4313|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 2.08k, False: 678k]
  ------------------
 4314|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 2.48k, False: 675k]
  ------------------
 4315|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 675k]
  ------------------
 4316|  1.07M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|   166k|{
 7812|   166k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 166k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|  27.6k|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 27.6k, False: 138k]
  ------------------
 7817|  27.6k|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 166k]
  ------------------
 7818|  58.7k|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 31.0k, False: 135k]
  ------------------
 7819|  58.7k|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 166k]
  ------------------
 7820|  90.3k|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 31.6k, False: 134k]
  ------------------
 7821|  90.3k|            return arg_type_category::integer;
 7822|       |
 7823|  24.0k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 24.0k, False: 142k]
  ------------------
 7824|  24.0k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 166k]
  ------------------
 7825|  49.8k|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 25.8k, False: 140k]
  ------------------
 7826|  49.8k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 166k]
  ------------------
 7827|  76.0k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 26.1k, False: 140k]
  ------------------
 7828|  76.0k|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 166k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 166k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 166k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 166k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 166k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 166k]
  ------------------
 7840|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 166k]
  ------------------
 7841|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 166k]
  ------------------
 7842|      0|            return arg_type_category::floating;
 7843|       |
 7844|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 166k]
  ------------------
 7845|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 166k]
  ------------------
 7846|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 0, False: 166k]
  ------------------
 7847|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 166k]
  ------------------
 7848|      0|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 166k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 166k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|   166k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|   166k|            SCN_CLANG_POP
 7859|   166k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|   166k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|   136k|    {
 1756|   136k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   136k|        return std::move(this->get_unexpected().error());
 1758|   136k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7897|   880k|{
 7898|   880k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  865|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 880k]
  |  |  ------------------
  ------------------
 7899|      0|        return handler.on_error("Invalid type specifier for integer type");
 7900|      0|    }
 7901|   880k|    if (specs.localized) {
  ------------------
  |  Branch (7901:9): [True: 166k, False: 714k]
  ------------------
 7902|   166k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 7903|       |            // clang-format off
 7904|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7905|       |            // clang-format on
 7906|      0|            return;
 7907|      0|        }
 7908|   166k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  865|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 7909|       |            // clang-format off
 7910|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7911|       |            // clang-format on
 7912|      0|        }
 7913|   166k|    }
 7914|   880k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  5.33M|    {
 1740|  5.33M|        return has_value();
 1741|  5.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  65.2M|    {
 4473|  65.2M|        assert(m_begin);
 4474|  65.2M|        return m_end == nullptr;
 4475|  65.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  1.43M|    {
 4490|  1.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.43M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.43M|        return parent()->get_segment_starting_at(position());
 4496|  1.43M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  35.8M|    {
 4484|  35.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  35.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  35.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  35.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  1.43M|    {
 4377|  1.43M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 384k, False: 1.05M]
  |  |  ------------------
  ------------------
 4378|  1.43M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   384k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   384k|        }
 4381|  1.05M|        const auto start = pos - m_putback_buffer.size();
 4382|  1.05M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  1.05M|        return m_current_view.substr(start);
 4384|  1.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|   342k|    {
 4479|   342k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   342k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   342k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  2.22M|    {
 4468|  2.22M|        return m_position;
 4469|  2.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  1.37M|    {
 4399|  1.37M|        return m_is_contiguous;
 4400|  1.37M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   142G|    {
 4473|   142G|        assert(m_begin);
 4474|   142G|        return m_end == nullptr;
 4475|   142G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  5.90k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  5.90k|    else {
 3981|  5.90k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  5.90k|    }
 3983|  5.90k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|   136k|    {
 4490|   136k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 136k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   136k|        return parent()->get_segment_starting_at(position());
 4496|   136k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  71.2G|    {
 4484|  71.2G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  71.2G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.2G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  71.2G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  71.2G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|   136k|    {
 4377|   136k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.77k, False: 133k]
  |  |  ------------------
  ------------------
 4378|   136k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  2.77k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  2.77k|        }
 4381|   133k|        const auto start = pos - m_putback_buffer.size();
 4382|   133k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   133k|        return m_current_view.substr(start);
 4384|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|   102k|    {
 4479|   102k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|   102k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|   102k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|   243k|    {
 4468|   243k|        return m_position;
 4469|   243k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|   543k|    {
 4399|   543k|        return m_is_contiguous;
 4400|   543k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  1.80M|    {
 3334|  1.80M|        return static_cast<D&>(*this);
 3335|  1.80M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  1.80M|    {
 3375|  1.80M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.80M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|   420k|    {
 3334|   420k|        return static_cast<D&>(*this);
 3335|   420k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|   420k|    {
 3375|   420k|        return detail::to_address(ranges::begin(derived()));
 3376|   420k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   336k|    {
 8965|   336k|        return ranges::subrange{begin(), end()};
 8966|   336k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   336k|    {
 8957|   336k|        return ranges::default_sentinel;
 8958|   336k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  3.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.50M|    static_cast<    \
  |  |  935|  3.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  3.50M|    static_cast<    \
  |  |  935|  3.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  3.50M|    {
 3466|  3.50M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|   843k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   432k|    {
 1979|   432k|        return detail::transform_error_impl(std::move(*this),
 1980|   432k|                                            std::forward<F>(f));
 1981|   432k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   432k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   432k|    else {
 1472|   432k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   432k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   432k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 419k, False: 12.2k]
  |  |  ------------------
  ------------------
 1474|   432k|                   ? result(*std::forward<Exp>(exp))
 1475|   432k|                   : result(unexpect,
 1476|  12.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  12.2k|                                           std::forward<Exp>(exp).error()));
 1478|   432k|    }
 1479|   432k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.17M|    {
  490|  2.17M|        return m_has_value;
  491|  2.17M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   750k|    {
 1805|   750k|        return std::move(value());
 1806|   750k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   848k|    {
 1769|   848k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   848k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   848k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   848k|        return this->get_value();
 1771|   848k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   848k|    {
  456|   848k|        return m_value;
  457|   848k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.36M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.36M|    {
 1572|  1.36M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.36M|    {
  442|  1.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.50M|    {
 1316|  1.50M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  27.5k|{
 1350|  27.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  27.5k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  24.0k|    {
 1756|  24.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  24.0k|        return std::move(this->get_unexpected().error());
 1758|  24.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  24.3k|    {
  473|  24.3k|        return m_unexpected;
  474|  24.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   157k|    {
  365|   157k|        return m_unexpected;
  366|   157k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  41.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  41.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  41.4k|    {
 1628|  41.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   145k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   145k|          m_has_value(false)
  451|   145k|    {
  452|   145k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   104k|    {
 8965|   104k|        return ranges::subrange{begin(), end()};
 8966|   104k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   104k|    {
 8957|   104k|        return ranges::default_sentinel;
 8958|   104k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|   932k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   932k|    static_cast<    \
  |  |  935|   932k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   932k|    static_cast<    \
  |  |  935|   932k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   932k|    {
 3466|   932k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   130k|    {
 1979|   130k|        return detail::transform_error_impl(std::move(*this),
 1980|   130k|                                            std::forward<F>(f));
 1981|   130k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   130k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   130k|    else {
 1472|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 128k, False: 1.95k]
  |  |  ------------------
  ------------------
 1474|   130k|                   ? result(*std::forward<Exp>(exp))
 1475|   130k|                   : result(unexpect,
 1476|  1.95k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.95k|                                           std::forward<Exp>(exp).error()));
 1478|   130k|    }
 1479|   130k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   631k|    {
  490|   631k|        return m_has_value;
  491|   631k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   211k|    {
 1805|   211k|        return std::move(value());
 1806|   211k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   214k|    {
 1769|   214k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   214k|        return this->get_value();
 1771|   214k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   214k|    {
  456|   214k|        return m_value;
  457|   214k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   137k|        : base(std::in_place, std::forward<U>(val)),
 1570|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   137k|    {
 1572|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   137k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   137k|    {
  442|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   473k|    {
 1316|   473k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  21.2k|    {
 1756|  21.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  21.2k|        return std::move(this->get_unexpected().error());
 1758|  21.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  21.3k|    {
  473|  21.3k|        return m_unexpected;
  474|  21.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   109k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   109k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   109k|    {
 1628|   109k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   336k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   336k|          m_has_value(false)
  451|   336k|    {
  452|   336k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   607k|        : m_unexpected(std::forward<Err>(e))
  350|   607k|    {
  351|   607k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   607k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   607k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   533k|        : base(unexpect, std::move(e.error())),
 1616|   533k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   533k|    {
 1618|   533k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   533k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   533k|          m_has_value(false)
  451|   533k|    {
  452|   533k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.27M|    {
 1316|  1.27M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   164k|        : base(unexpect, std::move(e.error())),
 1616|   164k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   164k|    {
 1618|   164k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   175k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   175k|          m_has_value(false)
  451|   175k|    {
  452|   175k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.72M|    {
 1316|  2.72M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.55M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.55M|    {
 1572|  2.55M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.55M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.55M|    {
  442|  2.55M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  2.72M|    {
 1740|  2.72M|        return has_value();
 1741|  2.72M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.45M|    {
  490|  5.45M|        return m_has_value;
  491|  5.45M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   175k|    {
 1746|   175k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   175k|        return this->get_unexpected().error();
 1748|   175k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   175k|    {
  473|   175k|        return m_unexpected;
  474|   175k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.26M|    {
 1805|  2.26M|        return std::move(value());
 1806|  2.26M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.55M|    {
 1769|  2.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.55M|        return this->get_value();
 1771|  2.55M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.55M|    {
  456|  2.55M|        return m_value;
  457|  2.55M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   336k|        : base(unexpect, std::move(e.error())),
 1616|   336k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   336k|    {
 1618|   336k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|   338k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   338k|          m_has_value(false)
  451|   338k|    {
  452|   338k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   593k|    {
 1316|   593k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   254k|        : base(std::in_place, std::forward<U>(val)),
 1570|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   254k|    {
 1572|   254k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   254k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   254k|    {
  442|   254k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|   593k|    {
 1740|   593k|        return has_value();
 1741|   593k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  1.18M|    {
  490|  1.18M|        return m_has_value;
  491|  1.18M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   338k|    {
 1746|   338k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   338k|        return this->get_unexpected().error();
 1748|   338k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   338k|    {
  473|   338k|        return m_unexpected;
  474|   338k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   252k|    {
 1805|   252k|        return std::move(value());
 1806|   252k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   254k|    {
 1769|   254k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   254k|        return this->get_value();
 1771|   254k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|   254k|    {
  456|   254k|        return m_value;
  457|   254k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   433k|    {
 1979|   433k|        return detail::transform_error_impl(std::move(*this),
 1980|   433k|                                            std::forward<F>(f));
 1981|   433k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   433k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   433k|    else {
 1472|   433k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   433k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   433k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 421k, False: 11.4k]
  |  |  ------------------
  ------------------
 1474|   433k|                   ? result(*std::forward<Exp>(exp))
 1475|   433k|                   : result(unexpect,
 1476|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.4k|                                           std::forward<Exp>(exp).error()));
 1478|   433k|    }
 1479|   433k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.49M|    {
  490|  1.49M|        return m_has_value;
  491|  1.49M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   421k|    {
 1805|   421k|        return std::move(value());
 1806|   421k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   519k|    {
 1769|   519k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   519k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   519k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   519k|        return this->get_value();
 1771|   519k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   519k|    {
  456|   519k|        return m_value;
  457|   519k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  11.4k|    {
 1756|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  11.4k|        return std::move(this->get_unexpected().error());
 1758|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  11.7k|    {
  473|  11.7k|        return m_unexpected;
  474|  11.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.4k|    {
 1628|  11.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|   983k|    {
 8949|   983k|        return m_current;
 8950|   983k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|   672k|    {
 8842|   672k|        return m_locale;
 8843|   672k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|   723k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   723k|    static_cast<    \
  |  |  935|   723k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   723k|    static_cast<    \
  |  |  935|   723k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   723k|    {
 8849|   723k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   104k|        : base(unexpect, std::move(e.error())),
 1616|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   104k|    {
 1618|   104k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|   261k|    {
 8949|   261k|        return m_current;
 8950|   261k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   208k|    {
 8842|   208k|        return m_locale;
 8843|   208k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   310k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   310k|    static_cast<    \
  |  |  935|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   310k|    static_cast<    \
  |  |  935|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   310k|    {
 8849|   310k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   227k|        : base(unexpect, std::move(e.error())),
 1616|   227k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   227k|    {
 1618|   227k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   797k|        : base(unexpect, std::move(e.error())),
 1616|   797k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   797k|    {
 1618|   797k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   797k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   797k|          m_has_value(false)
  550|   797k|    {
  551|   797k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   797k|    {
 1316|   797k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  4.55M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  4.55M|        : m_deferred_init(), m_has_value(true)
  529|  4.55M|    {
  530|  4.55M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  2.33M|    {
 4559|  2.33M|        return x.is_at_end();
 4560|  2.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  4.97M|    {
 4603|  4.97M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 4.97M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  4.97M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 4.97M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  4.97M|        return !read_at_position();
 4610|  4.97M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  21.0M|    {
 4583|  21.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  21.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  21.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 21.0M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  21.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  21.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 18.6M, False: 2.39M]
  |  |  ------------------
  ------------------
 4590|  18.6M|            return true;
 4591|  18.6M|        }
 4592|       |
 4593|  4.65M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 2.39M, False: 2.25M]
  ------------------
 4594|  2.39M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 146k, False: 2.25M]
  ------------------
 4595|   146k|                return false;
 4596|   146k|            }
 4597|  2.39M|        }
 4598|  2.25M|        return true;
 4599|  2.39M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  6.34M|    {
 4518|  6.34M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  6.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  6.34M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 6.34M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  6.34M|        auto res = read_at_position();
 4527|  6.34M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  6.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  6.34M|        return parent()->get_character_at(m_position);
 4529|  6.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  6.34M|    {
 4388|  6.34M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  6.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.98M, False: 2.35M]
  |  |  ------------------
  ------------------
 4389|  6.34M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  3.98M|            return m_putback_buffer[pos];
 4391|  3.98M|        }
 4392|  2.35M|        const auto start = pos - m_putback_buffer.size();
 4393|  2.35M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  2.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  2.35M|        return m_current_view[start];
 4395|  2.35M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  1.27M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.27M|    {
 1572|  1.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.27M|    {
  442|  1.27M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.30M|    {
 1316|  1.30M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|  50.4k|        : m_unexpected(std::forward<Err>(e))
  350|  50.4k|    {
  351|  50.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  50.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  50.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  24.3k|        : base(unexpect, std::move(e.error())),
 1616|  24.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  24.3k|    {
 1618|  24.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  24.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.3k|          m_has_value(false)
  451|  24.3k|    {
  452|  24.3k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  78.8k|        : m_unexpected(std::forward<Args>(args)...)
  359|  78.8k|    {
  360|  78.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  78.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  78.8k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   529k|    {
 1740|   529k|        return has_value();
 1741|   529k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  97.4k|    {
 1795|  97.4k|        return value();
 1796|  97.4k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  6.33M|    {
 4553|  6.33M|        return !(lhs == rhs);
 4554|  6.33M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  6.65M|    {
 4548|  6.65M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 6.65M, False: 0]
  |  Branch (4548:46): [True: 545k, False: 6.10M]
  ------------------
 4549|  6.65M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  9.68M|    {
 4504|  9.68M|        ++m_position;
 4505|  9.68M|        (void)read_at_position();
 4506|  9.68M|        return *this;
 4507|  9.68M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  28.4k|        : m_unexpected(std::forward<Err>(e))
  350|  28.4k|    {
  351|  28.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  28.4k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  9.90k|        : base(unexpect, std::move(e.error())),
 1616|  9.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.90k|    {
 1618|  9.90k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  9.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.90k|          m_has_value(false)
  451|  9.90k|    {
  452|  9.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   615k|    {
 1316|   615k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   605k|        : base(std::in_place, std::forward<U>(val)),
 1570|   605k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   605k|    {
 1572|   605k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   605k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   605k|    {
  442|   605k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   615k|    {
 1740|   615k|        return has_value();
 1741|   615k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  9.90k|    {
 1746|  9.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  9.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  9.90k|        return this->get_unexpected().error();
 1748|  9.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.90k|    {
  473|  9.90k|        return m_unexpected;
  474|  9.90k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   605k|    {
 1805|   605k|        return std::move(value());
 1806|   605k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   605k|    {
 1769|   605k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   605k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   605k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   605k|        return this->get_value();
 1771|   605k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   605k|    {
  456|   605k|        return m_value;
  457|   605k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  7.68M|    {
 3484|  7.68M|        return m_sentinel;
 3485|  7.68M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  12.8k|        : m_unexpected(std::forward<Err>(e))
  350|  12.8k|    {
  351|  12.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  12.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  12.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  1.23M|    {
  365|  1.23M|        return m_unexpected;
  366|  1.23M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   113k|        : m_unexpected(std::forward<Args>(args)...)
  359|   113k|    {
  360|   113k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   113k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  2.34M|        : m_unexpected(std::forward<Err>(e))
  350|  2.34M|    {
  351|  2.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  2.34M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  2.34M|    {
  365|  2.34M|        return m_unexpected;
  366|  2.34M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  2.34M|        : m_unexpected(std::forward<Args>(args)...)
  359|  2.34M|    {
  360|  2.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  2.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  2.34M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  50.4k|{
 1350|  50.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  50.4k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  50.4k|        : m_unexpected(std::forward<Err>(e))
  350|  50.4k|    {
  351|  50.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  50.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  50.4k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1349|   136k|{
 1350|   136k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   136k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  39.6k|{
  396|  39.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  39.6k|        T(std::forward<Args>(args)...);
  398|  39.6k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3106|   115k|    {
 3107|   115k|        return fn::impl(std::forward<T>(t));
 3108|   115k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3097|   115k|    {
 3098|   115k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|   115k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3074|   115k|    {
 3075|   115k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   115k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3040|   115k|    {
 3041|   115k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   115k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|  39.6k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  39.6k|    else {
  408|  39.6k|        p->~T();
  409|  39.6k|    }
  410|  39.6k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  12.1k|        : base(unexpect, std::move(e.error())),
 1616|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.1k|    {
 1618|  12.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.8k|          m_has_value(false)
  451|  23.8k|    {
  452|  23.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.64M|    {
 1316|  1.64M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   140k|        : base(std::in_place, std::forward<U>(val)),
 1570|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   140k|    {
 1572|   140k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   140k|    {
  442|   140k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   856k|        : base(unexpect, std::move(e.error())),
 1616|   856k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   856k|    {
 1618|   856k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   856k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   856k|          m_has_value(false)
  451|   856k|    {
  452|   856k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  1.32M|    {
 1740|  1.32M|        return has_value();
 1741|  1.32M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  2.80M|    {
  490|  2.80M|        return m_has_value;
  491|  2.80M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   376k|    {
 1746|   376k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   376k|        return this->get_unexpected().error();
 1748|   376k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   405k|    {
  473|   405k|        return m_unexpected;
  474|   405k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   143k|    {
 1795|   143k|        return value();
 1796|   143k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   760k|    {
 1769|   760k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   760k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   760k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   760k|        return this->get_value();
 1771|   760k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   760k|    {
  456|   760k|        return m_value;
  457|   760k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   419k|    {
 1740|   419k|        return has_value();
 1741|   419k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   839k|    {
  490|   839k|        return m_has_value;
  491|   839k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   342k|    {
 1979|   342k|        return detail::transform_error_impl(std::move(*this),
 1980|   342k|                                            std::forward<F>(f));
 1981|   342k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   342k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   342k|    else {
 1472|   342k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   342k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   342k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 330k, False: 11.7k]
  |  |  ------------------
  ------------------
 1474|   342k|                   ? result(*std::forward<Exp>(exp))
 1475|   342k|                   : result(unexpect,
 1476|  11.7k|                            trivial_invoke(std::forward<F>(f),
 1477|  11.7k|                                           std::forward<Exp>(exp).error()));
 1478|   342k|    }
 1479|   342k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|   619k|        : base(std::in_place, std::forward<U>(val)),
 1570|   619k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   619k|    {
 1572|   619k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   619k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   619k|    {
  442|   619k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  11.7k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  11.7k|    {
 1628|  11.7k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   616k|    {
 1805|   616k|        return std::move(value());
 1806|   616k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   419k|    {
 1979|   419k|        return detail::transform_error_impl(std::move(*this),
 1980|   419k|                                            std::forward<F>(f));
 1981|   419k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   419k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   419k|    else {
 1472|   419k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   419k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   419k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 419k, False: 0]
  |  |  ------------------
  ------------------
 1474|   419k|                   ? result(*std::forward<Exp>(exp))
 1475|   419k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   419k|    }
 1479|   419k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   839k|    {
  490|   839k|        return m_has_value;
  491|   839k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   419k|        : base(std::in_place, std::forward<U>(val)),
 1570|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   419k|    {
 1572|   419k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   419k|    {
  442|   419k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   419k|    {
 1316|   419k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   419k|    {
 1740|   419k|        return has_value();
 1741|   419k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   839k|    {
  490|   839k|        return m_has_value;
  491|   839k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   419k|    {
 1805|   419k|        return std::move(value());
 1806|   419k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   315k|    {
 1979|   315k|        return detail::transform_error_impl(std::move(*this),
 1980|   315k|                                            std::forward<F>(f));
 1981|   315k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   315k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   315k|    else {
 1472|   315k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   315k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 286k, False: 29.1k]
  |  |  ------------------
  ------------------
 1474|   315k|                   ? result(*std::forward<Exp>(exp))
 1475|   315k|                   : result(unexpect,
 1476|  29.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  29.1k|                                           std::forward<Exp>(exp).error()));
 1478|   315k|    }
 1479|   315k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|  29.1k|    {
 1756|  29.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  29.1k|        return std::move(this->get_unexpected().error());
 1758|  29.1k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  3.31k|        : base(unexpect, std::move(e.error())),
 1616|  3.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.31k|    {
 1618|  3.31k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  636|  3.31k|        : m_has_value(false)
  637|  3.31k|    {
  638|  3.31k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.31k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  700|  3.31k|    {
  701|  3.31k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.31k|                                  std::forward<Args>(args)...);
  703|  3.31k|        m_has_value = false;
  704|  3.31k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  9.93k|    {
  730|  9.93k|        return reinterpret_cast<unexpected<E>*>(
  731|  9.93k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  9.93k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  9.93k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.8k|    {
 1316|  61.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  58.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  58.5k|    {
 1572|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  626|  58.5k|        : m_has_value(true)
  627|  58.5k|    {
  628|  58.5k|        construct(std::forward<Args>(args)...);
  629|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  693|  58.5k|    {
  694|  58.5k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  58.5k|        m_has_value = true;
  696|  58.5k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  395|  58.5k|{
  396|  58.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  58.5k|        T(std::forward<Args>(args)...);
  398|  58.5k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   175k|    {
  718|   175k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   175k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   175k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1739|  61.8k|    {
 1740|  61.8k|        return has_value();
 1741|  61.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   185k|    {
  687|   185k|        return m_has_value;
  688|   185k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1745|  3.31k|    {
 1746|  3.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.31k|        return this->get_unexpected().error();
 1748|  3.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.31k|    {
  670|  3.31k|        return *unexpected_ptr();
  671|  3.31k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1804|  58.5k|    {
 1805|  58.5k|        return std::move(value());
 1806|  58.5k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  58.5k|    {
 1769|  58.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  58.5k|        return this->get_value();
 1771|  58.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  58.5k|    {
  653|  58.5k|        return *value_ptr();
  654|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.8k|    {
  643|  61.8k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 58.5k, False: 3.31k]
  ------------------
  644|  58.5k|            destroy_value();
  645|  58.5k|        }
  646|  3.31k|        else {
  647|  3.31k|            destroy_unexpected();
  648|  3.31k|        }
  649|  61.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  58.5k|    {
  708|  58.5k|        scn::detail::destroy_at(value_ptr());
  709|  58.5k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  401|  58.5k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  58.5k|    else {
  408|  58.5k|        p->~T();
  409|  58.5k|    }
  410|  58.5k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.31k|    {
  712|  3.31k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.31k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.50M|    {
 1740|  1.50M|        return has_value();
 1741|  1.50M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.01M|    {
  490|  3.01M|        return m_has_value;
  491|  3.01M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   145k|    {
 1746|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   145k|        return this->get_unexpected().error();
 1748|   145k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   145k|    {
  473|   145k|        return m_unexpected;
  474|   145k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.07M|    {
 1805|  1.07M|        return std::move(value());
 1806|  1.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.36M|    {
 1769|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.36M|        return this->get_value();
 1771|  1.36M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.36M|    {
  456|  1.36M|        return m_value;
  457|  1.36M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|   647k|    {
 3480|   647k|        return m_iterator;
 3481|   647k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|   647k|    {
 3484|   647k|        return m_sentinel;
 3485|   647k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   286k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   286k|    static_cast<    \
  |  |  935|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   286k|    static_cast<    \
  |  |  935|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   286k|    {
 3466|   286k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  2.64M|    {
 4570|  2.64M|        return !x.is_at_end();
 4571|  2.64M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  11.7k|        : base(unexpect, std::move(e.error())),
 1616|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.7k|    {
 1618|  11.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.7k|          m_has_value(false)
  451|  11.7k|    {
  452|  11.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   964k|    {
 1316|   964k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   952k|        : base(std::in_place, std::forward<U>(val)),
 1570|   952k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   952k|    {
 1572|   952k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   952k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   952k|    {
  442|   952k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|   531k|    {
 1740|   531k|        return has_value();
 1741|   531k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  97.4k|    {
 1795|  97.4k|        return value();
 1796|  97.4k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  8.94k|        : base(unexpect, std::move(e.error())),
 1616|  8.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  8.94k|    {
 1618|  8.94k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  8.94k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  8.94k|          m_has_value(false)
  451|  8.94k|    {
  452|  8.94k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   614k|    {
 1316|   614k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   605k|        : base(std::in_place, std::forward<U>(val)),
 1570|   605k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   605k|    {
 1572|   605k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   605k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   605k|    {
  442|   605k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   614k|    {
 1740|   614k|        return has_value();
 1741|   614k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  8.94k|    {
 1746|  8.94k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  8.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  8.94k|        return this->get_unexpected().error();
 1748|  8.94k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  8.94k|    {
  473|  8.94k|        return m_unexpected;
  474|  8.94k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   605k|    {
 1805|   605k|        return std::move(value());
 1806|   605k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   605k|    {
 1769|   605k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   605k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   605k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   605k|        return this->get_value();
 1771|   605k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   605k|    {
  456|   605k|        return m_value;
  457|   605k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|    360|    {
 1746|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    360|        return this->get_unexpected().error();
 1748|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  12.3k|        : base(unexpect, std::move(e.error())),
 1616|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  12.3k|    {
 1618|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.3k|          m_has_value(false)
  451|  12.3k|    {
  452|  12.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   985k|    {
 1316|   985k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   140k|        : base(std::in_place, std::forward<U>(val)),
 1570|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   140k|    {
 1572|   140k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   140k|    {
  442|   140k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   829k|        : base(unexpect, std::move(e.error())),
 1616|   829k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   829k|    {
 1618|   829k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   829k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   829k|          m_has_value(false)
  451|   829k|    {
  452|   829k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|   985k|    {
 1740|   985k|        return has_value();
 1741|   985k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  1.49M|    {
  490|  1.49M|        return m_has_value;
  491|  1.49M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|   366k|    {
 1746|   366k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   366k|        return this->get_unexpected().error();
 1748|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   366k|    {
  473|   366k|        return m_unexpected;
  474|   366k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   421k|        : base(std::in_place, std::forward<U>(val)),
 1570|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   421k|    {
 1572|   421k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   421k|    {
  442|   421k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   421k|    {
 1316|   421k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   143k|    {
 1795|   143k|        return value();
 1796|   143k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   143k|    {
 1769|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   143k|        return this->get_value();
 1771|   143k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   143k|    {
  456|   143k|        return m_value;
  457|   143k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   421k|    {
 1740|   421k|        return has_value();
 1741|   421k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   843k|    {
  490|   843k|        return m_has_value;
  491|   843k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   421k|    {
 1316|   421k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   421k|    {
 1805|   421k|        return std::move(value());
 1806|   421k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   421k|    {
 1769|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   421k|        return this->get_value();
 1771|   421k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   421k|    {
  456|   421k|        return m_value;
  457|   421k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.59k|    {
 1572|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.59k|    {
  442|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   421k|        : base(std::in_place, std::forward<U>(val)),
 1570|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   421k|    {
 1572|   421k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   421k|    {
  442|   421k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   421k|    {
 1979|   421k|        return detail::transform_error_impl(std::move(*this),
 1980|   421k|                                            std::forward<F>(f));
 1981|   421k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   421k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   421k|    else {
 1472|   421k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   421k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   421k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 421k, False: 0]
  |  |  ------------------
  ------------------
 1474|   421k|                   ? result(*std::forward<Exp>(exp))
 1475|   421k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   421k|    }
 1479|   421k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|   843k|    {
  490|   843k|        return m_has_value;
  491|   843k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   421k|    {
 1805|   421k|        return std::move(value());
 1806|   421k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   421k|    {
 1769|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   421k|        return this->get_value();
 1771|   421k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|   421k|    {
  456|   421k|        return m_value;
  457|   421k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   421k|        : base(std::in_place, std::forward<U>(val)),
 1570|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   421k|    {
 1572|   421k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   421k|    {
  442|   421k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   421k|    {
 1316|   421k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|   421k|    {
 1740|   421k|        return has_value();
 1741|   421k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|   843k|    {
  490|   843k|        return m_has_value;
  491|   843k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   421k|    {
 1805|   421k|        return std::move(value());
 1806|   421k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   421k|    {
 1769|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   421k|        return this->get_value();
 1771|   421k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|   421k|    {
  456|   421k|        return m_value;
  457|   421k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1615|  3.55k|        : base(unexpect, std::move(e.error())),
 1616|  3.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.55k|    {
 1618|  3.55k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  636|  3.55k|        : m_has_value(false)
  637|  3.55k|    {
  638|  3.55k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  3.55k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  700|  3.55k|    {
  701|  3.55k|        scn::detail::construct_at(unexpected_ptr(),
  702|  3.55k|                                  std::forward<Args>(args)...);
  703|  3.55k|        m_has_value = false;
  704|  3.55k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  10.6k|    {
  730|  10.6k|        return reinterpret_cast<unexpected<E>*>(
  731|  10.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  10.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  10.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.9k|    {
 1316|  61.9k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1569|  58.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  58.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  58.4k|    {
 1572|  58.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  626|  58.4k|        : m_has_value(true)
  627|  58.4k|    {
  628|  58.4k|        construct(std::forward<Args>(args)...);
  629|  58.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  693|  58.4k|    {
  694|  58.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  58.4k|        m_has_value = true;
  696|  58.4k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  395|  58.4k|{
  396|  58.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  58.4k|        T(std::forward<Args>(args)...);
  398|  58.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   175k|    {
  718|   175k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   175k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   175k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1739|  61.9k|    {
 1740|  61.9k|        return has_value();
 1741|  61.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  686|   185k|    {
  687|   185k|        return m_has_value;
  688|   185k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1745|  3.55k|    {
 1746|  3.55k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.55k|        return this->get_unexpected().error();
 1748|  3.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  3.55k|    {
  670|  3.55k|        return *unexpected_ptr();
  671|  3.55k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1804|  58.4k|    {
 1805|  58.4k|        return std::move(value());
 1806|  58.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1768|  58.4k|    {
 1769|  58.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  58.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  58.4k|        return this->get_value();
 1771|  58.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  652|  58.4k|    {
  653|  58.4k|        return *value_ptr();
  654|  58.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  642|  61.9k|    {
  643|  61.9k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 58.4k, False: 3.55k]
  ------------------
  644|  58.4k|            destroy_value();
  645|  58.4k|        }
  646|  3.55k|        else {
  647|  3.55k|            destroy_unexpected();
  648|  3.55k|        }
  649|  61.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  58.4k|    {
  708|  58.4k|        scn::detail::destroy_at(value_ptr());
  709|  58.4k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  401|  58.4k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  58.4k|    else {
  408|  58.4k|        p->~T();
  409|  58.4k|    }
  410|  58.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  3.55k|    {
  712|  3.55k|        scn::detail::destroy_at(unexpected_ptr());
  713|  3.55k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.46M|    {
 3000|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.46M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.46M|    {
 2981|  1.46M|        return t.data();
 2982|  1.46M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|   744k|        : base(std::in_place, std::forward<U>(val)),
 1570|   744k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   744k|    {
 1572|   744k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|   744k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   744k|    {
  442|   744k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   285k|    {
 1795|   285k|        return value();
 1796|   285k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   285k|    {
 1795|   285k|        return value();
 1796|   285k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   315k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   315k|    static_cast<    \
  |  |  935|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   315k|    {
 3912|   315k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|   618k|    {
 4559|   618k|        return x.is_at_end();
 4560|   618k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  35.5M|    {
 4603|  35.5M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 35.5M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  35.5M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 35.5M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  35.5M|        return !read_at_position();
 4610|  35.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  71.1G|    {
 4583|  71.1G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  71.1G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.1G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  71.1G|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 71.1G]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  71.1G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  71.1G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 71.1G, False: 35.0M]
  |  |  ------------------
  ------------------
 4590|  71.1G|            return true;
 4591|  71.1G|        }
 4592|       |
 4593|  70.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 35.0M, False: 34.9M]
  ------------------
 4594|  35.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 108k, False: 34.9M]
  ------------------
 4595|   108k|                return false;
 4596|   108k|            }
 4597|  35.0M|        }
 4598|  34.9M|        return true;
 4599|  35.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  71.2G|    {
 4357|  71.2G|        return m_putback_buffer.size() + m_current_view.size();
 4358|  71.2G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  35.6M|    {
 4518|  35.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  35.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  35.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 35.6M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  35.6M|        auto res = read_at_position();
 4527|  35.6M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  35.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  35.6M|        return parent()->get_character_at(m_position);
 4529|  35.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  35.6M|    {
 4388|  35.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  35.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 649k, False: 34.9M]
  |  |  ------------------
  ------------------
 4389|  35.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|   649k|            return m_putback_buffer[pos];
 4391|   649k|        }
 4392|  34.9M|        const auto start = pos - m_putback_buffer.size();
 4393|  34.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  34.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  34.9M|        return m_current_view[start];
 4395|  34.9M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   261k|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   261k|    else {
 4075|       |        // utf-32
 4076|   261k|        static_assert(sizeof(U) == 4);
 4077|   261k|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   261k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   261k|        return 1;
 4079|   261k|    }
 4080|   261k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   374k|        : base(std::in_place, std::forward<U>(val)),
 1570|   374k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   374k|    {
 1572|   374k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   374k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   374k|    {
  442|   374k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   395k|    {
 1316|   395k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  21.3k|        : base(unexpect, std::move(e.error())),
 1616|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.3k|    {
 1618|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.3k|          m_has_value(false)
  451|  21.3k|    {
  452|  21.3k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|   162k|    {
 1740|   162k|        return has_value();
 1741|   162k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  2.22k|    {
 1795|  2.22k|        return value();
 1796|  2.22k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  71.0G|    {
 4553|  71.0G|        return !(lhs == rhs);
 4554|  71.0G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  71.0G|    {
 4548|  71.0G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 71.0G, False: 0]
  |  Branch (4548:46): [True: 34.8M, False: 71.0G]
  ------------------
 4549|  71.0G|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  71.0G|    {
 4504|  71.0G|        ++m_position;
 4505|  71.0G|        (void)read_at_position();
 4506|  71.0G|        return *this;
 4507|  71.0G|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   261k|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   261k|    else {
 4281|   261k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   261k|        auto cp = static_cast<char32_t>(input.front());
 4283|   261k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 107k, False: 154k]
  |  |  ------------------
  ------------------
 4284|   107k|            return invalid_code_point;
 4285|   107k|        }
 4286|   154k|        return cp;
 4287|   261k|    }
 4288|   261k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.57k|        : base(unexpect, std::move(e.error())),
 1616|  1.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.57k|    {
 1618|  1.57k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  1.57k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.57k|          m_has_value(false)
  451|  1.57k|    {
  452|  1.57k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   106k|    {
 1316|   106k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   104k|        : base(std::in_place, std::forward<U>(val)),
 1570|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   104k|    {
 1572|   104k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   104k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   104k|    {
  442|   104k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   106k|    {
 1740|   106k|        return has_value();
 1741|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  1.57k|    {
 1746|  1.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.57k|        return this->get_unexpected().error();
 1748|  1.57k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.57k|    {
  473|  1.57k|        return m_unexpected;
  474|  1.57k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   104k|    {
 1805|   104k|        return std::move(value());
 1806|   104k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   104k|    {
 1769|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   104k|        return this->get_value();
 1771|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   104k|    {
  456|   104k|        return m_value;
  457|   104k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  36.2M|    {
 3484|  36.2M|        return m_sentinel;
 3485|  36.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  19.3k|        : base(unexpect, std::move(e.error())),
 1616|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.3k|    {
 1618|  19.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.7k|          m_has_value(false)
  451|  38.7k|    {
  452|  38.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   512k|    {
 1316|   512k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.58k|    {
 1572|  2.58k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.58k|    {
  442|  2.58k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|   385k|        : base(unexpect, std::move(e.error())),
 1616|   385k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   385k|    {
 1618|   385k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   385k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   385k|          m_has_value(false)
  451|   385k|    {
  452|   385k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|   402k|    {
 1740|   402k|        return has_value();
 1741|   402k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   855k|    {
  490|   855k|        return m_has_value;
  491|   855k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|   145k|    {
 1746|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   145k|        return this->get_unexpected().error();
 1748|   145k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   253k|    {
  473|   253k|        return m_unexpected;
  474|   253k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  2.58k|    {
 1795|  2.58k|        return value();
 1796|  2.58k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  88.9k|    {
 1769|  88.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  88.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  88.9k|        return this->get_value();
 1771|  88.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  88.9k|    {
  456|  88.9k|        return m_value;
  457|  88.9k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   128k|    {
 1740|   128k|        return has_value();
 1741|   128k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   102k|    {
 1979|   102k|        return detail::transform_error_impl(std::move(*this),
 1980|   102k|                                            std::forward<F>(f));
 1981|   102k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   102k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   102k|    else {
 1472|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 83.4k, False: 19.3k]
  |  |  ------------------
  ------------------
 1474|   102k|                   ? result(*std::forward<Exp>(exp))
 1475|   102k|                   : result(unexpect,
 1476|  19.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.3k|                                           std::forward<Exp>(exp).error()));
 1478|   102k|    }
 1479|   102k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  86.3k|        : base(std::in_place, std::forward<U>(val)),
 1570|  86.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  86.3k|    {
 1572|  86.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  86.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  86.3k|    {
  442|  86.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  19.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  19.3k|    {
 1628|  19.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  86.3k|    {
 1805|  86.3k|        return std::move(value());
 1806|  86.3k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   128k|    {
 1979|   128k|        return detail::transform_error_impl(std::move(*this),
 1980|   128k|                                            std::forward<F>(f));
 1981|   128k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1461|   128k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   128k|    else {
 1472|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1474|   128k|                   ? result(*std::forward<Exp>(exp))
 1475|   128k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   128k|    }
 1479|   128k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1739|   128k|    {
 1740|   128k|        return has_value();
 1741|   128k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   110k|    {
 1979|   110k|        return detail::transform_error_impl(std::move(*this),
 1980|   110k|                                            std::forward<F>(f));
 1981|   110k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   110k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   110k|    else {
 1472|   110k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   110k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.94k, False: 107k]
  |  |  ------------------
  ------------------
 1474|   110k|                   ? result(*std::forward<Exp>(exp))
 1475|   110k|                   : result(unexpect,
 1476|   107k|                            trivial_invoke(std::forward<F>(f),
 1477|   107k|                                           std::forward<Exp>(exp).error()));
 1478|   110k|    }
 1479|   110k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1755|   107k|    {
 1756|   107k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|   107k|        return std::move(this->get_unexpected().error());
 1758|   107k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  16.4k|        : base(unexpect, std::move(e.error())),
 1616|  16.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.4k|    {
 1618|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  636|  16.4k|        : m_has_value(false)
  637|  16.4k|    {
  638|  16.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  700|  16.4k|    {
  701|  16.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.4k|                                  std::forward<Args>(args)...);
  703|  16.4k|        m_has_value = false;
  704|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  49.2k|    {
  730|  49.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  49.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  49.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  49.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1569|    596|        : base(std::in_place, std::forward<U>(val)),
 1570|    596|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    596|    {
 1572|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  626|    596|        : m_has_value(true)
  627|    596|    {
  628|    596|        construct(std::forward<Args>(args)...);
  629|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  693|    596|    {
  694|    596|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    596|        m_has_value = true;
  696|    596|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  395|    596|{
  396|    596|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    596|        T(std::forward<Args>(args)...);
  398|    596|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.78k|    {
  718|  1.78k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.78k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  17.0k|    {
 1740|  17.0k|        return has_value();
 1741|  17.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  51.0k|    {
  687|  51.0k|        return m_has_value;
  688|  51.0k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.4k|    {
 1746|  16.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.4k|        return this->get_unexpected().error();
 1748|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.4k|    {
  670|  16.4k|        return *unexpected_ptr();
  671|  16.4k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1804|    596|    {
 1805|    596|        return std::move(value());
 1806|    596|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|    596|    {
 1769|    596|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    596|        return this->get_value();
 1771|    596|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    596|    {
  653|    596|        return *value_ptr();
  654|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  17.0k|    {
  643|  17.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 596, False: 16.4k]
  ------------------
  644|    596|            destroy_value();
  645|    596|        }
  646|  16.4k|        else {
  647|  16.4k|            destroy_unexpected();
  648|  16.4k|        }
  649|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    596|    {
  708|    596|        scn::detail::destroy_at(value_ptr());
  709|    596|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  401|    596|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    596|    else {
  408|    596|        p->~T();
  409|    596|    }
  410|    596|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.4k|    {
  712|  16.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.4k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   473k|    {
 1740|   473k|        return has_value();
 1741|   473k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   947k|    {
  490|   947k|        return m_has_value;
  491|   947k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   336k|    {
 1746|   336k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   336k|        return this->get_unexpected().error();
 1748|   336k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   336k|    {
  473|   336k|        return m_unexpected;
  474|   336k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   134k|    {
 1805|   134k|        return std::move(value());
 1806|   134k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   137k|    {
 1769|   137k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   137k|        return this->get_value();
 1771|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   137k|    {
  456|   137k|        return m_value;
  457|   137k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|  7.09k|    {
 3480|  7.09k|        return m_iterator;
 3481|  7.09k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|  7.09k|    {
 3484|  7.09k|        return m_sentinel;
 3485|  7.09k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  2.94k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.94k|    static_cast<    \
  |  |  935|  2.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.94k|    static_cast<    \
  |  |  935|  2.94k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.94k|    {
 3466|  2.94k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  34.9M|    {
 4570|  34.9M|        return !x.is_at_end();
 4571|  34.9M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  21.3k|        : base(unexpect, std::move(e.error())),
 1616|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.3k|    {
 1618|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  21.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  21.3k|          m_has_value(false)
  451|  21.3k|    {
  452|  21.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   395k|    {
 1316|   395k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   374k|        : base(std::in_place, std::forward<U>(val)),
 1570|   374k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   374k|    {
 1572|   374k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   374k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   374k|    {
  442|   374k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   162k|    {
 1740|   162k|        return has_value();
 1741|   162k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   631k|    {
  490|   631k|        return m_has_value;
  491|   631k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.22k|    {
 1795|  2.22k|        return value();
 1796|  2.22k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   214k|    {
 1769|   214k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   214k|        return this->get_value();
 1771|   214k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   214k|    {
  456|   214k|        return m_value;
  457|   214k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.57k|        : base(unexpect, std::move(e.error())),
 1616|  1.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.57k|    {
 1618|  1.57k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.57k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.57k|          m_has_value(false)
  451|  1.57k|    {
  452|  1.57k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   106k|    {
 1316|   106k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   104k|        : base(std::in_place, std::forward<U>(val)),
 1570|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   104k|    {
 1572|   104k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   104k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   104k|    {
  442|   104k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   130k|    {
 1979|   130k|        return detail::transform_error_impl(std::move(*this),
 1980|   130k|                                            std::forward<F>(f));
 1981|   130k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   130k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   130k|    else {
 1472|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 128k, False: 1.95k]
  |  |  ------------------
  ------------------
 1474|   130k|                   ? result(*std::forward<Exp>(exp))
 1475|   130k|                   : result(unexpect,
 1476|  1.95k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.95k|                                           std::forward<Exp>(exp).error()));
 1478|   130k|    }
 1479|   130k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   211k|    {
 1805|   211k|        return std::move(value());
 1806|   211k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  21.2k|    {
 1756|  21.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  21.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  21.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  21.2k|        return std::move(this->get_unexpected().error());
 1758|  21.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  21.3k|    {
  473|  21.3k|        return m_unexpected;
  474|  21.3k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.95k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.95k|    {
 1628|  1.95k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   106k|    {
 1740|   106k|        return has_value();
 1741|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|   212k|    {
  490|   212k|        return m_has_value;
  491|   212k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.57k|    {
 1746|  1.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.57k|        return this->get_unexpected().error();
 1748|  1.57k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.57k|    {
  473|  1.57k|        return m_unexpected;
  474|  1.57k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   104k|    {
 1805|   104k|        return std::move(value());
 1806|   104k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   104k|    {
 1769|   104k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   104k|        return this->get_value();
 1771|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   104k|    {
  456|   104k|        return m_value;
  457|   104k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|     72|    {
 1746|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|     72|        return this->get_unexpected().error();
 1748|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  19.3k|        : base(unexpect, std::move(e.error())),
 1616|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.3k|    {
 1618|  19.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  38.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  38.7k|          m_has_value(false)
  451|  38.7k|    {
  452|  38.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   402k|    {
 1316|   402k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.58k|    {
 1572|  2.58k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.58k|    {
  442|  2.58k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   277k|        : base(unexpect, std::move(e.error())),
 1616|   277k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   277k|    {
 1618|   277k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|   277k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   277k|          m_has_value(false)
  451|   277k|    {
  452|   277k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|   402k|    {
 1740|   402k|        return has_value();
 1741|   402k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|   634k|    {
  490|   634k|        return m_has_value;
  491|   634k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|   145k|    {
 1746|   145k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   145k|        return this->get_unexpected().error();
 1748|   145k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|   145k|    {
  473|   145k|        return m_unexpected;
  474|   145k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  2.58k|    {
 1795|  2.58k|        return value();
 1796|  2.58k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  86.0k|    {
 1769|  86.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  86.0k|        return this->get_value();
 1771|  86.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  86.0k|    {
  456|  86.0k|        return m_value;
  457|  86.0k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|   128k|    {
 1740|   128k|        return has_value();
 1741|   128k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   102k|    {
 1979|   102k|        return detail::transform_error_impl(std::move(*this),
 1980|   102k|                                            std::forward<F>(f));
 1981|   102k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   102k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   102k|    else {
 1472|   102k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   102k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 83.4k, False: 19.3k]
  |  |  ------------------
  ------------------
 1474|   102k|                   ? result(*std::forward<Exp>(exp))
 1475|   102k|                   : result(unexpect,
 1476|  19.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.3k|                                           std::forward<Exp>(exp).error()));
 1478|   102k|    }
 1479|   102k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  83.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  83.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  83.4k|    {
 1572|  83.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  83.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  83.4k|    {
  442|  83.4k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  19.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  19.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  19.3k|    {
 1628|  19.3k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  83.4k|    {
 1805|  83.4k|        return std::move(value());
 1806|  83.4k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   128k|    {
 1979|   128k|        return detail::transform_error_impl(std::move(*this),
 1980|   128k|                                            std::forward<F>(f));
 1981|   128k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|   128k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   128k|    else {
 1472|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1474|   128k|                   ? result(*std::forward<Exp>(exp))
 1475|   128k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   128k|    }
 1479|   128k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   128k|        : base(std::in_place, std::forward<U>(val)),
 1570|   128k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   128k|    {
 1572|   128k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|   128k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   128k|    {
  442|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   128k|    {
 1316|   128k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1739|   128k|    {
 1740|   128k|        return has_value();
 1741|   128k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  489|   256k|    {
  490|   256k|        return m_has_value;
  491|   256k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   128k|    {
 1805|   128k|        return std::move(value());
 1806|   128k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   128k|    {
 1769|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   128k|        return this->get_value();
 1771|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  455|   128k|    {
  456|   128k|        return m_value;
  457|   128k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  16.4k|        : base(unexpect, std::move(e.error())),
 1616|  16.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  16.4k|    {
 1618|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  636|  16.4k|        : m_has_value(false)
  637|  16.4k|    {
  638|  16.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  700|  16.4k|    {
  701|  16.4k|        scn::detail::construct_at(unexpected_ptr(),
  702|  16.4k|                                  std::forward<Args>(args)...);
  703|  16.4k|        m_has_value = false;
  704|  16.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  49.2k|    {
  730|  49.2k|        return reinterpret_cast<unexpected<E>*>(
  731|  49.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  49.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  49.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  17.0k|    {
 1316|  17.0k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1569|    596|        : base(std::in_place, std::forward<U>(val)),
 1570|    596|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    596|    {
 1572|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  626|    596|        : m_has_value(true)
  627|    596|    {
  628|    596|        construct(std::forward<Args>(args)...);
  629|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  693|    596|    {
  694|    596|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|    596|        m_has_value = true;
  696|    596|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  395|    596|{
  396|    596|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|    596|        T(std::forward<Args>(args)...);
  398|    596|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  1.78k|    {
  718|  1.78k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  1.78k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  1.78k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  17.0k|    {
 1740|  17.0k|        return has_value();
 1741|  17.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  51.0k|    {
  687|  51.0k|        return m_has_value;
  688|  51.0k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1745|  16.4k|    {
 1746|  16.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  16.4k|        return this->get_unexpected().error();
 1748|  16.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  669|  16.4k|    {
  670|  16.4k|        return *unexpected_ptr();
  671|  16.4k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1804|    596|    {
 1805|    596|        return std::move(value());
 1806|    596|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|    596|    {
 1769|    596|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|    596|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    596|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|    596|        return this->get_value();
 1771|    596|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|    596|    {
  653|    596|        return *value_ptr();
  654|    596|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  17.0k|    {
  643|  17.0k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 596, False: 16.4k]
  ------------------
  644|    596|            destroy_value();
  645|    596|        }
  646|  16.4k|        else {
  647|  16.4k|            destroy_unexpected();
  648|  16.4k|        }
  649|  17.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|    596|    {
  708|    596|        scn::detail::destroy_at(value_ptr());
  709|    596|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  401|    596|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|    596|    else {
  408|    596|        p->~T();
  409|    596|    }
  410|    596|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  16.4k|    {
  712|  16.4k|        scn::detail::destroy_at(unexpected_ptr());
  713|  16.4k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   420k|    {
 3000|   420k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   420k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   420k|    {
 2981|   420k|        return t.data();
 2982|   420k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  2.60k|    {
 1795|  2.60k|        return value();
 1796|  2.60k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  2.60k|    {
 1795|  2.60k|        return value();
 1796|  2.60k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   110k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   110k|    static_cast<    \
  |  |  935|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   110k|    {
 3912|   110k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  25.9M|    {
 4357|  25.9M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  25.9M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|   851k|    {
 6177|   851k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 851k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   851k|        return static_cast<std::size_t>(m_desc &
 6182|   851k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   851k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  1.70M|    {
 6203|  1.70M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  1.70M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|   851k|    {
 6145|   851k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 851k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   851k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 851k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   851k|        const auto t = type(id);
 6157|   851k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   851k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 851k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   851k|        basic_scan_arg<Context> arg;
 6162|   851k|        arg.m_type = t;
 6163|   851k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 851k, False: 0]
  ------------------
 6164|   851k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   851k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   851k|        return arg;
 6170|   851k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|   851k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   851k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   851k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   851k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   851k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|   851k|    {
 6207|   851k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   851k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  1.58M|    {
 5961|  1.58M|        return m_type != detail::arg_type::none_type;
 5962|  1.58M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|  97.0k|{
 9300|  97.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  97.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  97.0k|{
 9201|  97.0k|#define SCN_VISIT(Type)                                                \
 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  97.0k|    }                                                                  \
 9205|  97.0k|    else {                                                             \
 9206|  97.0k|        return vis(monostate_val);                                     \
 9207|  97.0k|    }
 9208|       |
 9209|  97.0k|    monostate monostate_val{};
 9210|       |
 9211|  97.0k|    switch (get_arg_type(arg)) {
 9212|  16.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 16.1k, False: 80.9k]
  ------------------
 9213|  16.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.1k|    }                                                                  \
  |  | 9205|  16.1k|    else {                                                             \
  |  | 9206|  16.1k|        return vis(monostate_val);                                     \
  |  | 9207|  16.1k|    }
  ------------------
 9214|  16.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 97.0k]
  ------------------
 9215|  16.1k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.1k|    }                                                                  \
  |  | 9205|  16.1k|    else {                                                             \
  |  | 9206|  16.1k|        return vis(monostate_val);                                     \
  |  | 9207|  16.1k|    }
  ------------------
 9216|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.6k, False: 78.4k]
  ------------------
 9217|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9218|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 97.0k]
  ------------------
 9219|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9220|  53.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.9k, False: 78.0k]
  ------------------
 9221|  53.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  53.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  53.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  53.7k|    }                                                                  \
  |  | 9205|  53.7k|    else {                                                             \
  |  | 9206|  53.7k|        return vis(monostate_val);                                     \
  |  | 9207|  53.7k|    }
  ------------------
 9222|  67.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.4k, False: 83.5k]
  ------------------
 9223|  67.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  67.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  67.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  67.2k|    }                                                                  \
  |  | 9205|  67.2k|    else {                                                             \
  |  | 9206|  67.2k|        return vis(monostate_val);                                     \
  |  | 9207|  67.2k|    }
  ------------------
 9224|  67.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 97.0k]
  ------------------
 9225|  67.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  67.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  67.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  67.2k|    }                                                                  \
  |  | 9205|  67.2k|    else {                                                             \
  |  | 9206|  67.2k|        return vis(monostate_val);                                     \
  |  | 9207|  67.2k|    }
  ------------------
 9226|  82.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.8k, False: 82.2k]
  ------------------
 9227|  82.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  82.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  82.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  82.0k|    }                                                                  \
  |  | 9205|  82.0k|    else {                                                             \
  |  | 9206|  82.0k|        return vis(monostate_val);                                     \
  |  | 9207|  82.0k|    }
  ------------------
 9228|  82.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 97.0k]
  ------------------
 9229|  82.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  82.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  82.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  82.0k|    }                                                                  \
  |  | 9205|  82.0k|    else {                                                             \
  |  | 9206|  82.0k|        return vis(monostate_val);                                     \
  |  | 9207|  82.0k|    }
  ------------------
 9230|  97.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 15.0k, False: 82.0k]
  ------------------
 9231|  97.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9232|  97.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 97.0k]
  ------------------
 9233|  97.0k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9234|  97.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 97.0k]
  ------------------
 9235|  97.0k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9236|  97.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 97.0k]
  ------------------
 9237|  97.0k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9238|  97.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 97.0k]
  ------------------
 9239|  97.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9240|  97.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 97.0k]
  ------------------
 9241|  97.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9242|  97.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 97.0k]
  ------------------
 9243|  97.0k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9244|  97.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 97.0k]
  ------------------
 9245|  97.0k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9246|  97.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 97.0k]
  ------------------
 9247|  97.0k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9248|  97.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 97.0k]
  ------------------
 9249|  97.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9250|  97.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 97.0k]
  ------------------
 9251|  97.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9252|  97.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 97.0k]
  ------------------
 9253|  97.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9254|  97.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 97.0k]
  ------------------
 9255|  97.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9256|  97.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 97.0k]
  ------------------
 9257|  97.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9258|  97.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 97.0k]
  ------------------
 9259|  97.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  97.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  97.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  97.0k|    }                                                                  \
  |  | 9205|  97.0k|    else {                                                             \
  |  | 9206|  97.0k|        return vis(monostate_val);                                     \
  |  | 9207|  97.0k|    }
  ------------------
 9260|       |
 9261|  97.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 97.0k]
  ------------------
 9262|  97.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  97.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  97.0k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 97.0k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 97.0k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  97.0k|            SCN_CLANG_POP
 9279|  97.0k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  2.31M|{
 6006|  2.31M|    return arg.m_type;
 6007|  2.31M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   865k|{
 6018|   865k|    return arg.m_value;
 6019|   865k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|   723k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   723k|    {
 6258|   723k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   361k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   361k|    {
 8934|   361k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   457k|{
 4691|   457k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 457k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   457k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   457k|                            ranges::default_sentinel};
 4697|   457k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   457k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   457k|    {
 4455|   457k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   457k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   457k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  95.6k|{
 9300|  95.6k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  95.6k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  95.6k|{
 9201|  95.6k|#define SCN_VISIT(Type)                                                \
 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  95.6k|    }                                                                  \
 9205|  95.6k|    else {                                                             \
 9206|  95.6k|        return vis(monostate_val);                                     \
 9207|  95.6k|    }
 9208|       |
 9209|  95.6k|    monostate monostate_val{};
 9210|       |
 9211|  95.6k|    switch (get_arg_type(arg)) {
 9212|  16.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 16.1k, False: 79.5k]
  ------------------
 9213|  16.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.1k|    }                                                                  \
  |  | 9205|  16.1k|    else {                                                             \
  |  | 9206|  16.1k|        return vis(monostate_val);                                     \
  |  | 9207|  16.1k|    }
  ------------------
 9214|  16.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 95.6k]
  ------------------
 9215|  16.1k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  16.1k|    }                                                                  \
  |  | 9205|  16.1k|    else {                                                             \
  |  | 9206|  16.1k|        return vis(monostate_val);                                     \
  |  | 9207|  16.1k|    }
  ------------------
 9216|  34.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 18.0k, False: 77.6k]
  ------------------
 9217|  34.1k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.1k|    }                                                                  \
  |  | 9205|  34.1k|    else {                                                             \
  |  | 9206|  34.1k|        return vis(monostate_val);                                     \
  |  | 9207|  34.1k|    }
  ------------------
 9218|  34.1k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 95.6k]
  ------------------
 9219|  34.1k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.1k|    }                                                                  \
  |  | 9205|  34.1k|    else {                                                             \
  |  | 9206|  34.1k|        return vis(monostate_val);                                     \
  |  | 9207|  34.1k|    }
  ------------------
 9220|  52.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 18.3k, False: 77.3k]
  ------------------
 9221|  52.5k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  52.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  52.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  52.5k|    }                                                                  \
  |  | 9205|  52.5k|    else {                                                             \
  |  | 9206|  52.5k|        return vis(monostate_val);                                     \
  |  | 9207|  52.5k|    }
  ------------------
 9222|  65.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 13.4k, False: 82.2k]
  ------------------
 9223|  65.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  65.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.9k|    }                                                                  \
  |  | 9205|  65.9k|    else {                                                             \
  |  | 9206|  65.9k|        return vis(monostate_val);                                     \
  |  | 9207|  65.9k|    }
  ------------------
 9224|  65.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 95.6k]
  ------------------
 9225|  65.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  65.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  65.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  65.9k|    }                                                                  \
  |  | 9205|  65.9k|    else {                                                             \
  |  | 9206|  65.9k|        return vis(monostate_val);                                     \
  |  | 9207|  65.9k|    }
  ------------------
 9226|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 14.7k, False: 80.9k]
  ------------------
 9227|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.7k|    }                                                                  \
  |  | 9205|  80.7k|    else {                                                             \
  |  | 9206|  80.7k|        return vis(monostate_val);                                     \
  |  | 9207|  80.7k|    }
  ------------------
 9228|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 95.6k]
  ------------------
 9229|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  80.7k|    }                                                                  \
  |  | 9205|  80.7k|    else {                                                             \
  |  | 9206|  80.7k|        return vis(monostate_val);                                     \
  |  | 9207|  80.7k|    }
  ------------------
 9230|  95.6k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 14.9k, False: 80.7k]
  ------------------
 9231|  95.6k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9232|  95.6k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 95.6k]
  ------------------
 9233|  95.6k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9234|  95.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 95.6k]
  ------------------
 9235|  95.6k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9236|  95.6k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 95.6k]
  ------------------
 9237|  95.6k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9238|  95.6k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 95.6k]
  ------------------
 9239|  95.6k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9240|  95.6k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 95.6k]
  ------------------
 9241|  95.6k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9242|  95.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 95.6k]
  ------------------
 9243|  95.6k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9244|  95.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 95.6k]
  ------------------
 9245|  95.6k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9246|  95.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 95.6k]
  ------------------
 9247|  95.6k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9248|  95.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 95.6k]
  ------------------
 9249|  95.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9250|  95.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 95.6k]
  ------------------
 9251|  95.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9252|  95.6k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 95.6k]
  ------------------
 9253|  95.6k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9254|  95.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 95.6k]
  ------------------
 9255|  95.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9256|  95.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 95.6k]
  ------------------
 9257|  95.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9258|  95.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 95.6k]
  ------------------
 9259|  95.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  95.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  95.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  95.6k|    }                                                                  \
  |  | 9205|  95.6k|    else {                                                             \
  |  | 9206|  95.6k|        return vis(monostate_val);                                     \
  |  | 9207|  95.6k|    }
  ------------------
 9260|       |
 9261|  95.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 95.6k]
  ------------------
 9262|  95.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  95.6k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  95.6k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 95.6k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 95.6k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  95.6k|            SCN_CLANG_POP
 9279|  95.6k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   361k|    {
 3075|   361k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   361k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   361k|    {
 3041|   361k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   361k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   361k|{
 7793|   361k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   361k|    handler.check_args_exhausted();
 7795|   361k|    return handler.get_error();
 7796|   361k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   361k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   361k|    auto begin = format.data();
 7761|   361k|    auto it = begin;
 7762|   361k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   646k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 361k, False: 285k]
  ------------------
 7765|   361k|        const auto ch = *it++;
 7766|   361k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 361k, False: 0]
  ------------------
 7767|   361k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   361k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   361k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 76.2k, False: 285k]
  ------------------
 7771|  76.2k|                return;
 7772|  76.2k|            }
 7773|   361k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   361k|    }
 7784|       |
 7785|   285k|    handler.on_literal_text(begin, end);
 7786|   285k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|   361k|{
 7690|   361k|    struct id_adapter {
 7691|   361k|        constexpr void operator()()
 7692|   361k|        {
 7693|   361k|            arg_id = handler.on_arg_id();
 7694|   361k|        }
 7695|   361k|        constexpr void operator()(std::size_t id)
 7696|   361k|        {
 7697|   361k|            arg_id = handler.on_arg_id(id);
 7698|   361k|        }
 7699|       |
 7700|   361k|        constexpr void on_error(const char* msg)
 7701|   361k|        {
 7702|   361k|            SCN_UNLIKELY_ATTR
 7703|   361k|            handler.on_error(msg);
 7704|   361k|        }
 7705|       |
 7706|   361k|        Handler& handler;
 7707|   361k|        std::size_t arg_id;
 7708|   361k|    };
 7709|       |
 7710|   361k|    ++begin;
 7711|   361k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   361k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 361k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   361k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 361k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   361k|    else {
 7723|   361k|        auto adapter = id_adapter{handler, 0};
 7724|   361k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   361k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   361k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 361k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   361k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 361k, False: 0]
  ------------------
 7735|   361k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   361k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   361k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.4k, False: 335k]
  |  |  |  Branch (865:45): [True: 0, False: 361k]
  |  |  |  Branch (865:45): [True: 25.4k, False: 335k]
  |  |  ------------------
  ------------------
 7741|  25.4k|                handler.on_error("Unknown format specifier");
 7742|  25.4k|                return begin;
 7743|  25.4k|            }
 7744|   361k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   361k|    }
 7751|   335k|    return begin + 1;
 7752|   361k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|   723k|    {
 8832|   723k|        return m_args.get(id);
 8833|   723k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|   723k|    {
 6286|   723k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 723k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   723k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   723k|        do_check_arg_id(id);
 6294|   723k|        return id;
 6295|   723k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|   723k|{
 6806|   723k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   723k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   723k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   361k|{
 7191|   361k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   361k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 361k, False: 0]
  |  Branch (7192:26): [True: 0, False: 361k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   361k|    handler();
 7197|   361k|    return begin;
 7198|   361k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   361k|        {
 7693|   361k|            arg_id = handler.on_arg_id();
 7694|   361k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|   672k|    {
 6281|   672k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   672k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  1.39M|    {
 6270|  1.39M|        return m_format.data();
 6271|  1.39M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   361k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   361k|    {
 7871|   361k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   361k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|   361k|{
 7606|   361k|    auto do_presentation = [&]() -> const CharT* {
 7607|   361k|        if (*begin == CharT{'['}) {
 7608|   361k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   361k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   361k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   361k|                return begin;
 7614|   361k|            }
 7615|   361k|            handler.on_character_set_string(set);
 7616|   361k|            return begin;
 7617|   361k|        }
 7618|   361k|        if (*begin == CharT{'/'}) {
 7619|   361k|            return parse_presentation_regex(begin, end, handler);
 7620|   361k|        }
 7621|   361k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   361k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   361k|            handler.on_error("Invalid type specifier in format string");
 7624|   361k|            return begin;
 7625|   361k|        }
 7626|   361k|        handler.on_type(type);
 7627|   361k|        return begin;
 7628|   361k|    };
 7629|       |
 7630|   361k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 361k, False: 0]
  |  Branch (7630:28): [True: 344k, False: 16.9k]
  ------------------
 7631|   361k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 335k, False: 8.47k]
  |  Branch (7631:36): [True: 270k, False: 65.7k]
  ------------------
 7632|   270k|        return do_presentation();
 7633|   270k|    }
 7634|       |
 7635|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  91.1k|    begin = parse_align(begin, end, handler);
 7641|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  91.1k|    begin = parse_width(begin, end, handler);
 7647|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  91.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 91.1k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  91.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 65.7k, False: 25.4k]
  ------------------
 7666|  65.7k|        handler.on_localized();
 7667|  65.7k|        ++begin;
 7668|  65.7k|    }
 7669|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  91.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 91.1k, False: 0]
  |  Branch (7674:25): [True: 25.4k, False: 65.7k]
  ------------------
 7675|  25.4k|        do_presentation();
 7676|  25.4k|    }
 7677|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  91.1k|    return begin;
 7683|  91.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|   689k|{
 7255|   689k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 540k, False: 148k]
  |  Branch (7255:33): [True: 540k, False: 0]
  ------------------
 7256|   689k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 131k, False: 16.9k]
  |  Branch (7256:33): [True: 131k, False: 0]
  ------------------
 7257|   689k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   295k|    auto do_presentation = [&]() -> const CharT* {
 7607|   295k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 295k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   295k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 295k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   295k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   295k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 278k]
  |  |  ------------------
  ------------------
 7623|  16.9k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.9k|            return begin;
 7625|  16.9k|        }
 7626|   278k|        handler.on_type(type);
 7627|   278k|        return begin;
 7628|   295k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|   591k|{
 7203|   591k|    switch (type) {
 7204|  45.4k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 45.4k, False: 546k]
  ------------------
 7205|  62.4k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 16.9k, False: 574k]
  ------------------
 7206|  62.4k|            return presentation_type::int_binary;
 7207|   129k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 129k, False: 462k]
  ------------------
 7208|   129k|            return presentation_type::int_decimal;
 7209|   147k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 147k, False: 444k]
  ------------------
 7210|   147k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 591k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  81.3k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 81.3k, False: 510k]
  ------------------
 7214|  81.3k|            return presentation_type::int_octal;
 7215|   137k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 137k, False: 454k]
  ------------------
 7216|   137k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 591k]
  ------------------
 7217|   137k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 591k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 591k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 591k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 591k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 591k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 591k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 591k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 591k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 591k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 591k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 591k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 591k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 591k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 591k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 591k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 591k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  33.8k|        default:
  ------------------
  |  Branch (7247:9): [True: 33.8k, False: 557k]
  ------------------
 7248|  33.8k|            return presentation_type::none;
 7249|   591k|    }
 7250|   591k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|  91.1k|{
 7280|  91.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  91.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  91.1k|    auto check_align = [](wchar_t ch) {
 7283|  91.1k|        switch (ch) {
 7284|  91.1k|            case L'<':
 7285|  91.1k|                return align_type::left;
 7286|  91.1k|            case L'>':
 7287|  91.1k|                return align_type::right;
 7288|  91.1k|            case L'^':
 7289|  91.1k|                return align_type::center;
 7290|  91.1k|            default:
 7291|  91.1k|                return align_type::none;
 7292|  91.1k|        }
 7293|  91.1k|    };
 7294|       |
 7295|  91.1k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  91.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  |  Branch (865:45): [True: 0, False: 91.1k]
  |  |  |  Branch (865:45): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7297|  91.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  91.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  91.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  91.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  91.1k|    const auto begin_before_fill = begin;
 7307|  91.1k|    begin += potential_fill_len;
 7308|       |
 7309|  91.1k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 91.1k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  91.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  91.1k|    const auto begin_after_fill = begin;
 7315|  91.1k|    ++begin;
 7316|       |
 7317|  91.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 91.1k, False: 0]
  ------------------
 7318|  91.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  91.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 91.1k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  91.1k|    }
 7326|       |
 7327|  91.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 91.1k, False: 0]
  ------------------
 7328|  91.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 91.1k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  91.1k|        return begin_before_fill;
 7333|  91.1k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  91.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|   182k|{
 7262|   182k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|   182k|    else {
 7267|   182k|        const auto lengths =
 7268|   182k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|   182k|            "\3\4";
 7270|   182k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|   182k|        return len;
 7272|   182k|    }
 7273|   182k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   182k|    auto check_align = [](wchar_t ch) {
 7283|   182k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 182k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 182k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 182k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   182k|            default:
  ------------------
  |  Branch (7290:13): [True: 182k, False: 0]
  ------------------
 7291|   182k|                return align_type::none;
 7292|   182k|        }
 7293|   182k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|  91.1k|{
 7345|  91.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  91.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  91.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 74.1k, False: 16.9k]
  |  Branch (7347:33): [True: 0, False: 74.1k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  91.1k|    return begin;
 7358|  91.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|  65.7k|    {
 7876|  65.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  65.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 29.2k, False: 36.4k]
  ------------------
 7878|  65.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 29.2k]
  ------------------
 7879|  65.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  65.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  65.7k|        Handler::on_localized();
 7888|  65.7k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|   166k|    {
 7025|   166k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|   166k|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|   166k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   335k|{
 9300|   335k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   335k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   335k|{
 9201|   335k|#define SCN_VISIT(Type)                                                \
 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   335k|    }                                                                  \
 9205|   335k|    else {                                                             \
 9206|   335k|        return vis(monostate_val);                                     \
 9207|   335k|    }
 9208|       |
 9209|   335k|    monostate monostate_val{};
 9210|       |
 9211|   335k|    switch (get_arg_type(arg)) {
 9212|  54.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 54.2k, False: 281k]
  ------------------
 9213|  54.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  54.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  54.2k|    }                                                                  \
  |  | 9205|  54.2k|    else {                                                             \
  |  | 9206|  54.2k|        return vis(monostate_val);                                     \
  |  | 9207|  54.2k|    }
  ------------------
 9214|  54.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 335k]
  ------------------
 9215|  54.2k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  54.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  54.2k|    }                                                                  \
  |  | 9205|  54.2k|    else {                                                             \
  |  | 9206|  54.2k|        return vis(monostate_val);                                     \
  |  | 9207|  54.2k|    }
  ------------------
 9216|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 64.1k, False: 271k]
  ------------------
 9217|   118k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   118k|    }                                                                  \
  |  | 9205|   118k|    else {                                                             \
  |  | 9206|   118k|        return vis(monostate_val);                                     \
  |  | 9207|   118k|    }
  ------------------
 9218|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 335k]
  ------------------
 9219|   118k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   118k|    }                                                                  \
  |  | 9205|   118k|    else {                                                             \
  |  | 9206|   118k|        return vis(monostate_val);                                     \
  |  | 9207|   118k|    }
  ------------------
 9220|   183k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 65.3k, False: 270k]
  ------------------
 9221|   183k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   183k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   183k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   183k|    }                                                                  \
  |  | 9205|   183k|    else {                                                             \
  |  | 9206|   183k|        return vis(monostate_val);                                     \
  |  | 9207|   183k|    }
  ------------------
 9222|   231k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.7k, False: 288k]
  ------------------
 9223|   231k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   231k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   231k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   231k|    }                                                                  \
  |  | 9205|   231k|    else {                                                             \
  |  | 9206|   231k|        return vis(monostate_val);                                     \
  |  | 9207|   231k|    }
  ------------------
 9224|   231k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 335k]
  ------------------
 9225|   231k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   231k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   231k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   231k|    }                                                                  \
  |  | 9205|   231k|    else {                                                             \
  |  | 9206|   231k|        return vis(monostate_val);                                     \
  |  | 9207|   231k|    }
  ------------------
 9226|   283k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 51.9k, False: 284k]
  ------------------
 9227|   283k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   283k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   283k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   283k|    }                                                                  \
  |  | 9205|   283k|    else {                                                             \
  |  | 9206|   283k|        return vis(monostate_val);                                     \
  |  | 9207|   283k|    }
  ------------------
 9228|   283k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 335k]
  ------------------
 9229|   283k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   283k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   283k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   283k|    }                                                                  \
  |  | 9205|   283k|    else {                                                             \
  |  | 9206|   283k|        return vis(monostate_val);                                     \
  |  | 9207|   283k|    }
  ------------------
 9230|   335k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.5k, False: 283k]
  ------------------
 9231|   335k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9232|   335k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 335k]
  ------------------
 9233|   335k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9234|   335k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 335k]
  ------------------
 9235|   335k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9236|   335k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 335k]
  ------------------
 9237|   335k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9238|   335k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 335k]
  ------------------
 9239|   335k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9240|   335k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 335k]
  ------------------
 9241|   335k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9242|   335k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 335k]
  ------------------
 9243|   335k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9244|   335k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 335k]
  ------------------
 9245|   335k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9246|   335k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 335k]
  ------------------
 9247|   335k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9248|   335k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 335k]
  ------------------
 9249|   335k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9250|   335k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 335k]
  ------------------
 9251|   335k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9252|   335k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 335k]
  ------------------
 9253|   335k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9254|   335k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 335k]
  ------------------
 9255|   335k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9256|   335k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 335k]
  ------------------
 9257|   335k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9258|   335k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 335k]
  ------------------
 9259|   335k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   335k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   335k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   335k|    }                                                                  \
  |  | 9205|   335k|    else {                                                             \
  |  | 9206|   335k|        return vis(monostate_val);                                     \
  |  | 9207|   335k|    }
  ------------------
 9260|       |
 9261|   335k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 335k]
  ------------------
 9262|   335k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   335k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   335k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 335k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 335k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   335k|            SCN_CLANG_POP
 9279|   335k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   361k|{
 7793|   361k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   361k|    handler.check_args_exhausted();
 7795|   361k|    return handler.get_error();
 7796|   361k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   361k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   361k|    auto begin = format.data();
 7761|   361k|    auto it = begin;
 7762|   361k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   647k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 361k, False: 285k]
  ------------------
 7765|   361k|        const auto ch = *it++;
 7766|   361k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 361k, False: 0]
  ------------------
 7767|   361k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   361k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   361k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 76.2k, False: 285k]
  ------------------
 7771|  76.2k|                return;
 7772|  76.2k|            }
 7773|   361k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   361k|    }
 7784|       |
 7785|   285k|    handler.on_literal_text(begin, end);
 7786|   285k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   285k|    {
 8971|   285k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   285k|    static_cast<    \
  |  |  935|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   285k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|   361k|{
 7690|   361k|    struct id_adapter {
 7691|   361k|        constexpr void operator()()
 7692|   361k|        {
 7693|   361k|            arg_id = handler.on_arg_id();
 7694|   361k|        }
 7695|   361k|        constexpr void operator()(std::size_t id)
 7696|   361k|        {
 7697|   361k|            arg_id = handler.on_arg_id(id);
 7698|   361k|        }
 7699|       |
 7700|   361k|        constexpr void on_error(const char* msg)
 7701|   361k|        {
 7702|   361k|            SCN_UNLIKELY_ATTR
 7703|   361k|            handler.on_error(msg);
 7704|   361k|        }
 7705|       |
 7706|   361k|        Handler& handler;
 7707|   361k|        std::size_t arg_id;
 7708|   361k|    };
 7709|       |
 7710|   361k|    ++begin;
 7711|   361k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   361k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 361k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   361k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 361k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   361k|    else {
 7723|   361k|        auto adapter = id_adapter{handler, 0};
 7724|   361k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   361k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   361k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 361k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   361k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 361k, False: 0]
  ------------------
 7735|   361k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   361k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   361k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.4k, False: 336k]
  |  |  |  Branch (865:45): [True: 0, False: 361k]
  |  |  |  Branch (865:45): [True: 25.4k, False: 336k]
  |  |  ------------------
  ------------------
 7741|  25.4k|                handler.on_error("Unknown format specifier");
 7742|  25.4k|                return begin;
 7743|  25.4k|            }
 7744|   361k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   361k|    }
 7751|   336k|    return begin + 1;
 7752|   361k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   361k|{
 7191|   361k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   361k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 361k, False: 0]
  |  Branch (7192:26): [True: 0, False: 361k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   361k|    handler();
 7197|   361k|    return begin;
 7198|   361k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   361k|        {
 7693|   361k|            arg_id = handler.on_arg_id();
 7694|   361k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   361k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   361k|    {
 7871|   361k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   361k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|   361k|{
 7606|   361k|    auto do_presentation = [&]() -> const CharT* {
 7607|   361k|        if (*begin == CharT{'['}) {
 7608|   361k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   361k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   361k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   361k|                return begin;
 7614|   361k|            }
 7615|   361k|            handler.on_character_set_string(set);
 7616|   361k|            return begin;
 7617|   361k|        }
 7618|   361k|        if (*begin == CharT{'/'}) {
 7619|   361k|            return parse_presentation_regex(begin, end, handler);
 7620|   361k|        }
 7621|   361k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   361k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   361k|            handler.on_error("Invalid type specifier in format string");
 7624|   361k|            return begin;
 7625|   361k|        }
 7626|   361k|        handler.on_type(type);
 7627|   361k|        return begin;
 7628|   361k|    };
 7629|       |
 7630|   361k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 361k, False: 0]
  |  Branch (7630:28): [True: 344k, False: 16.9k]
  ------------------
 7631|   361k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 336k, False: 8.47k]
  |  Branch (7631:36): [True: 270k, False: 65.7k]
  ------------------
 7632|   270k|        return do_presentation();
 7633|   270k|    }
 7634|       |
 7635|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  91.1k|    begin = parse_align(begin, end, handler);
 7641|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  91.1k|    begin = parse_width(begin, end, handler);
 7647|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  91.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 91.1k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  91.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 65.7k, False: 25.4k]
  ------------------
 7666|  65.7k|        handler.on_localized();
 7667|  65.7k|        ++begin;
 7668|  65.7k|    }
 7669|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  91.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 91.1k, False: 0]
  |  Branch (7674:25): [True: 25.4k, False: 65.7k]
  ------------------
 7675|  25.4k|        do_presentation();
 7676|  25.4k|    }
 7677|  91.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  91.1k|    return begin;
 7683|  91.1k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   296k|    auto do_presentation = [&]() -> const CharT* {
 7607|   296k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 296k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   296k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 296k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   296k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   296k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 279k]
  |  |  ------------------
  ------------------
 7623|  16.9k|            handler.on_error("Invalid type specifier in format string");
 7624|  16.9k|            return begin;
 7625|  16.9k|        }
 7626|   279k|        handler.on_type(type);
 7627|   279k|        return begin;
 7628|   296k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|  91.1k|{
 7280|  91.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  91.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  91.1k|    auto check_align = [](wchar_t ch) {
 7283|  91.1k|        switch (ch) {
 7284|  91.1k|            case L'<':
 7285|  91.1k|                return align_type::left;
 7286|  91.1k|            case L'>':
 7287|  91.1k|                return align_type::right;
 7288|  91.1k|            case L'^':
 7289|  91.1k|                return align_type::center;
 7290|  91.1k|            default:
 7291|  91.1k|                return align_type::none;
 7292|  91.1k|        }
 7293|  91.1k|    };
 7294|       |
 7295|  91.1k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  91.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  |  Branch (865:45): [True: 0, False: 91.1k]
  |  |  |  Branch (865:45): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7297|  91.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  91.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  91.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  91.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  91.1k|    const auto begin_before_fill = begin;
 7307|  91.1k|    begin += potential_fill_len;
 7308|       |
 7309|  91.1k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 91.1k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  91.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  91.1k|    const auto begin_after_fill = begin;
 7315|  91.1k|    ++begin;
 7316|       |
 7317|  91.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 91.1k, False: 0]
  ------------------
 7318|  91.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  91.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 91.1k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  91.1k|    }
 7326|       |
 7327|  91.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 91.1k, False: 0]
  ------------------
 7328|  91.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 91.1k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  91.1k|        return begin_before_fill;
 7333|  91.1k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  91.1k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   182k|    auto check_align = [](wchar_t ch) {
 7283|   182k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 182k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 182k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 182k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   182k|            default:
  ------------------
  |  Branch (7290:13): [True: 182k, False: 0]
  ------------------
 7291|   182k|                return align_type::none;
 7292|   182k|        }
 7293|   182k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|  91.1k|{
 7345|  91.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  91.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  91.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 74.2k, False: 16.9k]
  |  Branch (7347:33): [True: 0, False: 74.2k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  91.1k|    return begin;
 7358|  91.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|  65.7k|    {
 7876|  65.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  65.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 29.3k, False: 36.4k]
  ------------------
 7878|  65.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 29.3k]
  ------------------
 7879|  65.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  65.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  65.7k|        Handler::on_localized();
 7888|  65.7k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   336k|{
 9300|   336k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   336k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   336k|{
 9201|   336k|#define SCN_VISIT(Type)                                                \
 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   336k|    }                                                                  \
 9205|   336k|    else {                                                             \
 9206|   336k|        return vis(monostate_val);                                     \
 9207|   336k|    }
 9208|       |
 9209|   336k|    monostate monostate_val{};
 9210|       |
 9211|   336k|    switch (get_arg_type(arg)) {
 9212|  54.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 54.2k, False: 282k]
  ------------------
 9213|  54.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  54.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  54.2k|    }                                                                  \
  |  | 9205|  54.2k|    else {                                                             \
  |  | 9206|  54.2k|        return vis(monostate_val);                                     \
  |  | 9207|  54.2k|    }
  ------------------
 9214|  54.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 336k]
  ------------------
 9215|  54.2k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  54.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  54.2k|    }                                                                  \
  |  | 9205|  54.2k|    else {                                                             \
  |  | 9206|  54.2k|        return vis(monostate_val);                                     \
  |  | 9207|  54.2k|    }
  ------------------
 9216|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 64.2k, False: 272k]
  ------------------
 9217|   118k|            SCN_VISIT(int);
  ------------------
  |  | 9202|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   118k|    }                                                                  \
  |  | 9205|   118k|    else {                                                             \
  |  | 9206|   118k|        return vis(monostate_val);                                     \
  |  | 9207|   118k|    }
  ------------------
 9218|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 336k]
  ------------------
 9219|   118k|            SCN_VISIT(long);
  ------------------
  |  | 9202|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   118k|    }                                                                  \
  |  | 9205|   118k|    else {                                                             \
  |  | 9206|   118k|        return vis(monostate_val);                                     \
  |  | 9207|   118k|    }
  ------------------
 9220|   183k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 65.4k, False: 270k]
  ------------------
 9221|   183k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|   183k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   183k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   183k|    }                                                                  \
  |  | 9205|   183k|    else {                                                             \
  |  | 9206|   183k|        return vis(monostate_val);                                     \
  |  | 9207|   183k|    }
  ------------------
 9222|   231k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 47.8k, False: 288k]
  ------------------
 9223|   231k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|   231k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   231k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   231k|    }                                                                  \
  |  | 9205|   231k|    else {                                                             \
  |  | 9206|   231k|        return vis(monostate_val);                                     \
  |  | 9207|   231k|    }
  ------------------
 9224|   231k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 336k]
  ------------------
 9225|   231k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|   231k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   231k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   231k|    }                                                                  \
  |  | 9205|   231k|    else {                                                             \
  |  | 9206|   231k|        return vis(monostate_val);                                     \
  |  | 9207|   231k|    }
  ------------------
 9226|   283k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 52.0k, False: 284k]
  ------------------
 9227|   283k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|   283k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   283k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   283k|    }                                                                  \
  |  | 9205|   283k|    else {                                                             \
  |  | 9206|   283k|        return vis(monostate_val);                                     \
  |  | 9207|   283k|    }
  ------------------
 9228|   283k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 336k]
  ------------------
 9229|   283k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|   283k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   283k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   283k|    }                                                                  \
  |  | 9205|   283k|    else {                                                             \
  |  | 9206|   283k|        return vis(monostate_val);                                     \
  |  | 9207|   283k|    }
  ------------------
 9230|   336k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 52.6k, False: 283k]
  ------------------
 9231|   336k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9232|   336k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 336k]
  ------------------
 9233|   336k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9234|   336k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 336k]
  ------------------
 9235|   336k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9236|   336k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 336k]
  ------------------
 9237|   336k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9238|   336k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 336k]
  ------------------
 9239|   336k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9240|   336k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 336k]
  ------------------
 9241|   336k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9242|   336k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 336k]
  ------------------
 9243|   336k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9244|   336k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 336k]
  ------------------
 9245|   336k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9246|   336k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 336k]
  ------------------
 9247|   336k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9248|   336k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 336k]
  ------------------
 9249|   336k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9250|   336k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 336k]
  ------------------
 9251|   336k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9252|   336k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 336k]
  ------------------
 9253|   336k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9254|   336k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 336k]
  ------------------
 9255|   336k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9256|   336k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 336k]
  ------------------
 9257|   336k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9258|   336k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 336k]
  ------------------
 9259|   336k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   336k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   336k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   336k|    }                                                                  \
  |  | 9205|   336k|    else {                                                             \
  |  | 9206|   336k|        return vis(monostate_val);                                     \
  |  | 9207|   336k|    }
  ------------------
 9260|       |
 9261|   336k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 336k]
  ------------------
 9262|   336k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   336k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   336k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 336k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 336k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   336k|            SCN_CLANG_POP
 9279|   336k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  88.9k|    {
 4352|  88.9k|        return sync(0);
 4353|  88.9k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|   345k|    {
 6177|   345k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|   345k|        return static_cast<std::size_t>(m_desc &
 6182|   345k|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|   345k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|   690k|    {
 6203|   690k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|   690k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|   345k|    {
 6145|   345k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|   345k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|   345k|        const auto t = type(id);
 6157|   345k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   345k|        basic_scan_arg<Context> arg;
 6162|   345k|        arg.m_type = t;
 6163|   345k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 345k, False: 0]
  ------------------
 6164|   345k|            arg.m_value.ref_value = m_builtin_values[id];
 6165|   345k|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|   345k|        return arg;
 6170|   345k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|   345k|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|   345k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|   345k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|   345k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|   345k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|   345k|    {
 6207|   345k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|   345k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|   571k|    {
 5961|   571k|        return m_type != detail::arg_type::none_type;
 5962|   571k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|  26.1k|{
 9300|  26.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  26.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  26.1k|{
 9201|  26.1k|#define SCN_VISIT(Type)                                                \
 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  26.1k|    }                                                                  \
 9205|  26.1k|    else {                                                             \
 9206|  26.1k|        return vis(monostate_val);                                     \
 9207|  26.1k|    }
 9208|       |
 9209|  26.1k|    monostate monostate_val{};
 9210|       |
 9211|  26.1k|    switch (get_arg_type(arg)) {
 9212|  4.34k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.34k, False: 21.8k]
  ------------------
 9213|  4.34k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.34k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.34k|    }                                                                  \
  |  | 9205|  4.34k|    else {                                                             \
  |  | 9206|  4.34k|        return vis(monostate_val);                                     \
  |  | 9207|  4.34k|    }
  ------------------
 9214|  4.34k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 26.1k]
  ------------------
 9215|  4.34k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.34k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.34k|    }                                                                  \
  |  | 9205|  4.34k|    else {                                                             \
  |  | 9206|  4.34k|        return vis(monostate_val);                                     \
  |  | 9207|  4.34k|    }
  ------------------
 9216|  8.71k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.37k, False: 21.7k]
  ------------------
 9217|  8.71k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.71k|    }                                                                  \
  |  | 9205|  8.71k|    else {                                                             \
  |  | 9206|  8.71k|        return vis(monostate_val);                                     \
  |  | 9207|  8.71k|    }
  ------------------
 9218|  8.71k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 26.1k]
  ------------------
 9219|  8.71k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.71k|    }                                                                  \
  |  | 9205|  8.71k|    else {                                                             \
  |  | 9206|  8.71k|        return vis(monostate_val);                                     \
  |  | 9207|  8.71k|    }
  ------------------
 9220|  13.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.40k, False: 21.7k]
  ------------------
 9221|  13.1k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.1k|    }                                                                  \
  |  | 9205|  13.1k|    else {                                                             \
  |  | 9206|  13.1k|        return vis(monostate_val);                                     \
  |  | 9207|  13.1k|    }
  ------------------
 9222|  17.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.32k, False: 21.8k]
  ------------------
 9223|  17.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.4k|    }                                                                  \
  |  | 9205|  17.4k|    else {                                                             \
  |  | 9206|  17.4k|        return vis(monostate_val);                                     \
  |  | 9207|  17.4k|    }
  ------------------
 9224|  17.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 26.1k]
  ------------------
 9225|  17.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.4k|    }                                                                  \
  |  | 9205|  17.4k|    else {                                                             \
  |  | 9206|  17.4k|        return vis(monostate_val);                                     \
  |  | 9207|  17.4k|    }
  ------------------
 9226|  21.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.34k, False: 21.8k]
  ------------------
 9227|  21.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9228|  21.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 26.1k]
  ------------------
 9229|  21.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9230|  26.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.36k, False: 21.7k]
  ------------------
 9231|  26.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9232|  26.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 26.1k]
  ------------------
 9233|  26.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9234|  26.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 26.1k]
  ------------------
 9235|  26.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9236|  26.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 26.1k]
  ------------------
 9237|  26.1k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9238|  26.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 26.1k]
  ------------------
 9239|  26.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9240|  26.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 26.1k]
  ------------------
 9241|  26.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9242|  26.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 26.1k]
  ------------------
 9243|  26.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9244|  26.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 26.1k]
  ------------------
 9245|  26.1k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9246|  26.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 26.1k]
  ------------------
 9247|  26.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9248|  26.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 26.1k]
  ------------------
 9249|  26.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9250|  26.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 26.1k]
  ------------------
 9251|  26.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9252|  26.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 26.1k]
  ------------------
 9253|  26.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9254|  26.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 26.1k]
  ------------------
 9255|  26.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9256|  26.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 26.1k]
  ------------------
 9257|  26.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9258|  26.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 26.1k]
  ------------------
 9259|  26.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9260|       |
 9261|  26.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 26.1k]
  ------------------
 9262|  26.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  26.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  26.1k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 26.1k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 26.1k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  26.1k|            SCN_CLANG_POP
 9279|  26.1k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|   881k|{
 6006|   881k|    return arg.m_type;
 6007|   881k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|   260k|{
 6018|   260k|    return arg.m_value;
 6019|   260k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   310k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   310k|    {
 6258|   310k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   155k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   155k|    {
 8934|   155k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   155k|    {
 3075|   155k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   155k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   155k|    {
 3041|   155k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   155k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   155k|{
 7793|   155k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   155k|    handler.check_args_exhausted();
 7795|   155k|    return handler.get_error();
 7796|   155k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   155k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   155k|    auto begin = format.data();
 7761|   155k|    auto it = begin;
 7762|   155k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   157k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 155k, False: 2.60k]
  ------------------
 7765|   155k|        const auto ch = *it++;
 7766|   155k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 155k, False: 0]
  ------------------
 7767|   155k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   155k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   155k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 152k, False: 2.60k]
  ------------------
 7771|   152k|                return;
 7772|   152k|            }
 7773|   155k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   155k|    }
 7784|       |
 7785|  2.60k|    handler.on_literal_text(begin, end);
 7786|  2.60k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   155k|{
 7690|   155k|    struct id_adapter {
 7691|   155k|        constexpr void operator()()
 7692|   155k|        {
 7693|   155k|            arg_id = handler.on_arg_id();
 7694|   155k|        }
 7695|   155k|        constexpr void operator()(std::size_t id)
 7696|   155k|        {
 7697|   155k|            arg_id = handler.on_arg_id(id);
 7698|   155k|        }
 7699|       |
 7700|   155k|        constexpr void on_error(const char* msg)
 7701|   155k|        {
 7702|   155k|            SCN_UNLIKELY_ATTR
 7703|   155k|            handler.on_error(msg);
 7704|   155k|        }
 7705|       |
 7706|   155k|        Handler& handler;
 7707|   155k|        std::size_t arg_id;
 7708|   155k|    };
 7709|       |
 7710|   155k|    ++begin;
 7711|   155k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   155k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 155k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   155k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 155k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   155k|    else {
 7723|   155k|        auto adapter = id_adapter{handler, 0};
 7724|   155k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   155k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   155k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 155k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   155k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 155k, False: 0]
  ------------------
 7735|   155k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   155k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   155k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.8k, False: 104k]
  |  |  |  Branch (865:45): [True: 0, False: 155k]
  |  |  |  Branch (865:45): [True: 50.8k, False: 104k]
  |  |  ------------------
  ------------------
 7741|  50.8k|                handler.on_error("Unknown format specifier");
 7742|  50.8k|                return begin;
 7743|  50.8k|            }
 7744|   155k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   155k|    }
 7751|   104k|    return begin + 1;
 7752|   155k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   310k|    {
 8832|   310k|        return m_args.get(id);
 8833|   310k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   310k|    {
 6286|   310k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 310k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   310k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   310k|        do_check_arg_id(id);
 6294|   310k|        return id;
 6295|   310k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   310k|{
 6806|   310k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   310k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   310k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   155k|{
 7191|   155k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   155k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 155k, False: 0]
  |  Branch (7192:26): [True: 0, False: 155k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   155k|    handler();
 7197|   155k|    return begin;
 7198|   155k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   155k|        {
 7693|   155k|            arg_id = handler.on_arg_id();
 7694|   155k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   208k|    {
 6281|   208k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   208k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   181k|{
 4691|   181k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 181k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   181k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   181k|                            ranges::default_sentinel};
 4697|   181k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   181k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   181k|    {
 4455|   181k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   181k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   181k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|   518k|    {
 6270|   518k|        return m_format.data();
 6271|   518k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   155k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   155k|    {
 7871|   155k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   155k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   155k|{
 7606|   155k|    auto do_presentation = [&]() -> const CharT* {
 7607|   155k|        if (*begin == CharT{'['}) {
 7608|   155k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   155k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   155k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   155k|                return begin;
 7614|   155k|            }
 7615|   155k|            handler.on_character_set_string(set);
 7616|   155k|            return begin;
 7617|   155k|        }
 7618|   155k|        if (*begin == CharT{'/'}) {
 7619|   155k|            return parse_presentation_regex(begin, end, handler);
 7620|   155k|        }
 7621|   155k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   155k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   155k|            handler.on_error("Invalid type specifier in format string");
 7624|   155k|            return begin;
 7625|   155k|        }
 7626|   155k|        handler.on_type(type);
 7627|   155k|        return begin;
 7628|   155k|    };
 7629|       |
 7630|   155k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 155k, False: 0]
  |  Branch (7630:28): [True: 121k, False: 33.8k]
  ------------------
 7631|   155k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 104k, False: 16.9k]
  |  Branch (7631:36): [True: 86.8k, False: 17.4k]
  ------------------
 7632|  86.8k|        return do_presentation();
 7633|  86.8k|    }
 7634|       |
 7635|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  68.2k|    begin = parse_align(begin, end, handler);
 7641|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  68.2k|    begin = parse_width(begin, end, handler);
 7647|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  68.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 68.2k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  68.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 17.4k, False: 50.8k]
  ------------------
 7666|  17.4k|        handler.on_localized();
 7667|  17.4k|        ++begin;
 7668|  17.4k|    }
 7669|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  68.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 68.2k, False: 0]
  |  Branch (7674:25): [True: 50.8k, False: 17.4k]
  ------------------
 7675|  50.8k|        do_presentation();
 7676|  50.8k|    }
 7677|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  68.2k|    return begin;
 7683|  68.2k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   242k|{
 7255|   242k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 173k, False: 68.8k]
  |  Branch (7255:33): [True: 173k, False: 0]
  ------------------
 7256|   242k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 34.9k, False: 33.8k]
  |  Branch (7256:33): [True: 34.9k, False: 0]
  ------------------
 7257|   242k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   137k|    auto do_presentation = [&]() -> const CharT* {
 7607|   137k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 137k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   137k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 137k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   137k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   137k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.8k, False: 103k]
  |  |  ------------------
  ------------------
 7623|  33.8k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.8k|            return begin;
 7625|  33.8k|        }
 7626|   103k|        handler.on_type(type);
 7627|   103k|        return begin;
 7628|   137k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   275k|{
 7203|   275k|    switch (type) {
 7204|  34.3k|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 34.3k, False: 240k]
  ------------------
 7205|  68.2k|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 33.8k, False: 241k]
  ------------------
 7206|  68.2k|            return presentation_type::int_binary;
 7207|  34.8k|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 34.8k, False: 240k]
  ------------------
 7208|  34.8k|            return presentation_type::int_decimal;
 7209|  34.8k|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 34.8k, False: 240k]
  ------------------
 7210|  34.8k|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 275k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|  34.4k|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 34.4k, False: 240k]
  ------------------
 7214|  34.4k|            return presentation_type::int_octal;
 7215|  34.9k|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 34.9k, False: 240k]
  ------------------
 7216|  34.9k|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 275k]
  ------------------
 7217|  34.9k|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 275k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 275k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|      0|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 0, False: 275k]
  ------------------
 7222|      0|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 275k]
  ------------------
 7223|      0|            return presentation_type::float_hex;
 7224|      0|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 0, False: 275k]
  ------------------
 7225|      0|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 275k]
  ------------------
 7226|      0|            return presentation_type::float_scientific;
 7227|      0|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 0, False: 275k]
  ------------------
 7228|      0|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 275k]
  ------------------
 7229|      0|            return presentation_type::float_fixed;
 7230|      0|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 0, False: 275k]
  ------------------
 7231|      0|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 275k]
  ------------------
 7232|      0|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 275k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 275k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 275k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 275k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 275k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 275k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|  67.7k|        default:
  ------------------
  |  Branch (7247:9): [True: 67.7k, False: 207k]
  ------------------
 7248|  67.7k|            return presentation_type::none;
 7249|   275k|    }
 7250|   275k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|  68.2k|{
 7280|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  68.2k|    auto check_align = [](wchar_t ch) {
 7283|  68.2k|        switch (ch) {
 7284|  68.2k|            case L'<':
 7285|  68.2k|                return align_type::left;
 7286|  68.2k|            case L'>':
 7287|  68.2k|                return align_type::right;
 7288|  68.2k|            case L'^':
 7289|  68.2k|                return align_type::center;
 7290|  68.2k|            default:
 7291|  68.2k|                return align_type::none;
 7292|  68.2k|        }
 7293|  68.2k|    };
 7294|       |
 7295|  68.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  68.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  |  Branch (865:45): [True: 0, False: 68.2k]
  |  |  |  Branch (865:45): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7297|  68.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  68.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  68.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  68.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  68.2k|    const auto begin_before_fill = begin;
 7307|  68.2k|    begin += potential_fill_len;
 7308|       |
 7309|  68.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 68.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  68.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  68.2k|    const auto begin_after_fill = begin;
 7315|  68.2k|    ++begin;
 7316|       |
 7317|  68.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 68.2k, False: 0]
  ------------------
 7318|  68.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  68.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 68.2k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  68.2k|    }
 7326|       |
 7327|  68.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 68.2k, False: 0]
  ------------------
 7328|  68.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 68.2k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  68.2k|        return begin_before_fill;
 7333|  68.2k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  68.2k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|   136k|{
 7262|   136k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|   136k|    if constexpr (sizeof(CharT) != 1) {
 7264|   136k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|   136k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   136k|    auto check_align = [](wchar_t ch) {
 7283|   136k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 136k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 136k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 136k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   136k|            default:
  ------------------
  |  Branch (7290:13): [True: 136k, False: 0]
  ------------------
 7291|   136k|                return align_type::none;
 7292|   136k|        }
 7293|   136k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|  68.2k|{
 7345|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  68.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 34.4k, False: 33.8k]
  |  Branch (7347:33): [True: 0, False: 34.4k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  68.2k|    return begin;
 7358|  68.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|  17.4k|    {
 7876|  17.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  17.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 8.69k, False: 8.76k]
  ------------------
 7878|  17.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 8.69k]
  ------------------
 7879|  17.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  17.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  17.4k|        Handler::on_localized();
 7888|  17.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   104k|{
 9300|   104k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   104k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   104k|{
 9201|   104k|#define SCN_VISIT(Type)                                                \
 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   104k|    }                                                                  \
 9205|   104k|    else {                                                             \
 9206|   104k|        return vis(monostate_val);                                     \
 9207|   104k|    }
 9208|       |
 9209|   104k|    monostate monostate_val{};
 9210|       |
 9211|   104k|    switch (get_arg_type(arg)) {
 9212|  17.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 17.3k, False: 86.9k]
  ------------------
 9213|  17.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.3k|    }                                                                  \
  |  | 9205|  17.3k|    else {                                                             \
  |  | 9206|  17.3k|        return vis(monostate_val);                                     \
  |  | 9207|  17.3k|    }
  ------------------
 9214|  17.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 104k]
  ------------------
 9215|  17.3k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.3k|    }                                                                  \
  |  | 9205|  17.3k|    else {                                                             \
  |  | 9206|  17.3k|        return vis(monostate_val);                                     \
  |  | 9207|  17.3k|    }
  ------------------
 9216|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.4k, False: 86.8k]
  ------------------
 9217|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9218|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 104k]
  ------------------
 9219|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9220|  52.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 17.5k, False: 86.7k]
  ------------------
 9221|  52.2k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  52.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  52.2k|    }                                                                  \
  |  | 9205|  52.2k|    else {                                                             \
  |  | 9206|  52.2k|        return vis(monostate_val);                                     \
  |  | 9207|  52.2k|    }
  ------------------
 9222|  69.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 17.2k, False: 86.9k]
  ------------------
 9223|  69.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  69.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  69.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  69.5k|    }                                                                  \
  |  | 9205|  69.5k|    else {                                                             \
  |  | 9206|  69.5k|        return vis(monostate_val);                                     \
  |  | 9207|  69.5k|    }
  ------------------
 9224|  69.5k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 104k]
  ------------------
 9225|  69.5k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  69.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  69.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  69.5k|    }                                                                  \
  |  | 9205|  69.5k|    else {                                                             \
  |  | 9206|  69.5k|        return vis(monostate_val);                                     \
  |  | 9207|  69.5k|    }
  ------------------
 9226|  86.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 17.3k, False: 86.9k]
  ------------------
 9227|  86.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  86.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  86.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  86.8k|    }                                                                  \
  |  | 9205|  86.8k|    else {                                                             \
  |  | 9206|  86.8k|        return vis(monostate_val);                                     \
  |  | 9207|  86.8k|    }
  ------------------
 9228|  86.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 104k]
  ------------------
 9229|  86.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  86.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  86.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  86.8k|    }                                                                  \
  |  | 9205|  86.8k|    else {                                                             \
  |  | 9206|  86.8k|        return vis(monostate_val);                                     \
  |  | 9207|  86.8k|    }
  ------------------
 9230|   104k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 17.3k, False: 86.8k]
  ------------------
 9231|   104k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9232|   104k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 104k]
  ------------------
 9233|   104k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9234|   104k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 104k]
  ------------------
 9235|   104k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9236|   104k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 104k]
  ------------------
 9237|   104k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9238|   104k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 104k]
  ------------------
 9239|   104k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9240|   104k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 104k]
  ------------------
 9241|   104k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9242|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 104k]
  ------------------
 9243|   104k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9244|   104k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 104k]
  ------------------
 9245|   104k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9246|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 104k]
  ------------------
 9247|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9248|   104k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 104k]
  ------------------
 9249|   104k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9250|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 104k]
  ------------------
 9251|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9252|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 104k]
  ------------------
 9253|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9254|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 104k]
  ------------------
 9255|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9256|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 104k]
  ------------------
 9257|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9258|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 104k]
  ------------------
 9259|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9260|       |
 9261|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 104k]
  ------------------
 9262|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   104k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   104k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 104k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 104k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   104k|            SCN_CLANG_POP
 9279|   104k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|  26.1k|{
 9300|  26.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|  26.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|  26.1k|{
 9201|  26.1k|#define SCN_VISIT(Type)                                                \
 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|  26.1k|    }                                                                  \
 9205|  26.1k|    else {                                                             \
 9206|  26.1k|        return vis(monostate_val);                                     \
 9207|  26.1k|    }
 9208|       |
 9209|  26.1k|    monostate monostate_val{};
 9210|       |
 9211|  26.1k|    switch (get_arg_type(arg)) {
 9212|  4.34k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 4.34k, False: 21.8k]
  ------------------
 9213|  4.34k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.34k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.34k|    }                                                                  \
  |  | 9205|  4.34k|    else {                                                             \
  |  | 9206|  4.34k|        return vis(monostate_val);                                     \
  |  | 9207|  4.34k|    }
  ------------------
 9214|  4.34k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 26.1k]
  ------------------
 9215|  4.34k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  4.34k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  4.34k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  4.34k|    }                                                                  \
  |  | 9205|  4.34k|    else {                                                             \
  |  | 9206|  4.34k|        return vis(monostate_val);                                     \
  |  | 9207|  4.34k|    }
  ------------------
 9216|  8.71k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 4.37k, False: 21.7k]
  ------------------
 9217|  8.71k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.71k|    }                                                                  \
  |  | 9205|  8.71k|    else {                                                             \
  |  | 9206|  8.71k|        return vis(monostate_val);                                     \
  |  | 9207|  8.71k|    }
  ------------------
 9218|  8.71k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 26.1k]
  ------------------
 9219|  8.71k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  8.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  8.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  8.71k|    }                                                                  \
  |  | 9205|  8.71k|    else {                                                             \
  |  | 9206|  8.71k|        return vis(monostate_val);                                     \
  |  | 9207|  8.71k|    }
  ------------------
 9220|  13.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 4.40k, False: 21.7k]
  ------------------
 9221|  13.1k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  13.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  13.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  13.1k|    }                                                                  \
  |  | 9205|  13.1k|    else {                                                             \
  |  | 9206|  13.1k|        return vis(monostate_val);                                     \
  |  | 9207|  13.1k|    }
  ------------------
 9222|  17.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 4.32k, False: 21.8k]
  ------------------
 9223|  17.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.4k|    }                                                                  \
  |  | 9205|  17.4k|    else {                                                             \
  |  | 9206|  17.4k|        return vis(monostate_val);                                     \
  |  | 9207|  17.4k|    }
  ------------------
 9224|  17.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 26.1k]
  ------------------
 9225|  17.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.4k|    }                                                                  \
  |  | 9205|  17.4k|    else {                                                             \
  |  | 9206|  17.4k|        return vis(monostate_val);                                     \
  |  | 9207|  17.4k|    }
  ------------------
 9226|  21.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 4.34k, False: 21.8k]
  ------------------
 9227|  21.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9228|  21.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 26.1k]
  ------------------
 9229|  21.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  21.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  21.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  21.7k|    }                                                                  \
  |  | 9205|  21.7k|    else {                                                             \
  |  | 9206|  21.7k|        return vis(monostate_val);                                     \
  |  | 9207|  21.7k|    }
  ------------------
 9230|  26.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 4.36k, False: 21.7k]
  ------------------
 9231|  26.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9232|  26.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 26.1k]
  ------------------
 9233|  26.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9234|  26.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 26.1k]
  ------------------
 9235|  26.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9236|  26.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 26.1k]
  ------------------
 9237|  26.1k|            SCN_VISIT(char);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9238|  26.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 26.1k]
  ------------------
 9239|  26.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9240|  26.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 26.1k]
  ------------------
 9241|  26.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9242|  26.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 26.1k]
  ------------------
 9243|  26.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9244|  26.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 26.1k]
  ------------------
 9245|  26.1k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9246|  26.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 26.1k]
  ------------------
 9247|  26.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9248|  26.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 26.1k]
  ------------------
 9249|  26.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9250|  26.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 26.1k]
  ------------------
 9251|  26.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9252|  26.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 26.1k]
  ------------------
 9253|  26.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9254|  26.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 26.1k]
  ------------------
 9255|  26.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9256|  26.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 26.1k]
  ------------------
 9257|  26.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9258|  26.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 26.1k]
  ------------------
 9259|  26.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|  26.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  26.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  26.1k|    }                                                                  \
  |  | 9205|  26.1k|    else {                                                             \
  |  | 9206|  26.1k|        return vis(monostate_val);                                     \
  |  | 9207|  26.1k|    }
  ------------------
 9260|       |
 9261|  26.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 26.1k]
  ------------------
 9262|  26.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|  26.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|  26.1k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 26.1k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 26.1k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|  26.1k|            SCN_CLANG_POP
 9279|  26.1k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   155k|{
 7793|   155k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   155k|    handler.check_args_exhausted();
 7795|   155k|    return handler.get_error();
 7796|   155k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   155k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   155k|    auto begin = format.data();
 7761|   155k|    auto it = begin;
 7762|   155k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   157k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 155k, False: 2.60k]
  ------------------
 7765|   155k|        const auto ch = *it++;
 7766|   155k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 155k, False: 0]
  ------------------
 7767|   155k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   155k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   155k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 152k, False: 2.60k]
  ------------------
 7771|   152k|                return;
 7772|   152k|            }
 7773|   155k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   155k|    }
 7784|       |
 7785|  2.60k|    handler.on_literal_text(begin, end);
 7786|  2.60k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|  2.60k|    {
 8971|  2.60k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  2.60k|    static_cast<    \
  |  |  935|  2.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|  2.60k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   155k|{
 7690|   155k|    struct id_adapter {
 7691|   155k|        constexpr void operator()()
 7692|   155k|        {
 7693|   155k|            arg_id = handler.on_arg_id();
 7694|   155k|        }
 7695|   155k|        constexpr void operator()(std::size_t id)
 7696|   155k|        {
 7697|   155k|            arg_id = handler.on_arg_id(id);
 7698|   155k|        }
 7699|       |
 7700|   155k|        constexpr void on_error(const char* msg)
 7701|   155k|        {
 7702|   155k|            SCN_UNLIKELY_ATTR
 7703|   155k|            handler.on_error(msg);
 7704|   155k|        }
 7705|       |
 7706|   155k|        Handler& handler;
 7707|   155k|        std::size_t arg_id;
 7708|   155k|    };
 7709|       |
 7710|   155k|    ++begin;
 7711|   155k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   155k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 155k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   155k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 155k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   155k|    else {
 7723|   155k|        auto adapter = id_adapter{handler, 0};
 7724|   155k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   155k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   155k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 155k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   155k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 155k, False: 0]
  ------------------
 7735|   155k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   155k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   155k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.8k, False: 104k]
  |  |  |  Branch (865:45): [True: 0, False: 155k]
  |  |  |  Branch (865:45): [True: 50.8k, False: 104k]
  |  |  ------------------
  ------------------
 7741|  50.8k|                handler.on_error("Unknown format specifier");
 7742|  50.8k|                return begin;
 7743|  50.8k|            }
 7744|   155k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   155k|    }
 7751|   104k|    return begin + 1;
 7752|   155k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   155k|{
 7191|   155k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   155k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 155k, False: 0]
  |  Branch (7192:26): [True: 0, False: 155k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   155k|    handler();
 7197|   155k|    return begin;
 7198|   155k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   155k|        {
 7693|   155k|            arg_id = handler.on_arg_id();
 7694|   155k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   155k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   155k|    {
 7871|   155k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   155k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   155k|{
 7606|   155k|    auto do_presentation = [&]() -> const CharT* {
 7607|   155k|        if (*begin == CharT{'['}) {
 7608|   155k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   155k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   155k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   155k|                return begin;
 7614|   155k|            }
 7615|   155k|            handler.on_character_set_string(set);
 7616|   155k|            return begin;
 7617|   155k|        }
 7618|   155k|        if (*begin == CharT{'/'}) {
 7619|   155k|            return parse_presentation_regex(begin, end, handler);
 7620|   155k|        }
 7621|   155k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   155k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   155k|            handler.on_error("Invalid type specifier in format string");
 7624|   155k|            return begin;
 7625|   155k|        }
 7626|   155k|        handler.on_type(type);
 7627|   155k|        return begin;
 7628|   155k|    };
 7629|       |
 7630|   155k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 155k, False: 0]
  |  Branch (7630:28): [True: 121k, False: 33.8k]
  ------------------
 7631|   155k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 104k, False: 16.9k]
  |  Branch (7631:36): [True: 86.8k, False: 17.4k]
  ------------------
 7632|  86.8k|        return do_presentation();
 7633|  86.8k|    }
 7634|       |
 7635|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|  68.2k|    begin = parse_align(begin, end, handler);
 7641|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|  68.2k|    begin = parse_width(begin, end, handler);
 7647|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|  68.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 68.2k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|  68.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 17.4k, False: 50.8k]
  ------------------
 7666|  17.4k|        handler.on_localized();
 7667|  17.4k|        ++begin;
 7668|  17.4k|    }
 7669|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|  68.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 68.2k, False: 0]
  |  Branch (7674:25): [True: 50.8k, False: 17.4k]
  ------------------
 7675|  50.8k|        do_presentation();
 7676|  50.8k|    }
 7677|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|  68.2k|    return begin;
 7683|  68.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   137k|    auto do_presentation = [&]() -> const CharT* {
 7607|   137k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 137k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   137k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 137k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   137k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   137k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.8k, False: 103k]
  |  |  ------------------
  ------------------
 7623|  33.8k|            handler.on_error("Invalid type specifier in format string");
 7624|  33.8k|            return begin;
 7625|  33.8k|        }
 7626|   103k|        handler.on_type(type);
 7627|   103k|        return begin;
 7628|   137k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|  68.2k|{
 7280|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|  68.2k|    auto check_align = [](wchar_t ch) {
 7283|  68.2k|        switch (ch) {
 7284|  68.2k|            case L'<':
 7285|  68.2k|                return align_type::left;
 7286|  68.2k|            case L'>':
 7287|  68.2k|                return align_type::right;
 7288|  68.2k|            case L'^':
 7289|  68.2k|                return align_type::center;
 7290|  68.2k|            default:
 7291|  68.2k|                return align_type::none;
 7292|  68.2k|        }
 7293|  68.2k|    };
 7294|       |
 7295|  68.2k|    auto potential_fill_len = code_point_length(begin, end);
 7296|  68.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  |  Branch (865:45): [True: 0, False: 68.2k]
  |  |  |  Branch (865:45): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7297|  68.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|  68.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|  68.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|  68.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|  68.2k|    const auto begin_before_fill = begin;
 7307|  68.2k|    begin += potential_fill_len;
 7308|       |
 7309|  68.2k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 68.2k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|  68.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|  68.2k|    const auto begin_after_fill = begin;
 7315|  68.2k|    ++begin;
 7316|       |
 7317|  68.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 68.2k, False: 0]
  ------------------
 7318|  68.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 68.2k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|  68.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 68.2k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|  68.2k|    }
 7326|       |
 7327|  68.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 68.2k, False: 0]
  ------------------
 7328|  68.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 68.2k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|  68.2k|        return begin_before_fill;
 7333|  68.2k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|  68.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   136k|    auto check_align = [](wchar_t ch) {
 7283|   136k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 136k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 136k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 136k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   136k|            default:
  ------------------
  |  Branch (7290:13): [True: 136k, False: 0]
  ------------------
 7291|   136k|                return align_type::none;
 7292|   136k|        }
 7293|   136k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|  68.2k|{
 7345|  68.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  68.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  68.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|  68.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 34.4k, False: 33.8k]
  |  Branch (7347:33): [True: 0, False: 34.4k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|  68.2k|    return begin;
 7358|  68.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|  17.4k|    {
 7876|  17.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|  17.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 8.69k, False: 8.76k]
  ------------------
 7878|  17.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 0, False: 8.69k]
  ------------------
 7879|  17.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 0]
  ------------------
 7880|  17.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|  17.4k|        Handler::on_localized();
 7888|  17.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   104k|{
 9300|   104k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   104k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   104k|{
 9201|   104k|#define SCN_VISIT(Type)                                                \
 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   104k|    }                                                                  \
 9205|   104k|    else {                                                             \
 9206|   104k|        return vis(monostate_val);                                     \
 9207|   104k|    }
 9208|       |
 9209|   104k|    monostate monostate_val{};
 9210|       |
 9211|   104k|    switch (get_arg_type(arg)) {
 9212|  17.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 17.3k, False: 86.9k]
  ------------------
 9213|  17.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.3k|    }                                                                  \
  |  | 9205|  17.3k|    else {                                                             \
  |  | 9206|  17.3k|        return vis(monostate_val);                                     \
  |  | 9207|  17.3k|    }
  ------------------
 9214|  17.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 104k]
  ------------------
 9215|  17.3k|            SCN_VISIT(short);
  ------------------
  |  | 9202|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  17.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  17.3k|    }                                                                  \
  |  | 9205|  17.3k|    else {                                                             \
  |  | 9206|  17.3k|        return vis(monostate_val);                                     \
  |  | 9207|  17.3k|    }
  ------------------
 9216|  34.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 17.4k, False: 86.8k]
  ------------------
 9217|  34.7k|            SCN_VISIT(int);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9218|  34.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 104k]
  ------------------
 9219|  34.7k|            SCN_VISIT(long);
  ------------------
  |  | 9202|  34.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  34.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  34.7k|    }                                                                  \
  |  | 9205|  34.7k|    else {                                                             \
  |  | 9206|  34.7k|        return vis(monostate_val);                                     \
  |  | 9207|  34.7k|    }
  ------------------
 9220|  52.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 17.5k, False: 86.7k]
  ------------------
 9221|  52.2k|            SCN_VISIT(long long);
  ------------------
  |  | 9202|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  52.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  52.2k|    }                                                                  \
  |  | 9205|  52.2k|    else {                                                             \
  |  | 9206|  52.2k|        return vis(monostate_val);                                     \
  |  | 9207|  52.2k|    }
  ------------------
 9222|  69.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 17.2k, False: 86.9k]
  ------------------
 9223|  69.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|  69.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  69.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  69.5k|    }                                                                  \
  |  | 9205|  69.5k|    else {                                                             \
  |  | 9206|  69.5k|        return vis(monostate_val);                                     \
  |  | 9207|  69.5k|    }
  ------------------
 9224|  69.5k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 104k]
  ------------------
 9225|  69.5k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|  69.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  69.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  69.5k|    }                                                                  \
  |  | 9205|  69.5k|    else {                                                             \
  |  | 9206|  69.5k|        return vis(monostate_val);                                     \
  |  | 9207|  69.5k|    }
  ------------------
 9226|  86.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 17.3k, False: 86.9k]
  ------------------
 9227|  86.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|  86.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  86.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  86.8k|    }                                                                  \
  |  | 9205|  86.8k|    else {                                                             \
  |  | 9206|  86.8k|        return vis(monostate_val);                                     \
  |  | 9207|  86.8k|    }
  ------------------
 9228|  86.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 104k]
  ------------------
 9229|  86.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|  86.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  86.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  86.8k|    }                                                                  \
  |  | 9205|  86.8k|    else {                                                             \
  |  | 9206|  86.8k|        return vis(monostate_val);                                     \
  |  | 9207|  86.8k|    }
  ------------------
 9230|   104k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 17.3k, False: 86.8k]
  ------------------
 9231|   104k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9232|   104k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 104k]
  ------------------
 9233|   104k|            SCN_VISIT(void*);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9234|   104k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 104k]
  ------------------
 9235|   104k|            SCN_VISIT(bool);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9236|   104k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 104k]
  ------------------
 9237|   104k|            SCN_VISIT(char);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9238|   104k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 104k]
  ------------------
 9239|   104k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9240|   104k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 104k]
  ------------------
 9241|   104k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9242|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 104k]
  ------------------
 9243|   104k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9244|   104k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 104k]
  ------------------
 9245|   104k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9246|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 104k]
  ------------------
 9247|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9248|   104k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 104k]
  ------------------
 9249|   104k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9250|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 104k]
  ------------------
 9251|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9252|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 104k]
  ------------------
 9253|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9254|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 104k]
  ------------------
 9255|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9256|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 104k]
  ------------------
 9257|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9258|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 104k]
  ------------------
 9259|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   104k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   104k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   104k|    }                                                                  \
  |  | 9205|   104k|    else {                                                             \
  |  | 9206|   104k|        return vis(monostate_val);                                     \
  |  | 9207|   104k|    }
  ------------------
 9260|       |
 9261|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 104k]
  ------------------
 9262|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   104k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   104k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 104k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 104k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   104k|            SCN_CLANG_POP
 9279|   104k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   177k|    {
 4352|   177k|        return sync(0);
 4353|   177k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|  64.2k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|  17.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  86.2k|{
   44|  86.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.2k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  86.2k|{
   60|  86.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.2k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.71k|{
   72|  8.71k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.71k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.46k|{
  171|  1.46k|    auto result = make_scan_result<Source, T>();
  172|  1.46k|    fill_scan_result(
  173|  1.46k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.46k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.46k|    return result;
  176|  1.46k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  86.2k|{
   44|  86.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  86.2k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  86.2k|{
   60|  86.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  86.2k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.71k|{
   72|  8.71k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.71k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.44k|{
  171|  1.44k|    auto result = make_scan_result<Source, T>();
  172|  1.44k|    fill_scan_result(
  173|  1.44k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.44k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.44k|    return result;
  176|  1.44k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.4k|{
   89|  14.4k|    auto result = make_scan_result<Source, Args...>();
   90|  14.4k|    fill_scan_result(result,
   91|  14.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.4k|    return result;
   94|  14.4k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.4k|{
  131|  14.4k|    auto result = make_scan_result<Source, Args...>();
  132|  14.4k|    fill_scan_result(result,
  133|  14.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.4k|    return result;
  136|  14.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.46k|{
  171|  1.46k|    auto result = make_scan_result<Source, T>();
  172|  1.46k|    fill_scan_result(
  173|  1.46k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.46k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.46k|    return result;
  176|  1.46k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.3k|{
   89|  14.3k|    auto result = make_scan_result<Source, Args...>();
   90|  14.3k|    fill_scan_result(result,
   91|  14.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.3k|    return result;
   94|  14.3k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.3k|{
  131|  14.3k|    auto result = make_scan_result<Source, Args...>();
  132|  14.3k|    fill_scan_result(result,
  133|  14.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.3k|    return result;
  136|  14.3k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.45k|{
  171|  1.45k|    auto result = make_scan_result<Source, T>();
  172|  1.45k|    fill_scan_result(
  173|  1.45k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  1.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.45k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.45k|    return result;
  176|  1.45k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   598k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   598k|{
  309|   598k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   598k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   157k|{
  315|   157k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   157k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 78.9k, False: 78.9k]
  ------------------
  317|   157k|                    : std::locale{};
  318|   157k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   119k|{
 1153|   119k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   119k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   119k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   119k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   119k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.26k, False: 114k]
  ------------------
 1159|  5.26k|        SCN_UNLIKELY_ATTR
 1160|  5.26k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.26k|                                             "Invalid integer value");
 1162|  5.26k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   114k|    auto start = source.data();
 1166|   114k|    const auto end = source.data() + source.size();
 1167|   114k|    {
 1168|   317k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 299k, False: 18.7k]
  ------------------
 1169|   299k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 95.7k, False: 203k]
  ------------------
 1170|  95.7k|                break;
 1171|  95.7k|            }
 1172|   299k|        }
 1173|   114k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.9k, False: 83.5k]
  |  |  |  Branch (865:45): [True: 18.7k, False: 95.7k]
  |  |  |  Branch (865:45): [True: 12.2k, False: 83.5k]
  |  |  ------------------
  ------------------
 1174|  30.9k|            value = 0;
 1175|  30.9k|            return ranges::next(source.begin(),
 1176|  30.9k|                                ranges::distance(source.data(), start));
 1177|  30.9k|        }
 1178|   114k|    }
 1179|       |
 1180|  83.5k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  83.5k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 62.4k, False: 21.0k]
  ------------------
 1182|  62.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  62.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.49k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.49k|    }                                                  \
  |  |  |  | 3939|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  58.9k|                             detail::make_string_view_from_pointers(start, end),
 1184|  58.9k|                             value, sign == sign_type::minus_sign));
 1185|  58.9k|            return ranges::next(source.begin(),
 1186|  58.9k|                                ranges::distance(source.data(), ptr));
 1187|  62.4k|        }
 1188|  83.5k|    }
 1189|       |
 1190|  81.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  83.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  83.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  83.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.95k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.95k|    }                                                  \
  |  |  |  | 3939|  83.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  81.5k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  81.5k|                     base, sign == sign_type::minus_sign));
 1193|  81.5k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  83.5k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  19.1k|{
 1153|  19.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  19.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  19.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  19.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  19.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.9k, False: 1.24k]
  ------------------
 1159|  17.9k|        SCN_UNLIKELY_ATTR
 1160|  17.9k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.9k|                                             "Invalid integer value");
 1162|  17.9k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.24k|    auto start = source.data();
 1166|  1.24k|    const auto end = source.data() + source.size();
 1167|  1.24k|    {
 1168|  1.66k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.45k, False: 212]
  ------------------
 1169|  1.45k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.03k, False: 420]
  ------------------
 1170|  1.03k|                break;
 1171|  1.03k|            }
 1172|  1.45k|        }
 1173|  1.24k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 916]
  |  |  |  Branch (865:45): [True: 212, False: 1.03k]
  |  |  |  Branch (865:45): [True: 120, False: 916]
  |  |  ------------------
  ------------------
 1174|    332|            value = 0;
 1175|    332|            return ranges::next(source.begin(),
 1176|    332|                                ranges::distance(source.data(), start));
 1177|    332|        }
 1178|  1.24k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    916|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    916|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    916|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    916|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 332, False: 584]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    332|    }                                                  \
  |  |  |  | 3939|    916|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    584|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    584|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    584|                     base, sign == sign_type::minus_sign));
 1193|    584|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    916|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   141k|{
 1153|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 5.89k, False: 135k]
  ------------------
 1159|  5.89k|        SCN_UNLIKELY_ATTR
 1160|  5.89k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  5.89k|                                             "Invalid integer value");
 1162|  5.89k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   135k|    auto start = source.data();
 1166|   135k|    const auto end = source.data() + source.size();
 1167|   135k|    {
 1168|   352k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 332k, False: 20.7k]
  ------------------
 1169|   332k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 114k, False: 217k]
  ------------------
 1170|   114k|                break;
 1171|   114k|            }
 1172|   332k|        }
 1173|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.5k, False: 100k]
  |  |  |  Branch (865:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (865:45): [True: 13.8k, False: 100k]
  |  |  ------------------
  ------------------
 1174|  34.5k|            value = 0;
 1175|  34.5k|            return ranges::next(source.begin(),
 1176|  34.5k|                                ranges::distance(source.data(), start));
 1177|  34.5k|        }
 1178|   135k|    }
 1179|       |
 1180|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   100k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 72.5k, False: 28.4k]
  ------------------
 1182|  72.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  72.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.73k, False: 70.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.73k|    }                                                  \
  |  |  |  | 3939|  72.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  70.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  70.8k|                             detail::make_string_view_from_pointers(start, end),
 1184|  70.8k|                             value, sign == sign_type::minus_sign));
 1185|  70.8k|            return ranges::next(source.begin(),
 1186|  70.8k|                                ranges::distance(source.data(), ptr));
 1187|  72.5k|        }
 1188|   100k|    }
 1189|       |
 1190|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 906, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    906|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|   100k|                     base, sign == sign_type::minus_sign));
 1193|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  19.2k|{
 1153|  19.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  19.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  19.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  19.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  19.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.9k, False: 1.29k]
  ------------------
 1159|  17.9k|        SCN_UNLIKELY_ATTR
 1160|  17.9k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.9k|                                             "Invalid integer value");
 1162|  17.9k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.29k|    auto start = source.data();
 1166|  1.29k|    const auto end = source.data() + source.size();
 1167|  1.29k|    {
 1168|  1.73k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.50k, False: 223]
  ------------------
 1169|  1.50k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.06k, False: 438]
  ------------------
 1170|  1.06k|                break;
 1171|  1.06k|            }
 1172|  1.50k|        }
 1173|  1.29k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 350, False: 942]
  |  |  |  Branch (865:45): [True: 223, False: 1.06k]
  |  |  |  Branch (865:45): [True: 127, False: 942]
  |  |  ------------------
  ------------------
 1174|    350|            value = 0;
 1175|    350|            return ranges::next(source.begin(),
 1176|    350|                                ranges::distance(source.data(), start));
 1177|    350|        }
 1178|  1.29k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    942|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    942|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    942|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    942|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 148, False: 794]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    148|    }                                                  \
  |  |  |  | 3939|    942|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    794|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    794|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    794|                     base, sign == sign_type::minus_sign));
 1193|    794|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    942|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   143k|{
 1153|   143k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   143k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   143k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   143k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   143k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 6.16k, False: 137k]
  ------------------
 1159|  6.16k|        SCN_UNLIKELY_ATTR
 1160|  6.16k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  6.16k|                                             "Invalid integer value");
 1162|  6.16k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   137k|    auto start = source.data();
 1166|   137k|    const auto end = source.data() + source.size();
 1167|   137k|    {
 1168|   355k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 334k, False: 20.9k]
  ------------------
 1169|   334k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 116k, False: 218k]
  ------------------
 1170|   116k|                break;
 1171|   116k|            }
 1172|   334k|        }
 1173|   137k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 34.9k, False: 102k]
  |  |  |  Branch (865:45): [True: 20.9k, False: 116k]
  |  |  |  Branch (865:45): [True: 13.9k, False: 102k]
  |  |  ------------------
  ------------------
 1174|  34.9k|            value = 0;
 1175|  34.9k|            return ranges::next(source.begin(),
 1176|  34.9k|                                ranges::distance(source.data(), start));
 1177|  34.9k|        }
 1178|   137k|    }
 1179|       |
 1180|   102k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|   102k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 73.5k, False: 28.7k]
  ------------------
 1182|  73.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  73.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 934, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    934|    }                                                  \
  |  |  |  | 3939|  73.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  72.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  72.6k|                             value, sign == sign_type::minus_sign));
 1185|  72.6k|            return ranges::next(source.begin(),
 1186|  72.6k|                                ranges::distance(source.data(), ptr));
 1187|  73.5k|        }
 1188|   102k|    }
 1189|       |
 1190|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 466, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    466|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|   101k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|   101k|                     base, sign == sign_type::minus_sign));
 1193|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|   102k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  19.4k|{
 1153|  19.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  19.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  19.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  19.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  19.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 18.0k, False: 1.38k]
  ------------------
 1159|  18.0k|        SCN_UNLIKELY_ATTR
 1160|  18.0k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  18.0k|                                             "Invalid integer value");
 1162|  18.0k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.38k|    auto start = source.data();
 1166|  1.38k|    const auto end = source.data() + source.size();
 1167|  1.38k|    {
 1168|  1.87k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.62k, False: 256]
  ------------------
 1169|  1.62k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 1.13k, False: 492]
  ------------------
 1170|  1.13k|                break;
 1171|  1.13k|            }
 1172|  1.62k|        }
 1173|  1.38k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  2.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 404, False: 982]
  |  |  |  Branch (865:45): [True: 256, False: 1.13k]
  |  |  |  Branch (865:45): [True: 148, False: 982]
  |  |  ------------------
  ------------------
 1174|    404|            value = 0;
 1175|    404|            return ranges::next(source.begin(),
 1176|    404|                                ranges::distance(source.data(), start));
 1177|    404|        }
 1178|  1.38k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    982|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    982|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    982|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    982|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20, False: 962]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     20|    }                                                  \
  |  |  |  | 3939|    982|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    962|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    962|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    962|                     base, sign == sign_type::minus_sign));
 1193|    962|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    982|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  98.1k|{
 1153|  98.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  98.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  98.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  98.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  98.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  98.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  98.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.66k, False: 94.4k]
  ------------------
 1159|  3.66k|        SCN_UNLIKELY_ATTR
 1160|  3.66k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.66k|                                             "Invalid integer value");
 1162|  3.66k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  94.4k|    auto start = source.data();
 1166|  94.4k|    const auto end = source.data() + source.size();
 1167|  94.4k|    {
 1168|   289k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 271k, False: 17.6k]
  ------------------
 1169|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 76.8k, False: 194k]
  ------------------
 1170|  76.8k|                break;
 1171|  76.8k|            }
 1172|   271k|        }
 1173|  94.4k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.3k, False: 65.1k]
  |  |  |  Branch (865:45): [True: 17.6k, False: 76.8k]
  |  |  |  Branch (865:45): [True: 11.7k, False: 65.1k]
  |  |  ------------------
  ------------------
 1174|  29.3k|            value = 0;
 1175|  29.3k|            return ranges::next(source.begin(),
 1176|  29.3k|                                ranges::distance(source.data(), start));
 1177|  29.3k|        }
 1178|  94.4k|    }
 1179|       |
 1180|  65.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  65.1k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 47.2k, False: 17.8k]
  ------------------
 1182|  47.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.77k, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.77k|    }                                                  \
  |  |  |  | 3939|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  45.5k|                             detail::make_string_view_from_pointers(start, end),
 1184|  45.5k|                             value, sign == sign_type::minus_sign));
 1185|  45.5k|            return ranges::next(source.begin(),
 1186|  45.5k|                                ranges::distance(source.data(), ptr));
 1187|  47.2k|        }
 1188|  65.1k|    }
 1189|       |
 1190|  64.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  65.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  65.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  65.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.03k, False: 64.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.03k|    }                                                  \
  |  |  |  | 3939|  65.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  64.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  64.1k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  64.1k|                     base, sign == sign_type::minus_sign));
 1193|  64.1k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  65.1k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.7k|{
 1153|  18.7k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.7k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.7k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.7k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.7k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.7k, False: 1.02k]
  ------------------
 1159|  17.7k|        SCN_UNLIKELY_ATTR
 1160|  17.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.7k|                                             "Invalid integer value");
 1162|  17.7k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.02k|    auto start = source.data();
 1166|  1.02k|    const auto end = source.data() + source.size();
 1167|  1.02k|    {
 1168|  1.42k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.22k, False: 201]
  ------------------
 1169|  1.22k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 819, False: 402]
  ------------------
 1170|    819|                break;
 1171|    819|            }
 1172|  1.22k|        }
 1173|  1.02k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 706]
  |  |  |  Branch (865:45): [True: 201, False: 819]
  |  |  |  Branch (865:45): [True: 113, False: 706]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|  1.02k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    706|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    706|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    706|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    706|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 250, False: 456]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    250|    }                                                  \
  |  |  |  | 3939|    706|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    456|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    456|                     base, sign == sign_type::minus_sign));
 1193|    456|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    706|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   107k|{
 1153|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.89k, False: 103k]
  ------------------
 1159|  3.89k|        SCN_UNLIKELY_ATTR
 1160|  3.89k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.89k|                                             "Invalid integer value");
 1162|  3.89k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   103k|    auto start = source.data();
 1166|   103k|    const auto end = source.data() + source.size();
 1167|   103k|    {
 1168|   304k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 285k, False: 18.8k]
  ------------------
 1169|   285k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 84.9k, False: 200k]
  ------------------
 1170|  84.9k|                break;
 1171|  84.9k|            }
 1172|   285k|        }
 1173|   103k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.3k, False: 72.3k]
  |  |  |  Branch (865:45): [True: 18.8k, False: 84.9k]
  |  |  |  Branch (865:45): [True: 12.5k, False: 72.3k]
  |  |  ------------------
  ------------------
 1174|  31.3k|            value = 0;
 1175|  31.3k|            return ranges::next(source.begin(),
 1176|  31.3k|                                ranges::distance(source.data(), start));
 1177|  31.3k|        }
 1178|   103k|    }
 1179|       |
 1180|  72.3k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  72.3k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 52.4k, False: 19.8k]
  ------------------
 1182|  52.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 939, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    939|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    939|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    939|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    939|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    939|    }                                                  \
  |  |  |  | 3939|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  51.5k|                             detail::make_string_view_from_pointers(start, end),
 1184|  51.5k|                             value, sign == sign_type::minus_sign));
 1185|  51.5k|            return ranges::next(source.begin(),
 1186|  51.5k|                                ranges::distance(source.data(), ptr));
 1187|  52.4k|        }
 1188|  72.3k|    }
 1189|       |
 1190|  71.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  72.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  72.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  72.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 486, False: 71.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    486|    }                                                  \
  |  |  |  | 3939|  72.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  71.8k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  71.8k|                     base, sign == sign_type::minus_sign));
 1193|  71.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  72.3k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.8k|{
 1153|  18.8k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.8k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.8k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.8k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.8k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.8k, False: 1.04k]
  ------------------
 1159|  17.8k|        SCN_UNLIKELY_ATTR
 1160|  17.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.8k|                                             "Invalid integer value");
 1162|  17.8k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.04k|    auto start = source.data();
 1166|  1.04k|    const auto end = source.data() + source.size();
 1167|  1.04k|    {
 1168|  1.44k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.24k, False: 201]
  ------------------
 1169|  1.24k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 841, False: 402]
  ------------------
 1170|    841|                break;
 1171|    841|            }
 1172|  1.24k|        }
 1173|  1.04k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 728]
  |  |  |  Branch (865:45): [True: 201, False: 841]
  |  |  |  Branch (865:45): [True: 113, False: 728]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|  1.04k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    728|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    728|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    728|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    728|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    728|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 144, False: 584]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    144|    }                                                  \
  |  |  |  | 3939|    728|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    584|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    584|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    584|                     base, sign == sign_type::minus_sign));
 1193|    584|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    728|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|   108k|{
 1153|   108k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|   108k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|   108k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|   108k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|   108k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 3.97k, False: 104k]
  ------------------
 1159|  3.97k|        SCN_UNLIKELY_ATTR
 1160|  3.97k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  3.97k|                                             "Invalid integer value");
 1162|  3.97k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|   104k|    auto start = source.data();
 1166|   104k|    const auto end = source.data() + source.size();
 1167|   104k|    {
 1168|   305k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 286k, False: 18.8k]
  ------------------
 1169|   286k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 85.7k, False: 200k]
  ------------------
 1170|  85.7k|                break;
 1171|  85.7k|            }
 1172|   286k|        }
 1173|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 31.4k, False: 73.1k]
  |  |  |  Branch (865:45): [True: 18.8k, False: 85.7k]
  |  |  |  Branch (865:45): [True: 12.6k, False: 73.1k]
  |  |  ------------------
  ------------------
 1174|  31.4k|            value = 0;
 1175|  31.4k|            return ranges::next(source.begin(),
 1176|  31.4k|                                ranges::distance(source.data(), start));
 1177|  31.4k|        }
 1178|   104k|    }
 1179|       |
 1180|  73.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1181|  73.1k|        if (base == 10) {
  ------------------
  |  Branch (1181:13): [True: 53.1k, False: 20.0k]
  ------------------
 1182|  53.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  53.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  53.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  53.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 456, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    456|    }                                                  \
  |  |  |  | 3939|  53.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|  52.6k|                             detail::make_string_view_from_pointers(start, end),
 1184|  52.6k|                             value, sign == sign_type::minus_sign));
 1185|  52.6k|            return ranges::next(source.begin(),
 1186|  52.6k|                                ranges::distance(source.data(), ptr));
 1187|  53.1k|        }
 1188|  73.1k|    }
 1189|       |
 1190|  72.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  73.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  73.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  73.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 262, False: 72.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    262|    }                                                  \
  |  |  |  | 3939|  73.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|  72.9k|                     detail::make_string_view_from_pointers(start, end), value,
 1192|  72.9k|                     base, sign == sign_type::minus_sign));
 1193|  72.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|  73.1k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1152|  18.9k|{
 1153|  18.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1154|  18.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1155|  18.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1156|  18.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  930|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1157|       |
 1158|  18.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1158:9): [True: 17.8k, False: 1.08k]
  ------------------
 1159|  17.8k|        SCN_UNLIKELY_ATTR
 1160|  17.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1161|  17.8k|                                             "Invalid integer value");
 1162|  17.8k|    }
 1163|       |
 1164|       |    // Skip leading zeroes
 1165|  1.08k|    auto start = source.data();
 1166|  1.08k|    const auto end = source.data() + source.size();
 1167|  1.08k|    {
 1168|  1.48k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1168:16): [True: 1.28k, False: 201]
  ------------------
 1169|  1.28k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1169:17): [True: 885, False: 402]
  ------------------
 1170|    885|                break;
 1171|    885|            }
 1172|  1.28k|        }
 1173|  1.08k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  865|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 314, False: 772]
  |  |  |  Branch (865:45): [True: 201, False: 885]
  |  |  |  Branch (865:45): [True: 113, False: 772]
  |  |  ------------------
  ------------------
 1174|    314|            value = 0;
 1175|    314|            return ranges::next(source.begin(),
 1176|    314|                                ranges::distance(source.data(), start));
 1177|    314|        }
 1178|  1.08k|    }
 1179|       |
 1180|       |    if constexpr (std::is_same_v<CharT, char>) {
 1181|       |        if (base == 10) {
 1182|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1183|       |                             detail::make_string_view_from_pointers(start, end),
 1184|       |                             value, sign == sign_type::minus_sign));
 1185|       |            return ranges::next(source.begin(),
 1186|       |                                ranges::distance(source.data(), ptr));
 1187|       |        }
 1188|       |    }
 1189|       |
 1190|    772|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|    772|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    772|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    772|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    772|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      8|    }                                                  \
  |  |  |  | 3939|    772|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1191|    764|                     detail::make_string_view_from_pointers(start, end), value,
 1192|    764|                     base, sign == sign_type::minus_sign));
 1193|    764|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1194|    772|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   213k|{
 1903|   213k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   213k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   212k|{
 1911|   212k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   212k|    return sync_after_vscan(source, n);
 1913|   212k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|  86.2k|{
 1921|  86.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|  86.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|  86.2k|{
 1929|  86.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|  86.2k|    return sync_after_vscan(source, n);
 1931|  86.2k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   861k|{
  215|   861k|    return find_classic_impl(
  216|   861k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   861k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   861k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   213k|{
 1872|   213k|    return vscan_internal(source, format, args);
 1873|   213k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   212k|{
 1878|   212k|    auto n = vscan_internal(source, format, args);
 1879|   212k|    return sync_after_vscan(source, n);
 1880|   212k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|  86.2k|{
 1886|  86.2k|    return vscan_internal(source, format, args);
 1887|  86.2k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|  86.2k|{
 1892|  86.2k|    auto n = vscan_internal(source, format, args);
 1893|  86.2k|    return sync_after_vscan(source, n);
 1894|  86.2k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  32.3k|{
 1958|  32.3k|    return vscan_value_internal(source, arg);
 1959|  32.3k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  31.8k|{
 1963|  31.8k|    auto n = vscan_value_internal(source, arg);
 1964|  31.8k|    return sync_after_vscan(source, n);
 1965|  31.8k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  8.71k|{
 1971|  8.71k|    return vscan_value_internal(source, arg);
 1972|  8.71k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  8.71k|{
 1977|  8.71k|    auto n = vscan_value_internal(source, arg);
 1978|  8.71k|    return sync_after_vscan(source, n);
 1979|  8.71k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1056|  84.4k|{
 1057|  84.4k|    auto max_digits = maxdigits_u64(base);
 1058|  84.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 958, False: 83.4k]
  ------------------
 1059|    958|        return true;
 1060|    958|    }
 1061|  83.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 318, False: 83.1k]
  |  Branch (1061:39): [True: 106, False: 212]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|  83.3k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  83.3k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 4.71k, False: 78.6k]
  ------------------
 1066|  83.3k|                      static_cast<uint64_t>(is_negative)) {
 1067|  4.71k|            SCN_UNLIKELY_ATTR
 1068|  4.71k|            return true;
 1069|  4.71k|        }
 1070|  83.3k|    }
 1071|       |
 1072|  78.6k|    return false;
 1073|  83.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1002|   502k|{
 1003|   502k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1004|   502k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1005|   502k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1046|  1.79k|{
 1047|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  930|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1048|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1049|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIaEET_mb:
 1077|  78.6k|{
 1078|  78.6k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 15.1k, False: 63.5k]
  ------------------
 1079|  15.1k|        SCN_MSVC_PUSH
 1080|  15.1k|        SCN_MSVC_IGNORE(4146)
 1081|  15.1k|        return static_cast<T>(
 1082|  15.1k|            -std::numeric_limits<T>::max() -
 1083|  15.1k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  15.1k|        SCN_MSVC_POP
 1085|  15.1k|    }
 1086|       |
 1087|  63.5k|    return static_cast<T>(u64val);
 1088|  78.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1056|   101k|{
 1057|   101k|    auto max_digits = maxdigits_u64(base);
 1058|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.02k, False: 100k]
  ------------------
 1059|  1.02k|        return true;
 1060|  1.02k|    }
 1061|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 326, False: 100k]
  |  Branch (1061:39): [True: 106, False: 220]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 1.65k, False: 99.1k]
  ------------------
 1066|   100k|                      static_cast<uint64_t>(is_negative)) {
 1067|  1.65k|            SCN_UNLIKELY_ATTR
 1068|  1.65k|            return true;
 1069|  1.65k|        }
 1070|   100k|    }
 1071|       |
 1072|  99.1k|    return false;
 1073|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIiEET_mb:
 1077|  99.1k|{
 1078|  99.1k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 16.5k, False: 82.5k]
  ------------------
 1079|  16.5k|        SCN_MSVC_PUSH
 1080|  16.5k|        SCN_MSVC_IGNORE(4146)
 1081|  16.5k|        return static_cast<T>(
 1082|  16.5k|            -std::numeric_limits<T>::max() -
 1083|  16.5k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  16.5k|        SCN_MSVC_POP
 1085|  16.5k|    }
 1086|       |
 1087|  82.5k|    return static_cast<T>(u64val);
 1088|  99.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1056|   103k|{
 1057|   103k|    auto max_digits = maxdigits_u64(base);
 1058|   103k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 1.11k, False: 102k]
  ------------------
 1059|  1.11k|        return true;
 1060|  1.11k|    }
 1061|   102k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 362, False: 101k]
  |  Branch (1061:39): [True: 106, False: 256]
  ------------------
 1062|    106|        return true;
 1063|    106|    }
 1064|   102k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|   102k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 202, False: 101k]
  ------------------
 1066|   102k|                      static_cast<uint64_t>(is_negative)) {
 1067|    202|            SCN_UNLIKELY_ATTR
 1068|    202|            return true;
 1069|    202|        }
 1070|   102k|    }
 1071|       |
 1072|   101k|    return false;
 1073|   102k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxEET_mb:
 1077|   101k|{
 1078|   101k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 17.3k, False: 84.5k]
  ------------------
 1079|  17.3k|        SCN_MSVC_PUSH
 1080|  17.3k|        SCN_MSVC_IGNORE(4146)
 1081|  17.3k|        return static_cast<T>(
 1082|  17.3k|            -std::numeric_limits<T>::max() -
 1083|  17.3k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|  17.3k|        SCN_MSVC_POP
 1085|  17.3k|    }
 1086|       |
 1087|  84.5k|    return static_cast<T>(u64val);
 1088|   101k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1056|  65.8k|{
 1057|  65.8k|    auto max_digits = maxdigits_u64(base);
 1058|  65.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 654, False: 65.2k]
  ------------------
 1059|    654|        return true;
 1060|    654|    }
 1061|  65.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 224, False: 64.9k]
  |  Branch (1061:39): [True: 58, False: 166]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  65.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  65.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 2.34k, False: 62.8k]
  ------------------
 1066|  65.1k|                      static_cast<uint64_t>(is_negative)) {
 1067|  2.34k|            SCN_UNLIKELY_ATTR
 1068|  2.34k|            return true;
 1069|  2.34k|        }
 1070|  65.1k|    }
 1071|       |
 1072|  62.8k|    return false;
 1073|  65.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhEET_mb:
 1077|  62.8k|{
 1078|  62.8k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 62.8k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  62.8k|    return static_cast<T>(u64val);
 1088|  62.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1056|  73.1k|{
 1057|  73.1k|    auto max_digits = maxdigits_u64(base);
 1058|  73.1k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 654, False: 72.4k]
  ------------------
 1059|    654|        return true;
 1060|    654|    }
 1061|  72.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 228, False: 72.2k]
  |  Branch (1061:39): [True: 58, False: 170]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  72.3k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  72.3k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 857, False: 71.5k]
  ------------------
 1066|  72.3k|                      static_cast<uint64_t>(is_negative)) {
 1067|    857|            SCN_UNLIKELY_ATTR
 1068|    857|            return true;
 1069|    857|        }
 1070|  72.3k|    }
 1071|       |
 1072|  71.5k|    return false;
 1073|  72.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjEET_mb:
 1077|  71.5k|{
 1078|  71.5k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 71.5k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  71.5k|    return static_cast<T>(u64val);
 1088|  71.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1056|  73.9k|{
 1057|  73.9k|    auto max_digits = maxdigits_u64(base);
 1058|  73.9k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1058:9): [True: 668, False: 73.2k]
  ------------------
 1059|    668|        return true;
 1060|    668|    }
 1061|  73.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1061:9): [True: 336, False: 72.9k]
  |  Branch (1061:39): [True: 58, False: 278]
  ------------------
 1062|     58|        return true;
 1063|     58|    }
 1064|  73.2k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1065|  73.2k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1065:13): [True: 0, False: 73.2k]
  ------------------
 1066|  73.2k|                      static_cast<uint64_t>(is_negative)) {
 1067|      0|            SCN_UNLIKELY_ATTR
 1068|      0|            return true;
 1069|      0|        }
 1070|  73.2k|    }
 1071|       |
 1072|  73.2k|    return false;
 1073|  73.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIyEET_mb:
 1077|  73.2k|{
 1078|  73.2k|    if (is_negative) {
  ------------------
  |  Branch (1078:9): [True: 0, False: 73.2k]
  ------------------
 1079|      0|        SCN_MSVC_PUSH
 1080|      0|        SCN_MSVC_IGNORE(4146)
 1081|      0|        return static_cast<T>(
 1082|      0|            -std::numeric_limits<T>::max() -
 1083|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1084|      0|        SCN_MSVC_POP
 1085|      0|    }
 1086|       |
 1087|  73.2k|    return static_cast<T>(u64val);
 1088|  73.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
  940|   190k|{
  941|   190k|    uint64_t val{};
  942|   190k|    std::memcpy(&val, input, sizeof(uint64_t));
  943|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
  944|       |        val = byteswap(val);
  945|       |    }
  946|   190k|    return val;
  947|   190k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
  950|  34.0k|{
  951|  34.0k|    constexpr uint64_t mask = 0x000000FF000000FF;
  952|  34.0k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
  953|  34.0k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
  954|  34.0k|    word -= 0x3030303030303030;
  955|  34.0k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
  956|  34.0k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
  957|  34.0k|    return static_cast<uint32_t>(word);
  958|  34.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
  961|   156k|{
  962|   156k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
  963|   156k|              0x8080808080808080));
  964|   156k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   525k|{
  118|   525k|    static_assert(sizeof(*source.data()) == 1);
  119|   525k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   525k|    uint64_t word{};
  121|   525k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   525k|    return has_byte_greater(word, 127) != 0;
  124|   525k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   861k|{
  131|   861k|    auto it = source.begin();
  132|       |
  133|   941k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 525k, False: 415k]
  ------------------
  134|   525k|        auto sv =
  135|   525k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   525k|                .substr(0, 8);
  137|       |
  138|   525k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 500k, False: 24.9k]
  ------------------
  139|   500k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   500k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   500k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 422k, False: 77.8k]
  ------------------
  142|   422k|                break;
  143|   422k|            }
  144|  77.8k|            continue;
  145|   500k|        }
  146|       |
  147|  34.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 32.5k, False: 2.05k]
  ------------------
  148|  32.5k|            auto tmp =
  149|  32.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  32.5k|            auto res = get_next_code_point(tmp);
  151|  32.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.8k, False: 9.69k]
  ------------------
  152|  22.8k|                return it;
  153|  22.8k|            }
  154|  9.69k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.69k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.69k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  9.69k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.69k|        }
  158|  24.9k|    }
  159|       |
  160|   838k|    return detail::make_string_view_iterator(source, it);
  161|   861k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   872k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  32.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  62.4k|{
 1095|  62.4k|    uint64_t u64val{};
 1096|  62.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  62.4k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  62.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  62.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.49k, False: 58.9k]
  |  |  ------------------
  ------------------
 1101|  62.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  3.49k|        return detail::unexpected_scan_error(
 1103|  3.49k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 1.07k, False: 2.41k]
  ------------------
 1104|  3.49k|                        : scan_error::value_positive_overflow,
 1105|  3.49k|            "Integer overflow");
 1106|  3.49k|    }
 1107|       |
 1108|  58.9k|    val = store_result<T>(u64val, is_negative);
 1109|  58.9k|    return ptr;
 1110|  62.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
  982|   361k|{
  983|   361k|    loop_parse_if_eight_decimal_digits(begin, end, val);
  984|       |
  985|   812k|    while (begin != end) {
  ------------------
  |  Branch (985:12): [True: 587k, False: 224k]
  ------------------
  986|   587k|        const auto digit = char_to_int(*begin);
  987|   587k|        if (digit >= 10) {
  ------------------
  |  Branch (987:13): [True: 136k, False: 450k]
  ------------------
  988|   136k|            break;
  989|   136k|        }
  990|   450k|        val = 10ull * val + static_cast<uint64_t>(digit);
  991|   450k|        ++begin;
  992|   450k|    }
  993|       |
  994|   361k|    return begin;
  995|   361k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
  969|   361k|{
  970|   361k|    while (
  971|   395k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (971:9): [True: 156k, False: 239k]
  ------------------
  972|   395k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (972:9): [True: 34.0k, False: 122k]
  ------------------
  973|  34.0k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
  974|  34.0k|                                      get_eight_digits_word(p));
  975|  34.0k|        p += 8;
  976|  34.0k|    }
  977|   361k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  21.0k|{
 1118|  21.0k|    uint64_t u64val{};
 1119|  21.0k|    const CharT* begin = input.data();
 1120|  21.0k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  74.0k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 63.0k, False: 10.9k]
  ------------------
 1123|  63.0k|        const auto digit = char_to_int(*begin);
 1124|  63.0k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 10.0k, False: 52.9k]
  ------------------
 1125|  10.0k|            break;
 1126|  10.0k|        }
 1127|  52.9k|        u64val =
 1128|  52.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  52.9k|        ++begin;
 1130|  52.9k|    }
 1131|       |
 1132|  21.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  21.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.95k, False: 19.1k]
  |  |  ------------------
  ------------------
 1134|  21.0k|                                               is_negative))) {
 1135|  1.95k|        return detail::unexpected_scan_error(
 1136|  1.95k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 608, False: 1.34k]
  ------------------
 1137|  1.95k|                        : scan_error::value_positive_overflow,
 1138|  1.95k|            "Integer overflow");
 1139|  1.95k|    }
 1140|       |
 1141|  19.1k|    val = store_result<T>(u64val, is_negative);
 1142|  19.1k|    return begin;
 1143|  21.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    916|{
 1118|    916|    uint64_t u64val{};
 1119|    916|    const CharT* begin = input.data();
 1120|    916|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.66k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 4.02k, False: 639]
  ------------------
 1123|  4.02k|        const auto digit = char_to_int(*begin);
 1124|  4.02k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 277, False: 3.74k]
  ------------------
 1125|    277|            break;
 1126|    277|        }
 1127|  3.74k|        u64val =
 1128|  3.74k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.74k|        ++begin;
 1130|  3.74k|    }
 1131|       |
 1132|    916|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    916|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 332, False: 584]
  |  |  ------------------
  ------------------
 1134|    916|                                               is_negative))) {
 1135|    332|        return detail::unexpected_scan_error(
 1136|    332|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 56, False: 276]
  ------------------
 1137|    332|                        : scan_error::value_positive_overflow,
 1138|    332|            "Integer overflow");
 1139|    332|    }
 1140|       |
 1141|    584|    val = store_result<T>(u64val, is_negative);
 1142|    584|    return begin;
 1143|    916|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  72.5k|{
 1095|  72.5k|    uint64_t u64val{};
 1096|  72.5k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  72.5k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  72.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  72.5k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.73k, False: 70.8k]
  |  |  ------------------
  ------------------
 1101|  72.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.73k|        return detail::unexpected_scan_error(
 1103|  1.73k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 624, False: 1.10k]
  ------------------
 1104|  1.73k|                        : scan_error::value_positive_overflow,
 1105|  1.73k|            "Integer overflow");
 1106|  1.73k|    }
 1107|       |
 1108|  70.8k|    val = store_result<T>(u64val, is_negative);
 1109|  70.8k|    return ptr;
 1110|  72.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.4k|{
 1118|  28.4k|    uint64_t u64val{};
 1119|  28.4k|    const CharT* begin = input.data();
 1120|  28.4k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  92.7k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 77.9k, False: 14.7k]
  ------------------
 1123|  77.9k|        const auto digit = char_to_int(*begin);
 1124|  77.9k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.6k, False: 64.2k]
  ------------------
 1125|  13.6k|            break;
 1126|  13.6k|        }
 1127|  64.2k|        u64val =
 1128|  64.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  64.2k|        ++begin;
 1130|  64.2k|    }
 1131|       |
 1132|  28.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 906, False: 27.5k]
  |  |  ------------------
  ------------------
 1134|  28.4k|                                               is_negative))) {
 1135|    906|        return detail::unexpected_scan_error(
 1136|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 336, False: 570]
  ------------------
 1137|    906|                        : scan_error::value_positive_overflow,
 1138|    906|            "Integer overflow");
 1139|    906|    }
 1140|       |
 1141|  27.5k|    val = store_result<T>(u64val, is_negative);
 1142|  27.5k|    return begin;
 1143|  28.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    942|{
 1118|    942|    uint64_t u64val{};
 1119|    942|    const CharT* begin = input.data();
 1120|    942|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.71k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 4.05k, False: 654]
  ------------------
 1123|  4.05k|        const auto digit = char_to_int(*begin);
 1124|  4.05k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 288, False: 3.77k]
  ------------------
 1125|    288|            break;
 1126|    288|        }
 1127|  3.77k|        u64val =
 1128|  3.77k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.77k|        ++begin;
 1130|  3.77k|    }
 1131|       |
 1132|    942|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    942|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 148, False: 794]
  |  |  ------------------
  ------------------
 1134|    942|                                               is_negative))) {
 1135|    148|        return detail::unexpected_scan_error(
 1136|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 148]
  ------------------
 1137|    148|                        : scan_error::value_positive_overflow,
 1138|    148|            "Integer overflow");
 1139|    148|    }
 1140|       |
 1141|    794|    val = store_result<T>(u64val, is_negative);
 1142|    794|    return begin;
 1143|    942|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  73.5k|{
 1095|  73.5k|    uint64_t u64val{};
 1096|  73.5k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  73.5k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  73.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  73.5k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 934, False: 72.6k]
  |  |  ------------------
  ------------------
 1101|  73.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    934|        return detail::unexpected_scan_error(
 1103|    934|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 284, False: 650]
  ------------------
 1104|    934|                        : scan_error::value_positive_overflow,
 1105|    934|            "Integer overflow");
 1106|    934|    }
 1107|       |
 1108|  72.6k|    val = store_result<T>(u64val, is_negative);
 1109|  72.6k|    return ptr;
 1110|  73.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  28.7k|{
 1118|  28.7k|    uint64_t u64val{};
 1119|  28.7k|    const CharT* begin = input.data();
 1120|  28.7k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  95.3k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 80.4k, False: 14.9k]
  ------------------
 1123|  80.4k|        const auto digit = char_to_int(*begin);
 1124|  80.4k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 13.8k, False: 66.6k]
  ------------------
 1125|  13.8k|            break;
 1126|  13.8k|        }
 1127|  66.6k|        u64val =
 1128|  66.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  66.6k|        ++begin;
 1130|  66.6k|    }
 1131|       |
 1132|  28.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  28.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 466, False: 28.3k]
  |  |  ------------------
  ------------------
 1134|  28.7k|                                               is_negative))) {
 1135|    466|        return detail::unexpected_scan_error(
 1136|    466|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 96, False: 370]
  ------------------
 1137|    466|                        : scan_error::value_positive_overflow,
 1138|    466|            "Integer overflow");
 1139|    466|    }
 1140|       |
 1141|  28.3k|    val = store_result<T>(u64val, is_negative);
 1142|  28.3k|    return begin;
 1143|  28.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    982|{
 1118|    982|    uint64_t u64val{};
 1119|    982|    const CharT* begin = input.data();
 1120|    982|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.79k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 4.11k, False: 678]
  ------------------
 1123|  4.11k|        const auto digit = char_to_int(*begin);
 1124|  4.11k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 304, False: 3.81k]
  ------------------
 1125|    304|            break;
 1126|    304|        }
 1127|  3.81k|        u64val =
 1128|  3.81k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.81k|        ++begin;
 1130|  3.81k|    }
 1131|       |
 1132|    982|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    982|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20, False: 962]
  |  |  ------------------
  ------------------
 1134|    982|                                               is_negative))) {
 1135|     20|        return detail::unexpected_scan_error(
 1136|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 20]
  ------------------
 1137|     20|                        : scan_error::value_positive_overflow,
 1138|     20|            "Integer overflow");
 1139|     20|    }
 1140|       |
 1141|    962|    val = store_result<T>(u64val, is_negative);
 1142|    962|    return begin;
 1143|    982|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  47.2k|{
 1095|  47.2k|    uint64_t u64val{};
 1096|  47.2k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  47.2k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  47.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  47.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77k, False: 45.5k]
  |  |  ------------------
  ------------------
 1101|  47.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|  1.77k|        return detail::unexpected_scan_error(
 1103|  1.77k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 1.77k]
  ------------------
 1104|  1.77k|                        : scan_error::value_positive_overflow,
 1105|  1.77k|            "Integer overflow");
 1106|  1.77k|    }
 1107|       |
 1108|  45.5k|    val = store_result<T>(u64val, is_negative);
 1109|  45.5k|    return ptr;
 1110|  47.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  17.8k|{
 1118|  17.8k|    uint64_t u64val{};
 1119|  17.8k|    const CharT* begin = input.data();
 1120|  17.8k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  57.1k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 47.8k, False: 9.27k]
  ------------------
 1123|  47.8k|        const auto digit = char_to_int(*begin);
 1124|  47.8k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 8.59k, False: 39.2k]
  ------------------
 1125|  8.59k|            break;
 1126|  8.59k|        }
 1127|  39.2k|        u64val =
 1128|  39.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  39.2k|        ++begin;
 1130|  39.2k|    }
 1131|       |
 1132|  17.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  17.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.03k, False: 16.8k]
  |  |  ------------------
  ------------------
 1134|  17.8k|                                               is_negative))) {
 1135|  1.03k|        return detail::unexpected_scan_error(
 1136|  1.03k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 1.03k]
  ------------------
 1137|  1.03k|                        : scan_error::value_positive_overflow,
 1138|  1.03k|            "Integer overflow");
 1139|  1.03k|    }
 1140|       |
 1141|  16.8k|    val = store_result<T>(u64val, is_negative);
 1142|  16.8k|    return begin;
 1143|  17.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    706|{
 1118|    706|    uint64_t u64val{};
 1119|    706|    const CharT* begin = input.data();
 1120|    706|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.07k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.60k, False: 474]
  ------------------
 1123|  3.60k|        const auto digit = char_to_int(*begin);
 1124|  3.60k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 232, False: 3.37k]
  ------------------
 1125|    232|            break;
 1126|    232|        }
 1127|  3.37k|        u64val =
 1128|  3.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.37k|        ++begin;
 1130|  3.37k|    }
 1131|       |
 1132|    706|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    706|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 250, False: 456]
  |  |  ------------------
  ------------------
 1134|    706|                                               is_negative))) {
 1135|    250|        return detail::unexpected_scan_error(
 1136|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 250]
  ------------------
 1137|    250|                        : scan_error::value_positive_overflow,
 1138|    250|            "Integer overflow");
 1139|    250|    }
 1140|       |
 1141|    456|    val = store_result<T>(u64val, is_negative);
 1142|    456|    return begin;
 1143|    706|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  52.4k|{
 1095|  52.4k|    uint64_t u64val{};
 1096|  52.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  52.4k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  52.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  52.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 939, False: 51.5k]
  |  |  ------------------
  ------------------
 1101|  52.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    939|        return detail::unexpected_scan_error(
 1103|    939|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 939]
  ------------------
 1104|    939|                        : scan_error::value_positive_overflow,
 1105|    939|            "Integer overflow");
 1106|    939|    }
 1107|       |
 1108|  51.5k|    val = store_result<T>(u64val, is_negative);
 1109|  51.5k|    return ptr;
 1110|  52.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  19.8k|{
 1118|  19.8k|    uint64_t u64val{};
 1119|  19.8k|    const CharT* begin = input.data();
 1120|  19.8k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  62.3k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 52.0k, False: 10.3k]
  ------------------
 1123|  52.0k|        const auto digit = char_to_int(*begin);
 1124|  52.0k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.57k, False: 42.5k]
  ------------------
 1125|  9.57k|            break;
 1126|  9.57k|        }
 1127|  42.5k|        u64val =
 1128|  42.5k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  42.5k|        ++begin;
 1130|  42.5k|    }
 1131|       |
 1132|  19.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  19.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 486, False: 19.3k]
  |  |  ------------------
  ------------------
 1134|  19.8k|                                               is_negative))) {
 1135|    486|        return detail::unexpected_scan_error(
 1136|    486|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 486]
  ------------------
 1137|    486|                        : scan_error::value_positive_overflow,
 1138|    486|            "Integer overflow");
 1139|    486|    }
 1140|       |
 1141|  19.3k|    val = store_result<T>(u64val, is_negative);
 1142|  19.3k|    return begin;
 1143|  19.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    728|{
 1118|    728|    uint64_t u64val{};
 1119|    728|    const CharT* begin = input.data();
 1120|    728|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.12k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.63k, False: 487]
  ------------------
 1123|  3.63k|        const auto digit = char_to_int(*begin);
 1124|  3.63k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 241, False: 3.39k]
  ------------------
 1125|    241|            break;
 1126|    241|        }
 1127|  3.39k|        u64val =
 1128|  3.39k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.39k|        ++begin;
 1130|  3.39k|    }
 1131|       |
 1132|    728|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    728|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    728|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 144, False: 584]
  |  |  ------------------
  ------------------
 1134|    728|                                               is_negative))) {
 1135|    144|        return detail::unexpected_scan_error(
 1136|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 144]
  ------------------
 1137|    144|                        : scan_error::value_positive_overflow,
 1138|    144|            "Integer overflow");
 1139|    144|    }
 1140|       |
 1141|    584|    val = store_result<T>(u64val, is_negative);
 1142|    584|    return begin;
 1143|    728|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1094|  53.1k|{
 1095|  53.1k|    uint64_t u64val{};
 1096|  53.1k|    auto ptr = parse_decimal_integer_fast_impl(
 1097|  53.1k|        input.data(), input.data() + input.size(), u64val);
 1098|       |
 1099|  53.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1100|  53.1k|    if (SCN_UNLIKELY(
  ------------------
  |  |  865|  53.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 456, False: 52.6k]
  |  |  ------------------
  ------------------
 1101|  53.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1102|    456|        return detail::unexpected_scan_error(
 1103|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1103:13): [True: 0, False: 456]
  ------------------
 1104|    456|                        : scan_error::value_positive_overflow,
 1105|    456|            "Integer overflow");
 1106|    456|    }
 1107|       |
 1108|  52.6k|    val = store_result<T>(u64val, is_negative);
 1109|  52.6k|    return ptr;
 1110|  53.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|  20.0k|{
 1118|  20.0k|    uint64_t u64val{};
 1119|  20.0k|    const CharT* begin = input.data();
 1120|  20.0k|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  63.8k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 53.4k, False: 10.4k]
  ------------------
 1123|  53.4k|        const auto digit = char_to_int(*begin);
 1124|  53.4k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 9.64k, False: 43.7k]
  ------------------
 1125|  9.64k|            break;
 1126|  9.64k|        }
 1127|  43.7k|        u64val =
 1128|  43.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  43.7k|        ++begin;
 1130|  43.7k|    }
 1131|       |
 1132|  20.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|  20.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 262, False: 19.7k]
  |  |  ------------------
  ------------------
 1134|  20.0k|                                               is_negative))) {
 1135|    262|        return detail::unexpected_scan_error(
 1136|    262|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 262]
  ------------------
 1137|    262|                        : scan_error::value_positive_overflow,
 1138|    262|            "Integer overflow");
 1139|    262|    }
 1140|       |
 1141|  19.7k|    val = store_result<T>(u64val, is_negative);
 1142|  19.7k|    return begin;
 1143|  20.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1117|    772|{
 1118|    772|    uint64_t u64val{};
 1119|    772|    const CharT* begin = input.data();
 1120|    772|    const CharT* const end = input.data() + input.size();
 1121|       |
 1122|  4.21k|    while (begin != end) {
  ------------------
  |  Branch (1122:12): [True: 3.69k, False: 513]
  ------------------
 1123|  3.69k|        const auto digit = char_to_int(*begin);
 1124|  3.69k|        if (digit >= base) {
  ------------------
  |  Branch (1124:13): [True: 259, False: 3.43k]
  ------------------
 1125|    259|            break;
 1126|    259|        }
 1127|  3.43k|        u64val =
 1128|  3.43k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1129|  3.43k|        ++begin;
 1130|  3.43k|    }
 1131|       |
 1132|    772|    auto digits_count = static_cast<size_t>(begin - input.data());
 1133|    772|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  865|    772|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8, False: 764]
  |  |  ------------------
  ------------------
 1134|    772|                                               is_negative))) {
 1135|      8|        return detail::unexpected_scan_error(
 1136|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1136:13): [True: 0, False: 8]
  ------------------
 1137|      8|                        : scan_error::value_positive_overflow,
 1138|      8|            "Integer overflow");
 1139|      8|    }
 1140|       |
 1141|    764|    val = store_result<T>(u64val, is_negative);
 1142|    764|    return begin;
 1143|    772|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   425k|{
 1769|   425k|    const auto argcount = args.size();
 1770|   425k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 63.7k, False: 361k]
  |  Branch (1770:60): [True: 63.7k, False: 0]
  ------------------
 1771|  63.7k|        auto arg = args.get(0);
 1772|  63.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  63.7k|    static_cast<    \
  |  |  935|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  63.7k|    }
 1774|       |
 1775|   361k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 361k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   361k|    SCN_UNLIKELY_ATTR
 1783|   361k|    {
 1784|   361k|        auto handler = format_handler<false, CharT>{
 1785|   361k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   361k|        return vscan_parse_format_string(format, handler);
 1787|   361k|    }
 1788|   361k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   851k|{
 1317|   851k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 723k, False: 128k]
  ------------------
 1318|   723k|        return false;
 1319|   723k|    }
 1320|   128k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 128k, False: 0]
  |  Branch (1320:39): [True: 128k, False: 0]
  ------------------
 1321|   851k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  95.6k|{
 1350|  95.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 95.6k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  95.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  95.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 95.6k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  95.6k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  95.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  95.6k|    static_cast<    \
  |  |  935|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  95.6k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  95.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  95.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  95.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.7k, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.7k|    }                                                  \
  |  |  |  | 3939|  95.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  82.9k|    return it.position();
 1367|  95.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   361k|        : format_handler_base{argcount},
 1593|   361k|          parse_ctx{format},
 1594|   361k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   361k|    {
 1596|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  1.03M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  1.03M|    {
 1412|  1.03M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  1.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   361k|        : contiguous_ctx(source, args, loc)
 1544|   361k|    {
 1545|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   361k|{
 1734|   361k|    const auto beg = handler.get_ctx().begin();
 1735|   361k|    detail::parse_format_string<false>(format, handler);
 1736|   361k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 76.2k, False: 285k]
  |  |  ------------------
  ------------------
 1737|  76.2k|        return unexpected(err.error());
 1738|  76.2k|    }
 1739|   285k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   361k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  2.32M|    {
 1718|  2.32M|        return ctx.get();
 1719|  2.32M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  2.32M|    {
 1549|  2.32M|        return contiguous_ctx;
 1550|  2.32M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   646k|    {
 1600|   646k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 646k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   406k|    {
 1460|   406k|        error = unexpected(err);
 1461|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   361k|{
 1372|   361k|    auto arg = ctx.arg(id);
 1373|   361k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   361k|    return arg;
 1377|   361k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  1.03M|    {
 1486|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  1.03M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1498|  1.03M|            visited_args_lower64 |= (1ull << id);
 1499|  1.03M|            return;
 1500|  1.03M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  1.03M|    {
 1470|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1477|  1.03M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  1.03M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  1.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   361k|    {
 1640|   361k|        return parse_ctx.next_arg_id();
 1641|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   361k|    {
 1680|   361k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   361k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   361k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 361k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   361k|        auto specs = detail::format_specs{};
 1693|   361k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   361k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   361k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   361k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   361k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 361k]
  |  Branch (1698:29): [True: 16.9k, False: 344k]
  ------------------
 1699|  16.9k|            SCN_UNLIKELY_ATTR
 1700|  16.9k|            on_error({scan_error::invalid_format_string,
 1701|  16.9k|                      "Missing '}' in format string"});
 1702|  16.9k|            return parse_ctx.begin();
 1703|  16.9k|        }
 1704|   344k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.47k, False: 335k]
  |  |  ------------------
  ------------------
 1705|  8.47k|            return parse_ctx.begin();
 1706|  8.47k|        }
 1707|   335k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   335k|        on_visit_scan_arg(
 1710|   335k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   335k|                                           get_ctx().locale()},
 1712|   335k|            arg);
 1713|   335k|        return parse_ctx.begin();
 1714|   344k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   361k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   361k|    {
 1391|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   335k|    {
 1651|   335k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 335k]
  |  Branch (1651:13): [True: 0, False: 335k]
  |  Branch (1651:29): [True: 0, False: 335k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   335k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   335k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.8k, False: 285k]
  |  |  ------------------
  ------------------
 1658|  50.8k|            on_error(r.error());
 1659|  50.8k|        }
 1660|   285k|        else {
 1661|   285k|            get_ctx().advance_to(*r);
 1662|   285k|        }
 1663|   335k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|   152k|    {
 1454|   152k|        SCN_UNLIKELY_ATTR
 1455|   152k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|   152k|                                              msg);
 1457|   152k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  1.03M|    {
 1419|  1.03M|        {
 1420|  1.03M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 1.03M]
  ------------------
 1421|  1.03M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 1.03M]
  ------------------
 1422|  1.03M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  1.03M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  1.03M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 1.03M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  1.03M|        }
 1430|       |
 1431|  1.03M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 1.03M, False: 0]
  ------------------
 1432|  1.03M|            return;
 1433|  1.03M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.98M|    {
 1465|  3.98M|        return error;
 1466|  3.98M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   361k|        : format_handler_base{argcount},
 1593|   361k|          parse_ctx{format},
 1594|   361k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   361k|    {
 1596|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   361k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   361k|    {
 1521|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   361k|{
 1734|   361k|    const auto beg = handler.get_ctx().begin();
 1735|   361k|    detail::parse_format_string<false>(format, handler);
 1736|   361k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 76.2k, False: 285k]
  |  |  ------------------
  ------------------
 1737|  76.2k|        return unexpected(err.error());
 1738|  76.2k|    }
 1739|   285k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   361k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  2.32M|    {
 1718|  2.32M|        return ctx.get();
 1719|  2.32M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  2.32M|    {
 1525|  2.32M|        return ctx;
 1526|  2.32M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|   647k|    {
 1600|   647k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 647k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   647k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   361k|{
 1372|   361k|    auto arg = ctx.arg(id);
 1373|   361k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   361k|    return arg;
 1377|   361k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   361k|    {
 1640|   361k|        return parse_ctx.next_arg_id();
 1641|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   361k|    {
 1680|   361k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   361k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   361k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 361k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   361k|        auto specs = detail::format_specs{};
 1693|   361k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   361k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   361k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   361k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   361k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 361k]
  |  Branch (1698:29): [True: 16.9k, False: 344k]
  ------------------
 1699|  16.9k|            SCN_UNLIKELY_ATTR
 1700|  16.9k|            on_error({scan_error::invalid_format_string,
 1701|  16.9k|                      "Missing '}' in format string"});
 1702|  16.9k|            return parse_ctx.begin();
 1703|  16.9k|        }
 1704|   344k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.47k, False: 336k]
  |  |  ------------------
  ------------------
 1705|  8.47k|            return parse_ctx.begin();
 1706|  8.47k|        }
 1707|   336k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   336k|        on_visit_scan_arg(
 1710|   336k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   336k|                                           get_ctx().locale()},
 1712|   336k|            arg);
 1713|   336k|        return parse_ctx.begin();
 1714|   344k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   361k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   361k|    {
 1391|   361k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   336k|    {
 1651|   336k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 336k]
  |  Branch (1651:13): [True: 0, False: 336k]
  |  Branch (1651:29): [True: 0, False: 336k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   336k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   336k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 50.8k, False: 285k]
  |  |  ------------------
  ------------------
 1658|  50.8k|            on_error(r.error());
 1659|  50.8k|        }
 1660|   285k|        else {
 1661|   285k|            get_ctx().advance_to(*r);
 1662|   285k|        }
 1663|   336k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   426k|{
 1749|   426k|    const auto argcount = args.size();
 1750|   426k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 64.7k, False: 361k]
  |  Branch (1750:60): [True: 64.7k, False: 0]
  ------------------
 1751|  64.7k|        auto arg = args.get(0);
 1752|  64.7k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  64.7k|    static_cast<    \
  |  |  935|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  64.7k|    }
 1754|       |
 1755|   361k|    auto handler = format_handler<true, CharT>{
 1756|   361k|        ranges::subrange<const CharT*>{source.data(),
 1757|   361k|                                       source.data() + source.size()},
 1758|   361k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   361k|    return vscan_parse_format_string(format, handler);
 1760|   426k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  97.0k|{
 1330|  97.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 97.0k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  97.0k|    auto reader =
 1336|  97.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  97.0k|            ranges::subrange<const CharT*>{source.data(),
 1338|  97.0k|                                           source.data() + source.size()},
 1339|  97.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  97.0k|    static_cast<    \
  |  |  935|  97.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  97.0k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  97.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  97.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  97.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.7k, False: 84.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.7k|    }                                                  \
  |  |  |  | 3939|  97.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  84.3k|    return ranges::distance(source.data(), it);
 1342|  97.0k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   457k|{
 1849|   457k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   457k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 368k, False: 88.9k]
  |  |  ------------------
  ------------------
 1850|   368k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   368k|    }
 1856|  88.9k|    else {
 1857|  88.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  88.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 88.9k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  88.9k|    }
 1863|   457k|    return result;
 1864|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   172k|{
 1749|   172k|    const auto argcount = args.size();
 1750|   172k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 17.4k, False: 155k]
  |  Branch (1750:60): [True: 17.4k, False: 0]
  ------------------
 1751|  17.4k|        auto arg = args.get(0);
 1752|  17.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.4k|    static_cast<    \
  |  |  935|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  17.4k|    }
 1754|       |
 1755|   155k|    auto handler = format_handler<true, CharT>{
 1756|   155k|        ranges::subrange<const CharT*>{source.data(),
 1757|   155k|                                       source.data() + source.size()},
 1758|   155k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   155k|    return vscan_parse_format_string(format, handler);
 1760|   172k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   345k|{
 1317|   345k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 310k, False: 34.8k]
  ------------------
 1318|   310k|        return false;
 1319|   310k|    }
 1320|  34.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 34.8k, False: 0]
  |  Branch (1320:39): [True: 34.8k, False: 0]
  ------------------
 1321|   345k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  26.1k|{
 1330|  26.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  26.1k|    auto reader =
 1336|  26.1k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  26.1k|            ranges::subrange<const CharT*>{source.data(),
 1338|  26.1k|                                           source.data() + source.size()},
 1339|  26.1k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  26.1k|    static_cast<    \
  |  |  935|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  26.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  26.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 25.4k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  25.4k|    }                                                  \
  |  |  |  | 3939|  26.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|    738|    return ranges::distance(source.data(), it);
 1342|  26.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   155k|        : format_handler_base{argcount},
 1593|   155k|          parse_ctx{format},
 1594|   155k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   155k|    {
 1596|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   155k|        : contiguous_ctx(source, args, loc)
 1544|   155k|    {
 1545|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   155k|{
 1734|   155k|    const auto beg = handler.get_ctx().begin();
 1735|   155k|    detail::parse_format_string<false>(format, handler);
 1736|   155k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 152k, False: 2.60k]
  |  |  ------------------
  ------------------
 1737|   152k|        return unexpected(err.error());
 1738|   152k|    }
 1739|  2.60k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|   679k|    {
 1718|   679k|        return ctx.get();
 1719|   679k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|   679k|    {
 1549|   679k|        return contiguous_ctx;
 1550|   679k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   157k|    {
 1600|   157k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 157k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   157k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   155k|{
 1372|   155k|    auto arg = ctx.arg(id);
 1373|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   155k|    return arg;
 1377|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   155k|    {
 1640|   155k|        return parse_ctx.next_arg_id();
 1641|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   155k|    {
 1680|   155k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   155k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   155k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 155k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   155k|        auto specs = detail::format_specs{};
 1693|   155k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   155k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   155k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   155k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   155k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 155k]
  |  Branch (1698:29): [True: 33.8k, False: 121k]
  ------------------
 1699|  33.8k|            SCN_UNLIKELY_ATTR
 1700|  33.8k|            on_error({scan_error::invalid_format_string,
 1701|  33.8k|                      "Missing '}' in format string"});
 1702|  33.8k|            return parse_ctx.begin();
 1703|  33.8k|        }
 1704|   121k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 104k]
  |  |  ------------------
  ------------------
 1705|  16.9k|            return parse_ctx.begin();
 1706|  16.9k|        }
 1707|   104k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   104k|        on_visit_scan_arg(
 1710|   104k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   104k|                                           get_ctx().locale()},
 1712|   104k|            arg);
 1713|   104k|        return parse_ctx.begin();
 1714|   121k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   155k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   155k|    {
 1391|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   104k|    {
 1651|   104k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 104k]
  |  Branch (1651:13): [True: 0, False: 104k]
  |  Branch (1651:29): [True: 0, False: 104k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   104k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   104k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 2.60k]
  |  |  ------------------
  ------------------
 1658|   101k|            on_error(r.error());
 1659|   101k|        }
 1660|  2.60k|        else {
 1661|  2.60k|            get_ctx().advance_to(*r);
 1662|  2.60k|        }
 1663|   104k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   172k|{
 1769|   172k|    const auto argcount = args.size();
 1770|   172k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 17.4k, False: 155k]
  |  Branch (1770:60): [True: 17.4k, False: 0]
  ------------------
 1771|  17.4k|        auto arg = args.get(0);
 1772|  17.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  17.4k|    static_cast<    \
  |  |  935|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  17.4k|    }
 1774|       |
 1775|   155k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 155k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   155k|    SCN_UNLIKELY_ATTR
 1783|   155k|    {
 1784|   155k|        auto handler = format_handler<false, CharT>{
 1785|   155k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   155k|        return vscan_parse_format_string(format, handler);
 1787|   155k|    }
 1788|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  26.1k|{
 1350|  26.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  26.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  26.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  26.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  26.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  26.1k|    static_cast<    \
  |  |  935|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  26.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  26.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  26.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  26.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 25.4k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  25.4k|    }                                                  \
  |  |  |  | 3939|  26.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|    738|    return it.position();
 1367|  26.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   155k|        : format_handler_base{argcount},
 1593|   155k|          parse_ctx{format},
 1594|   155k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   155k|    {
 1596|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   155k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   155k|    {
 1521|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   155k|{
 1734|   155k|    const auto beg = handler.get_ctx().begin();
 1735|   155k|    detail::parse_format_string<false>(format, handler);
 1736|   155k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 152k, False: 2.60k]
  |  |  ------------------
  ------------------
 1737|   152k|        return unexpected(err.error());
 1738|   152k|    }
 1739|  2.60k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|   679k|    {
 1718|   679k|        return ctx.get();
 1719|   679k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|   679k|    {
 1525|   679k|        return ctx;
 1526|   679k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   157k|    {
 1600|   157k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 157k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   157k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   155k|{
 1372|   155k|    auto arg = ctx.arg(id);
 1373|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   155k|    return arg;
 1377|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   155k|    {
 1640|   155k|        return parse_ctx.next_arg_id();
 1641|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   155k|    {
 1680|   155k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   155k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   155k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 155k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   155k|        auto specs = detail::format_specs{};
 1693|   155k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   155k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   155k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   155k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   155k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 155k]
  |  Branch (1698:29): [True: 33.8k, False: 121k]
  ------------------
 1699|  33.8k|            SCN_UNLIKELY_ATTR
 1700|  33.8k|            on_error({scan_error::invalid_format_string,
 1701|  33.8k|                      "Missing '}' in format string"});
 1702|  33.8k|            return parse_ctx.begin();
 1703|  33.8k|        }
 1704|   121k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.9k, False: 104k]
  |  |  ------------------
  ------------------
 1705|  16.9k|            return parse_ctx.begin();
 1706|  16.9k|        }
 1707|   104k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   104k|        on_visit_scan_arg(
 1710|   104k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   104k|                                           get_ctx().locale()},
 1712|   104k|            arg);
 1713|   104k|        return parse_ctx.begin();
 1714|   121k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   155k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   155k|    {
 1391|   155k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   104k|    {
 1651|   104k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 104k]
  |  Branch (1651:13): [True: 0, False: 104k]
  |  Branch (1651:29): [True: 0, False: 104k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   104k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   104k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 101k, False: 2.60k]
  |  |  ------------------
  ------------------
 1658|   101k|            on_error(r.error());
 1659|   101k|        }
 1660|  2.60k|        else {
 1661|  2.60k|            get_ctx().advance_to(*r);
 1662|  2.60k|        }
 1663|   104k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   181k|{
 1849|   181k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.34k, False: 177k]
  |  |  ------------------
  ------------------
 1850|  3.34k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  3.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.34k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  3.34k|    }
 1856|   177k|    else {
 1857|   177k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   177k|    }
 1863|   181k|    return result;
 1864|   181k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  32.3k|{
 1795|  32.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  32.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  31.8k|{
 1795|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  31.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  8.71k|{
 1795|  8.71k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.71k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  8.71k|{
 1795|  8.71k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  8.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  8.71k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    706|{
 1462|    706|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    706|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    706|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    706|            return transcode_to_string_impl_to32(src, dest);
 1473|    706|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    706|    SCN_EXPECT(false);
  ------------------
  |  |  930|    706|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    706|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    706|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    706|{
 1355|    706|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    706|    auto it = src.begin();
 1358|  49.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 48.5k, False: 706]
  ------------------
 1359|  48.5k|        auto res = get_next_code_point(
 1360|  48.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  48.5k|                                                                 src.end()));
 1362|  48.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 489, False: 48.0k]
  |  |  ------------------
  ------------------
 1363|    489|            dest.push_back(DestCharT{0xfffd});
 1364|    489|        }
 1365|  48.0k|        else {
 1366|  48.0k|            dest.push_back(res.value);
 1367|  48.0k|        }
 1368|  48.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  48.5k|    }
 1370|    706|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  81.1k|{
 1279|  81.1k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|  81.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  81.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  81.1k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  81.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  81.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.53k, False: 78.6k]
  |  |  ------------------
  ------------------
 1283|  2.53k|        return {get_start_for_next_code_point(input),
 1284|  2.53k|                detail::invalid_code_point};
 1285|  2.53k|    }
 1286|  78.6k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.19k, False: 76.4k]
  |  |  ------------------
  ------------------
 1287|  2.19k|        return {input.end(), detail::invalid_code_point};
 1288|  2.19k|    }
 1289|       |
 1290|  76.4k|    return {input.begin() + len,
 1291|  76.4k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  78.6k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.53k|{
 1265|  2.53k|    auto it = input.begin();
 1266|  10.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.19k, False: 1.23k]
  ------------------
 1267|  9.19k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.30k, False: 7.88k]
  ------------------
 1268|  1.30k|            break;
 1269|  1.30k|        }
 1270|  9.19k|    }
 1271|  2.53k|    return it;
 1272|  2.53k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.80M|    constexpr parse_error(code c) : m_code(c)
  808|  3.80M|    {
  809|  3.80M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.80M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.80M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.39M|    {
  823|  1.39M|        return a.m_code == b.m_code;
  824|  1.39M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   136k|    {
  827|   136k|        return !(a == b);
  828|   136k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|   880k|    {
 3040|   880k|        return m_msg == nullptr;
 3041|   880k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   872k|{
  458|   872k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   872k|        static_cast<unsigned char>(ch))];
  460|   872k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   525k|{
  539|   525k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   525k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.18M|{
  784|  3.18M|    return e != eof_error::good;
  785|  3.18M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  27.5k|{
  798|  27.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  27.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  27.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  27.5k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  27.5k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  63.2k|{
  845|  63.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  63.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  63.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  63.2k|    return parse_error::eof;
  847|  63.2k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   136k|{
  854|   136k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 136k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   136k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 136k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   136k|    return detail::unexpected_scan_error(code, msg);
  863|   136k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   425k|{
  868|   425k|    return [code, msg](parse_error err) {
  869|   425k|        assert(err != parse_error::good);
  870|   425k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   425k|    };
  872|   425k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|   330k|{
 2320|   330k|    unsigned char running_diff{0};
 2321|   992k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 661k, False: 330k]
  ------------------
 2322|   661k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|   661k|    }
 2324|   330k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 2.13k, False: 328k]
  |  Branch (2324:33): [True: 462, False: 328k]
  ------------------
 2325|   330k|}
_ZN3scn2v44impl11char_to_intEc:
 3228|  5.23M|{
 3229|  5.23M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3230|  5.23M|}
_ZN3scn2v44impl11char_to_intEw:
 3232|   556k|{
 3233|   556k|#if WCHAR_MIN < 0
 3234|   556k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3234:9): [True: 530k, False: 25.9k]
  |  Branch (3234:20): [True: 323k, False: 207k]
  ------------------
 3235|       |#else
 3236|       |    if (ch <= 255) {
 3237|       |#endif
 3238|   323k|        return char_to_int(static_cast<char>(ch));
 3239|   323k|    }
 3240|   233k|    return 255;
 3241|   556k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|   575k|{
 6035|   575k|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 575k]
  ------------------
 6036|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 0, False: 0]
  ------------------
 6037|      0|            return detail::unexpected_scan_error(
 6038|      0|                scan_error::length_too_short,
 6039|      0|                "Scanned value too narrow, width did not exceed what "
 6040|      0|                "was specified in the format string");
 6041|      0|        }
 6042|      0|    }
 6043|   575k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 0, False: 575k]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|      0|                   specs.precision);
 6047|      0|    }
 6048|   575k|    return {};
 6049|   575k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.44M|    {
  304|  1.44M|        ranges::advance(x, n);
  305|  1.44M|        return x;
  306|  1.44M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.44M|    {
  268|  1.44M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.44M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.44M|    {
  151|  1.44M|        i += n;
  152|  1.44M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.22M|    {
  108|  2.22M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.22M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.22M|    {
   87|  2.22M|        return s - i;
   88|  2.22M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  92.7k|    {
  304|  92.7k|        ranges::advance(x, n);
  305|  92.7k|        return x;
  306|  92.7k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  92.7k|    {
  268|  92.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  92.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  92.7k|    {
  151|  92.7k|        i += n;
  152|  92.7k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  34.7M|    {
  108|  34.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.7M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  34.7M|    {
   87|  34.7M|        return s - i;
   88|  34.7M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|   982k|    {
 2982|   982k|        return m_current;
 2983|   982k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|   261k|    {
 2982|   261k|        return m_current;
 2983|   261k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   432k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   432k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   432k|        auto beg = r.begin();
  991|   432k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 432k, False: 0]
  ------------------
  992|   432k|            return false;
  993|   432k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   432k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.35M|    {
  763|  2.35M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.35M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   342k|{
 1956|   342k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   342k|    else {
 1967|   342k|        auto it = range.begin();
 1968|   342k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 306k, False: 36.4k]
  ------------------
 1969|   306k|            return ranges::next(it, count);
 1970|   306k|        }
 1971|       |
 1972|  96.3k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 71.6k, False: 24.6k]
  ------------------
 1973|  71.6k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.7k, False: 59.9k]
  ------------------
 1974|  11.7k|                return unexpected(eof_error::eof);
 1975|  11.7k|            }
 1976|  71.6k|        }
 1977|       |
 1978|  24.6k|        return it;
 1979|  36.4k|    }
 1980|   342k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   342k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   342k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   342k|        else {
 1107|   342k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 342k, False: 0]
  ------------------
 1108|   342k|                return static_cast<size_t>(
 1109|   342k|                    r.begin().parent()->chars_available() -
 1110|   342k|                    r.begin().position());
 1111|   342k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   342k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   342k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   315k|        : m_fptr([](storage fn,
  743|   315k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   315k|              cvref<T> obj = *get<T>(fn);
  745|   315k|              if constexpr (std::is_void_v<R>) {
  746|   315k|                  obj(static_cast<decltype(args)>(args)...);
  747|   315k|              }
  748|   315k|              else {
  749|   315k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   315k|              }
  751|   315k|          }),
  752|   315k|          m_storage(std::addressof(f))
  753|   315k|    {
  754|   315k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.17M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   315k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   315k|        {
  662|   315k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.09M|    {
  763|  2.09M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.09M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   666k|        : m_fptr([](storage fn,
  743|   666k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   666k|              cvref<T> obj = *get<T>(fn);
  745|   666k|              if constexpr (std::is_void_v<R>) {
  746|   666k|                  obj(static_cast<decltype(args)>(args)...);
  747|   666k|              }
  748|   666k|              else {
  749|   666k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   666k|              }
  751|   666k|          }),
  752|   666k|          m_storage(std::addressof(f))
  753|   666k|    {
  754|   666k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.04M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   666k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   666k|        {
  662|   666k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   336k|    {
 6063|   336k|        const bool need_skipped_width =
 6064|   336k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 336k]
  |  Branch (6064:33): [True: 0, False: 336k]
  ------------------
 6065|   336k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   336k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 336k]
  ------------------
 6069|   336k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 336k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   336k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 336k, False: 0]
  |  Branch (6073:56): [True: 336k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   336k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 336k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   662k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.90k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.90k|    }                                                  \
  |  |  |  | 3939|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   662k|                            make_eof_scan_error));
 6084|       |
 6085|   662k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 326k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   326k|            return result_type{it, 0};
 6093|   662k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   336k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   315k|{
 2075|   315k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   315k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   315k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   315k|    else {
 2060|   315k|        auto first = range.begin();
 2061|  1.18M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.17M, False: 9.20k]
  ------------------
 2062|  1.17M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 306k, False: 870k]
  ------------------
 2063|   306k|                return first;
 2064|   306k|            }
 2065|  1.17M|        }
 2066|  9.20k|        return first;
 2067|   315k|    }
 2068|   315k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   323k|    {
  108|   323k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   323k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   323k|    {
   94|   323k|        iter_difference_t<I> counter{0};
   95|  4.88M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 4.56M, False: 323k]
  ------------------
   96|  4.56M|            ++i;
   97|  4.56M|            ++counter;
   98|  4.56M|        }
   99|   323k|        return counter;
  100|   323k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   136k|    return [code, msg](parse_error err) {
  869|   136k|        assert(err != parse_error::good);
  870|   136k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   136k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   123k|    {
 1879|   123k|        auto stdloc = loc.get<std::locale>();
 1880|   123k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   123k|        grouping = numpunct.grouping();
 1882|   123k|        thousands_sep =
 1883|   123k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 123k]
  ------------------
 1884|   123k|        decimal_point = numpunct.decimal_point();
 1885|   123k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   123k|{
 1816|   123k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 123k, False: 0]
  ------------------
 1817|   123k|        return std::use_facet<Facet>(stdloc);
 1818|   123k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   123k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   529k|{
 1945|   529k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 529k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   529k|    return ranges::next(range.begin());
 1950|   529k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.05M|{
  951|  1.05M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.6k, False: 1.04M]
  |  |  ------------------
  ------------------
  952|  12.6k|        return eof_error::eof;
  953|  12.6k|    }
  954|  1.04M|    return eof_error::good;
  955|  1.05M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.84M|{
  945|  1.84M|    return is_range_eof(r.begin(), r.end());
  946|  1.84M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.84M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.84M|    {
  938|  1.84M|        return begin == end;
  939|  1.84M|    }
  940|  1.84M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   529k|    {
  296|   529k|        ++x;
  297|   529k|        return x;
  298|   529k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  52.6k|    {
 3579|  52.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  52.6k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  52.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 7.74k, False: 44.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  7.74k|            else {
 3590|  7.74k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 7.74k]
  ------------------
 3591|  7.74k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  7.74k|            }
 3597|  7.74k|        }
 3598|       |
 3599|  52.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.23k, False: 47.4k]
  ------------------
 3600|  5.23k|            value = T{0};
 3601|  5.23k|            return std::next(prefix_result.iterator);
 3602|  5.23k|        }
 3603|       |
 3604|  47.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  47.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.9k, False: 10.5k]
  |  |  ------------------
  ------------------
 3605|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.19k, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.19k|    }                                                  \
  |  |  |  | 3939|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  32.7k|                    parse_integer_digits_without_thsep(
 3607|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  32.7k|                        prefix_result.parsed_base));
 3609|       |
 3610|  32.7k|            auto buf = make_contiguous_buffer(
 3611|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.70k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.70k|    }                                                  \
  |  |  |  | 3939|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  31.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  31.0k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  31.0k|            return ranges::next(
 3617|  31.0k|                prefix_result.iterator,
 3618|  31.0k|                ranges::distance(buf.view().begin(), result_it));
 3619|  32.7k|        }
 3620|       |
 3621|  10.5k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  10.5k|            localized_number_formatting_options<CharT>{loc};
 3626|  10.5k|#endif
 3627|       |
 3628|  10.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 598, False: 9.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    598|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    598|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    598|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    598|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    598|    }                                                  \
  |  |  |  | 3939|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  9.95k|                parse_integer_digits_with_thsep(
 3630|  9.95k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  9.95k|                    prefix_result.parsed_base, locale_options));
 3632|  9.95k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  9.95k|            parse_digits_result;
 3634|       |
 3635|  9.95k|        auto nothsep_source_view =
 3636|  9.95k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  9.95k|        SCN_TRY(
  ------------------
  |  | 3940|  9.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 442, False: 9.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    442|    }                                                  \
  |  |  |  | 3939|  9.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  9.51k|            nothsep_source_it,
 3639|  9.51k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  9.51k|                                prefix_result.parsed_base));
 3641|       |
 3642|  9.51k|        return ranges::next(
 3643|  9.51k|            prefix_result.iterator,
 3644|  9.51k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  9.51k|                ranges::ssize(thsep_indices));
 3646|  9.95k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3365|   419k|{
 3366|   419k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 419k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   419k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   419k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   419k|        parse_integer_base_prefix(
 3371|   419k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   419k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 42.2k, False: 377k]
  ------------------
 3374|  42.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 502, False: 41.7k]
  ------------------
 3375|  42.2k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 30.8k, False: 10.8k]
  ------------------
 3376|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3377|  31.3k|        }
 3378|  10.8k|        else {
 3379|  10.8k|            parsed_zero = false;
 3380|  10.8k|        }
 3381|  42.2k|    }
 3382|   377k|    else {
 3383|   377k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 2.15k, False: 375k]
  ------------------
 3384|   377k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 34.8k, False: 340k]
  ------------------
 3385|  37.0k|            digits_begin_it = base_prefix_begin_it;
 3386|  37.0k|        }
 3387|   377k|    }
 3388|       |
 3389|   419k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 364k, False: 55.1k]
  ------------------
 3390|   364k|        sign = sign_type::plus_sign;
 3391|   364k|    }
 3392|   419k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   419k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   419k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|   419k|{
 3247|   419k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   419k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 364k, False: 55.1k]
  ------------------
 3249|   364k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 364k, False: 0]
  ------------------
 3250|   364k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   364k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   364k|    }
 3254|       |
 3255|  55.1k|    auto& it = *r;
 3256|  55.1k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 42.7k, False: 12.4k]
  ------------------
 3257|  42.7k|        return std::pair{it, sign_type::minus_sign};
 3258|  42.7k|    }
 3259|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3260|  55.1k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   419k|{
 2372|   419k|    auto it = read_code_unit(range);
 2373|   419k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   827k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 827k, False: 364k]
  ------------------
 2378|   827k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 55.1k, False: 772k]
  ------------------
 2379|  55.1k|            return *it;
 2380|  55.1k|        }
 2381|   827k|    }
 2382|       |
 2383|   364k|    return unexpected(parse_error::error);
 2384|   419k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3332|   419k|{
 3333|   419k|    switch (base) {
 3334|  22.1k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 22.1k, False: 397k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  22.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  22.1k|                    false};
 3338|       |
 3339|  39.6k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 39.6k, False: 380k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  39.6k|            bool zero_parsed = false;
 3342|  39.6k|            auto it = apply_opt(
 3343|  39.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  39.6k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  66.3k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 66.3k, False: 353k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  66.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  66.3k|                    false};
 3351|       |
 3352|  71.8k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 71.8k, False: 347k]
  ------------------
 3353|       |            // detect base
 3354|  71.8k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|   219k|        default:
  ------------------
  |  Branch (3356:9): [True: 219k, False: 200k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|   219k|            return {range.begin(), base, false};
 3359|   419k|    }
 3360|   419k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|   128k|{
 2391|   128k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 110k, False: 17.6k]
  ------------------
 2392|   110k|        return range.begin();
 2393|   110k|    }
 2394|  17.6k|    return *result;
 2395|   128k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3283|  93.4k|{
 3284|  93.4k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  93.4k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   342k|{
 2331|   342k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   342k|    else {
 2344|   342k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   342k|            if (ch < 'A' || ch > 'Z') {
 2346|   342k|                return ch;
 2347|   342k|            }
 2348|   342k|            return static_cast<char_type>(ch +
 2349|   342k|                                          static_cast<char_type>('a' - 'A'));
 2350|   342k|        };
 2351|       |
 2352|   342k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.7k, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.7k|    }                                                  \
  |  |  |  | 3939|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|   330k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|   330k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|   330k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 328k, False: 2.59k]
  |  |  ------------------
  ------------------
 2357|   330k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|   330k|                    return ascii_tolower(a) ==
 2359|   330k|                           static_cast<detail::char_t<Range>>(b);
 2360|   330k|                }))) {
 2361|   328k|            return unexpected(parse_error::error);
 2362|   328k|        }
 2363|       |
 2364|  2.59k|        return it;
 2365|   330k|    }
 2366|   342k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|   467k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   467k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 453k, False: 13.7k]
  |  Branch (2345:29): [True: 7.59k, False: 6.18k]
  ------------------
 2346|   461k|                return ch;
 2347|   461k|            }
 2348|  6.18k|            return static_cast<char_type>(ch +
 2349|  6.18k|                                          static_cast<char_type>('a' - 'A'));
 2350|   467k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3297|   110k|{
 3298|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 952, False: 109k]
  ------------------
 3299|    952|        return *r;
 3300|    952|    }
 3301|       |
 3302|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 42.2k, False: 67.5k]
  ------------------
 3303|  42.2k|        zero_parsed = true;
 3304|  42.2k|        return *r;
 3305|  42.2k|    }
 3306|       |
 3307|  67.5k|    return unexpected(parse_error::error);
 3308|   109k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   109k|{
 2246|   109k|    auto it = read_code_unit(range);
 2247|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 109k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   109k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 67.1k, False: 42.2k]
  |  |  ------------------
  ------------------
 2252|   109k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  67.1k|        return unexpected(parse_error::error);
 2254|  67.1k|    }
 2255|       |
 2256|  42.2k|    return *it;
 2257|   109k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3290|   138k|{
 3291|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3292|   138k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3313|  71.8k|{
 3314|  71.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 532, False: 71.3k]
  ------------------
 3315|    532|        return {*r, 16, false};
 3316|    532|    }
 3317|  71.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 318, False: 71.0k]
  ------------------
 3318|    318|        return {*r, 2, false};
 3319|    318|    }
 3320|  71.0k|    {
 3321|  71.0k|        bool zero_parsed{false};
 3322|  71.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 26.4k, False: 44.6k]
  ------------------
 3323|  26.4k|            return {*r, 8, zero_parsed};
 3324|  26.4k|        }
 3325|  71.0k|    }
 3326|  44.6k|    return {range.begin(), 10, false};
 3327|  71.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3399|   315k|{
 3400|   315k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|   315k|    else {
 3411|   315k|        return read_while1_code_unit(range,
 3412|   315k|                                     [&](char_type ch) noexcept {
 3413|   315k|                                         return char_to_int(ch) < base;
 3414|   315k|                                     })
 3415|   315k|            .transform_error(map_parse_error_to_scan_error(
 3416|   315k|                scan_error::invalid_scanned_value,
 3417|   315k|                "Failed to parse integer: No digits found"));
 3418|   315k|    }
 3419|   315k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   315k|{
 2095|   315k|    auto it = read_while_code_unit(range, pred);
 2096|   315k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 29.1k, False: 286k]
  ------------------
 2097|  29.1k|        return unexpected(parse_error::error);
 2098|  29.1k|    }
 2099|   286k|    return it;
 2100|   315k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   315k|        : m_fptr([](storage fn,
  743|   315k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   315k|              cvref<T> obj = *get<T>(fn);
  745|   315k|              if constexpr (std::is_void_v<R>) {
  746|   315k|                  obj(static_cast<decltype(args)>(args)...);
  747|   315k|              }
  748|   315k|              else {
  749|   315k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   315k|              }
  751|   315k|          }),
  752|   315k|          m_storage(std::addressof(f))
  753|   315k|    {
  754|   315k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.17M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3412|  1.17M|                                     [&](char_type ch) noexcept {
 3413|  1.17M|                                         return char_to_int(ch) < base;
 3414|  1.17M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   315k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   315k|        {
  662|   315k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3429|  61.8k|{
 3430|  61.8k|    std::basic_string<CharT> output;
 3431|  61.8k|    std::string thsep_indices;
 3432|  61.8k|    auto it = range.begin();
 3433|  61.8k|    bool digit_matched = false;
 3434|   361k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 359k, False: 2.31k]
  ------------------
 3435|   359k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 37.6k, False: 321k]
  ------------------
 3436|  37.6k|            thsep_indices.push_back(
 3437|  37.6k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  37.6k|        }
 3439|   321k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 59.5k, False: 262k]
  ------------------
 3440|  59.5k|            break;
 3441|  59.5k|        }
 3442|   262k|        else {
 3443|   262k|            output.push_back(*it);
 3444|   262k|            digit_matched = true;
 3445|   262k|        }
 3446|   359k|    }
 3447|  61.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.31k, False: 58.5k]
  |  |  ------------------
  ------------------
 3448|  3.31k|        return detail::unexpected_scan_error(
 3449|  3.31k|            scan_error::invalid_scanned_value,
 3450|  3.31k|            "Failed to parse integer: No digits found");
 3451|  3.31k|    }
 3452|  58.5k|    return std::tuple{it, output, thsep_indices};
 3453|  61.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   286k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   286k|    else {
 1788|   286k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   286k|    }
 1790|   286k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   286k|    {
 1636|   286k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   286k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   286k|    {
 1720|   286k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   286k|                           ranges::common_range<Range>) {
 1737|   286k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   286k|            auto end_seg = range.end().contiguous_segment();
 1739|   286k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 180k, False: 105k]
  |  |  ------------------
  ------------------
 1740|   286k|                             detail::to_address(end_seg.end()))) {
 1741|   180k|                auto& str = m_storage.emplace();
 1742|   180k|                str.reserve(range.end().position() - range.begin().position());
 1743|   180k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   180k|                m_view = string_view_type{str};
 1745|   180k|                return;
 1746|   180k|            }
 1747|       |
 1748|   105k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   105k|                                                            end_seg.data());
 1750|   105k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   286k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   566k|    {
 1681|   566k|        return m_view;
 1682|   566k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   286k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|   278k|    {
 6105|   278k|        const bool need_skipped_width =
 6106|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 278k]
  |  Branch (6106:33): [True: 0, False: 278k]
  ------------------
 6107|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   278k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 278k]
  ------------------
 6110|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 278k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   278k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 278k, False: 0]
  ------------------
 6119|   278k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 278k]
  ------------------
 6120|   278k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   278k|        return result_type{rng.begin(), 0};
 6144|   278k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   531k|{
 1945|   531k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 531k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   531k|    return ranges::next(range.begin());
 1950|   531k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.37M|{
  951|  1.37M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.6k, False: 1.36M]
  |  |  ------------------
  ------------------
  952|  12.6k|        return eof_error::eof;
  953|  12.6k|    }
  954|  1.36M|    return eof_error::good;
  955|  1.37M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.37M|{
  945|  1.37M|    return is_range_eof(r.begin(), r.end());
  946|  1.37M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.37M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.37M|    {
  938|  1.37M|        return begin == end;
  939|  1.37M|    }
  940|  1.37M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   531k|    {
  296|   531k|        ++x;
  297|   531k|        return x;
  298|   531k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  52.8k|    {
 3579|  52.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  52.8k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  52.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 7.73k, False: 45.0k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  7.73k|            else {
 3590|  7.73k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 7.73k]
  ------------------
 3591|  7.73k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  7.73k|            }
 3597|  7.73k|        }
 3598|       |
 3599|  52.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.23k, False: 47.5k]
  ------------------
 3600|  5.23k|            value = T{0};
 3601|  5.23k|            return std::next(prefix_result.iterator);
 3602|  5.23k|        }
 3603|       |
 3604|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 36.9k, False: 10.5k]
  |  |  ------------------
  ------------------
 3605|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 36.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  36.8k|                    parse_integer_digits_without_thsep(
 3607|  36.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  36.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  36.8k|            auto buf = make_contiguous_buffer(
 3611|  36.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  36.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  36.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.88k, False: 30.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.88k|    }                                                  \
  |  |  |  | 3939|  36.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.9k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.9k|            return ranges::next(
 3617|  30.9k|                prefix_result.iterator,
 3618|  30.9k|                ranges::distance(buf.view().begin(), result_it));
 3619|  36.8k|        }
 3620|       |
 3621|  10.5k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  10.5k|            localized_number_formatting_options<CharT>{loc};
 3626|  10.5k|#endif
 3627|       |
 3628|  10.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 634, False: 9.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    634|    }                                                  \
  |  |  |  | 3939|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  9.94k|                parse_integer_digits_with_thsep(
 3630|  9.94k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  9.94k|                    prefix_result.parsed_base, locale_options));
 3632|  9.94k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  9.94k|            parse_digits_result;
 3634|       |
 3635|  9.94k|        auto nothsep_source_view =
 3636|  9.94k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  9.94k|        SCN_TRY(
  ------------------
  |  | 3940|  9.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  9.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  9.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  9.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 438, False: 9.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    438|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    438|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    438|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    438|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    438|    }                                                  \
  |  |  |  | 3939|  9.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  9.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  9.50k|            nothsep_source_it,
 3639|  9.50k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  9.50k|                                prefix_result.parsed_base));
 3641|       |
 3642|  9.50k|        return ranges::next(
 3643|  9.50k|            prefix_result.iterator,
 3644|  9.50k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  9.50k|                ranges::ssize(thsep_indices));
 3646|  9.94k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|   421k|{
 3366|   421k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   421k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   421k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   421k|        parse_integer_base_prefix(
 3371|   421k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   421k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 42.2k, False: 379k]
  ------------------
 3374|  42.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 502, False: 41.7k]
  ------------------
 3375|  42.2k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 30.8k, False: 10.8k]
  ------------------
 3376|  31.3k|            digits_begin_it = base_prefix_begin_it;
 3377|  31.3k|        }
 3378|  10.8k|        else {
 3379|  10.8k|            parsed_zero = false;
 3380|  10.8k|        }
 3381|  42.2k|    }
 3382|   379k|    else {
 3383|   379k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 2.15k, False: 377k]
  ------------------
 3384|   379k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 35.6k, False: 341k]
  ------------------
 3385|  37.8k|            digits_begin_it = base_prefix_begin_it;
 3386|  37.8k|        }
 3387|   379k|    }
 3388|       |
 3389|   421k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 366k, False: 55.1k]
  ------------------
 3390|   366k|        sign = sign_type::plus_sign;
 3391|   366k|    }
 3392|   421k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   421k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   421k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|   421k|{
 3247|   421k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   421k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 366k, False: 55.1k]
  ------------------
 3249|   366k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 366k, False: 0]
  ------------------
 3250|   366k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   366k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   366k|    }
 3254|       |
 3255|  55.1k|    auto& it = *r;
 3256|  55.1k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 42.7k, False: 12.4k]
  ------------------
 3257|  42.7k|        return std::pair{it, sign_type::minus_sign};
 3258|  42.7k|    }
 3259|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3260|  55.1k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   421k|{
 2372|   421k|    auto it = read_code_unit(range);
 2373|   421k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 421k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   830k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 830k, False: 366k]
  ------------------
 2378|   830k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 55.1k, False: 775k]
  ------------------
 2379|  55.1k|            return *it;
 2380|  55.1k|        }
 2381|   830k|    }
 2382|       |
 2383|   366k|    return unexpected(parse_error::error);
 2384|   421k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|   421k|{
 3333|   421k|    switch (base) {
 3334|  22.2k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 22.2k, False: 399k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  22.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  22.2k|                    false};
 3338|       |
 3339|  39.8k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 39.8k, False: 381k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  39.8k|            bool zero_parsed = false;
 3342|  39.8k|            auto it = apply_opt(
 3343|  39.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  39.8k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  66.3k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 66.3k, False: 355k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  66.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  66.3k|                    false};
 3351|       |
 3352|  71.9k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 71.9k, False: 349k]
  ------------------
 3353|       |            // detect base
 3354|  71.9k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|   221k|        default:
  ------------------
  |  Branch (3356:9): [True: 221k, False: 200k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|   221k|            return {range.begin(), base, false};
 3359|   421k|    }
 3360|   421k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|   128k|{
 2391|   128k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 110k, False: 17.6k]
  ------------------
 2392|   110k|        return range.begin();
 2393|   110k|    }
 2394|  17.6k|    return *result;
 2395|   128k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|  93.6k|{
 3284|  93.6k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  93.6k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   342k|{
 2331|   342k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|   342k|                  std::is_same_v<char_type, char>) {
 2335|   342k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 11.9k, False: 330k]
  ------------------
 2336|  11.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  11.9k|        }
 2338|   330k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 328k, False: 2.59k]
  ------------------
 2339|   328k|            return unexpected(parse_error::error);
 2340|   328k|        }
 2341|  2.59k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|   342k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|   110k|{
 3298|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 952, False: 109k]
  ------------------
 3299|    952|        return *r;
 3300|    952|    }
 3301|       |
 3302|   109k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 42.2k, False: 67.7k]
  ------------------
 3303|  42.2k|        zero_parsed = true;
 3304|  42.2k|        return *r;
 3305|  42.2k|    }
 3306|       |
 3307|  67.7k|    return unexpected(parse_error::error);
 3308|   109k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   109k|{
 2246|   109k|    auto it = read_code_unit(range);
 2247|   109k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 360, False: 109k]
  |  |  ------------------
  ------------------
 2248|    360|        return unexpected(make_eof_parse_error(it.error()));
 2249|    360|    }
 2250|       |
 2251|   109k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 67.3k, False: 42.2k]
  |  |  ------------------
  ------------------
 2252|   109k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  67.3k|        return unexpected(parse_error::error);
 2254|  67.3k|    }
 2255|       |
 2256|  42.2k|    return *it;
 2257|   109k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|   138k|{
 3291|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3292|   138k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|  71.9k|{
 3314|  71.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 532, False: 71.4k]
  ------------------
 3315|    532|        return {*r, 16, false};
 3316|    532|    }
 3317|  71.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 318, False: 71.1k]
  ------------------
 3318|    318|        return {*r, 2, false};
 3319|    318|    }
 3320|  71.1k|    {
 3321|  71.1k|        bool zero_parsed{false};
 3322|  71.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 26.3k, False: 44.7k]
  ------------------
 3323|  26.3k|            return {*r, 8, zero_parsed};
 3324|  26.3k|        }
 3325|  71.1k|    }
 3326|  44.7k|    return {range.begin(), 10, false};
 3327|  71.1k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|   316k|{
 3400|   316k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|   316k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|   316k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 891, False: 315k]
  |  |  ------------------
  ------------------
 3404|    891|            return detail::unexpected_scan_error(
 3405|    891|                scan_error::invalid_scanned_value,
 3406|    891|                "Failed to parse integer: No digits found");
 3407|    891|        }
 3408|   315k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|   316k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|  61.9k|{
 3430|  61.9k|    std::basic_string<CharT> output;
 3431|  61.9k|    std::string thsep_indices;
 3432|  61.9k|    auto it = range.begin();
 3433|  61.9k|    bool digit_matched = false;
 3434|   361k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 359k, False: 2.27k]
  ------------------
 3435|   359k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 37.5k, False: 321k]
  ------------------
 3436|  37.5k|            thsep_indices.push_back(
 3437|  37.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  37.5k|        }
 3439|   321k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 59.7k, False: 261k]
  ------------------
 3440|  59.7k|            break;
 3441|  59.7k|        }
 3442|   261k|        else {
 3443|   261k|            output.push_back(*it);
 3444|   261k|            digit_matched = true;
 3445|   261k|        }
 3446|   359k|    }
 3447|  61.9k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.55k, False: 58.4k]
  |  |  ------------------
  ------------------
 3448|  3.55k|        return detail::unexpected_scan_error(
 3449|  3.55k|            scan_error::invalid_scanned_value,
 3450|  3.55k|            "Failed to parse integer: No digits found");
 3451|  3.55k|    }
 3452|  58.4k|    return std::tuple{it, output, thsep_indices};
 3453|  61.9k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   315k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   315k|                  ranges::sized_range<Range>) {
 1785|   315k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   315k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   315k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   315k|    {
 1589|   315k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.45M|    {
 1602|  1.45M|        return sv;
 1603|  1.45M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   431k|{
 3055|   431k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 431k, False: 0]
  ------------------
 3056|   431k|        auto it = read_while_classic_space(range);
 3057|   431k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   431k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.51k, False: 421k]
  |  |  ------------------
  ------------------
 3059|  9.51k|            return unexpected(e);
 3060|  9.51k|        }
 3061|       |
 3062|   421k|        return it;
 3063|   431k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   431k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   431k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   431k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   431k|        auto buf = make_contiguous_buffer(range);
 2220|   431k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   431k|        return ranges::next(range.begin(),
 2222|   431k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   431k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   431k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   431k|                  ranges::sized_range<Range>) {
 1785|   431k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   431k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   431k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   431k|    {
 1589|   431k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   667k|    {
  304|   667k|        ranges::advance(x, n);
  305|   667k|        return x;
  306|   667k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.07M|    {
  268|  1.07M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.07M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.07M|    {
  181|  2.67M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.60M, False: 1.07M]
  ------------------
  182|  1.60M|            ++i;
  183|  1.60M|        }
  184|  1.07M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  54.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  54.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  54.2k|            auto rd = make_reader<T, char_type>();
 6225|  54.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  54.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  54.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 54.2k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  54.2k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  54.2k|                return impl(rd, range, value);
 6230|  54.2k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  54.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|   672k|    {
 3145|   672k|        reader_error_handler eh{};
 3146|   672k|        get_derived().check_specs_impl(specs, eh);
 3147|   672k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|   672k|        return {};
 3152|   672k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3156|   672k|    {
 3157|   672k|        return static_cast<Derived&>(*this);
 3158|   672k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|   672k|    {
 3525|   672k|        detail::check_int_type_specs(specs, eh);
 3526|   672k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  54.2k|    {
 6150|  54.2k|        const bool need_skipped_width =
 6151|  54.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 54.2k]
  |  Branch (6151:33): [True: 0, False: 54.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  54.2k|        auto it = rng.begin();
 6155|  54.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  54.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 54.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  54.2k|        else {
 6164|  54.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.54k, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.54k|    }                                                  \
  |  |  |  | 3939|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  52.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  52.6k|        }
 6167|  52.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  52.6k|        std::ptrdiff_t value_width = 0;
 6171|  52.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 52.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  52.6k|        else {
 6187|  52.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.93k, False: 45.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.93k|    }                                                  \
  |  | 3939|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  45.7k|                                             specs, value, loc));
 6189|       |
 6190|  45.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 45.7k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  45.7k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  45.7k|        std::ptrdiff_t postfix_width = 0;
 6199|  45.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 44.7k, False: 1.06k]
  ------------------
 6200|  44.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  44.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  44.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  44.7k|                                 value_width));
 6204|  44.7k|            std::tie(it, postfix_width) = postfix_result;
 6205|  44.7k|        }
 6206|       |
 6207|  45.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  45.7k|            specs, prefix_width, value_width, postfix_width));
 6209|  45.7k|        return it;
 6210|  45.7k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3139|  1.42M|    {
 3140|  1.42M|        return true;
 3141|  1.42M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  64.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  64.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  64.2k|            auto rd = make_reader<T, char_type>();
 6225|  64.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  64.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 64.2k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  64.2k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  64.2k|                return impl(rd, range, value);
 6230|  64.2k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  64.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  64.2k|    {
 6150|  64.2k|        const bool need_skipped_width =
 6151|  64.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 64.2k]
  |  Branch (6151:33): [True: 0, False: 64.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  64.2k|        auto it = rng.begin();
 6155|  64.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  64.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 64.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  64.2k|        else {
 6164|  64.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.02k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.02k|    }                                                  \
  |  |  |  | 3939|  64.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6166|  62.2k|        }
 6167|  62.2k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  62.2k|        std::ptrdiff_t value_width = 0;
 6171|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 62.2k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  62.2k|        else {
 6187|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.44k, False: 55.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.44k|    }                                                  \
  |  | 3939|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  55.8k|                                             specs, value, loc));
 6189|       |
 6190|  55.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 55.8k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  55.8k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  55.8k|        std::ptrdiff_t postfix_width = 0;
 6199|  55.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 54.3k, False: 1.41k]
  ------------------
 6200|  54.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  54.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  54.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  54.3k|                                 value_width));
 6204|  54.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  54.3k|        }
 6206|       |
 6207|  55.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  55.8k|            specs, prefix_width, value_width, postfix_width));
 6209|  55.8k|        return it;
 6210|  55.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  62.2k|    {
 3579|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  62.2k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.09k, False: 54.1k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.09k|            else {
 3590|  8.09k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.09k]
  ------------------
 3591|  8.09k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.09k|            }
 3597|  8.09k|        }
 3598|       |
 3599|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.52k, False: 56.7k]
  ------------------
 3600|  5.52k|            value = T{0};
 3601|  5.52k|            return std::next(prefix_result.iterator);
 3602|  5.52k|        }
 3603|       |
 3604|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.5k, False: 12.1k]
  |  |  ------------------
  ------------------
 3605|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.70k, False: 39.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.70k|    }                                                  \
  |  |  |  | 3939|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  39.8k|                    parse_integer_digits_without_thsep(
 3607|  39.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  39.8k|                        prefix_result.parsed_base));
 3609|       |
 3610|  39.8k|            auto buf = make_contiguous_buffer(
 3611|  39.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  39.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  39.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 802, False: 39.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    802|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    802|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    802|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    802|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    802|    }                                                  \
  |  |  |  | 3939|  39.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  39.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  39.0k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  39.0k|            return ranges::next(
 3617|  39.0k|                prefix_result.iterator,
 3618|  39.0k|                ranges::distance(buf.view().begin(), result_it));
 3619|  39.8k|        }
 3620|       |
 3621|  12.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.1k|#endif
 3627|       |
 3628|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 716, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    716|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.4k|                parse_integer_digits_with_thsep(
 3630|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.4k|                    prefix_result.parsed_base, locale_options));
 3632|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.4k|            parse_digits_result;
 3634|       |
 3635|  11.4k|        auto nothsep_source_view =
 3636|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.4k|        SCN_TRY(
  ------------------
  |  | 3940|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.2k|            nothsep_source_it,
 3639|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.2k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.2k|        return ranges::next(
 3643|  11.2k|            prefix_result.iterator,
 3644|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.2k|                ranges::ssize(thsep_indices));
 3646|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  62.3k|    {
 3579|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  62.3k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.09k, False: 54.2k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.09k|            else {
 3590|  8.09k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.09k]
  ------------------
 3591|  8.09k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.09k|            }
 3597|  8.09k|        }
 3598|       |
 3599|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.52k, False: 56.8k]
  ------------------
 3600|  5.52k|            value = T{0};
 3601|  5.52k|            return std::next(prefix_result.iterator);
 3602|  5.52k|        }
 3603|       |
 3604|  56.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  56.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 44.6k, False: 12.1k]
  |  |  ------------------
  ------------------
 3605|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 192, False: 44.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    192|    }                                                  \
  |  |  |  | 3939|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  44.4k|                    parse_integer_digits_without_thsep(
 3607|  44.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  44.4k|                        prefix_result.parsed_base));
 3609|       |
 3610|  44.4k|            auto buf = make_contiguous_buffer(
 3611|  44.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  44.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  44.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.46k, False: 38.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.46k|    }                                                  \
  |  |  |  | 3939|  44.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  38.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  38.9k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  38.9k|            return ranges::next(
 3617|  38.9k|                prefix_result.iterator,
 3618|  38.9k|                ranges::distance(buf.view().begin(), result_it));
 3619|  44.4k|        }
 3620|       |
 3621|  12.1k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.1k|#endif
 3627|       |
 3628|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 760, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    760|    }                                                  \
  |  |  |  | 3939|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.4k|                parse_integer_digits_with_thsep(
 3630|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.4k|                    prefix_result.parsed_base, locale_options));
 3632|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.4k|            parse_digits_result;
 3634|       |
 3635|  11.4k|        auto nothsep_source_view =
 3636|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.4k|        SCN_TRY(
  ------------------
  |  | 3940|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 220, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    220|    }                                                  \
  |  |  |  | 3939|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.2k|            nothsep_source_it,
 3639|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.2k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.2k|        return ranges::next(
 3643|  11.2k|            prefix_result.iterator,
 3644|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.2k|                ranges::ssize(thsep_indices));
 3646|  11.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  65.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  65.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  65.4k|            auto rd = make_reader<T, char_type>();
 6225|  65.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  65.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 65.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  65.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 65.4k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  65.4k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  65.4k|                return impl(rd, range, value);
 6230|  65.4k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  65.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  65.4k|    {
 6150|  65.4k|        const bool need_skipped_width =
 6151|  65.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 65.4k]
  |  Branch (6151:33): [True: 0, False: 65.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  65.4k|        auto it = rng.begin();
 6155|  65.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  65.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 65.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  65.4k|        else {
 6164|  65.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  65.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  65.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  65.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.23k, False: 63.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.23k|    }                                                  \
  |  |  |  | 3939|  65.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  63.2k|            std::tie(it, prefix_width) = prefix_result;
 6166|  63.2k|        }
 6167|  63.2k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  63.2k|        std::ptrdiff_t value_width = 0;
 6171|  63.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 63.2k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  63.2k|        else {
 6187|  63.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.23k, False: 56.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.23k|    }                                                  \
  |  | 3939|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  56.9k|                                             specs, value, loc));
 6189|       |
 6190|  56.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 56.9k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  56.9k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  56.9k|        std::ptrdiff_t postfix_width = 0;
 6199|  56.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 55.4k, False: 1.58k]
  ------------------
 6200|  55.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  55.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  55.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  55.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  55.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  55.4k|                                 value_width));
 6204|  55.4k|            std::tie(it, postfix_width) = postfix_result;
 6205|  55.4k|        }
 6206|       |
 6207|  56.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  56.9k|            specs, prefix_width, value_width, postfix_width));
 6209|  56.9k|        return it;
 6210|  56.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  63.2k|    {
 3579|  63.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  63.2k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  63.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.29k, False: 54.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.29k|            else {
 3590|  8.29k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.29k]
  ------------------
 3591|  8.29k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.29k|            }
 3597|  8.29k|        }
 3598|       |
 3599|  63.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.55k, False: 57.6k]
  ------------------
 3600|  5.55k|            value = T{0};
 3601|  5.55k|            return std::next(prefix_result.iterator);
 3602|  5.55k|        }
 3603|       |
 3604|  57.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.3k, False: 12.3k]
  |  |  ------------------
  ------------------
 3605|  45.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.93k, False: 40.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.93k|    }                                                  \
  |  |  |  | 3939|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  40.3k|                    parse_integer_digits_without_thsep(
 3607|  40.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  40.3k|                        prefix_result.parsed_base));
 3609|       |
 3610|  40.3k|            auto buf = make_contiguous_buffer(
 3611|  40.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  40.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 412, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    412|    }                                                  \
  |  |  |  | 3939|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  39.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  39.9k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  39.9k|            return ranges::next(
 3617|  39.9k|                prefix_result.iterator,
 3618|  39.9k|                ranges::distance(buf.view().begin(), result_it));
 3619|  40.3k|        }
 3620|       |
 3621|  12.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.3k|#endif
 3627|       |
 3628|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 774, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    774|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    774|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    774|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    774|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    774|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.5k|                parse_integer_digits_with_thsep(
 3630|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.5k|                    prefix_result.parsed_base, locale_options));
 3632|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.5k|            parse_digits_result;
 3634|       |
 3635|  11.5k|        auto nothsep_source_view =
 3636|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 118, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    118|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.4k|            nothsep_source_it,
 3639|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.4k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.4k|        return ranges::next(
 3643|  11.4k|            prefix_result.iterator,
 3644|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.4k|                ranges::ssize(thsep_indices));
 3646|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  63.3k|    {
 3579|  63.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  63.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 63.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  63.3k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  63.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 8.28k, False: 55.0k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|  8.28k|            else {
 3590|  8.28k|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 8.28k]
  ------------------
 3591|  8.28k|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|  8.28k|            }
 3597|  8.28k|        }
 3598|       |
 3599|  63.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.55k, False: 57.7k]
  ------------------
 3600|  5.55k|            value = T{0};
 3601|  5.55k|            return std::next(prefix_result.iterator);
 3602|  5.55k|        }
 3603|       |
 3604|  57.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  57.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 45.3k, False: 12.3k]
  |  |  ------------------
  ------------------
 3605|  45.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 222, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    222|    }                                                  \
  |  |  |  | 3939|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  45.1k|                    parse_integer_digits_without_thsep(
 3607|  45.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  45.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  45.1k|            auto buf = make_contiguous_buffer(
 3611|  45.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  45.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.27k, False: 39.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.27k|    }                                                  \
  |  |  |  | 3939|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  39.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  39.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  39.8k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  39.8k|            return ranges::next(
 3617|  39.8k|                prefix_result.iterator,
 3618|  39.8k|                ranges::distance(buf.view().begin(), result_it));
 3619|  45.1k|        }
 3620|       |
 3621|  12.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.3k|#endif
 3627|       |
 3628|  12.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 820, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    820|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    820|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    820|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    820|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    820|    }                                                  \
  |  |  |  | 3939|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.5k|                parse_integer_digits_with_thsep(
 3630|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.5k|                    prefix_result.parsed_base, locale_options));
 3632|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.5k|            parse_digits_result;
 3634|       |
 3635|  11.5k|        auto nothsep_source_view =
 3636|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.5k|        SCN_TRY(
  ------------------
  |  | 3940|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 116, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    116|    }                                                  \
  |  |  |  | 3939|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.4k|            nothsep_source_it,
 3639|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.4k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.4k|        return ranges::next(
 3643|  11.4k|            prefix_result.iterator,
 3644|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.4k|                ranges::ssize(thsep_indices));
 3646|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  47.8k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  47.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  47.8k|            auto rd = make_reader<T, char_type>();
 6225|  47.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  47.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 47.8k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  47.8k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  47.8k|                return impl(rd, range, value);
 6230|  47.8k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  47.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  47.8k|    {
 6150|  47.8k|        const bool need_skipped_width =
 6151|  47.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 47.8k]
  |  Branch (6151:33): [True: 0, False: 47.8k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  47.8k|        auto it = rng.begin();
 6155|  47.8k|        std::ptrdiff_t prefix_width = 0;
 6156|  47.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 47.8k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  47.8k|        else {
 6164|  47.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|  47.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  46.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  46.6k|        }
 6167|  46.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  46.6k|        std::ptrdiff_t value_width = 0;
 6171|  46.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 46.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  46.6k|        else {
 6187|  46.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.31k, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.31k|    }                                                  \
  |  | 3939|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.3k|                                             specs, value, loc));
 6189|       |
 6190|  39.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.3k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.3k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.3k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.5k, False: 784]
  ------------------
 6200|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.5k|                                 value_width));
 6204|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.5k|        }
 6206|       |
 6207|  39.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.3k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.3k|        return it;
 6210|  39.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  46.6k|    {
 3579|  46.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  46.6k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  46.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 2.97k, False: 43.6k]
  ------------------
 3583|  2.97k|            if constexpr (!std::is_signed_v<T>) {
 3584|  2.97k|                return detail::unexpected_scan_error(
 3585|  2.97k|                    scan_error::invalid_scanned_value,
 3586|  2.97k|                    "Unexpected '-' sign when parsing an "
 3587|  2.97k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  2.97k|        }
 3598|       |
 3599|  46.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 4.82k, False: 41.8k]
  ------------------
 3600|  4.82k|            value = T{0};
 3601|  4.82k|            return std::next(prefix_result.iterator);
 3602|  4.82k|        }
 3603|       |
 3604|  41.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.5k, False: 11.3k]
  |  |  ------------------
  ------------------
 3605|  30.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.84k, False: 27.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.84k|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  27.6k|                    parse_integer_digits_without_thsep(
 3607|  27.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  27.6k|                        prefix_result.parsed_base));
 3609|       |
 3610|  27.6k|            auto buf = make_contiguous_buffer(
 3611|  27.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  27.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 876, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    876|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    876|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    876|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    876|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    876|    }                                                  \
  |  |  |  | 3939|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  26.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  26.7k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  26.7k|            return ranges::next(
 3617|  26.7k|                prefix_result.iterator,
 3618|  26.7k|                ranges::distance(buf.view().begin(), result_it));
 3619|  27.6k|        }
 3620|       |
 3621|  11.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  11.3k|#endif
 3627|       |
 3628|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 380, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    380|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  10.9k|                parse_integer_digits_with_thsep(
 3630|  10.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  10.9k|                    prefix_result.parsed_base, locale_options));
 3632|  10.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  10.9k|            parse_digits_result;
 3634|       |
 3635|  10.9k|        auto nothsep_source_view =
 3636|  10.9k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  10.9k|        SCN_TRY(
  ------------------
  |  | 3940|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 238, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    238|    }                                                  \
  |  |  |  | 3939|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  10.6k|            nothsep_source_it,
 3639|  10.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  10.6k|                                prefix_result.parsed_base));
 3641|       |
 3642|  10.6k|        return ranges::next(
 3643|  10.6k|            prefix_result.iterator,
 3644|  10.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  10.6k|                ranges::ssize(thsep_indices));
 3646|  10.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  46.7k|    {
 3579|  46.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  46.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 46.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  46.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  46.7k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  46.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 2.96k, False: 43.7k]
  ------------------
 3583|  2.96k|            if constexpr (!std::is_signed_v<T>) {
 3584|  2.96k|                return detail::unexpected_scan_error(
 3585|  2.96k|                    scan_error::invalid_scanned_value,
 3586|  2.96k|                    "Unexpected '-' sign when parsing an "
 3587|  2.96k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  2.96k|        }
 3598|       |
 3599|  46.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 4.82k, False: 41.9k]
  ------------------
 3600|  4.82k|            value = T{0};
 3601|  4.82k|            return std::next(prefix_result.iterator);
 3602|  4.82k|        }
 3603|       |
 3604|  41.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  41.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 30.5k, False: 11.3k]
  |  |  ------------------
  ------------------
 3605|  30.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 38, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     38|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.5k|                    parse_integer_digits_without_thsep(
 3607|  30.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.5k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.5k|            auto buf = make_contiguous_buffer(
 3611|  30.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.78k, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.78k|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  26.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  26.7k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  26.7k|            return ranges::next(
 3617|  26.7k|                prefix_result.iterator,
 3618|  26.7k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.5k|        }
 3620|       |
 3621|  11.3k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3626|  11.3k|#endif
 3627|       |
 3628|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 414, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    414|    }                                                  \
  |  |  |  | 3939|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  10.9k|                parse_integer_digits_with_thsep(
 3630|  10.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  10.9k|                    prefix_result.parsed_base, locale_options));
 3632|  10.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  10.9k|            parse_digits_result;
 3634|       |
 3635|  10.9k|        auto nothsep_source_view =
 3636|  10.9k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  10.9k|        SCN_TRY(
  ------------------
  |  | 3940|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 234, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    234|    }                                                  \
  |  |  |  | 3939|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  10.6k|            nothsep_source_it,
 3639|  10.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  10.6k|                                prefix_result.parsed_base));
 3641|       |
 3642|  10.6k|        return ranges::next(
 3643|  10.6k|            prefix_result.iterator,
 3644|  10.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  10.6k|                ranges::ssize(thsep_indices));
 3646|  10.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  52.0k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  52.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  52.0k|            auto rd = make_reader<T, char_type>();
 6225|  52.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  52.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 52.0k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  52.0k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  52.0k|                return impl(rd, range, value);
 6230|  52.0k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  52.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  52.0k|    {
 6150|  52.0k|        const bool need_skipped_width =
 6151|  52.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 52.0k]
  |  Branch (6151:33): [True: 0, False: 52.0k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  52.0k|        auto it = rng.begin();
 6155|  52.0k|        std::ptrdiff_t prefix_width = 0;
 6156|  52.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 52.0k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  52.0k|        else {
 6164|  52.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.41k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.41k|    }                                                  \
  |  |  |  | 3939|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.6k|        }
 6167|  50.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.6k|        std::ptrdiff_t value_width = 0;
 6171|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.6k|        else {
 6187|  50.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.05k, False: 43.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.05k|    }                                                  \
  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.5k|                                             specs, value, loc));
 6189|       |
 6190|  43.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.5k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.5k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.5k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.5k, False: 964]
  ------------------
 6200|  42.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.5k|                                 value_width));
 6204|  42.5k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.5k|        }
 6206|       |
 6207|  43.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.5k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.5k|        return it;
 6210|  43.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  50.6k|    {
 3579|  50.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.6k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.06k, False: 47.5k]
  ------------------
 3583|  3.06k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.06k|                return detail::unexpected_scan_error(
 3585|  3.06k|                    scan_error::invalid_scanned_value,
 3586|  3.06k|                    "Unexpected '-' sign when parsing an "
 3587|  3.06k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.06k|        }
 3598|       |
 3599|  50.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.6k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.3k, False: 12.2k]
  |  |  ------------------
  ------------------
 3605|  33.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.02k|    }                                                  \
  |  |  |  | 3939|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.3k|                    parse_integer_digits_without_thsep(
 3607|  30.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.3k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.3k|            auto buf = make_contiguous_buffer(
 3611|  30.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 428, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    428|    }                                                  \
  |  |  |  | 3939|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  29.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  29.9k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  29.9k|            return ranges::next(
 3617|  29.9k|                prefix_result.iterator,
 3618|  29.9k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.3k|        }
 3620|       |
 3621|  12.2k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.2k|#endif
 3627|       |
 3628|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 412, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    412|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.8k|                parse_integer_digits_with_thsep(
 3630|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.8k|                    prefix_result.parsed_base, locale_options));
 3632|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.8k|            parse_digits_result;
 3634|       |
 3635|  11.8k|        auto nothsep_source_view =
 3636|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.8k|        SCN_TRY(
  ------------------
  |  | 3940|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 128, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    128|    }                                                  \
  |  |  |  | 3939|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.6k|            nothsep_source_it,
 3639|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.6k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.6k|        return ranges::next(
 3643|  11.6k|            prefix_result.iterator,
 3644|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.6k|                ranges::ssize(thsep_indices));
 3646|  11.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  50.6k|    {
 3579|  50.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  50.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  50.6k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  50.6k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.06k, False: 47.6k]
  ------------------
 3583|  3.06k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.06k|                return detail::unexpected_scan_error(
 3585|  3.06k|                    scan_error::invalid_scanned_value,
 3586|  3.06k|                    "Unexpected '-' sign when parsing an "
 3587|  3.06k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.06k|        }
 3598|       |
 3599|  50.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 45.6k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  45.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  45.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.4k, False: 12.2k]
  |  |  ------------------
  ------------------
 3605|  33.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  33.3k|                    parse_integer_digits_without_thsep(
 3607|  33.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  33.3k|                        prefix_result.parsed_base));
 3609|       |
 3610|  33.3k|            auto buf = make_contiguous_buffer(
 3611|  33.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  33.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.53k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.53k|    }                                                  \
  |  |  |  | 3939|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  29.8k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  29.8k|            return ranges::next(
 3617|  29.8k|                prefix_result.iterator,
 3618|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3619|  33.3k|        }
 3620|       |
 3621|  12.2k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.2k|#endif
 3627|       |
 3628|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 450, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    450|    }                                                  \
  |  |  |  | 3939|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.7k|                parse_integer_digits_with_thsep(
 3630|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.7k|                    prefix_result.parsed_base, locale_options));
 3632|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.7k|            parse_digits_result;
 3634|       |
 3635|  11.7k|        auto nothsep_source_view =
 3636|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.7k|        SCN_TRY(
  ------------------
  |  | 3940|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 126, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    126|    }                                                  \
  |  |  |  | 3939|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.6k|            nothsep_source_it,
 3639|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.6k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.6k|        return ranges::next(
 3643|  11.6k|            prefix_result.iterator,
 3644|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.6k|                ranges::ssize(thsep_indices));
 3646|  11.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|  52.6k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  52.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  52.6k|            auto rd = make_reader<T, char_type>();
 6225|  52.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  52.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 52.6k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  52.6k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  52.6k|                return impl(rd, range, value);
 6230|  52.6k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  52.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  52.6k|    {
 6150|  52.6k|        const bool need_skipped_width =
 6151|  52.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 52.6k]
  |  Branch (6151:33): [True: 0, False: 52.6k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  52.6k|        auto it = rng.begin();
 6155|  52.6k|        std::ptrdiff_t prefix_width = 0;
 6156|  52.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 52.6k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  52.6k|        else {
 6164|  52.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.52k, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.52k|    }                                                  \
  |  |  |  | 3939|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  51.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  51.0k|        }
 6167|  51.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  51.0k|        std::ptrdiff_t value_width = 0;
 6171|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 51.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  51.0k|        else {
 6187|  51.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.94k, False: 44.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.94k|    }                                                  \
  |  | 3939|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  44.1k|                                             specs, value, loc));
 6189|       |
 6190|  44.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 44.1k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  44.1k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  44.1k|        std::ptrdiff_t postfix_width = 0;
 6199|  44.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 43.0k, False: 1.07k]
  ------------------
 6200|  43.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  43.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  43.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  43.0k|                                 value_width));
 6204|  43.0k|            std::tie(it, postfix_width) = postfix_result;
 6205|  43.0k|        }
 6206|       |
 6207|  44.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  44.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  44.1k|            specs, prefix_width, value_width, postfix_width));
 6209|  44.1k|        return it;
 6210|  44.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  51.0k|    {
 3579|  51.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  51.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  51.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.16k, False: 47.9k]
  ------------------
 3583|  3.16k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.16k|                return detail::unexpected_scan_error(
 3585|  3.16k|                    scan_error::invalid_scanned_value,
 3586|  3.16k|                    "Unexpected '-' sign when parsing an "
 3587|  3.16k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.16k|        }
 3598|       |
 3599|  51.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 46.0k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  46.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  46.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.6k, False: 12.4k]
  |  |  ------------------
  ------------------
 3605|  33.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.07k, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.07k|    }                                                  \
  |  |  |  | 3939|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  30.5k|                    parse_integer_digits_without_thsep(
 3607|  30.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  30.5k|                        prefix_result.parsed_base));
 3609|       |
 3610|  30.5k|            auto buf = make_contiguous_buffer(
 3611|  30.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  30.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  30.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  30.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  30.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 216, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    216|    }                                                  \
  |  |  |  | 3939|  30.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.3k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.3k|            return ranges::next(
 3617|  30.3k|                prefix_result.iterator,
 3618|  30.3k|                ranges::distance(buf.view().begin(), result_it));
 3619|  30.5k|        }
 3620|       |
 3621|  12.4k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.4k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.4k|#endif
 3627|       |
 3628|  12.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 432, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    432|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    432|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    432|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    432|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    432|    }                                                  \
  |  |  |  | 3939|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.9k|                parse_integer_digits_with_thsep(
 3630|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.9k|                    prefix_result.parsed_base, locale_options));
 3632|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.9k|            parse_digits_result;
 3634|       |
 3635|  11.9k|        auto nothsep_source_view =
 3636|  11.9k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.9k|        SCN_TRY(
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 60, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     60|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.9k|            nothsep_source_it,
 3639|  11.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.9k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.9k|        return ranges::next(
 3643|  11.9k|            prefix_result.iterator,
 3644|  11.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.9k|                ranges::ssize(thsep_indices));
 3646|  11.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  51.1k|    {
 3579|  51.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  51.1k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  51.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 3.15k, False: 48.0k]
  ------------------
 3583|  3.15k|            if constexpr (!std::is_signed_v<T>) {
 3584|  3.15k|                return detail::unexpected_scan_error(
 3585|  3.15k|                    scan_error::invalid_scanned_value,
 3586|  3.15k|                    "Unexpected '-' sign when parsing an "
 3587|  3.15k|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|  3.15k|        }
 3598|       |
 3599|  51.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 5.00k, False: 46.1k]
  ------------------
 3600|  5.00k|            value = T{0};
 3601|  5.00k|            return std::next(prefix_result.iterator);
 3602|  5.00k|        }
 3603|       |
 3604|  46.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  46.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 33.7k, False: 12.4k]
  |  |  ------------------
  ------------------
 3605|  33.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 40, False: 33.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     40|    }                                                  \
  |  |  |  | 3939|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  33.6k|                    parse_integer_digits_without_thsep(
 3607|  33.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  33.6k|                        prefix_result.parsed_base));
 3609|       |
 3610|  33.6k|            auto buf = make_contiguous_buffer(
 3611|  33.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  33.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.37k, False: 30.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.37k|    }                                                  \
  |  |  |  | 3939|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|  30.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|  30.2k|                                        prefix_result.parsed_base));
 3615|       |
 3616|  30.2k|            return ranges::next(
 3617|  30.2k|                prefix_result.iterator,
 3618|  30.2k|                ranges::distance(buf.view().begin(), result_it));
 3619|  33.6k|        }
 3620|       |
 3621|  12.4k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  12.4k|            localized_number_formatting_options<CharT>{loc};
 3626|  12.4k|#endif
 3627|       |
 3628|  12.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 472, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    472|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    472|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    472|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    472|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    472|    }                                                  \
  |  |  |  | 3939|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|  11.9k|                parse_integer_digits_with_thsep(
 3630|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|  11.9k|                    prefix_result.parsed_base, locale_options));
 3632|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|  11.9k|            parse_digits_result;
 3634|       |
 3635|  11.9k|        auto nothsep_source_view =
 3636|  11.9k|            std::basic_string_view<CharT>{nothsep_source};
 3637|  11.9k|        SCN_TRY(
  ------------------
  |  | 3940|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     58|    }                                                  \
  |  |  |  | 3939|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|  11.9k|            nothsep_source_it,
 3639|  11.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|  11.9k|                                prefix_result.parsed_base));
 3641|       |
 3642|  11.9k|        return ranges::next(
 3643|  11.9k|            prefix_result.iterator,
 3644|  11.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|  11.9k|                ranges::ssize(thsep_indices));
 3646|  11.9k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   430k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   430k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   430k|        else {
 1055|   430k|            return r.begin().contiguous_segment();
 1056|   430k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   430k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   406k|{
 2160|   406k|    auto it = range.begin();
 2161|   796k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 786k, False: 10.3k]
  ------------------
 2162|   786k|        const auto val =
 2163|   786k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   786k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   786k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 784k, False: 1.74k]
  |  |  ------------------
  ------------------
 2165|   784k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   784k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   784k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 396k, False: 388k]
  ------------------
 2168|   396k|                return it;
 2169|   396k|            }
 2170|   784k|        }
 2171|   389k|        it = val.iterator;
 2172|   389k|    }
 2173|       |
 2174|  10.3k|    return it;
 2175|   406k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   786k|{
 1998|   786k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   786k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   786k|    auto it = range.begin();
 2002|   786k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   786k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.74k, False: 784k]
  |  |  ------------------
  ------------------
 2005|  1.74k|        ++it;
 2006|  1.74k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.74k|        return {it, {}};
 2008|  1.74k|    }
 2009|       |
 2010|   784k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 779k, False: 5.16k]
  ------------------
 2011|   779k|        ++it;
 2012|   779k|        return {it, string_type(1, *range.begin())};
 2013|   779k|    }
 2014|       |
 2015|  5.16k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  5.16k|    return {it, string_type{range.begin(), it}};
 2017|   784k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.74k|{
 1265|  1.74k|    auto it = input.begin();
 1266|  2.96k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.13k, False: 825]
  ------------------
 1267|  2.13k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 915, False: 1.22k]
  ------------------
 1268|    915|            break;
 1269|    915|        }
 1270|  2.13k|    }
 1271|  1.74k|    return it;
 1272|  1.74k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.16k|    {
  283|  5.16k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.16k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.16k|    {
  252|  5.16k|        constexpr iter_difference_t<I> zero{0};
  253|  5.16k|        iter_difference_t<I> counter{0};
  254|       |
  255|  17.1k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 13.2k, False: 3.97k]
  |  Branch (255:30): [True: 12.0k, False: 1.19k]
  ------------------
  256|  12.0k|            ++i;
  257|  12.0k|            ++counter;
  258|  12.0k|        }
  259|       |
  260|  5.16k|        return counter;
  261|  5.16k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   786k|    {
 1989|   786k|        return !codepoint.empty();
 1990|   786k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   406k|{
 2181|   406k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   406k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   430k|{
 3055|   430k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 430k, False: 0]
  ------------------
 3056|   430k|        auto it = read_while_classic_space(range);
 3057|   430k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   430k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 10.3k, False: 419k]
  |  |  ------------------
  ------------------
 3059|  10.3k|            return unexpected(e);
 3060|  10.3k|        }
 3061|       |
 3062|   419k|        return it;
 3063|   430k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   430k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   430k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   430k|    else {
 2225|   430k|        auto it = range.begin();
 2226|       |
 2227|   430k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|   430k|            auto seg = get_contiguous_beginning(range);
 2229|   430k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|   430k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 23.7k, False: 406k]
  ------------------
 2231|  23.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  23.7k|            }
 2233|   406k|            ranges::advance(it, seg.size());
 2234|   406k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   430k|            return detail::is_cp_space(cp);
 2238|   430k|        });
 2239|   430k|    }
 2240|   430k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   406k|        : m_fptr([](storage fn,
  743|   406k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   406k|              cvref<T> obj = *get<T>(fn);
  745|   406k|              if constexpr (std::is_void_v<R>) {
  746|   406k|                  obj(static_cast<decltype(args)>(args)...);
  747|   406k|              }
  748|   406k|              else {
  749|   406k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   406k|              }
  751|   406k|          }),
  752|   406k|          m_storage(std::addressof(f))
  753|   406k|    {
  754|   406k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   784k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   784k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   784k|              else {
  749|   784k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   784k|              }
  751|   784k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   784k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   784k|        else if constexpr (std::is_object_v<T>) {
  688|   784k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   784k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   784k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   784k|            return detail::is_cp_space(cp);
 2238|   784k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   406k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   406k|        {
  662|   406k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   130k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   130k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   130k|        auto beg = r.begin();
  991|   130k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 130k, False: 0]
  ------------------
  992|   130k|            return false;
  993|   130k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   130k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   239k|    {
  763|   239k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   239k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   102k|{
 1956|   102k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   102k|    else {
 1967|   102k|        auto it = range.begin();
 1968|   102k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 82.7k, False: 20.0k]
  ------------------
 1969|  82.7k|            return ranges::next(it, count);
 1970|  82.7k|        }
 1971|       |
 1972|  40.5k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 39.8k, False: 708]
  ------------------
 1973|  39.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 19.3k, False: 20.5k]
  ------------------
 1974|  19.3k|                return unexpected(eof_error::eof);
 1975|  19.3k|            }
 1976|  39.8k|        }
 1977|       |
 1978|    708|        return it;
 1979|  20.0k|    }
 1980|   102k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   102k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   102k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   102k|        else {
 1107|   102k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 102k, False: 0]
  ------------------
 1108|   102k|                return static_cast<size_t>(
 1109|   102k|                    r.begin().parent()->chars_available() -
 1110|   102k|                    r.begin().position());
 1111|   102k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   102k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   102k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   104k|    {
 6063|   104k|        const bool need_skipped_width =
 6064|   104k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 104k]
  |  Branch (6064:33): [True: 0, False: 104k]
  ------------------
 6065|   104k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   104k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 104k]
  ------------------
 6069|   104k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 104k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   104k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 104k, False: 0]
  |  Branch (6073:56): [True: 104k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   104k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 104k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   206k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.57k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.57k|    }                                                  \
  |  |  |  | 3939|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   206k|                            make_eof_scan_error));
 6084|       |
 6085|   206k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 102k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   102k|            return result_type{it, 0};
 6093|   206k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   104k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   110k|{
 2075|   110k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   110k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|   110k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|   110k|    else {
 2060|   110k|        auto first = range.begin();
 2061|   120k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 119k, False: 762]
  ------------------
 2062|   119k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 109k, False: 9.92k]
  ------------------
 2063|   109k|                return first;
 2064|   109k|            }
 2065|   119k|        }
 2066|    762|        return first;
 2067|   110k|    }
 2068|   110k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  34.7M|    {
  108|  34.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  34.7M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  34.7M|    {
   94|  34.7M|        iter_difference_t<I> counter{0};
   95|  71.0G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 71.0G, False: 34.7M]
  ------------------
   96|  71.0G|            ++i;
   97|  71.0G|            ++counter;
   98|  71.0G|        }
   99|  34.7M|        return counter;
  100|  34.7M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  34.0k|    {
 1879|  34.0k|        auto stdloc = loc.get<std::locale>();
 1880|  34.0k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  34.0k|        grouping = numpunct.grouping();
 1882|  34.0k|        thousands_sep =
 1883|  34.0k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 34.0k]
  ------------------
 1884|  34.0k|        decimal_point = numpunct.decimal_point();
 1885|  34.0k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  34.0k|{
 1816|  34.0k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 34.0k, False: 0]
  ------------------
 1817|  34.0k|        return std::use_facet<Facet>(stdloc);
 1818|  34.0k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  34.0k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   162k|{
 1945|   162k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 162k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   162k|    return ranges::next(range.begin());
 1950|   162k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   319k|{
  951|   319k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.02k, False: 317k]
  |  |  ------------------
  ------------------
  952|  2.02k|        return eof_error::eof;
  953|  2.02k|    }
  954|   317k|    return eof_error::good;
  955|   319k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   449k|{
  945|   449k|    return is_range_eof(r.begin(), r.end());
  946|   449k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   449k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   449k|    {
  938|   449k|        return begin == end;
  939|   449k|    }
  940|   449k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   162k|    {
  296|   162k|        ++x;
  297|   162k|        return x;
  298|   162k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.1k|    {
 3579|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.1k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    228|            else {
 3590|    228|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 228]
  ------------------
 3591|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    228|            }
 3597|    228|        }
 3598|       |
 3599|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 44, False: 17.0k]
  ------------------
 3600|     44|            value = T{0};
 3601|     44|            return std::next(prefix_result.iterator);
 3602|     44|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.2k, False: 2.86k]
  |  |  ------------------
  ------------------
 3605|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    380|                    parse_integer_digits_without_thsep(
 3607|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    380|                        prefix_result.parsed_base));
 3609|       |
 3610|    380|            auto buf = make_contiguous_buffer(
 3611|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 44, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     44|    }                                                  \
  |  |  |  | 3939|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    336|                                        prefix_result.parsed_base));
 3615|       |
 3616|    336|            return ranges::next(
 3617|    336|                prefix_result.iterator,
 3618|    336|                ranges::distance(buf.view().begin(), result_it));
 3619|    380|        }
 3620|       |
 3621|  2.86k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.86k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.86k|#endif
 3627|       |
 3628|  2.86k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.75k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.75k|    }                                                  \
  |  |  |  | 3939|  2.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    110|                parse_integer_digits_with_thsep(
 3630|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    110|                    prefix_result.parsed_base, locale_options));
 3632|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    110|            parse_digits_result;
 3634|       |
 3635|    110|        auto nothsep_source_view =
 3636|    110|            std::basic_string_view<CharT>{nothsep_source};
 3637|    110|        SCN_TRY(
  ------------------
  |  | 3940|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     98|            nothsep_source_it,
 3639|     98|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     98|                                prefix_result.parsed_base));
 3641|       |
 3642|     98|        return ranges::next(
 3643|     98|            prefix_result.iterator,
 3644|     98|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     98|                ranges::ssize(thsep_indices));
 3646|    110|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3365|   128k|{
 3366|   128k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   128k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   128k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   128k|        parse_integer_base_prefix(
 3371|   128k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   128k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 356, False: 128k]
  ------------------
 3374|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 48, False: 308]
  ------------------
 3375|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 212, False: 96]
  ------------------
 3376|    260|            digits_begin_it = base_prefix_begin_it;
 3377|    260|        }
 3378|     96|        else {
 3379|     96|            parsed_zero = false;
 3380|     96|        }
 3381|    356|    }
 3382|   128k|    else {
 3383|   128k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 270, False: 127k]
  ------------------
 3384|   128k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 124k, False: 3.74k]
  ------------------
 3385|   124k|            digits_begin_it = base_prefix_begin_it;
 3386|   124k|        }
 3387|   128k|    }
 3388|       |
 3389|   128k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 126k, False: 1.87k]
  ------------------
 3390|   126k|        sign = sign_type::plus_sign;
 3391|   126k|    }
 3392|   128k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   128k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   128k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|   128k|{
 3247|   128k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   128k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 126k, False: 1.87k]
  ------------------
 3249|   126k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 126k, False: 0]
  ------------------
 3250|   126k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   126k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   126k|    }
 3254|       |
 3255|  1.87k|    auto& it = *r;
 3256|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 1.69k, False: 179]
  ------------------
 3257|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3258|  1.69k|    }
 3259|    179|    return std::pair{it, sign_type::plus_sign};
 3260|  1.87k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   128k|{
 2372|   128k|    auto it = read_code_unit(range);
 2373|   128k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   256k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 256k, False: 126k]
  ------------------
 2378|   256k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 1.87k, False: 254k]
  ------------------
 2379|  1.87k|            return *it;
 2380|  1.87k|        }
 2381|   256k|    }
 2382|       |
 2383|   126k|    return unexpected(parse_error::error);
 2384|   128k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3332|   128k|{
 3333|   128k|    switch (base) {
 3334|  16.9k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 16.9k, False: 111k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  16.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  16.9k|                    false};
 3338|       |
 3339|  17.0k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 17.0k, False: 111k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  17.0k|            bool zero_parsed = false;
 3342|  17.0k|            auto it = apply_opt(
 3343|  17.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  17.0k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  17.1k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 17.1k, False: 111k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  17.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  17.1k|                    false};
 3351|       |
 3352|  17.1k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 17.1k, False: 111k]
  ------------------
 3353|       |            // detect base
 3354|  17.1k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  60.0k|        default:
  ------------------
  |  Branch (3356:9): [True: 60.0k, False: 68.3k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  60.0k|            return {range.begin(), base, false};
 3359|   128k|    }
 3360|   128k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2390|  51.1k|{
 2391|  51.1k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 51.0k, False: 168]
  ------------------
 2392|  51.0k|        return range.begin();
 2393|  51.0k|    }
 2394|    168|    return *result;
 2395|  51.1k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3283|  34.1k|{
 3284|  34.1k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  34.1k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|   102k|{
 2331|   102k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   102k|    else {
 2344|   102k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   102k|            if (ch < 'A' || ch > 'Z') {
 2346|   102k|                return ch;
 2347|   102k|            }
 2348|   102k|            return static_cast<char_type>(ch +
 2349|   102k|                                          static_cast<char_type>('a' - 'A'));
 2350|   102k|        };
 2351|       |
 2352|   102k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.3k, False: 83.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.3k|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  83.4k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  83.4k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  83.4k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 0]
  |  |  ------------------
  ------------------
 2357|  83.4k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  83.4k|                    return ascii_tolower(a) ==
 2359|  83.4k|                           static_cast<detail::char_t<Range>>(b);
 2360|  83.4k|                }))) {
 2361|  83.4k|            return unexpected(parse_error::error);
 2362|  83.4k|        }
 2363|       |
 2364|      0|        return it;
 2365|  83.4k|    }
 2366|   102k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  84.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  84.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 56.3k, False: 28.0k]
  |  Branch (2345:29): [True: 27.6k, False: 360]
  ------------------
 2346|  84.0k|                return ch;
 2347|  84.0k|            }
 2348|    360|            return static_cast<char_type>(ch +
 2349|    360|                                          static_cast<char_type>('a' - 'A'));
 2350|  84.4k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3297|  34.2k|{
 3298|  34.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 34.2k]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|  34.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 356, False: 33.8k]
  ------------------
 3303|    356|        zero_parsed = true;
 3304|    356|        return *r;
 3305|    356|    }
 3306|       |
 3307|  33.8k|    return unexpected(parse_error::error);
 3308|  34.2k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  34.2k|{
 2246|  34.2k|    auto it = read_code_unit(range);
 2247|  34.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 34.1k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  34.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.7k, False: 356]
  |  |  ------------------
  ------------------
 2252|  34.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.7k|        return unexpected(parse_error::error);
 2254|  33.7k|    }
 2255|       |
 2256|    356|    return *it;
 2257|  34.1k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3290|  34.3k|{
 3291|  34.3k|    return read_matching_string_classic_nocase(range, "0x");
 3292|  34.3k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3313|  17.1k|{
 3314|  17.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 17.1k]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|  17.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 17.1k]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|  17.1k|    {
 3321|  17.1k|        bool zero_parsed{false};
 3322|  17.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 188, False: 17.0k]
  ------------------
 3323|    188|            return {*r, 8, zero_parsed};
 3324|    188|        }
 3325|  17.1k|    }
 3326|  17.0k|    return {range.begin(), 10, false};
 3327|  17.1k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3399|   110k|{
 3400|   110k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|       |    if constexpr (ranges::contiguous_range<Range>) {
 3403|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3404|       |            return detail::unexpected_scan_error(
 3405|       |                scan_error::invalid_scanned_value,
 3406|       |                "Failed to parse integer: No digits found");
 3407|       |        }
 3408|       |        return range.end();
 3409|       |    }
 3410|   110k|    else {
 3411|   110k|        return read_while1_code_unit(range,
 3412|   110k|                                     [&](char_type ch) noexcept {
 3413|   110k|                                         return char_to_int(ch) < base;
 3414|   110k|                                     })
 3415|   110k|            .transform_error(map_parse_error_to_scan_error(
 3416|   110k|                scan_error::invalid_scanned_value,
 3417|   110k|                "Failed to parse integer: No digits found"));
 3418|   110k|    }
 3419|   110k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|   110k|{
 2095|   110k|    auto it = read_while_code_unit(range, pred);
 2096|   110k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 107k, False: 2.94k]
  ------------------
 2097|   107k|        return unexpected(parse_error::error);
 2098|   107k|    }
 2099|  2.94k|    return it;
 2100|   110k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3412|   119k|                                     [&](char_type ch) noexcept {
 3413|   119k|                                         return char_to_int(ch) < base;
 3414|   119k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3429|  17.0k|{
 3430|  17.0k|    std::basic_string<CharT> output;
 3431|  17.0k|    std::string thsep_indices;
 3432|  17.0k|    auto it = range.begin();
 3433|  17.0k|    bool digit_matched = false;
 3434|  34.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 34.7M, False: 324]
  ------------------
 3435|  34.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 34.7M, False: 18.8k]
  ------------------
 3436|  34.7M|            thsep_indices.push_back(
 3437|  34.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  34.7M|        }
 3439|  18.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 16.6k, False: 2.11k]
  ------------------
 3440|  16.6k|            break;
 3441|  16.6k|        }
 3442|  2.11k|        else {
 3443|  2.11k|            output.push_back(*it);
 3444|  2.11k|            digit_matched = true;
 3445|  2.11k|        }
 3446|  34.7M|    }
 3447|  17.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.4k, False: 596]
  |  |  ------------------
  ------------------
 3448|  16.4k|        return detail::unexpected_scan_error(
 3449|  16.4k|            scan_error::invalid_scanned_value,
 3450|  16.4k|            "Failed to parse integer: No digits found");
 3451|  16.4k|    }
 3452|    596|    return std::tuple{it, output, thsep_indices};
 3453|  17.0k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.94k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.94k|    else {
 1788|  2.94k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.94k|    }
 1790|  2.94k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.94k|    {
 1636|  2.94k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.94k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.94k|    {
 1720|  2.94k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.94k|                           ranges::common_range<Range>) {
 1737|  2.94k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.94k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.94k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.07k, False: 863]
  |  |  ------------------
  ------------------
 1740|  2.94k|                             detail::to_address(end_seg.end()))) {
 1741|  2.07k|                auto& str = m_storage.emplace();
 1742|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.07k|                m_view = string_view_type{str};
 1745|  2.07k|                return;
 1746|  2.07k|            }
 1747|       |
 1748|    863|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    863|                                                            end_seg.data());
 1750|    863|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.94k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.50k|    {
 1681|  5.50k|        return m_view;
 1682|  5.50k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.94k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|  1.92k|    {
 6105|  1.92k|        const bool need_skipped_width =
 6106|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 1.92k]
  |  Branch (6106:33): [True: 0, False: 1.92k]
  ------------------
 6107|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 1.92k]
  ------------------
 6110|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 1.92k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 1.92k, False: 0]
  ------------------
 6119|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.92k]
  ------------------
 6120|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  1.92k|        return result_type{rng.begin(), 0};
 6144|  1.92k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   102k|{
 1956|   102k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   102k|    if constexpr (ranges::sized_range<Range>) {
 1959|   102k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   102k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 19.3k, False: 83.4k]
  ------------------
 1961|  19.3k|            return unexpected(eof_error::eof);
 1962|  19.3k|        }
 1963|       |
 1964|  83.4k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   102k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   130k|{
 1998|   130k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   130k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   130k|    auto it = range.begin();
 2002|   130k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   130k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   130k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 130k, False: 0]
  ------------------
 2011|   130k|        ++it;
 2012|   130k|        return {it, string_type(1, *range.begin())};
 2013|   130k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   130k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   560k|{
  945|   560k|    return is_range_eof(r.begin(), r.end());
  946|   560k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   560k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   560k|    {
  938|   560k|        return begin == end;
  939|   560k|    }
  940|   560k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   130k|    {
 1989|   130k|        return !codepoint.empty();
 1990|   130k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   429k|{
  951|   429k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 427k]
  |  |  ------------------
  ------------------
  952|  2.18k|        return eof_error::eof;
  953|  2.18k|    }
  954|   427k|    return eof_error::good;
  955|   429k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   162k|{
 1945|   162k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 162k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   162k|    return ranges::next(range.begin());
 1950|   162k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   162k|    {
  296|   162k|        ++x;
  297|   162k|        return x;
  298|   162k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.1k|    {
 3579|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.1k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    228|            else {
 3590|    228|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 228]
  ------------------
 3591|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    228|            }
 3597|    228|        }
 3598|       |
 3599|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 44, False: 17.0k]
  ------------------
 3600|     44|            value = T{0};
 3601|     44|            return std::next(prefix_result.iterator);
 3602|     44|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.2k, False: 2.86k]
  |  |  ------------------
  ------------------
 3605|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.2k|                    parse_integer_digits_without_thsep(
 3607|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.2k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.2k|            auto buf = make_contiguous_buffer(
 3611|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    336|                                        prefix_result.parsed_base));
 3615|       |
 3616|    336|            return ranges::next(
 3617|    336|                prefix_result.iterator,
 3618|    336|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.2k|        }
 3620|       |
 3621|  2.86k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.86k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.86k|#endif
 3627|       |
 3628|  2.86k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.75k, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.75k|    }                                                  \
  |  |  |  | 3939|  2.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    110|                parse_integer_digits_with_thsep(
 3630|    110|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    110|                    prefix_result.parsed_base, locale_options));
 3632|    110|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    110|            parse_digits_result;
 3634|       |
 3635|    110|        auto nothsep_source_view =
 3636|    110|            std::basic_string_view<CharT>{nothsep_source};
 3637|    110|        SCN_TRY(
  ------------------
  |  | 3940|    110|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    110|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    110|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 98]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    110|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     98|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     98|            nothsep_source_it,
 3639|     98|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     98|                                prefix_result.parsed_base));
 3641|       |
 3642|     98|        return ranges::next(
 3643|     98|            prefix_result.iterator,
 3644|     98|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     98|                ranges::ssize(thsep_indices));
 3646|    110|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3365|   128k|{
 3366|   128k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3367|   128k|    auto [base_prefix_begin_it, sign] = sign_result;
 3368|       |
 3369|   128k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3370|   128k|        parse_integer_base_prefix(
 3371|   128k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3372|       |
 3373|   128k|    if (parsed_zero) {
  ------------------
  |  Branch (3373:9): [True: 356, False: 128k]
  ------------------
 3374|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3374:13): [True: 48, False: 308]
  ------------------
 3375|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3375:13): [True: 212, False: 96]
  ------------------
 3376|    260|            digits_begin_it = base_prefix_begin_it;
 3377|    260|        }
 3378|     96|        else {
 3379|     96|            parsed_zero = false;
 3380|     96|        }
 3381|    356|    }
 3382|   128k|    else {
 3383|   128k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3383:13): [True: 270, False: 127k]
  ------------------
 3384|   128k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3384:13): [True: 124k, False: 3.74k]
  ------------------
 3385|   124k|            digits_begin_it = base_prefix_begin_it;
 3386|   124k|        }
 3387|   128k|    }
 3388|       |
 3389|   128k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3389:9): [True: 126k, False: 1.87k]
  ------------------
 3390|   126k|        sign = sign_type::plus_sign;
 3391|   126k|    }
 3392|   128k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3393|   128k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3394|   128k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|   128k|{
 3247|   128k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   128k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 126k, False: 1.87k]
  ------------------
 3249|   126k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 126k, False: 0]
  ------------------
 3250|   126k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   126k|        }
 3252|      0|        return unexpected(eof_error::eof);
 3253|   126k|    }
 3254|       |
 3255|  1.87k|    auto& it = *r;
 3256|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 1.69k, False: 179]
  ------------------
 3257|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3258|  1.69k|    }
 3259|    179|    return std::pair{it, sign_type::plus_sign};
 3260|  1.87k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   128k|{
 2372|   128k|    auto it = read_code_unit(range);
 2373|   128k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 2374|      0|        return unexpected(make_eof_parse_error(it.error()));
 2375|      0|    }
 2376|       |
 2377|   256k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 256k, False: 126k]
  ------------------
 2378|   256k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 1.87k, False: 254k]
  ------------------
 2379|  1.87k|            return *it;
 2380|  1.87k|        }
 2381|   256k|    }
 2382|       |
 2383|   126k|    return unexpected(parse_error::error);
 2384|   128k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3332|   128k|{
 3333|   128k|    switch (base) {
 3334|  16.9k|        case 2:
  ------------------
  |  Branch (3334:9): [True: 16.9k, False: 111k]
  ------------------
 3335|       |            // allow 0b/0B
 3336|  16.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3337|  16.9k|                    false};
 3338|       |
 3339|  17.0k|        case 8: {
  ------------------
  |  Branch (3339:9): [True: 17.0k, False: 111k]
  ------------------
 3340|       |            // allow 0o/0O/0
 3341|  17.0k|            bool zero_parsed = false;
 3342|  17.0k|            auto it = apply_opt(
 3343|  17.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3344|  17.0k|            return {it, 8, zero_parsed};
 3345|      0|        }
 3346|       |
 3347|  17.1k|        case 16:
  ------------------
  |  Branch (3347:9): [True: 17.1k, False: 111k]
  ------------------
 3348|       |            // allow 0x/0X
 3349|  17.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3350|  17.1k|                    false};
 3351|       |
 3352|  17.1k|        case 0:
  ------------------
  |  Branch (3352:9): [True: 17.1k, False: 111k]
  ------------------
 3353|       |            // detect base
 3354|  17.1k|            return parse_integer_base_prefix_for_detection(range);
 3355|       |
 3356|  60.0k|        default:
  ------------------
  |  Branch (3356:9): [True: 60.0k, False: 68.3k]
  ------------------
 3357|       |            // no base prefix allowed
 3358|  60.0k|            return {range.begin(), base, false};
 3359|   128k|    }
 3360|   128k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2390|  51.1k|{
 2391|  51.1k|    if (!result) {
  ------------------
  |  Branch (2391:9): [True: 51.0k, False: 168]
  ------------------
 2392|  51.0k|        return range.begin();
 2393|  51.0k|    }
 2394|    168|    return *result;
 2395|  51.1k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3283|  34.1k|{
 3284|  34.1k|    return read_matching_string_classic_nocase(range, "0b");
 3285|  34.1k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|   102k|{
 2331|   102k|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|   102k|    else {
 2344|   102k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|   102k|            if (ch < 'A' || ch > 'Z') {
 2346|   102k|                return ch;
 2347|   102k|            }
 2348|   102k|            return static_cast<char_type>(ch +
 2349|   102k|                                          static_cast<char_type>('a' - 'A'));
 2350|   102k|        };
 2351|       |
 2352|   102k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 19.3k, False: 83.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  19.3k|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  83.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  83.4k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  83.4k|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  83.4k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 0]
  |  |  ------------------
  ------------------
 2357|  83.4k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  83.4k|                    return ascii_tolower(a) ==
 2359|  83.4k|                           static_cast<detail::char_t<Range>>(b);
 2360|  83.4k|                }))) {
 2361|  83.4k|            return unexpected(parse_error::error);
 2362|  83.4k|        }
 2363|       |
 2364|      0|        return it;
 2365|  83.4k|    }
 2366|   102k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  84.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  84.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 56.3k, False: 28.0k]
  |  Branch (2345:29): [True: 27.6k, False: 360]
  ------------------
 2346|  84.0k|                return ch;
 2347|  84.0k|            }
 2348|    360|            return static_cast<char_type>(ch +
 2349|    360|                                          static_cast<char_type>('a' - 'A'));
 2350|  84.4k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3297|  34.2k|{
 3298|  34.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3298:14): [True: 0, False: 34.2k]
  ------------------
 3299|      0|        return *r;
 3300|      0|    }
 3301|       |
 3302|  34.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3302:14): [True: 356, False: 33.8k]
  ------------------
 3303|    356|        zero_parsed = true;
 3304|    356|        return *r;
 3305|    356|    }
 3306|       |
 3307|  33.8k|    return unexpected(parse_error::error);
 3308|  34.2k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|  34.2k|{
 2246|  34.2k|    auto it = read_code_unit(range);
 2247|  34.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 72, False: 34.1k]
  |  |  ------------------
  ------------------
 2248|     72|        return unexpected(make_eof_parse_error(it.error()));
 2249|     72|    }
 2250|       |
 2251|  34.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 33.7k, False: 356]
  |  |  ------------------
  ------------------
 2252|  34.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|  33.7k|        return unexpected(parse_error::error);
 2254|  33.7k|    }
 2255|       |
 2256|    356|    return *it;
 2257|  34.1k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3290|  34.3k|{
 3291|  34.3k|    return read_matching_string_classic_nocase(range, "0x");
 3292|  34.3k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3313|  17.1k|{
 3314|  17.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3314:14): [True: 0, False: 17.1k]
  ------------------
 3315|      0|        return {*r, 16, false};
 3316|      0|    }
 3317|  17.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3317:14): [True: 0, False: 17.1k]
  ------------------
 3318|      0|        return {*r, 2, false};
 3319|      0|    }
 3320|  17.1k|    {
 3321|  17.1k|        bool zero_parsed{false};
 3322|  17.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3322:18): [True: 188, False: 17.0k]
  ------------------
 3323|    188|            return {*r, 8, zero_parsed};
 3324|    188|        }
 3325|  17.1k|    }
 3326|  17.0k|    return {range.begin(), 10, false};
 3327|  17.1k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3399|   110k|{
 3400|   110k|    using char_type = detail::char_t<Range>;
 3401|       |
 3402|   110k|    if constexpr (ranges::contiguous_range<Range>) {
 3403|   110k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 156, False: 110k]
  |  |  ------------------
  ------------------
 3404|    156|            return detail::unexpected_scan_error(
 3405|    156|                scan_error::invalid_scanned_value,
 3406|    156|                "Failed to parse integer: No digits found");
 3407|    156|        }
 3408|   110k|        return range.end();
 3409|       |    }
 3410|       |    else {
 3411|       |        return read_while1_code_unit(range,
 3412|       |                                     [&](char_type ch) noexcept {
 3413|       |                                         return char_to_int(ch) < base;
 3414|       |                                     })
 3415|       |            .transform_error(map_parse_error_to_scan_error(
 3416|       |                scan_error::invalid_scanned_value,
 3417|       |                "Failed to parse integer: No digits found"));
 3418|       |    }
 3419|   110k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3429|  17.0k|{
 3430|  17.0k|    std::basic_string<CharT> output;
 3431|  17.0k|    std::string thsep_indices;
 3432|  17.0k|    auto it = range.begin();
 3433|  17.0k|    bool digit_matched = false;
 3434|  34.7M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3434:12): [True: 34.7M, False: 324]
  ------------------
 3435|  34.7M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3435:13): [True: 34.7M, False: 18.8k]
  ------------------
 3436|  34.7M|            thsep_indices.push_back(
 3437|  34.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3438|  34.7M|        }
 3439|  18.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3439:18): [True: 16.6k, False: 2.11k]
  ------------------
 3440|  16.6k|            break;
 3441|  16.6k|        }
 3442|  2.11k|        else {
 3443|  2.11k|            output.push_back(*it);
 3444|  2.11k|            digit_matched = true;
 3445|  2.11k|        }
 3446|  34.7M|    }
 3447|  17.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.4k, False: 596]
  |  |  ------------------
  ------------------
 3448|  16.4k|        return detail::unexpected_scan_error(
 3449|  16.4k|            scan_error::invalid_scanned_value,
 3450|  16.4k|            "Failed to parse integer: No digits found");
 3451|  16.4k|    }
 3452|    596|    return std::tuple{it, output, thsep_indices};
 3453|  17.0k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   110k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   110k|                  ranges::sized_range<Range>) {
 1785|   110k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   110k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   110k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   110k|    {
 1589|   110k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   112k|    {
 1602|   112k|        return sv;
 1603|   112k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   130k|{
 3055|   130k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 130k, False: 0]
  ------------------
 3056|   130k|        auto it = read_while_classic_space(range);
 3057|   130k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   130k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.79k, False: 128k]
  |  |  ------------------
  ------------------
 3059|  1.79k|            return unexpected(e);
 3060|  1.79k|        }
 3061|       |
 3062|   128k|        return it;
 3063|   130k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   130k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   130k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   130k|    else {
 2225|   130k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   130k|            return detail::is_cp_space(cp);
 2238|   130k|        });
 2239|   130k|    }
 2240|   130k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   130k|{
 2181|   130k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   130k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   130k|{
 2160|   130k|    auto it = range.begin();
 2161|   132k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 130k, False: 1.79k]
  ------------------
 2162|   130k|        const auto val =
 2163|   130k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   130k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 2165|   130k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   130k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   130k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 128k, False: 2.41k]
  ------------------
 2168|   128k|                return it;
 2169|   128k|            }
 2170|   130k|        }
 2171|  2.41k|        it = val.iterator;
 2172|  2.41k|    }
 2173|       |
 2174|  1.79k|    return it;
 2175|   130k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   130k|            return detail::is_cp_space(cp);
 2238|   130k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  85.8k|    {
  304|  85.8k|        ranges::advance(x, n);
  305|  85.8k|        return x;
  306|  85.8k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  85.8k|    {
  268|  85.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  85.8k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  85.8k|    {
  181|   258k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 173k, False: 85.8k]
  ------------------
  182|   173k|            ++i;
  183|   173k|        }
  184|  85.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.3k|            auto rd = make_reader<T, char_type>();
 6225|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.3k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.3k|                return impl(rd, range, value);
 6230|  17.3k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|   208k|    {
 3145|   208k|        reader_error_handler eh{};
 3146|   208k|        get_derived().check_specs_impl(specs, eh);
 3147|   208k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|   208k|        return {};
 3152|   208k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3156|   208k|    {
 3157|   208k|        return static_cast<Derived&>(*this);
 3158|   208k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3524|   208k|    {
 3525|   208k|        detail::check_int_type_specs(specs, eh);
 3526|   208k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    392|                                             specs, value, loc));
 6189|       |
 6190|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 392]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    392|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    392|        std::ptrdiff_t postfix_width = 0;
 6199|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 270, False: 122]
  ------------------
 6200|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    270|                                 value_width));
 6204|    270|            std::tie(it, postfix_width) = postfix_result;
 6205|    270|        }
 6206|       |
 6207|    392|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    392|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    392|            specs, prefix_width, value_width, postfix_width));
 6209|    392|        return it;
 6210|    392|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3139|   264k|    {
 3140|   264k|        return true;
 3141|   264k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 218, False: 16.8k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    218|            else {
 3590|    218|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 218]
  ------------------
 3591|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    218|            }
 3597|    218|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 42, False: 17.0k]
  ------------------
 3600|     42|            value = T{0};
 3601|     42|            return std::next(prefix_result.iterator);
 3602|     42|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.1k, False: 2.84k]
  |  |  ------------------
  ------------------
 3605|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    368|                    parse_integer_digits_without_thsep(
 3607|    368|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    368|                        prefix_result.parsed_base));
 3609|       |
 3610|    368|            auto buf = make_contiguous_buffer(
 3611|    368|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    368|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 96, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     96|    }                                                  \
  |  |  |  | 3939|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    272|                                        prefix_result.parsed_base));
 3615|       |
 3616|    272|            return ranges::next(
 3617|    272|                prefix_result.iterator,
 3618|    272|                ranges::distance(buf.view().begin(), result_it));
 3619|    368|        }
 3620|       |
 3621|  2.84k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.84k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.84k|#endif
 3627|       |
 3628|  2.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    106|                parse_integer_digits_with_thsep(
 3630|    106|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    106|                    prefix_result.parsed_base, locale_options));
 3632|    106|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    106|            parse_digits_result;
 3634|       |
 3635|    106|        auto nothsep_source_view =
 3636|    106|            std::basic_string_view<CharT>{nothsep_source};
 3637|    106|        SCN_TRY(
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     78|            nothsep_source_it,
 3639|     78|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     78|                                prefix_result.parsed_base));
 3641|       |
 3642|     78|        return ranges::next(
 3643|     78|            prefix_result.iterator,
 3644|     78|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     78|                ranges::ssize(thsep_indices));
 3646|    106|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 218, False: 16.8k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    218|            else {
 3590|    218|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 218]
  ------------------
 3591|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    218|            }
 3597|    218|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 42, False: 17.0k]
  ------------------
 3600|     42|            value = T{0};
 3601|     42|            return std::next(prefix_result.iterator);
 3602|     42|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.1k, False: 2.84k]
  |  |  ------------------
  ------------------
 3605|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.1k|                    parse_integer_digits_without_thsep(
 3607|  14.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.1k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.1k|            auto buf = make_contiguous_buffer(
 3611|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    272|                                        prefix_result.parsed_base));
 3615|       |
 3616|    272|            return ranges::next(
 3617|    272|                prefix_result.iterator,
 3618|    272|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.1k|        }
 3620|       |
 3621|  2.84k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.84k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.84k|#endif
 3627|       |
 3628|  2.84k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 106]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    106|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    106|                parse_integer_digits_with_thsep(
 3630|    106|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    106|                    prefix_result.parsed_base, locale_options));
 3632|    106|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    106|            parse_digits_result;
 3634|       |
 3635|    106|        auto nothsep_source_view =
 3636|    106|            std::basic_string_view<CharT>{nothsep_source};
 3637|    106|        SCN_TRY(
  ------------------
  |  | 3940|    106|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    106|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    106|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    106|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 28, False: 78]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     28|    }                                                  \
  |  |  |  | 3939|    106|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|     78|            nothsep_source_it,
 3639|     78|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|     78|                                prefix_result.parsed_base));
 3641|       |
 3642|     78|        return ranges::next(
 3643|     78|            prefix_result.iterator,
 3644|     78|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|     78|                ranges::ssize(thsep_indices));
 3646|    106|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.4k|            auto rd = make_reader<T, char_type>();
 6225|  17.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.4k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.4k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.4k|                return impl(rd, range, value);
 6230|  17.4k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.4k|    {
 6150|  17.4k|        const bool need_skipped_width =
 6151|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.4k]
  |  Branch (6151:33): [True: 0, False: 17.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.4k|        auto it = rng.begin();
 6155|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.4k|        else {
 6164|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 284, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    284|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.1k|        }
 6167|  17.1k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.1k|        std::ptrdiff_t value_width = 0;
 6171|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.1k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.1k|        else {
 6187|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 478]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    478|                                             specs, value, loc));
 6189|       |
 6190|    478|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 478]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    478|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    478|        std::ptrdiff_t postfix_width = 0;
 6199|    478|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 344, False: 134]
  ------------------
 6200|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    344|                                 value_width));
 6204|    344|            std::tie(it, postfix_width) = postfix_result;
 6205|    344|        }
 6206|       |
 6207|    478|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    478|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 478]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    478|            specs, prefix_width, value_width, postfix_width));
 6209|    478|        return it;
 6210|    478|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.5k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.5k|            auto rd = make_reader<T, char_type>();
 6225|  17.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.5k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.5k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.5k|                return impl(rd, range, value);
 6230|  17.5k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.5k|    {
 6150|  17.5k|        const bool need_skipped_width =
 6151|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.5k]
  |  Branch (6151:33): [True: 0, False: 17.5k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.5k|        auto it = rng.begin();
 6155|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.5k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.5k|        else {
 6164|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 284, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    284|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.2k|        }
 6167|  17.2k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.2k|        std::ptrdiff_t value_width = 0;
 6171|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.2k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.2k|        else {
 6187|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    562|                                             specs, value, loc));
 6189|       |
 6190|    562|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 562]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    562|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    562|        std::ptrdiff_t postfix_width = 0;
 6199|    562|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 428, False: 134]
  ------------------
 6200|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    428|                                 value_width));
 6204|    428|            std::tie(it, postfix_width) = postfix_result;
 6205|    428|        }
 6206|       |
 6207|    562|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    562|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    562|            specs, prefix_width, value_width, postfix_width));
 6209|    562|        return it;
 6210|    562|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.2k|    {
 3579|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.2k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 244, False: 16.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    244|            else {
 3590|    244|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 244]
  ------------------
 3591|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    244|            }
 3597|    244|        }
 3598|       |
 3599|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 50, False: 17.1k]
  ------------------
 3600|     50|            value = T{0};
 3601|     50|            return std::next(prefix_result.iterator);
 3602|     50|        }
 3603|       |
 3604|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.2k, False: 2.88k]
  |  |  ------------------
  ------------------
 3605|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    402|                    parse_integer_digits_without_thsep(
 3607|    402|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    402|                        prefix_result.parsed_base));
 3609|       |
 3610|    402|            auto buf = make_contiguous_buffer(
 3611|    402|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    402|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    392|                                        prefix_result.parsed_base));
 3615|       |
 3616|    392|            return ranges::next(
 3617|    392|                prefix_result.iterator,
 3618|    392|                ranges::distance(buf.view().begin(), result_it));
 3619|    402|        }
 3620|       |
 3621|  2.88k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.88k|#endif
 3627|       |
 3628|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.76k, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.76k|    }                                                  \
  |  |  |  | 3939|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    120|                parse_integer_digits_with_thsep(
 3630|    120|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    120|                    prefix_result.parsed_base, locale_options));
 3632|    120|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    120|            parse_digits_result;
 3634|       |
 3635|    120|        auto nothsep_source_view =
 3636|    120|            std::basic_string_view<CharT>{nothsep_source};
 3637|    120|        SCN_TRY(
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    120|            nothsep_source_it,
 3639|    120|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    120|                                prefix_result.parsed_base));
 3641|       |
 3642|    120|        return ranges::next(
 3643|    120|            prefix_result.iterator,
 3644|    120|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    120|                ranges::ssize(thsep_indices));
 3646|    120|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.2k|    {
 3579|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.2k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 244, False: 16.9k]
  ------------------
 3583|       |            if constexpr (!std::is_signed_v<T>) {
 3584|       |                return detail::unexpected_scan_error(
 3585|       |                    scan_error::invalid_scanned_value,
 3586|       |                    "Unexpected '-' sign when parsing an "
 3587|       |                    "unsigned value");
 3588|       |            }
 3589|    244|            else {
 3590|    244|                if (specs.type ==
  ------------------
  |  Branch (3590:21): [True: 0, False: 244]
  ------------------
 3591|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3592|      0|                    return detail::unexpected_scan_error(
 3593|      0|                        scan_error::invalid_scanned_value,
 3594|      0|                        "'u'-option disallows negative values");
 3595|      0|                }
 3596|    244|            }
 3597|    244|        }
 3598|       |
 3599|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 50, False: 17.1k]
  ------------------
 3600|     50|            value = T{0};
 3601|     50|            return std::next(prefix_result.iterator);
 3602|     50|        }
 3603|       |
 3604|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.2k, False: 2.88k]
  |  |  ------------------
  ------------------
 3605|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 30, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     30|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.2k|                    parse_integer_digits_without_thsep(
 3607|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.2k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.2k|            auto buf = make_contiguous_buffer(
 3611|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    392|                                        prefix_result.parsed_base));
 3615|       |
 3616|    392|            return ranges::next(
 3617|    392|                prefix_result.iterator,
 3618|    392|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.2k|        }
 3620|       |
 3621|  2.88k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3626|  2.88k|#endif
 3627|       |
 3628|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.76k, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.76k|    }                                                  \
  |  |  |  | 3939|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    120|                parse_integer_digits_with_thsep(
 3630|    120|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    120|                    prefix_result.parsed_base, locale_options));
 3632|    120|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    120|            parse_digits_result;
 3634|       |
 3635|    120|        auto nothsep_source_view =
 3636|    120|            std::basic_string_view<CharT>{nothsep_source};
 3637|    120|        SCN_TRY(
  ------------------
  |  | 3940|    120|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    120|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    120|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 120]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    120|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    120|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    120|            nothsep_source_it,
 3639|    120|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    120|                                prefix_result.parsed_base));
 3641|       |
 3642|    120|        return ranges::next(
 3643|    120|            prefix_result.iterator,
 3644|    120|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    120|                ranges::ssize(thsep_indices));
 3646|    120|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.2k|            auto rd = make_reader<T, char_type>();
 6225|  17.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.2k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.2k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.2k|                return impl(rd, range, value);
 6230|  17.2k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.2k|    {
 6150|  17.2k|        const bool need_skipped_width =
 6151|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.2k]
  |  Branch (6151:33): [True: 0, False: 17.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.2k|        auto it = rng.begin();
 6155|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.2k|        else {
 6164|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    338|                                             specs, value, loc));
 6189|       |
 6190|    338|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 338]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    338|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    338|        std::ptrdiff_t postfix_width = 0;
 6199|    338|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 242, False: 96]
  ------------------
 6200|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    242|                                 value_width));
 6204|    242|            std::tie(it, postfix_width) = postfix_result;
 6205|    242|        }
 6206|       |
 6207|    338|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    338|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    338|            specs, prefix_width, value_width, postfix_width));
 6209|    338|        return it;
 6210|    338|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.8k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.9k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 3.01k]
  |  |  ------------------
  ------------------
 3605|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.6k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.6k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    306|                    parse_integer_digits_without_thsep(
 3607|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    306|                        prefix_result.parsed_base));
 3609|       |
 3610|    306|            auto buf = make_contiguous_buffer(
 3611|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 70, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     70|    }                                                  \
  |  |  |  | 3939|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    236|                                        prefix_result.parsed_base));
 3615|       |
 3616|    236|            return ranges::next(
 3617|    236|                prefix_result.iterator,
 3618|    236|                ranges::distance(buf.view().begin(), result_it));
 3619|    306|        }
 3620|       |
 3621|  3.01k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.01k|#endif
 3627|       |
 3628|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.71k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.71k|    }                                                  \
  |  |  |  | 3939|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    296|                parse_integer_digits_with_thsep(
 3630|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    296|                    prefix_result.parsed_base, locale_options));
 3632|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    296|            parse_digits_result;
 3634|       |
 3635|    296|        auto nothsep_source_view =
 3636|    296|            std::basic_string_view<CharT>{nothsep_source};
 3637|    296|        SCN_TRY(
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    274|            nothsep_source_it,
 3639|    274|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    274|                                prefix_result.parsed_base));
 3641|       |
 3642|    274|        return ranges::next(
 3643|    274|            prefix_result.iterator,
 3644|    274|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    274|                ranges::ssize(thsep_indices));
 3646|    296|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.8k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 16.9k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  16.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 13.9k, False: 3.01k]
  |  |  ------------------
  ------------------
 3605|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 13.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  13.9k|                    parse_integer_digits_without_thsep(
 3607|  13.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  13.9k|                        prefix_result.parsed_base));
 3609|       |
 3610|  13.9k|            auto buf = make_contiguous_buffer(
 3611|  13.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  13.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    236|                                        prefix_result.parsed_base));
 3615|       |
 3616|    236|            return ranges::next(
 3617|    236|                prefix_result.iterator,
 3618|    236|                ranges::distance(buf.view().begin(), result_it));
 3619|  13.9k|        }
 3620|       |
 3621|  3.01k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.01k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.01k|#endif
 3627|       |
 3628|  3.01k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.71k, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.71k|    }                                                  \
  |  |  |  | 3939|  3.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    296|                parse_integer_digits_with_thsep(
 3630|    296|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    296|                    prefix_result.parsed_base, locale_options));
 3632|    296|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    296|            parse_digits_result;
 3634|       |
 3635|    296|        auto nothsep_source_view =
 3636|    296|            std::basic_string_view<CharT>{nothsep_source};
 3637|    296|        SCN_TRY(
  ------------------
  |  | 3940|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 22, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     22|    }                                                  \
  |  |  |  | 3939|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    274|            nothsep_source_it,
 3639|    274|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    274|                                prefix_result.parsed_base));
 3641|       |
 3642|    274|        return ranges::next(
 3643|    274|            prefix_result.iterator,
 3644|    274|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    274|                ranges::ssize(thsep_indices));
 3646|    296|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.3k|            auto rd = make_reader<T, char_type>();
 6225|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.3k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.3k|                return impl(rd, range, value);
 6230|  17.3k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 384]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    384|                                             specs, value, loc));
 6189|       |
 6190|    384|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 384]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    384|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    384|        std::ptrdiff_t postfix_width = 0;
 6199|    384|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 288, False: 96]
  ------------------
 6200|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    288|                                 value_width));
 6204|    288|            std::tie(it, postfix_width) = postfix_result;
 6205|    288|        }
 6206|       |
 6207|    384|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    384|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 384]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    384|            specs, prefix_width, value_width, postfix_width));
 6209|    384|        return it;
 6210|    384|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.8k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 17.0k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 3.02k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    312|                    parse_integer_digits_without_thsep(
 3607|    312|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    312|                        prefix_result.parsed_base));
 3609|       |
 3610|    312|            auto buf = make_contiguous_buffer(
 3611|    312|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    312|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    270|                                        prefix_result.parsed_base));
 3615|       |
 3616|    270|            return ranges::next(
 3617|    270|                prefix_result.iterator,
 3618|    270|                ranges::distance(buf.view().begin(), result_it));
 3619|    312|        }
 3620|       |
 3621|  3.02k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.02k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.02k|#endif
 3627|       |
 3628|  3.02k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.72k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.72k|    }                                                  \
  |  |  |  | 3939|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    298|                parse_integer_digits_with_thsep(
 3630|    298|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    298|                    prefix_result.parsed_base, locale_options));
 3632|    298|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    298|            parse_digits_result;
 3634|       |
 3635|    298|        auto nothsep_source_view =
 3636|    298|            std::basic_string_view<CharT>{nothsep_source};
 3637|    298|        SCN_TRY(
  ------------------
  |  | 3940|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    286|            nothsep_source_it,
 3639|    286|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    286|                                prefix_result.parsed_base));
 3641|       |
 3642|    286|        return ranges::next(
 3643|    286|            prefix_result.iterator,
 3644|    286|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    286|                ranges::ssize(thsep_indices));
 3646|    298|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.0k|    {
 3579|  17.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.0k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 212, False: 16.8k]
  ------------------
 3583|    212|            if constexpr (!std::is_signed_v<T>) {
 3584|    212|                return detail::unexpected_scan_error(
 3585|    212|                    scan_error::invalid_scanned_value,
 3586|    212|                    "Unexpected '-' sign when parsing an "
 3587|    212|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    212|        }
 3598|       |
 3599|  17.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 17.0k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  17.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 3.02k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.0k|                    parse_integer_digits_without_thsep(
 3607|  14.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.0k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.0k|            auto buf = make_contiguous_buffer(
 3611|  14.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    270|                                        prefix_result.parsed_base));
 3615|       |
 3616|    270|            return ranges::next(
 3617|    270|                prefix_result.iterator,
 3618|    270|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.0k|        }
 3620|       |
 3621|  3.02k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.02k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.02k|#endif
 3627|       |
 3628|  3.02k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.72k, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.72k|    }                                                  \
  |  |  |  | 3939|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    298|                parse_integer_digits_with_thsep(
 3630|    298|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    298|                    prefix_result.parsed_base, locale_options));
 3632|    298|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    298|            parse_digits_result;
 3634|       |
 3635|    298|        auto nothsep_source_view =
 3636|    298|            std::basic_string_view<CharT>{nothsep_source};
 3637|    298|        SCN_TRY(
  ------------------
  |  | 3940|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    286|            nothsep_source_it,
 3639|    286|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    286|                                prefix_result.parsed_base));
 3641|       |
 3642|    286|        return ranges::next(
 3643|    286|            prefix_result.iterator,
 3644|    286|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    286|                ranges::ssize(thsep_indices));
 3646|    298|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|  17.3k|            auto rd = make_reader<T, char_type>();
 6225|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|  17.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 17.3k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|  17.3k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|  17.3k|                return impl(rd, range, value);
 6230|  17.3k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.1k|        }
 6167|  17.1k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.1k|        std::ptrdiff_t value_width = 0;
 6171|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.1k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.1k|        else {
 6187|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 450]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    450|                                             specs, value, loc));
 6189|       |
 6190|    450|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 450]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    450|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    450|        std::ptrdiff_t postfix_width = 0;
 6199|    450|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 354, False: 96]
  ------------------
 6200|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    354|                                 value_width));
 6204|    354|            std::tie(it, postfix_width) = postfix_result;
 6205|    354|        }
 6206|       |
 6207|    450|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    450|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 450]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    450|            specs, prefix_width, value_width, postfix_width));
 6209|    450|        return it;
 6210|    450|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3578|  17.1k|    {
 3579|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.1k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.9k]
  ------------------
 3583|    228|            if constexpr (!std::is_signed_v<T>) {
 3584|    228|                return detail::unexpected_scan_error(
 3585|    228|                    scan_error::invalid_scanned_value,
 3586|    228|                    "Unexpected '-' sign when parsing an "
 3587|    228|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    228|        }
 3598|       |
 3599|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 17.1k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 3.05k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|    324|                    parse_integer_digits_without_thsep(
 3607|    324|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|    324|                        prefix_result.parsed_base));
 3609|       |
 3610|    324|            auto buf = make_contiguous_buffer(
 3611|    324|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|    324|            SCN_TRY(result_it,
  ------------------
  |  | 3940|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      4|    }                                                  \
  |  |  |  | 3939|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    320|                                        prefix_result.parsed_base));
 3615|       |
 3616|    320|            return ranges::next(
 3617|    320|                prefix_result.iterator,
 3618|    320|                ranges::distance(buf.view().begin(), result_it));
 3619|    324|        }
 3620|       |
 3621|  3.05k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.05k|#endif
 3627|       |
 3628|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    318|                parse_integer_digits_with_thsep(
 3630|    318|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    318|                    prefix_result.parsed_base, locale_options));
 3632|    318|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    318|            parse_digits_result;
 3634|       |
 3635|    318|        auto nothsep_source_view =
 3636|    318|            std::basic_string_view<CharT>{nothsep_source};
 3637|    318|        SCN_TRY(
  ------------------
  |  | 3940|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    318|            nothsep_source_it,
 3639|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    318|                                prefix_result.parsed_base));
 3641|       |
 3642|    318|        return ranges::next(
 3643|    318|            prefix_result.iterator,
 3644|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    318|                ranges::ssize(thsep_indices));
 3646|    318|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3578|  17.1k|    {
 3579|  17.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3940|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3580|  17.1k|                                   .transform_error(make_eof_scan_error));
 3581|       |
 3582|  17.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3582:13): [True: 228, False: 16.9k]
  ------------------
 3583|    228|            if constexpr (!std::is_signed_v<T>) {
 3584|    228|                return detail::unexpected_scan_error(
 3585|    228|                    scan_error::invalid_scanned_value,
 3586|    228|                    "Unexpected '-' sign when parsing an "
 3587|    228|                    "unsigned value");
 3588|       |            }
 3589|       |            else {
 3590|       |                if (specs.type ==
 3591|       |                    detail::presentation_type::int_unsigned_decimal) {
 3592|       |                    return detail::unexpected_scan_error(
 3593|       |                        scan_error::invalid_scanned_value,
 3594|       |                        "'u'-option disallows negative values");
 3595|       |                }
 3596|       |            }
 3597|    228|        }
 3598|       |
 3599|  17.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3599:13): [True: 40, False: 17.1k]
  ------------------
 3600|     40|            value = T{0};
 3601|     40|            return std::next(prefix_result.iterator);
 3602|     40|        }
 3603|       |
 3604|  17.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  864|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 14.0k, False: 3.05k]
  |  |  ------------------
  ------------------
 3605|  14.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 10, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     10|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3606|  14.0k|                    parse_integer_digits_without_thsep(
 3607|  14.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3608|  14.0k|                        prefix_result.parsed_base));
 3609|       |
 3610|  14.0k|            auto buf = make_contiguous_buffer(
 3611|  14.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3612|  14.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.7k, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.7k|    }                                                  \
  |  |  |  | 3939|  14.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3613|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3614|    320|                                        prefix_result.parsed_base));
 3615|       |
 3616|    320|            return ranges::next(
 3617|    320|                prefix_result.iterator,
 3618|    320|                ranges::distance(buf.view().begin(), result_it));
 3619|  14.0k|        }
 3620|       |
 3621|  3.05k|        auto locale_options =
 3622|       |#if SCN_DISABLE_LOCALE
 3623|       |            localized_number_formatting_options<CharT>{};
 3624|       |#else
 3625|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3626|  3.05k|#endif
 3627|       |
 3628|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3940|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.73k, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.73k|    }                                                  \
  |  |  |  | 3939|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3629|    318|                parse_integer_digits_with_thsep(
 3630|    318|                    ranges::subrange{prefix_result.iterator, range.end()},
 3631|    318|                    prefix_result.parsed_base, locale_options));
 3632|    318|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3633|    318|            parse_digits_result;
 3634|       |
 3635|    318|        auto nothsep_source_view =
 3636|    318|            std::basic_string_view<CharT>{nothsep_source};
 3637|    318|        SCN_TRY(
  ------------------
  |  | 3940|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3638|    318|            nothsep_source_it,
 3639|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3640|    318|                                prefix_result.parsed_base));
 3641|       |
 3642|    318|        return ranges::next(
 3643|    318|            prefix_result.iterator,
 3644|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3645|    318|                ranges::ssize(thsep_indices));
 3646|    318|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   130k|{
 2160|   130k|    auto it = range.begin();
 2161|   132k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 130k, False: 1.79k]
  ------------------
 2162|   130k|        const auto val =
 2163|   130k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   130k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 2165|   130k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   130k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   130k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 128k, False: 2.41k]
  ------------------
 2168|   128k|                return it;
 2169|   128k|            }
 2170|   130k|        }
 2171|  2.41k|        it = val.iterator;
 2172|  2.41k|    }
 2173|       |
 2174|  1.79k|    return it;
 2175|   130k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   130k|{
 1998|   130k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   130k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   130k|    auto it = range.begin();
 2002|   130k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   130k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   130k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 130k, False: 0]
  ------------------
 2011|   130k|        ++it;
 2012|   130k|        return {it, string_type(1, *range.begin())};
 2013|   130k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   130k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   130k|    {
 1989|   130k|        return !codepoint.empty();
 1990|   130k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   130k|{
 2181|   130k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   130k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   130k|{
 3055|   130k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 130k, False: 0]
  ------------------
 3056|   130k|        auto it = read_while_classic_space(range);
 3057|   130k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   130k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.79k, False: 128k]
  |  |  ------------------
  ------------------
 3059|  1.79k|            return unexpected(e);
 3060|  1.79k|        }
 3061|       |
 3062|   128k|        return it;
 3063|   130k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   130k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   130k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   130k|    else {
 2225|   130k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   130k|            return detail::is_cp_space(cp);
 2238|   130k|        });
 2239|   130k|    }
 2240|   130k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   130k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   130k|            return detail::is_cp_space(cp);
 2238|   130k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5899|  16.1k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  16.1k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  16.1k|            auto rd = make_reader<T, char_type>();
 5905|  16.1k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  16.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  16.1k|    {
 5892|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 399, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    399|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    399|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    399|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    399|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    399|    }                                                  \
  |  |  |  | 3939|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  15.7k|                        .transform_error(make_eof_scan_error));
 5894|  15.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  16.1k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  97.0k|{
 5824|  97.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  97.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.89k, False: 95.1k]
  |  |  ------------------
  ------------------
 5825|  1.89k|        return unexpected(e);
 5826|  1.89k|    }
 5827|       |
 5828|  95.1k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 95.1k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  95.1k|    return skip_classic_whitespace(range);
 5833|  95.1k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  15.7k|    {
 3568|  15.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  15.7k|        return read_default_with_base(range, value, 10);
 3570|  15.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|  18.6k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  18.6k|            auto rd = make_reader<T, char_type>();
 5905|  18.6k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  18.6k|    {
 5892|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 516, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    516|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    516|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    516|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    516|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    516|    }                                                  \
  |  |  |  | 3939|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  18.1k|                        .transform_error(make_eof_scan_error));
 5894|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  18.1k|    {
 3568|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  18.1k|        return read_default_with_base(range, value, 10);
 3570|  18.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5899|  18.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  18.9k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  18.9k|            auto rd = make_reader<T, char_type>();
 5905|  18.9k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  18.9k|    {
 5892|  18.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 564, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    564|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    564|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    564|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    564|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    564|    }                                                  \
  |  |  |  | 3939|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  18.4k|                        .transform_error(make_eof_scan_error));
 5894|  18.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  18.4k|    {
 3568|  18.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  18.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  18.4k|        return read_default_with_base(range, value, 10);
 3570|  18.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5899|  13.4k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  13.4k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  13.4k|            auto rd = make_reader<T, char_type>();
 5905|  13.4k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  13.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  13.4k|    {
 5892|  13.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 279, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    279|    }                                                  \
  |  |  |  | 3939|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  13.2k|                        .transform_error(make_eof_scan_error));
 5894|  13.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  13.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  13.2k|    {
 3568|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  13.2k|        return read_default_with_base(range, value, 10);
 3570|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|  14.8k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  14.8k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  14.8k|            auto rd = make_reader<T, char_type>();
 5905|  14.8k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  14.8k|    {
 5892|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 345, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    345|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    345|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    345|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    345|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    345|    }                                                  \
  |  |  |  | 3939|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.4k|                        .transform_error(make_eof_scan_error));
 5894|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  14.4k|    {
 3568|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.4k|        return read_default_with_base(range, value, 10);
 3570|  14.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5899|  15.0k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  15.0k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  15.0k|            auto rd = make_reader<T, char_type>();
 5905|  15.0k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  15.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  15.0k|    {
 5892|  15.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  15.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 372, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    372|    }                                                  \
  |  |  |  | 3939|  15.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.6k|                        .transform_error(make_eof_scan_error));
 5894|  14.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  15.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  14.6k|    {
 3568|  14.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.6k|        return read_default_with_base(range, value, 10);
 3570|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  16.1k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  16.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  16.1k|            auto rd = make_reader<T, char_type>();
 5909|  16.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 16.1k, False: 0]
  ------------------
 5910|  16.1k|                return impl(rd, range, value);
 5911|  16.1k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  16.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  16.1k|    {
 5892|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 381, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    381|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    381|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    381|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    381|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    381|    }                                                  \
  |  |  |  | 3939|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  15.7k|                        .transform_error(make_eof_scan_error));
 5894|  15.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  16.1k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|  95.6k|{
 5824|  95.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  95.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.89k, False: 93.7k]
  |  |  ------------------
  ------------------
 5825|  1.89k|        return unexpected(e);
 5826|  1.89k|    }
 5827|       |
 5828|  93.7k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 93.7k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  93.7k|    return skip_classic_whitespace(range);
 5833|  93.7k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  15.7k|    {
 3568|  15.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  15.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  15.7k|        return read_default_with_base(range, value, 10);
 3570|  15.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  15.7k|    {
 3532|  15.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  15.7k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  15.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 15.7k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  30.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  30.3k|                parse_integer_digits_without_thsep(
 3551|  30.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  30.3k|                    prefix_result.parsed_base));
 3553|       |
 3554|  30.3k|        auto buf = make_contiguous_buffer(
 3555|  30.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  30.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 582, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    582|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  14.0k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  14.0k|        return ranges::next(prefix_result.iterator,
 3561|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  30.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  18.0k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  18.0k|            auto rd = make_reader<T, char_type>();
 5909|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 18.0k, False: 0]
  ------------------
 5910|  18.0k|                return impl(rd, range, value);
 5911|  18.0k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  18.0k|    {
 5892|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 489, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    489|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    489|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    489|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    489|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    489|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  17.5k|                        .transform_error(make_eof_scan_error));
 5894|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  17.5k|    {
 3568|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  17.5k|        return read_default_with_base(range, value, 10);
 3570|  17.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  17.5k|    {
 3532|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  17.5k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 17.5k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.33k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.33k|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  33.7k|                parse_integer_digits_without_thsep(
 3551|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  33.7k|                    prefix_result.parsed_base));
 3553|       |
 3554|  33.7k|        auto buf = make_contiguous_buffer(
 3555|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 291, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    291|    }                                                  \
  |  |  |  | 3939|  16.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  15.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  15.9k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  15.9k|        return ranges::next(prefix_result.iterator,
 3561|  15.9k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  33.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  18.3k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  18.3k|            auto rd = make_reader<T, char_type>();
 5909|  18.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 18.3k, False: 0]
  ------------------
 5910|  18.3k|                return impl(rd, range, value);
 5911|  18.3k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  18.3k|    {
 5892|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 534, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    534|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  17.8k|                        .transform_error(make_eof_scan_error));
 5894|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  17.8k|    {
 3568|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  17.8k|        return read_default_with_base(range, value, 10);
 3570|  17.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  17.8k|    {
 3532|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  17.8k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 17.8k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  34.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.41k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.41k|    }                                                  \
  |  |  |  | 3939|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  34.2k|                parse_integer_digits_without_thsep(
 3551|  34.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  34.2k|                    prefix_result.parsed_base));
 3553|       |
 3554|  34.2k|        auto buf = make_contiguous_buffer(
 3555|  34.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  34.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 174, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    174|    }                                                  \
  |  |  |  | 3939|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.2k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.2k|        return ranges::next(prefix_result.iterator,
 3561|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  34.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  13.4k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  13.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  13.4k|            auto rd = make_reader<T, char_type>();
 5909|  13.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 13.4k, False: 0]
  ------------------
 5910|  13.4k|                return impl(rd, range, value);
 5911|  13.4k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  13.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  13.4k|    {
 5892|  13.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 267, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    267|    }                                                  \
  |  |  |  | 3939|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  13.1k|                        .transform_error(make_eof_scan_error));
 5894|  13.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  13.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  13.1k|    {
 3568|  13.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  13.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  13.1k|        return read_default_with_base(range, value, 10);
 3570|  13.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  13.1k|    {
 3532|  13.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  13.1k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  13.1k|        if constexpr (!std::is_signed_v<T>) {
 3536|  13.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 777, False: 12.4k]
  ------------------
 3537|    777|                return detail::unexpected_scan_error(
 3538|    777|                    scan_error::invalid_scanned_value,
 3539|    777|                    "Unexpected '-' sign when parsing an "
 3540|    777|                    "unsigned value");
 3541|    777|            }
 3542|  13.1k|        }
 3543|       |
 3544|  13.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 13.1k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  25.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 786, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    786|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    786|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    786|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    786|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    786|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  25.6k|                parse_integer_digits_without_thsep(
 3551|  25.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  25.6k|                    prefix_result.parsed_base));
 3553|       |
 3554|  25.6k|        auto buf = make_contiguous_buffer(
 3555|  25.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  25.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 288, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    288|    }                                                  \
  |  |  |  | 3939|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  12.1k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  12.1k|        return ranges::next(prefix_result.iterator,
 3561|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  25.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  14.7k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  14.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  14.7k|            auto rd = make_reader<T, char_type>();
 5909|  14.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 14.7k, False: 0]
  ------------------
 5910|  14.7k|                return impl(rd, range, value);
 5911|  14.7k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  14.7k|    {
 5892|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 327, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    327|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    327|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    327|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    327|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    327|    }                                                  \
  |  |  |  | 3939|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.4k|                        .transform_error(make_eof_scan_error));
 5894|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  14.4k|    {
 3568|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.4k|        return read_default_with_base(range, value, 10);
 3570|  14.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  14.4k|    {
 3532|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.4k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 795, False: 13.6k]
  ------------------
 3537|    795|                return detail::unexpected_scan_error(
 3538|    795|                    scan_error::invalid_scanned_value,
 3539|    795|                    "Unexpected '-' sign when parsing an "
 3540|    795|                    "unsigned value");
 3541|    795|            }
 3542|  14.4k|        }
 3543|       |
 3544|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.4k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  28.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 840, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    840|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  28.0k|                parse_integer_digits_without_thsep(
 3551|  28.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  28.0k|                    prefix_result.parsed_base));
 3553|       |
 3554|  28.0k|        auto buf = make_contiguous_buffer(
 3555|  28.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  28.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 156, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    156|    }                                                  \
  |  |  |  | 3939|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.4k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.4k|        return ranges::next(prefix_result.iterator,
 3561|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  28.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|  14.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  14.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  14.9k|            auto rd = make_reader<T, char_type>();
 5909|  14.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 14.9k, False: 0]
  ------------------
 5910|  14.9k|                return impl(rd, range, value);
 5911|  14.9k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  14.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  14.9k|    {
 5892|  14.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 354, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    354|    }                                                  \
  |  |  |  | 3939|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  14.5k|                        .transform_error(make_eof_scan_error));
 5894|  14.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  14.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  14.5k|    {
 3568|  14.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  14.5k|        return read_default_with_base(range, value, 10);
 3570|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  14.5k|    {
 3532|  14.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.5k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.5k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 819, False: 13.7k]
  ------------------
 3537|    819|                return detail::unexpected_scan_error(
 3538|    819|                    scan_error::invalid_scanned_value,
 3539|    819|                    "Unexpected '-' sign when parsing an "
 3540|    819|                    "unsigned value");
 3541|    819|            }
 3542|  14.5k|        }
 3543|       |
 3544|  14.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.5k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  28.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 858, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    858|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    858|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    858|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    858|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    858|    }                                                  \
  |  |  |  | 3939|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  28.2k|                parse_integer_digits_without_thsep(
 3551|  28.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  28.2k|                    prefix_result.parsed_base));
 3553|       |
 3554|  28.2k|        auto buf = make_contiguous_buffer(
 3555|  28.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  28.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 87, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     87|    }                                                  \
  |  |  |  | 3939|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.6k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.6k|        return ranges::next(prefix_result.iterator,
 3561|  13.6k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  28.2k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|   361k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   361k|    static_cast<    \
  |  |  935|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   361k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   361k|          m_current(m_range.begin())
 2977|   361k|    {
 2978|   361k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|   621k|    {
 2987|   621k|        return m_range.end();
 2988|   621k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|   285k|    {
 3002|   285k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   285k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   285k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 285k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   285k|        }
 3008|   285k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   285k|    static_cast<    \
  |  |  935|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   285k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|   335k|    {
 2992|   335k|        return ranges::subrange{begin(), end()};
 2993|   335k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6214|  54.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  54.2k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  54.2k|            auto rd = make_reader<T, char_type>();
 6220|  54.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  54.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  54.2k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  54.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  54.2k|    {
 6150|  54.2k|        const bool need_skipped_width =
 6151|  54.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 54.2k]
  |  Branch (6151:33): [True: 0, False: 54.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  54.2k|        auto it = rng.begin();
 6155|  54.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  54.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 54.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  54.2k|        else {
 6164|  54.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.39k, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.39k|    }                                                  \
  |  |  |  | 3939|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  52.8k|            std::tie(it, prefix_width) = prefix_result;
 6166|  52.8k|        }
 6167|  52.8k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  52.8k|        std::ptrdiff_t value_width = 0;
 6171|  52.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 52.8k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  52.8k|        else {
 6187|  52.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.08k, False: 45.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.08k|    }                                                  \
  |  | 3939|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  45.7k|                                             specs, value, loc));
 6189|       |
 6190|  45.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 45.7k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  45.7k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  45.7k|        std::ptrdiff_t postfix_width = 0;
 6199|  45.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 44.6k, False: 1.05k]
  ------------------
 6200|  44.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  44.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  44.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  44.6k|                                 value_width));
 6204|  44.6k|            std::tie(it, postfix_width) = postfix_result;
 6205|  44.6k|        }
 6206|       |
 6207|  45.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  45.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 45.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  45.7k|            specs, prefix_width, value_width, postfix_width));
 6209|  45.7k|        return it;
 6210|  45.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   335k|    {
 6063|   335k|        const bool need_skipped_width =
 6064|   335k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 335k]
  |  Branch (6064:33): [True: 0, False: 335k]
  ------------------
 6065|   335k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   335k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 335k]
  ------------------
 6069|   335k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 335k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   335k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 335k, False: 0]
  |  Branch (6073:56): [True: 335k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   335k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 335k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   663k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 8.94k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  8.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  8.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  8.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  8.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  8.94k|    }                                                  \
  |  |  |  | 3939|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   663k|                            make_eof_scan_error));
 6084|       |
 6085|   663k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 327k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   327k|            return result_type{it, 0};
 6093|   663k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   335k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|   278k|    {
 6105|   278k|        const bool need_skipped_width =
 6106|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 278k]
  |  Branch (6106:33): [True: 0, False: 278k]
  ------------------
 6107|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   278k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 278k]
  ------------------
 6110|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 278k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   278k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 278k, False: 0]
  ------------------
 6119|   278k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 278k]
  ------------------
 6120|   278k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   278k|        return result_type{rng.begin(), 0};
 6144|   278k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  64.1k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  64.1k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  64.1k|            auto rd = make_reader<T, char_type>();
 6220|  64.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  64.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 64.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  64.1k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  64.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  64.1k|    {
 6150|  64.1k|        const bool need_skipped_width =
 6151|  64.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 64.1k]
  |  Branch (6151:33): [True: 0, False: 64.1k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  64.1k|        auto it = rng.begin();
 6155|  64.1k|        std::ptrdiff_t prefix_width = 0;
 6156|  64.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 64.1k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  64.1k|        else {
 6164|  64.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  64.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  64.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  64.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.83k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.83k|    }                                                  \
  |  |  |  | 3939|  64.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6166|  62.3k|        }
 6167|  62.3k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  62.3k|        std::ptrdiff_t value_width = 0;
 6171|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 62.3k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  62.3k|        else {
 6187|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.63k, False: 55.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.63k|    }                                                  \
  |  | 3939|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  55.7k|                                             specs, value, loc));
 6189|       |
 6190|  55.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 55.7k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  55.7k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  55.7k|        std::ptrdiff_t postfix_width = 0;
 6199|  55.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 54.3k, False: 1.39k]
  ------------------
 6200|  54.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  54.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  54.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  54.3k|                                 value_width));
 6204|  54.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  54.3k|        }
 6206|       |
 6207|  55.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  55.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  55.7k|            specs, prefix_width, value_width, postfix_width));
 6209|  55.7k|        return it;
 6210|  55.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6214|  65.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  65.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  65.3k|            auto rd = make_reader<T, char_type>();
 6220|  65.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  65.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 65.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  65.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  65.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  65.3k|    {
 6150|  65.3k|        const bool need_skipped_width =
 6151|  65.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 65.3k]
  |  Branch (6151:33): [True: 0, False: 65.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  65.3k|        auto it = rng.begin();
 6155|  65.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  65.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 65.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  65.3k|        else {
 6164|  65.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  65.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  65.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  65.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.03k, False: 63.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.03k|    }                                                  \
  |  |  |  | 3939|  65.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  63.3k|            std::tie(it, prefix_width) = prefix_result;
 6166|  63.3k|        }
 6167|  63.3k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  63.3k|        std::ptrdiff_t value_width = 0;
 6171|  63.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 63.3k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  63.3k|        else {
 6187|  63.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 6.43k, False: 56.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  6.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  6.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  6.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  6.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  6.43k|    }                                                  \
  |  | 3939|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  56.8k|                                             specs, value, loc));
 6189|       |
 6190|  56.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 56.8k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  56.8k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  56.8k|        std::ptrdiff_t postfix_width = 0;
 6199|  56.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 55.3k, False: 1.55k]
  ------------------
 6200|  55.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  55.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 55.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  55.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  55.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  55.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  55.3k|                                 value_width));
 6204|  55.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  55.3k|        }
 6206|       |
 6207|  56.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  56.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 56.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  56.8k|            specs, prefix_width, value_width, postfix_width));
 6209|  56.8k|        return it;
 6210|  56.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6214|  47.7k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  47.7k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  47.7k|            auto rd = make_reader<T, char_type>();
 6220|  47.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  47.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 47.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  47.7k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  47.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  47.7k|    {
 6150|  47.7k|        const bool need_skipped_width =
 6151|  47.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 47.7k]
  |  Branch (6151:33): [True: 0, False: 47.7k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  47.7k|        auto it = rng.begin();
 6155|  47.7k|        std::ptrdiff_t prefix_width = 0;
 6156|  47.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 47.7k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  47.7k|        else {
 6164|  47.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  47.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.03k, False: 46.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.03k|    }                                                  \
  |  |  |  | 3939|  47.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  46.7k|            std::tie(it, prefix_width) = prefix_result;
 6166|  46.7k|        }
 6167|  46.7k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  46.7k|        std::ptrdiff_t value_width = 0;
 6171|  46.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 46.7k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  46.7k|        else {
 6187|  46.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  46.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  46.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.43k, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.43k|    }                                                  \
  |  | 3939|  46.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  39.2k|                                             specs, value, loc));
 6189|       |
 6190|  39.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 39.2k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  39.2k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  39.2k|        std::ptrdiff_t postfix_width = 0;
 6199|  39.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 38.5k, False: 774]
  ------------------
 6200|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  38.5k|                                 value_width));
 6204|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6205|  38.5k|        }
 6206|       |
 6207|  39.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  39.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  39.2k|            specs, prefix_width, value_width, postfix_width));
 6209|  39.2k|        return it;
 6210|  39.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  51.9k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  51.9k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  51.9k|            auto rd = make_reader<T, char_type>();
 6220|  51.9k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  51.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 51.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  51.9k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  51.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  51.9k|    {
 6150|  51.9k|        const bool need_skipped_width =
 6151|  51.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 51.9k]
  |  Branch (6151:33): [True: 0, False: 51.9k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  51.9k|        auto it = rng.begin();
 6155|  51.9k|        std::ptrdiff_t prefix_width = 0;
 6156|  51.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 51.9k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  51.9k|        else {
 6164|  51.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  51.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  51.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  51.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.26k, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.26k|    }                                                  \
  |  |  |  | 3939|  51.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  50.6k|            std::tie(it, prefix_width) = prefix_result;
 6166|  50.6k|        }
 6167|  50.6k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  50.6k|        std::ptrdiff_t value_width = 0;
 6171|  50.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 50.6k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  50.6k|        else {
 6187|  50.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  50.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  50.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.20k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.20k|    }                                                  \
  |  | 3939|  50.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  43.4k|                                             specs, value, loc));
 6189|       |
 6190|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 43.4k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  43.4k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6199|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 42.5k, False: 946]
  ------------------
 6200|  42.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  42.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  42.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  42.5k|                                 value_width));
 6204|  42.5k|            std::tie(it, postfix_width) = postfix_result;
 6205|  42.5k|        }
 6206|       |
 6207|  43.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  43.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  43.4k|            specs, prefix_width, value_width, postfix_width));
 6209|  43.4k|        return it;
 6210|  43.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6214|  52.5k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  52.5k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  52.5k|            auto rd = make_reader<T, char_type>();
 6220|  52.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  52.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 52.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  52.5k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  52.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  52.5k|    {
 6150|  52.5k|        const bool need_skipped_width =
 6151|  52.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 52.5k]
  |  Branch (6151:33): [True: 0, False: 52.5k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  52.5k|        auto it = rng.begin();
 6155|  52.5k|        std::ptrdiff_t prefix_width = 0;
 6156|  52.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 52.5k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  52.5k|        else {
 6164|  52.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.37k, False: 51.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.37k|    }                                                  \
  |  |  |  | 3939|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  51.1k|            std::tie(it, prefix_width) = prefix_result;
 6166|  51.1k|        }
 6167|  51.1k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  51.1k|        std::ptrdiff_t value_width = 0;
 6171|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 51.1k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  51.1k|        else {
 6187|  51.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 7.10k, False: 44.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  7.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  7.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  7.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  7.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  7.10k|    }                                                  \
  |  | 3939|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  44.0k|                                             specs, value, loc));
 6189|       |
 6190|  44.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 44.0k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  44.0k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  44.0k|        std::ptrdiff_t postfix_width = 0;
 6199|  44.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 43.0k, False: 1.05k]
  ------------------
 6200|  43.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  43.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  43.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  43.0k|                                 value_width));
 6204|  43.0k|            std::tie(it, postfix_width) = postfix_result;
 6205|  43.0k|        }
 6206|       |
 6207|  44.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  44.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 44.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  44.0k|            specs, prefix_width, value_width, postfix_width));
 6209|  44.0k|        return it;
 6210|  44.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5899|  4.34k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.34k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.34k|            auto rd = make_reader<T, char_type>();
 5905|  4.34k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.34k|    {
 5892|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.27k|                        .transform_error(make_eof_scan_error));
 5894|  4.27k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.34k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|  26.1k|{
 5824|  26.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 159, False: 25.9k]
  |  |  ------------------
  ------------------
 5825|    159|        return unexpected(e);
 5826|    159|    }
 5827|       |
 5828|  25.9k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 25.9k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  25.9k|    return skip_classic_whitespace(range);
 5833|  25.9k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.27k|    {
 3568|  4.27k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.27k|        return read_default_with_base(range, value, 10);
 3570|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.27k|    {
 3532|  4.27k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.27k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.27k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.27k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.54k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.54k|                parse_integer_digits_without_thsep(
 3551|  8.54k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.54k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.54k|        auto buf = make_contiguous_buffer(
 3555|  8.54k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.54k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.16k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.16k|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    108|                                    prefix_result.parsed_base));
 3559|       |
 3560|    108|        return ranges::next(prefix_result.iterator,
 3561|    108|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.54k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5899|  4.37k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.37k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.37k|            auto rd = make_reader<T, char_type>();
 5905|  4.37k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.37k|    {
 5892|  4.37k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.30k|                        .transform_error(make_eof_scan_error));
 5894|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.37k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.30k|    {
 3568|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.30k|        return read_default_with_base(range, value, 10);
 3570|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.30k|    {
 3532|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.30k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.30k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.60k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.29k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.60k|                parse_integer_digits_without_thsep(
 3551|  8.60k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.60k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.60k|        auto buf = make_contiguous_buffer(
 3555|  8.60k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.60k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.15k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.15k|    }                                                  \
  |  |  |  | 3939|  4.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    138|                                    prefix_result.parsed_base));
 3559|       |
 3560|    138|        return ranges::next(prefix_result.iterator,
 3561|    138|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.60k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5899|  4.40k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.40k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.40k|            auto rd = make_reader<T, char_type>();
 5905|  4.40k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.40k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.40k|    {
 5892|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.33k|                        .transform_error(make_eof_scan_error));
 5894|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.40k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.33k|    {
 3568|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.33k|        return read_default_with_base(range, value, 10);
 3570|  4.33k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.33k|    {
 3532|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.33k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.33k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.66k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      9|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.66k|                parse_integer_digits_without_thsep(
 3551|  8.66k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.66k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.66k|        auto buf = make_contiguous_buffer(
 3555|  8.66k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.66k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.15k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.15k|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    171|                                    prefix_result.parsed_base));
 3559|       |
 3560|    171|        return ranges::next(prefix_result.iterator,
 3561|    171|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.66k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5899|  4.32k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.32k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.32k|            auto rd = make_reader<T, char_type>();
 5905|  4.32k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.32k|    {
 5892|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.26k|                        .transform_error(make_eof_scan_error));
 5894|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.32k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.26k|    {
 3568|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.26k|        return read_default_with_base(range, value, 10);
 3570|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.26k|    {
 3532|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.26k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.21k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.26k|        }
 3543|       |
 3544|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.26k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.52k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.52k|                parse_integer_digits_without_thsep(
 3551|  8.52k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.52k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.52k|        auto buf = make_contiguous_buffer(
 3555|  8.52k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.52k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.12k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.12k|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    141|                                    prefix_result.parsed_base));
 3559|       |
 3560|    141|        return ranges::next(prefix_result.iterator,
 3561|    141|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.52k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5899|  4.34k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.34k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.34k|            auto rd = make_reader<T, char_type>();
 5905|  4.34k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.34k|    {
 5892|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.28k|                        .transform_error(make_eof_scan_error));
 5894|  4.28k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.34k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.28k|    {
 3568|  4.28k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.28k|        return read_default_with_base(range, value, 10);
 3570|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.28k|    {
 3532|  4.28k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.28k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.28k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.28k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.23k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.28k|        }
 3543|       |
 3544|  4.28k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.28k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.56k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.56k|                parse_integer_digits_without_thsep(
 3551|  8.56k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.56k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.56k|        auto buf = make_contiguous_buffer(
 3555|  8.56k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.56k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.12k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.12k|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    159|                                    prefix_result.parsed_base));
 3559|       |
 3560|    159|        return ranges::next(prefix_result.iterator,
 3561|    159|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.56k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5899|  4.36k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  4.36k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  4.36k|            auto rd = make_reader<T, char_type>();
 5905|  4.36k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.36k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  4.36k|    {
 5892|  4.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.30k|                        .transform_error(make_eof_scan_error));
 5894|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.36k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3567|  4.30k|    {
 3568|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.30k|        return read_default_with_base(range, value, 10);
 3570|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  4.30k|    {
 3532|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.30k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.30k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.30k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 60, False: 4.24k]
  ------------------
 3537|     60|                return detail::unexpected_scan_error(
 3538|     60|                    scan_error::invalid_scanned_value,
 3539|     60|                    "Unexpected '-' sign when parsing an "
 3540|     60|                    "unsigned value");
 3541|     60|            }
 3542|  4.30k|        }
 3543|       |
 3544|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.30k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  8.61k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      3|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  8.61k|                parse_integer_digits_without_thsep(
 3551|  8.61k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  8.61k|                    prefix_result.parsed_base));
 3553|       |
 3554|  8.61k|        auto buf = make_contiguous_buffer(
 3555|  8.61k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  8.61k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.11k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    189|                                    prefix_result.parsed_base));
 3559|       |
 3560|    189|        return ranges::next(prefix_result.iterator,
 3561|    189|                            ranges::distance(buf.view().begin(), result_it));
 3562|  8.61k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|   155k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   155k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   155k|          m_current(m_range.begin())
 2977|   155k|    {
 2978|   155k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|   106k|    {
 2987|   106k|        return m_range.end();
 2988|   106k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|  2.60k|    {
 3002|  2.60k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  2.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|  2.60k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|  2.60k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 2.60k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|  2.60k|        }
 3008|  2.60k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  2.60k|    static_cast<    \
  |  |  935|  2.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|  2.60k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|   104k|    {
 2992|   104k|        return ranges::subrange{begin(), end()};
 2993|   104k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.3k|            auto rd = make_reader<T, char_type>();
 6220|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 272, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    272|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    272|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    392|                                             specs, value, loc));
 6189|       |
 6190|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 392]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    392|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    392|        std::ptrdiff_t postfix_width = 0;
 6199|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 270, False: 122]
  ------------------
 6200|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    270|                                 value_width));
 6204|    270|            std::tie(it, postfix_width) = postfix_result;
 6205|    270|        }
 6206|       |
 6207|    392|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    392|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    392|            specs, prefix_width, value_width, postfix_width));
 6209|    392|        return it;
 6210|    392|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   104k|    {
 6063|   104k|        const bool need_skipped_width =
 6064|   104k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 104k]
  |  Branch (6064:33): [True: 0, False: 104k]
  ------------------
 6065|   104k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   104k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 104k]
  ------------------
 6069|   104k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 104k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   104k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 104k, False: 0]
  |  Branch (6073:56): [True: 104k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   104k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 104k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   206k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.57k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.57k|    }                                                  \
  |  |  |  | 3939|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   206k|                            make_eof_scan_error));
 6084|       |
 6085|   206k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 102k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   102k|            return result_type{it, 0};
 6093|   206k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   104k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|  1.92k|    {
 6105|  1.92k|        const bool need_skipped_width =
 6106|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 1.92k]
  |  Branch (6106:33): [True: 0, False: 1.92k]
  ------------------
 6107|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 1.92k]
  ------------------
 6110|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 1.92k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 1.92k, False: 0]
  ------------------
 6119|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.92k]
  ------------------
 6120|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|  1.92k|        return result_type{rng.begin(), 0};
 6144|  1.92k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6214|  17.4k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.4k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.4k|            auto rd = make_reader<T, char_type>();
 6220|  17.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.4k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.4k|    {
 6150|  17.4k|        const bool need_skipped_width =
 6151|  17.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.4k]
  |  Branch (6151:33): [True: 0, False: 17.4k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.4k|        auto it = rng.begin();
 6155|  17.4k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.4k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.4k|        else {
 6164|  17.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 284, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    284|    }                                                  \
  |  |  |  | 3939|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.1k|        }
 6167|  17.1k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.1k|        std::ptrdiff_t value_width = 0;
 6171|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.1k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.1k|        else {
 6187|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 478]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    478|                                             specs, value, loc));
 6189|       |
 6190|    478|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 478]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    478|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    478|        std::ptrdiff_t postfix_width = 0;
 6199|    478|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 344, False: 134]
  ------------------
 6200|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    344|                                 value_width));
 6204|    344|            std::tie(it, postfix_width) = postfix_result;
 6205|    344|        }
 6206|       |
 6207|    478|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    478|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    478|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 478]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    478|            specs, prefix_width, value_width, postfix_width));
 6209|    478|        return it;
 6210|    478|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6214|  17.5k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.5k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.5k|            auto rd = make_reader<T, char_type>();
 6220|  17.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.5k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.5k|    {
 6150|  17.5k|        const bool need_skipped_width =
 6151|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.5k]
  |  Branch (6151:33): [True: 0, False: 17.5k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.5k|        auto it = rng.begin();
 6155|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.5k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.5k|        else {
 6164|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 284, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    284|    }                                                  \
  |  |  |  | 3939|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.2k|        }
 6167|  17.2k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.2k|        std::ptrdiff_t value_width = 0;
 6171|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.2k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.2k|        else {
 6187|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    562|                                             specs, value, loc));
 6189|       |
 6190|    562|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 562]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    562|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    562|        std::ptrdiff_t postfix_width = 0;
 6199|    562|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 428, False: 134]
  ------------------
 6200|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    428|                                 value_width));
 6204|    428|            std::tie(it, postfix_width) = postfix_result;
 6205|    428|        }
 6206|       |
 6207|    562|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    562|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    562|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 562]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    562|            specs, prefix_width, value_width, postfix_width));
 6209|    562|        return it;
 6210|    562|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6214|  17.2k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.2k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.2k|            auto rd = make_reader<T, char_type>();
 6220|  17.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.2k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.2k|    {
 6150|  17.2k|        const bool need_skipped_width =
 6151|  17.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.2k]
  |  Branch (6151:33): [True: 0, False: 17.2k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.2k|        auto it = rng.begin();
 6155|  17.2k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.2k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.2k|        else {
 6164|  17.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    338|                                             specs, value, loc));
 6189|       |
 6190|    338|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 338]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    338|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    338|        std::ptrdiff_t postfix_width = 0;
 6199|    338|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 242, False: 96]
  ------------------
 6200|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    242|                                 value_width));
 6204|    242|            std::tie(it, postfix_width) = postfix_result;
 6205|    242|        }
 6206|       |
 6207|    338|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    338|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 338]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    338|            specs, prefix_width, value_width, postfix_width));
 6209|    338|        return it;
 6210|    338|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.3k|            auto rd = make_reader<T, char_type>();
 6220|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.0k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.0k|        }
 6167|  17.0k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.0k|        std::ptrdiff_t value_width = 0;
 6171|  17.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.0k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.0k|        else {
 6187|  17.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 384]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    384|                                             specs, value, loc));
 6189|       |
 6190|    384|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 384]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    384|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    384|        std::ptrdiff_t postfix_width = 0;
 6199|    384|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 288, False: 96]
  ------------------
 6200|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    288|                                 value_width));
 6204|    288|            std::tie(it, postfix_width) = postfix_result;
 6205|    288|        }
 6206|       |
 6207|    384|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    384|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 384]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    384|            specs, prefix_width, value_width, postfix_width));
 6209|    384|        return it;
 6210|    384|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6214|  17.3k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|  17.3k|                          basic_contiguous_scan_context<char_type>>) {
 6219|  17.3k|            auto rd = make_reader<T, char_type>();
 6220|  17.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  17.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|  17.3k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|  17.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|  17.3k|    {
 6150|  17.3k|        const bool need_skipped_width =
 6151|  17.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 17.3k]
  |  Branch (6151:33): [True: 0, False: 17.3k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|  17.3k|        auto it = rng.begin();
 6155|  17.3k|        std::ptrdiff_t prefix_width = 0;
 6156|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 17.3k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|  17.3k|        else {
 6164|  17.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 246, False: 17.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    246|    }                                                  \
  |  |  |  | 3939|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|  17.1k|            std::tie(it, prefix_width) = prefix_result;
 6166|  17.1k|        }
 6167|  17.1k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|  17.1k|        std::ptrdiff_t value_width = 0;
 6171|  17.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 17.1k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|  17.1k|        else {
 6187|  17.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 16.6k, False: 450]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  16.6k|    }                                                  \
  |  | 3939|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|    450|                                             specs, value, loc));
 6189|       |
 6190|    450|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 450]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|    450|        }
 6196|       |
 6197|       |        // Read postfix
 6198|    450|        std::ptrdiff_t postfix_width = 0;
 6199|    450|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 354, False: 96]
  ------------------
 6200|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6203|    354|                                 value_width));
 6204|    354|            std::tie(it, postfix_width) = postfix_result;
 6205|    354|        }
 6206|       |
 6207|    450|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|    450|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 450]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|    450|            specs, prefix_width, value_width, postfix_width));
 6209|    450|        return it;
 6210|    450|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.34k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.34k|            auto rd = make_reader<T, char_type>();
 5909|  4.34k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.34k, False: 0]
  ------------------
 5910|  4.34k|                return impl(rd, range, value);
 5911|  4.34k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.34k|    {
 5892|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 66, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     66|    }                                                  \
  |  |  |  | 3939|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.27k|                        .transform_error(make_eof_scan_error));
 5894|  4.27k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.34k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|  26.1k|{
 5824|  26.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 159, False: 25.9k]
  |  |  ------------------
  ------------------
 5825|    159|        return unexpected(e);
 5826|    159|    }
 5827|       |
 5828|  25.9k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 25.9k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|  25.9k|    return skip_classic_whitespace(range);
 5833|  25.9k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.27k|    {
 3568|  4.27k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.27k|        return read_default_with_base(range, value, 10);
 3570|  4.27k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.27k|    {
 3532|  4.27k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.27k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.27k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.27k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.27k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.42k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.27k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.27k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.27k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.12k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.12k|    }                                                  \
  |  |  |  | 3939|  4.27k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.42k|                parse_integer_digits_without_thsep(
 3551|  4.42k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.42k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.42k|        auto buf = make_contiguous_buffer(
 3555|  4.42k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.42k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 42, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     42|    }                                                  \
  |  |  |  | 3939|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    108|                                    prefix_result.parsed_base));
 3559|       |
 3560|    108|        return ranges::next(prefix_result.iterator,
 3561|    108|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.42k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.37k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.37k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.37k|            auto rd = make_reader<T, char_type>();
 5909|  4.37k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.37k, False: 0]
  ------------------
 5910|  4.37k|                return impl(rd, range, value);
 5911|  4.37k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.37k|    {
 5892|  4.37k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.30k|                        .transform_error(make_eof_scan_error));
 5894|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.37k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.30k|    {
 3568|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.30k|        return read_default_with_base(range, value, 10);
 3570|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.30k|    {
 3532|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.30k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.30k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.46k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.14k, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.14k|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.46k|                parse_integer_digits_without_thsep(
 3551|  4.46k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.46k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.46k|        auto buf = make_contiguous_buffer(
 3555|  4.46k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.46k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    138|                                    prefix_result.parsed_base));
 3559|       |
 3560|    138|        return ranges::next(prefix_result.iterator,
 3561|    138|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.40k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.40k|            auto rd = make_reader<T, char_type>();
 5909|  4.40k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.40k, False: 0]
  ------------------
 5910|  4.40k|                return impl(rd, range, value);
 5911|  4.40k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.40k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.40k|    {
 5892|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.33k|                        .transform_error(make_eof_scan_error));
 5894|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.40k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.33k|    {
 3568|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.33k|        return read_default_with_base(range, value, 10);
 3570|  4.33k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.33k|    {
 3532|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.33k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.33k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.50k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.16k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.16k|    }                                                  \
  |  |  |  | 3939|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.50k|                parse_integer_digits_without_thsep(
 3551|  4.50k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.50k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.50k|        auto buf = make_contiguous_buffer(
 3555|  4.50k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.50k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    171|                                    prefix_result.parsed_base));
 3559|       |
 3560|    171|        return ranges::next(prefix_result.iterator,
 3561|    171|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.50k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.32k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.32k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.32k|            auto rd = make_reader<T, char_type>();
 5909|  4.32k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.32k, False: 0]
  ------------------
 5910|  4.32k|                return impl(rd, range, value);
 5911|  4.32k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.32k|    {
 5892|  4.32k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.26k|                        .transform_error(make_eof_scan_error));
 5894|  4.26k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.32k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.26k|    {
 3568|  4.26k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.26k|        return read_default_with_base(range, value, 10);
 3570|  4.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.26k|    {
 3532|  4.26k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.26k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.26k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.26k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.21k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.26k|        }
 3543|       |
 3544|  4.26k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.26k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.44k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.09k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.09k|    }                                                  \
  |  |  |  | 3939|  4.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.44k|                parse_integer_digits_without_thsep(
 3551|  4.44k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.44k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.44k|        auto buf = make_contiguous_buffer(
 3555|  4.44k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.44k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     33|    }                                                  \
  |  |  |  | 3939|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    141|                                    prefix_result.parsed_base));
 3559|       |
 3560|    141|        return ranges::next(prefix_result.iterator,
 3561|    141|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.44k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.34k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.34k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.34k|            auto rd = make_reader<T, char_type>();
 5909|  4.34k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.34k, False: 0]
  ------------------
 5910|  4.34k|                return impl(rd, range, value);
 5911|  4.34k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.34k|    {
 5892|  4.34k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.28k|                        .transform_error(make_eof_scan_error));
 5894|  4.28k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.34k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.28k|    {
 3568|  4.28k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.28k|        return read_default_with_base(range, value, 10);
 3570|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.28k|    {
 3532|  4.28k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.28k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.28k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.28k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 54, False: 4.23k]
  ------------------
 3537|     54|                return detail::unexpected_scan_error(
 3538|     54|                    scan_error::invalid_scanned_value,
 3539|     54|                    "Unexpected '-' sign when parsing an "
 3540|     54|                    "unsigned value");
 3541|     54|            }
 3542|  4.28k|        }
 3543|       |
 3544|  4.28k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.28k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.46k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.10k, False: 177]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.10k|    }                                                  \
  |  |  |  | 3939|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    177|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.46k|                parse_integer_digits_without_thsep(
 3551|  4.46k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.46k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.46k|        auto buf = make_contiguous_buffer(
 3555|  4.46k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.46k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    177|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    177|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    177|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    177|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 18, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     18|    }                                                  \
  |  |  |  | 3939|    177|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    159|                                    prefix_result.parsed_base));
 3559|       |
 3560|    159|        return ranges::next(prefix_result.iterator,
 3561|    159|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.46k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  4.36k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  4.36k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  4.36k|            auto rd = make_reader<T, char_type>();
 5909|  4.36k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 4.36k, False: 0]
  ------------------
 5910|  4.36k|                return impl(rd, range, value);
 5911|  4.36k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  4.36k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  4.36k|    {
 5892|  4.36k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 57, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     57|    }                                                  \
  |  |  |  | 3939|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  4.30k|                        .transform_error(make_eof_scan_error));
 5894|  4.30k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  4.36k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3567|  4.30k|    {
 3568|  4.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  4.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.30k|        return read_default_with_base(range, value, 10);
 3570|  4.30k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3531|  4.30k|    {
 3532|  4.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  4.30k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  4.30k|        if constexpr (!std::is_signed_v<T>) {
 3536|  4.30k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 60, False: 4.24k]
  ------------------
 3537|     60|                return detail::unexpected_scan_error(
 3538|     60|                    scan_error::invalid_scanned_value,
 3539|     60|                    "Unexpected '-' sign when parsing an "
 3540|     60|                    "unsigned value");
 3541|     60|            }
 3542|  4.30k|        }
 3543|       |
 3544|  4.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 4.30k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  4.49k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.11k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  4.49k|                parse_integer_digits_without_thsep(
 3551|  4.49k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  4.49k|                    prefix_result.parsed_base));
 3553|       |
 3554|  4.49k|        auto buf = make_contiguous_buffer(
 3555|  4.49k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  4.49k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|    189|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|    189|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|    189|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|    189|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|    189|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|    189|                                    prefix_result.parsed_base));
 3559|       |
 3560|    189|        return ranges::next(prefix_result.iterator,
 3561|    189|                            ranges::distance(buf.view().begin(), result_it));
 3562|  4.49k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  15.7k|    {
 3532|  15.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  15.7k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  15.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 15.7k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  31.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 45, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     45|    }                                                  \
  |  |  |  | 3939|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  31.4k|                parse_integer_digits_without_thsep(
 3551|  31.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  31.4k|                    prefix_result.parsed_base));
 3553|       |
 3554|  31.4k|        auto buf = make_contiguous_buffer(
 3555|  31.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  31.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.67k|    }                                                  \
  |  |  |  | 3939|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  14.0k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  14.0k|        return ranges::next(prefix_result.iterator,
 3561|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  31.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  18.1k|    {
 3532|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  18.1k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 18.1k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 69, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     69|    }                                                  \
  |  |  |  | 3939|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  36.1k|                parse_integer_digits_without_thsep(
 3551|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  36.1k|                    prefix_result.parsed_base));
 3553|       |
 3554|  36.1k|        auto buf = make_contiguous_buffer(
 3555|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.53k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.53k|    }                                                  \
  |  |  |  | 3939|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.5k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.5k|        return ranges::next(prefix_result.iterator,
 3561|  16.5k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  36.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  18.4k|    {
 3532|  18.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  18.4k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|       |        if constexpr (!std::is_signed_v<T>) {
 3536|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3537|       |                return detail::unexpected_scan_error(
 3538|       |                    scan_error::invalid_scanned_value,
 3539|       |                    "Unexpected '-' sign when parsing an "
 3540|       |                    "unsigned value");
 3541|       |            }
 3542|       |        }
 3543|       |
 3544|  18.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 18.4k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  36.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 81, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     81|    }                                                  \
  |  |  |  | 3939|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  36.7k|                parse_integer_digits_without_thsep(
 3551|  36.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  36.7k|                    prefix_result.parsed_base));
 3553|       |
 3554|  36.7k|        auto buf = make_contiguous_buffer(
 3555|  36.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  36.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.47k, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.47k|    }                                                  \
  |  |  |  | 3939|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  16.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  16.8k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  16.8k|        return ranges::next(prefix_result.iterator,
 3561|  16.8k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  36.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  13.2k|    {
 3532|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  13.2k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  13.2k|        if constexpr (!std::is_signed_v<T>) {
 3536|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 780, False: 12.4k]
  ------------------
 3537|    780|                return detail::unexpected_scan_error(
 3538|    780|                    scan_error::invalid_scanned_value,
 3539|    780|                    "Unexpected '-' sign when parsing an "
 3540|    780|                    "unsigned value");
 3541|    780|            }
 3542|  13.2k|        }
 3543|       |
 3544|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 13.2k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  26.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  26.4k|                parse_integer_digits_without_thsep(
 3551|  26.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  26.4k|                    prefix_result.parsed_base));
 3553|       |
 3554|  26.4k|        auto buf = make_contiguous_buffer(
 3555|  26.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  26.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.04k, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.04k|    }                                                  \
  |  |  |  | 3939|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  12.1k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  12.1k|        return ranges::next(prefix_result.iterator,
 3561|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  26.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  14.4k|    {
 3532|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.4k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 807, False: 13.6k]
  ------------------
 3537|    807|                return detail::unexpected_scan_error(
 3538|    807|                    scan_error::invalid_scanned_value,
 3539|    807|                    "Unexpected '-' sign when parsing an "
 3540|    807|                    "unsigned value");
 3541|    807|            }
 3542|  14.4k|        }
 3543|       |
 3544|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.4k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  28.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  28.9k|                parse_integer_digits_without_thsep(
 3551|  28.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  28.9k|                    prefix_result.parsed_base));
 3553|       |
 3554|  28.9k|        auto buf = make_contiguous_buffer(
 3555|  28.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  28.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 954, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    954|    }                                                  \
  |  |  |  | 3939|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.5k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.5k|        return ranges::next(prefix_result.iterator,
 3561|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  28.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3531|  14.6k|    {
 3532|  14.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3533|  14.6k|                                   .transform_error(make_eof_scan_error));
 3534|       |
 3535|  14.6k|        if constexpr (!std::is_signed_v<T>) {
 3536|  14.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3536:17): [True: 840, False: 13.7k]
  ------------------
 3537|    840|                return detail::unexpected_scan_error(
 3538|    840|                    scan_error::invalid_scanned_value,
 3539|    840|                    "Unexpected '-' sign when parsing an "
 3540|    840|                    "unsigned value");
 3541|    840|            }
 3542|  14.6k|        }
 3543|       |
 3544|  14.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3544:13): [True: 0, False: 14.6k]
  ------------------
 3545|      0|            value = T{0};
 3546|      0|            return std::next(prefix_result.iterator);
 3547|      0|        }
 3548|       |
 3549|  29.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|     12|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3550|  29.2k|                parse_integer_digits_without_thsep(
 3551|  29.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3552|  29.2k|                    prefix_result.parsed_base));
 3553|       |
 3554|  29.2k|        auto buf = make_contiguous_buffer(
 3555|  29.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3556|  29.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 894, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    894|    }                                                  \
  |  |  |  | 3939|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3557|  13.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3558|  13.7k|                                    prefix_result.parsed_base));
 3559|       |
 3560|  13.7k|        return ranges::next(prefix_result.iterator,
 3561|  13.7k|                            ranges::distance(buf.view().begin(), result_it));
 3562|  29.2k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    706|{
   52|    706|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    706|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    706|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    706|    string_buffer.resize(size);
   56|    706|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    706|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    706|    const auto wsv_reinterpret_size =
   61|    706|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 106, False: 600]
  ------------------
   62|    706|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    706|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    706|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    706|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    706|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    706|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    706|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    706|{
  122|    706|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    706|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    706|    buf.resize(sizeof...(Args));
  125|    706|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    706|    return buf;
  127|    706|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    706|{
  108|    706|    if constexpr (std::is_same_v<CharT, char>) {
  109|    706|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    706|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    706|{
  185|    706|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    706|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    706|                                   format_strings);
  188|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  34.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.6k|            auto result = scn::scan<T>(
  139|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.6k|                scn::runtime_format(f));
  141|  34.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 27.5k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  34.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.6k|            auto result = scn::scan<T>(
  154|  34.6k|                global_locale,
  155|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.6k|                scn::runtime_format(f));
  157|  34.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 27.5k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.38k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.38k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.38k|            auto result = scn::scan_value<T>(
  170|  5.38k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.38k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.67k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.67k|            it = result->begin();
  175|  4.67k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  30.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.4k|            auto result = scn::scan<T>(
  139|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.4k|                scn::runtime_format(f));
  141|  30.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 23.4k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  23.4k|            it = result->begin();
  145|  23.4k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  30.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.4k|            auto result = scn::scan<T>(
  154|  30.4k|                global_locale,
  155|  30.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.4k|                scn::runtime_format(f));
  157|  30.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 23.4k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  23.4k|            it = result->begin();
  161|  23.4k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.49k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.49k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.49k|            auto result = scn::scan_value<T>(
  170|  4.49k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.49k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 3.78k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  3.78k|            it = result->begin();
  175|  3.78k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.4k|            auto result = scn::scan<T>(
  139|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.4k|                scn::runtime_format(f));
  141|  40.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.3k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.3k|            it = result->begin();
  145|  33.3k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.4k|            auto result = scn::scan<T>(
  154|  40.4k|                global_locale,
  155|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.4k|                scn::runtime_format(f));
  157|  40.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.3k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.3k|            it = result->begin();
  161|  33.3k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.21k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.21k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.21k|            auto result = scn::scan_value<T>(
  170|  6.21k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.21k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.50k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.50k|            it = result->begin();
  175|  5.50k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.0k|            auto result = scn::scan<T>(
  139|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.0k|                scn::runtime_format(f));
  141|  33.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 25.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.0k|            auto result = scn::scan<T>(
  154|  33.0k|                global_locale,
  155|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.0k|                scn::runtime_format(f));
  157|  33.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 25.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.93k|            auto result = scn::scan_value<T>(
  170|  4.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.23k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.23k|            it = result->begin();
  175|  4.23k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  41.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.1k|            auto result = scn::scan<T>(
  139|  41.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.1k|                scn::runtime_format(f));
  141|  41.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 34.0k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  34.0k|            it = result->begin();
  145|  34.0k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  41.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.1k|            auto result = scn::scan<T>(
  154|  41.1k|                global_locale,
  155|  41.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.1k|                scn::runtime_format(f));
  157|  41.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 34.0k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  34.0k|            it = result->begin();
  161|  34.0k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.32k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.32k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.32k|            auto result = scn::scan_value<T>(
  170|  6.32k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.32k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.61k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.61k|            it = result->begin();
  175|  5.61k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.3k|            auto result = scn::scan<T>(
  139|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.3k|                scn::runtime_format(f));
  141|  33.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 26.3k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.3k|            auto result = scn::scan<T>(
  154|  33.3k|                global_locale,
  155|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.3k|                scn::runtime_format(f));
  157|  33.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 26.3k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.00k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.00k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.00k|            auto result = scn::scan_value<T>(
  170|  5.00k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.00k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.29k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.29k|            it = result->begin();
  175|  4.29k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  34.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.6k|            auto result = scn::scan<T>(
  139|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.6k|                scn::runtime_format(f));
  141|  34.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 27.5k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  34.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.6k|            auto result = scn::scan<T>(
  154|  34.6k|                global_locale,
  155|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.6k|                scn::runtime_format(f));
  157|  34.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 27.5k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  5.37k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.37k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  5.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.37k|            auto result = scn::scan_value<T>(
  170|  5.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.37k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.67k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.67k|            it = result->begin();
  175|  4.67k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  30.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.5k|            auto result = scn::scan<T>(
  139|  30.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.5k|                scn::runtime_format(f));
  141|  30.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 23.4k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  23.4k|            it = result->begin();
  145|  23.4k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  30.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.5k|            auto result = scn::scan<T>(
  154|  30.5k|                global_locale,
  155|  30.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.5k|                scn::runtime_format(f));
  157|  30.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 23.4k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  23.4k|            it = result->begin();
  161|  23.4k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.48k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.48k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.48k|            auto result = scn::scan_value<T>(
  170|  4.48k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.48k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 3.78k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  3.78k|            it = result->begin();
  175|  3.78k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.2k|            auto result = scn::scan<T>(
  139|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.2k|                scn::runtime_format(f));
  141|  40.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.2k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.2k|            it = result->begin();
  145|  33.2k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.2k|            auto result = scn::scan<T>(
  154|  40.2k|                global_locale,
  155|  40.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.2k|                scn::runtime_format(f));
  157|  40.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.2k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.2k|            it = result->begin();
  161|  33.2k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.01k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.01k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.01k|            auto result = scn::scan_value<T>(
  170|  6.01k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.01k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.30k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.30k|            it = result->begin();
  175|  5.30k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.0k|            auto result = scn::scan<T>(
  139|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.0k|                scn::runtime_format(f));
  141|  33.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 25.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.0k|            auto result = scn::scan<T>(
  154|  33.0k|                global_locale,
  155|  33.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.0k|                scn::runtime_format(f));
  157|  33.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 25.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.91k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.91k|            auto result = scn::scan_value<T>(
  170|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.91k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.21k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.21k|            it = result->begin();
  175|  4.21k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  40.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.9k|            auto result = scn::scan<T>(
  139|  40.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.9k|                scn::runtime_format(f));
  141|  40.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 33.9k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  33.9k|            it = result->begin();
  145|  33.9k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  40.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.9k|            auto result = scn::scan<T>(
  154|  40.9k|                global_locale,
  155|  40.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.9k|                scn::runtime_format(f));
  157|  40.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 33.9k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  33.9k|            it = result->begin();
  161|  33.9k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  6.11k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.11k|            auto result = scn::scan_value<T>(
  170|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.11k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 5.41k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  5.41k|            it = result->begin();
  175|  5.41k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    706|{
  133|       |    // Regular scan
  134|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.06k, False: 706]
  ------------------
  135|  7.06k|        auto it = scn::ranges::begin(source);
  136|  33.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.4k|            auto result = scn::scan<T>(
  139|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.4k|                scn::runtime_format(f));
  141|  33.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.06k, False: 26.3k]
  ------------------
  142|  7.06k|                break;
  143|  7.06k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  7.06k|    }
  147|       |
  148|       |    // scan localized
  149|  7.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.06k, False: 706]
  ------------------
  150|  7.06k|        auto it = scn::ranges::begin(source);
  151|  33.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.4k|            auto result = scn::scan<T>(
  154|  33.4k|                global_locale,
  155|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.4k|                scn::runtime_format(f));
  157|  33.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.06k, False: 26.3k]
  ------------------
  158|  7.06k|                break;
  159|  7.06k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  7.06k|    }
  163|       |
  164|       |    // scan_value
  165|    706|    {
  166|    706|        auto it = scn::ranges::begin(source);
  167|  4.97k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.97k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  4.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.97k|            auto result = scn::scan_value<T>(
  170|  4.97k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.97k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 706, False: 4.27k]
  ------------------
  172|    706|                break;
  173|    706|            }
  174|  4.27k|            it = result->begin();
  175|  4.27k|        }
  176|    706|    }
  177|    706|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    706|{
   90|    706|    using char_type = ranges::range_value_t<Source>;
   91|    706|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    706|    deque.clear();
   93|    706|    std::copy(ranges::begin(source), ranges::end(source),
   94|    706|              std::back_inserter(deque));
   95|    706|    return deque;
   96|    706|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    706|{
   79|    706|    if constexpr (std::is_same_v<CharT, char>) {
   80|    706|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    706|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    706|{
  122|    706|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    706|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    706|    buf.resize(sizeof...(Args));
  125|    706|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    706|    return buf;
  127|    706|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    706|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    706|    else {
  112|    706|        return wformat_string_view_buffer;
  113|    706|    }
  114|    706|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.41k|{
  185|  1.41k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.41k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.41k|                                   format_strings);
  188|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 232]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    232|            it = result->begin();
  145|    232|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 232]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    232|            it = result->begin();
  161|    232|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 36]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 198]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    198|            it = result->begin();
  145|    198|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 198]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    198|            it = result->begin();
  161|    198|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 29]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 285]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    285|            it = result->begin();
  145|    285|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 285]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    285|            it = result->begin();
  161|    285|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 46]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 227]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    227|            it = result->begin();
  145|    227|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 227]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    227|            it = result->begin();
  161|    227|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 35]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 338]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    338|            it = result->begin();
  145|    338|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 338]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    338|            it = result->begin();
  161|    338|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 57]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 268]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    268|            it = result->begin();
  145|    268|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 268]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    268|            it = result->begin();
  161|    268|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 43]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 232]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    232|            it = result->begin();
  145|    232|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 232]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    232|            it = result->begin();
  161|    232|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 36]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 198]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    198|            it = result->begin();
  145|    198|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 198]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    198|            it = result->begin();
  161|    198|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 29]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 285]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    285|            it = result->begin();
  145|    285|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 285]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    285|            it = result->begin();
  161|    285|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 46]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 227]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    227|            it = result->begin();
  145|    227|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 227]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    227|            it = result->begin();
  161|    227|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.44k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.44k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.44k|            auto result = scn::scan_value<T>(
  170|  1.44k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.44k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 35]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.4k|            auto result = scn::scan<T>(
  139|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.4k|                scn::runtime_format(f));
  141|  14.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 338]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    338|            it = result->begin();
  145|    338|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.4k|            auto result = scn::scan<T>(
  154|  14.4k|                global_locale,
  155|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.4k|                scn::runtime_format(f));
  157|  14.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 338]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    338|            it = result->begin();
  161|    338|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 57]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.41k|{
  133|       |    // Regular scan
  134|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.1k, False: 1.41k]
  ------------------
  135|  14.1k|        auto it = scn::ranges::begin(source);
  136|  14.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.3k|            auto result = scn::scan<T>(
  139|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.3k|                scn::runtime_format(f));
  141|  14.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.1k, False: 268]
  ------------------
  142|  14.1k|                break;
  143|  14.1k|            }
  144|    268|            it = result->begin();
  145|    268|        }
  146|  14.1k|    }
  147|       |
  148|       |    // scan localized
  149|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.1k, False: 1.41k]
  ------------------
  150|  14.1k|        auto it = scn::ranges::begin(source);
  151|  14.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.3k|            auto result = scn::scan<T>(
  154|  14.3k|                global_locale,
  155|  14.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.3k|                scn::runtime_format(f));
  157|  14.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.1k, False: 268]
  ------------------
  158|  14.1k|                break;
  159|  14.1k|            }
  160|    268|            it = result->begin();
  161|    268|        }
  162|  14.1k|    }
  163|       |
  164|       |    // scan_value
  165|  1.41k|    {
  166|  1.41k|        auto it = scn::ranges::begin(source);
  167|  1.45k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.45k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.45k|            auto result = scn::scan_value<T>(
  170|  1.45k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.45k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.41k, False: 43]
  ------------------
  172|  1.41k|                break;
  173|  1.41k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.41k|    }
  177|  1.41k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.41k|{
   90|  1.41k|    using char_type = ranges::range_value_t<Source>;
   91|  1.41k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.41k|    deque.clear();
   93|  1.41k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.41k|              std::back_inserter(deque));
   95|  1.41k|    return deque;
   96|  1.41k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.41k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.41k|    else {
   83|  1.41k|        return wnoncontiguous_buffer;
   84|  1.41k|    }
   85|  1.41k|}

LLVMFuzzerTestOneInput:
   59|    706|{
   60|    706|    scn::fuzz::run(data, size);
   61|    706|    return 0;
   62|    706|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    706|{
   36|    706|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 706]
  |  Branch (36:35): [True: 0, False: 706]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    706|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    706|    const auto& f =
   43|    706|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    706|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    706|    do_basic_run(sv, f);
   46|       |
   47|    706|    const auto& wf = get_format_strings<wchar_t>(
   48|    706|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    706|        L"{:'}", L"{:'L}");
   50|    706|    do_basic_run(wsv_reinterpret, wf);
   51|    706|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 706, False: 0]
  ------------------
   52|    706|        do_basic_run(wsv_transcode, wf);
   53|    706|    }
   54|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    706|{
   25|    706|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    706|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    706|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    706|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    706|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    706|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    706|{
   25|    706|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    706|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    706|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    706|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    706|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    706|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    706|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.41k|{
   25|  1.41k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.41k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.41k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.41k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.41k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.41k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.41k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.41k|{
   25|  1.41k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.41k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.41k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.41k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.41k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.41k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.41k|}

